
F722_CNN_Sys_Performance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00044700  080082e0  080082e0  000182e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804c9e0  0804c9e0  0005c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0804c9e8  0804c9e8  0005c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0804c9ec  0804c9ec  0005c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000850  20000000  0804c9f0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a21c  20000850  0804d240  00060850  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2000aa6c  0804d240  0006aa6c  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  00060850  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011555  00000000  00000000  00060884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c19  00000000  00000000  00071dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004a0f  00000000  00000000  000749f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008a8  00000000  00000000  00079408  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d10  00000000  00000000  00079cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005161  00000000  00000000  0007a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b5f  00000000  00000000  0007fb21  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00002e94  00000000  00000000  00084680  2**0
                  CONTENTS, READONLY
 18 .iar.rtmodel  00000218  00000000  00000000  00087514  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 0000001c  00000000  00000000  0008772c  2**2
                  CONTENTS, READONLY
 20 .debug_frame  0000465c  00000000  00000000  00087748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000850 	.word	0x20000850
 80001fc:	00000000 	.word	0x00000000
 8000200:	080082c8 	.word	0x080082c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000854 	.word	0x20000854
 800021c:	080082c8 	.word	0x080082c8

08000220 <ai_array_get_byte_size>:
 8000220:	b909      	cbnz	r1, 8000226 <ai_array_get_byte_size+0x6>
 8000222:	2000      	movs	r0, #0
 8000224:	4770      	bx	lr
 8000226:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800022a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800022e:	18d3      	adds	r3, r2, r3
 8000230:	0d42      	lsrs	r2, r0, #21
 8000232:	4359      	muls	r1, r3
 8000234:	f002 0203 	and.w	r2, r2, #3
 8000238:	1dc9      	adds	r1, r1, #7
 800023a:	08c9      	lsrs	r1, r1, #3
 800023c:	00c9      	lsls	r1, r1, #3
 800023e:	0c43      	lsrs	r3, r0, #17
 8000240:	40d1      	lsrs	r1, r2
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	2b04      	cmp	r3, #4
 8000248:	d00b      	beq.n	8000262 <ai_array_get_byte_size+0x42>
 800024a:	2b08      	cmp	r3, #8
 800024c:	bf01      	itttt	eq
 800024e:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 8000252:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8000256:	1882      	addeq	r2, r0, r2
 8000258:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 800025c:	1dc9      	adds	r1, r1, #7
 800025e:	08c8      	lsrs	r0, r1, #3
 8000260:	4770      	bx	lr
 8000262:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8000266:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800026a:	1882      	adds	r2, r0, r2
 800026c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000270:	1dc9      	adds	r1, r1, #7
 8000272:	08c8      	lsrs	r0, r1, #3
 8000274:	4770      	bx	lr

08000276 <ai_mem_copy_buffer>:
 8000276:	b510      	push	{r4, lr}
 8000278:	4604      	mov	r4, r0
 800027a:	f005 ff43 	bl	8006104 <__aeabi_memcpy>
 800027e:	4620      	mov	r0, r4
 8000280:	bd10      	pop	{r4, pc}

08000282 <CRC_Lock>:
 8000282:	f8df 085c 	ldr.w	r0, [pc, #2140]	; 8000ae0 <.text_20>
 8000286:	f240 4249 	movw	r2, #1097	; 0x449
 800028a:	6801      	ldr	r1, [r0, #0]
 800028c:	0849      	lsrs	r1, r1, #1
 800028e:	0049      	lsls	r1, r1, #1
 8000290:	6001      	str	r1, [r0, #0]
 8000292:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 8000ae4 <.text_21>
 8000296:	6801      	ldr	r1, [r0, #0]
 8000298:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800029c:	4291      	cmp	r1, r2
 800029e:	d115      	bne.n	80002cc <CRC_Lock+0x4a>
 80002a0:	2001      	movs	r0, #1
 80002a2:	2200      	movs	r2, #0
 80002a4:	2100      	movs	r1, #0
 80002a6:	4310      	orrs	r0, r2
 80002a8:	4308      	orrs	r0, r1
 80002aa:	d01d      	beq.n	80002e8 <CRC_Lock+0x66>
 80002ac:	f8df 1838 	ldr.w	r1, [pc, #2104]	; 8000ae8 <.text_22>
 80002b0:	2201      	movs	r2, #1
 80002b2:	608a      	str	r2, [r1, #8]
 80002b4:	6888      	ldr	r0, [r1, #8]
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d1fc      	bne.n	80002b4 <CRC_Lock+0x32>
 80002ba:	f8df 2830 	ldr.w	r2, [pc, #2096]	; 8000aec <.text_23>
 80002be:	f8df 3830 	ldr.w	r3, [pc, #2096]	; 8000af0 <.text_24>
 80002c2:	600a      	str	r2, [r1, #0]
 80002c4:	6809      	ldr	r1, [r1, #0]
 80002c6:	4299      	cmp	r1, r3
 80002c8:	d026      	beq.n	8000318 <CRC_Lock+0x96>
 80002ca:	e7fe      	b.n	80002ca <CRC_Lock+0x48>
 80002cc:	2000      	movs	r0, #0
 80002ce:	f240 4c51 	movw	ip, #1105	; 0x451
 80002d2:	4561      	cmp	r1, ip
 80002d4:	bf08      	it	eq
 80002d6:	2201      	moveq	r2, #1
 80002d8:	d0e4      	beq.n	80002a4 <CRC_Lock+0x22>
 80002da:	2200      	movs	r2, #0
 80002dc:	f240 4352 	movw	r3, #1106	; 0x452
 80002e0:	4299      	cmp	r1, r3
 80002e2:	d1df      	bne.n	80002a4 <CRC_Lock+0x22>
 80002e4:	2101      	movs	r1, #1
 80002e6:	e7de      	b.n	80002a6 <CRC_Lock+0x24>
 80002e8:	f8df 0808 	ldr.w	r0, [pc, #2056]	; 8000af4 <.text_25>
 80002ec:	6801      	ldr	r1, [r0, #0]
 80002ee:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80002f2:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80002f6:	d10f      	bne.n	8000318 <CRC_Lock+0x96>
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_26>
 80002fc:	2201      	movs	r2, #1
 80002fe:	608a      	str	r2, [r1, #8]
 8000300:	6888      	ldr	r0, [r1, #8]
 8000302:	2800      	cmp	r0, #0
 8000304:	d1fc      	bne.n	8000300 <CRC_Lock+0x7e>
 8000306:	f8df 27e4 	ldr.w	r2, [pc, #2020]	; 8000aec <.text_23>
 800030a:	f8df 37e4 	ldr.w	r3, [pc, #2020]	; 8000af0 <.text_24>
 800030e:	600a      	str	r2, [r1, #0]
 8000310:	6809      	ldr	r1, [r1, #0]
 8000312:	4299      	cmp	r1, r3
 8000314:	d000      	beq.n	8000318 <CRC_Lock+0x96>
 8000316:	e7fe      	b.n	8000316 <CRC_Lock+0x94>
 8000318:	4770      	bx	lr

0800031a <ai_platform_runtime_get_revision>:
 800031a:	f8df 07c4 	ldr.w	r0, [pc, #1988]	; 8000ae0 <.text_20>
 800031e:	f240 4249 	movw	r2, #1097	; 0x449
 8000322:	6801      	ldr	r1, [r0, #0]
 8000324:	0849      	lsrs	r1, r1, #1
 8000326:	0049      	lsls	r1, r1, #1
 8000328:	6001      	str	r1, [r0, #0]
 800032a:	f8df 07b8 	ldr.w	r0, [pc, #1976]	; 8000ae4 <.text_21>
 800032e:	6801      	ldr	r1, [r0, #0]
 8000330:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000334:	4291      	cmp	r1, r2
 8000336:	d115      	bne.n	8000364 <ai_platform_runtime_get_revision+0x4a>
 8000338:	2001      	movs	r0, #1
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	4310      	orrs	r0, r2
 8000340:	4308      	orrs	r0, r1
 8000342:	d01d      	beq.n	8000380 <ai_platform_runtime_get_revision+0x66>
 8000344:	f8df 17a0 	ldr.w	r1, [pc, #1952]	; 8000ae8 <.text_22>
 8000348:	2201      	movs	r2, #1
 800034a:	608a      	str	r2, [r1, #8]
 800034c:	6888      	ldr	r0, [r1, #8]
 800034e:	2800      	cmp	r0, #0
 8000350:	d1fc      	bne.n	800034c <ai_platform_runtime_get_revision+0x32>
 8000352:	f8df 2798 	ldr.w	r2, [pc, #1944]	; 8000aec <.text_23>
 8000356:	f8df 3798 	ldr.w	r3, [pc, #1944]	; 8000af0 <.text_24>
 800035a:	600a      	str	r2, [r1, #0]
 800035c:	6809      	ldr	r1, [r1, #0]
 800035e:	4299      	cmp	r1, r3
 8000360:	d026      	beq.n	80003b0 <ai_platform_runtime_get_revision+0x96>
 8000362:	e7fe      	b.n	8000362 <ai_platform_runtime_get_revision+0x48>
 8000364:	2000      	movs	r0, #0
 8000366:	f240 4c51 	movw	ip, #1105	; 0x451
 800036a:	4561      	cmp	r1, ip
 800036c:	bf08      	it	eq
 800036e:	2201      	moveq	r2, #1
 8000370:	d0e4      	beq.n	800033c <ai_platform_runtime_get_revision+0x22>
 8000372:	2200      	movs	r2, #0
 8000374:	f240 4352 	movw	r3, #1106	; 0x452
 8000378:	4299      	cmp	r1, r3
 800037a:	d1df      	bne.n	800033c <ai_platform_runtime_get_revision+0x22>
 800037c:	2101      	movs	r1, #1
 800037e:	e7de      	b.n	800033e <ai_platform_runtime_get_revision+0x24>
 8000380:	f8df 0770 	ldr.w	r0, [pc, #1904]	; 8000af4 <.text_25>
 8000384:	6801      	ldr	r1, [r0, #0]
 8000386:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800038a:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800038e:	d10f      	bne.n	80003b0 <ai_platform_runtime_get_revision+0x96>
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_26>
 8000394:	2201      	movs	r2, #1
 8000396:	608a      	str	r2, [r1, #8]
 8000398:	6888      	ldr	r0, [r1, #8]
 800039a:	2800      	cmp	r0, #0
 800039c:	d1fc      	bne.n	8000398 <ai_platform_runtime_get_revision+0x7e>
 800039e:	f8df 274c 	ldr.w	r2, [pc, #1868]	; 8000aec <.text_23>
 80003a2:	f8df 374c 	ldr.w	r3, [pc, #1868]	; 8000af0 <.text_24>
 80003a6:	600a      	str	r2, [r1, #0]
 80003a8:	6809      	ldr	r1, [r1, #0]
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d000      	beq.n	80003b0 <ai_platform_runtime_get_revision+0x96>
 80003ae:	e7fe      	b.n	80003ae <ai_platform_runtime_get_revision+0x94>
 80003b0:	a0a3      	add	r0, pc, #652	; (adr r0, 8000640 <.text_11>)
 80003b2:	4770      	bx	lr

080003b4 <ai_platform_runtime_get_version>:
 80003b4:	f8df 0728 	ldr.w	r0, [pc, #1832]	; 8000ae0 <.text_20>
 80003b8:	f240 4249 	movw	r2, #1097	; 0x449
 80003bc:	6801      	ldr	r1, [r0, #0]
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	0049      	lsls	r1, r1, #1
 80003c2:	6001      	str	r1, [r0, #0]
 80003c4:	f8df 071c 	ldr.w	r0, [pc, #1820]	; 8000ae4 <.text_21>
 80003c8:	6801      	ldr	r1, [r0, #0]
 80003ca:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d115      	bne.n	80003fe <ai_platform_runtime_get_version+0x4a>
 80003d2:	2001      	movs	r0, #1
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	4310      	orrs	r0, r2
 80003da:	4308      	orrs	r0, r1
 80003dc:	d01d      	beq.n	800041a <ai_platform_runtime_get_version+0x66>
 80003de:	f8df 1708 	ldr.w	r1, [pc, #1800]	; 8000ae8 <.text_22>
 80003e2:	2201      	movs	r2, #1
 80003e4:	608a      	str	r2, [r1, #8]
 80003e6:	6888      	ldr	r0, [r1, #8]
 80003e8:	2800      	cmp	r0, #0
 80003ea:	d1fc      	bne.n	80003e6 <ai_platform_runtime_get_version+0x32>
 80003ec:	f8df 26fc 	ldr.w	r2, [pc, #1788]	; 8000aec <.text_23>
 80003f0:	f8df 36fc 	ldr.w	r3, [pc, #1788]	; 8000af0 <.text_24>
 80003f4:	600a      	str	r2, [r1, #0]
 80003f6:	6809      	ldr	r1, [r1, #0]
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d026      	beq.n	800044a <ai_platform_runtime_get_version+0x96>
 80003fc:	e7fe      	b.n	80003fc <ai_platform_runtime_get_version+0x48>
 80003fe:	2000      	movs	r0, #0
 8000400:	f240 4c51 	movw	ip, #1105	; 0x451
 8000404:	4561      	cmp	r1, ip
 8000406:	bf08      	it	eq
 8000408:	2201      	moveq	r2, #1
 800040a:	d0e4      	beq.n	80003d6 <ai_platform_runtime_get_version+0x22>
 800040c:	2200      	movs	r2, #0
 800040e:	f240 4352 	movw	r3, #1106	; 0x452
 8000412:	4299      	cmp	r1, r3
 8000414:	d1df      	bne.n	80003d6 <ai_platform_runtime_get_version+0x22>
 8000416:	2101      	movs	r1, #1
 8000418:	e7de      	b.n	80003d8 <ai_platform_runtime_get_version+0x24>
 800041a:	f8df 06d8 	ldr.w	r0, [pc, #1752]	; 8000af4 <.text_25>
 800041e:	6801      	ldr	r1, [r0, #0]
 8000420:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000424:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000428:	d10f      	bne.n	800044a <ai_platform_runtime_get_version+0x96>
 800042a:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000af8 <.text_26>
 800042e:	2201      	movs	r2, #1
 8000430:	608a      	str	r2, [r1, #8]
 8000432:	6888      	ldr	r0, [r1, #8]
 8000434:	2800      	cmp	r0, #0
 8000436:	d1fc      	bne.n	8000432 <ai_platform_runtime_get_version+0x7e>
 8000438:	f8df 26b0 	ldr.w	r2, [pc, #1712]	; 8000aec <.text_23>
 800043c:	f8df 36b0 	ldr.w	r3, [pc, #1712]	; 8000af0 <.text_24>
 8000440:	600a      	str	r2, [r1, #0]
 8000442:	6809      	ldr	r1, [r1, #0]
 8000444:	4299      	cmp	r1, r3
 8000446:	d000      	beq.n	800044a <ai_platform_runtime_get_version+0x96>
 8000448:	e7fe      	b.n	8000448 <ai_platform_runtime_get_version+0x94>
 800044a:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 800044e:	6800      	ldr	r0, [r0, #0]
 8000450:	4770      	bx	lr

08000452 <ai_platform_api_get_version>:
 8000452:	f8df 068c 	ldr.w	r0, [pc, #1676]	; 8000ae0 <.text_20>
 8000456:	f240 4249 	movw	r2, #1097	; 0x449
 800045a:	6801      	ldr	r1, [r0, #0]
 800045c:	0849      	lsrs	r1, r1, #1
 800045e:	0049      	lsls	r1, r1, #1
 8000460:	6001      	str	r1, [r0, #0]
 8000462:	f8df 0680 	ldr.w	r0, [pc, #1664]	; 8000ae4 <.text_21>
 8000466:	6801      	ldr	r1, [r0, #0]
 8000468:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800046c:	4291      	cmp	r1, r2
 800046e:	d115      	bne.n	800049c <ai_platform_api_get_version+0x4a>
 8000470:	2001      	movs	r0, #1
 8000472:	2200      	movs	r2, #0
 8000474:	2100      	movs	r1, #0
 8000476:	4310      	orrs	r0, r2
 8000478:	4308      	orrs	r0, r1
 800047a:	d01d      	beq.n	80004b8 <ai_platform_api_get_version+0x66>
 800047c:	f8df 1668 	ldr.w	r1, [pc, #1640]	; 8000ae8 <.text_22>
 8000480:	2201      	movs	r2, #1
 8000482:	608a      	str	r2, [r1, #8]
 8000484:	6888      	ldr	r0, [r1, #8]
 8000486:	2800      	cmp	r0, #0
 8000488:	d1fc      	bne.n	8000484 <ai_platform_api_get_version+0x32>
 800048a:	f8df 2660 	ldr.w	r2, [pc, #1632]	; 8000aec <.text_23>
 800048e:	f8df 3660 	ldr.w	r3, [pc, #1632]	; 8000af0 <.text_24>
 8000492:	600a      	str	r2, [r1, #0]
 8000494:	6809      	ldr	r1, [r1, #0]
 8000496:	4299      	cmp	r1, r3
 8000498:	d026      	beq.n	80004e8 <ai_platform_api_get_version+0x96>
 800049a:	e7fe      	b.n	800049a <ai_platform_api_get_version+0x48>
 800049c:	2000      	movs	r0, #0
 800049e:	f240 4c51 	movw	ip, #1105	; 0x451
 80004a2:	4561      	cmp	r1, ip
 80004a4:	bf08      	it	eq
 80004a6:	2201      	moveq	r2, #1
 80004a8:	d0e4      	beq.n	8000474 <ai_platform_api_get_version+0x22>
 80004aa:	2200      	movs	r2, #0
 80004ac:	f240 4352 	movw	r3, #1106	; 0x452
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d1df      	bne.n	8000474 <ai_platform_api_get_version+0x22>
 80004b4:	2101      	movs	r1, #1
 80004b6:	e7de      	b.n	8000476 <ai_platform_api_get_version+0x24>
 80004b8:	f8df 0638 	ldr.w	r0, [pc, #1592]	; 8000af4 <.text_25>
 80004bc:	6801      	ldr	r1, [r0, #0]
 80004be:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80004c2:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80004c6:	d10f      	bne.n	80004e8 <ai_platform_api_get_version+0x96>
 80004c8:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000af8 <.text_26>
 80004cc:	2201      	movs	r2, #1
 80004ce:	608a      	str	r2, [r1, #8]
 80004d0:	6888      	ldr	r0, [r1, #8]
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d1fc      	bne.n	80004d0 <ai_platform_api_get_version+0x7e>
 80004d6:	f8df 2614 	ldr.w	r2, [pc, #1556]	; 8000aec <.text_23>
 80004da:	f8df 3614 	ldr.w	r3, [pc, #1556]	; 8000af0 <.text_24>
 80004de:	600a      	str	r2, [r1, #0]
 80004e0:	6809      	ldr	r1, [r1, #0]
 80004e2:	4299      	cmp	r1, r3
 80004e4:	d000      	beq.n	80004e8 <ai_platform_api_get_version+0x96>
 80004e6:	e7fe      	b.n	80004e6 <ai_platform_api_get_version+0x94>
 80004e8:	f20f 6028 	addw	r0, pc, #1576	; 0x628
 80004ec:	6800      	ldr	r0, [r0, #0]
 80004ee:	4770      	bx	lr

080004f0 <ai_platform_interface_api_get_version>:
 80004f0:	f8df 05ec 	ldr.w	r0, [pc, #1516]	; 8000ae0 <.text_20>
 80004f4:	f240 4249 	movw	r2, #1097	; 0x449
 80004f8:	6801      	ldr	r1, [r0, #0]
 80004fa:	0849      	lsrs	r1, r1, #1
 80004fc:	0049      	lsls	r1, r1, #1
 80004fe:	6001      	str	r1, [r0, #0]
 8000500:	f8df 05e0 	ldr.w	r0, [pc, #1504]	; 8000ae4 <.text_21>
 8000504:	6801      	ldr	r1, [r0, #0]
 8000506:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800050a:	4291      	cmp	r1, r2
 800050c:	d115      	bne.n	800053a <ai_platform_interface_api_get_version+0x4a>
 800050e:	2001      	movs	r0, #1
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	4310      	orrs	r0, r2
 8000516:	4308      	orrs	r0, r1
 8000518:	d01d      	beq.n	8000556 <ai_platform_interface_api_get_version+0x66>
 800051a:	f8df 15cc 	ldr.w	r1, [pc, #1484]	; 8000ae8 <.text_22>
 800051e:	2201      	movs	r2, #1
 8000520:	608a      	str	r2, [r1, #8]
 8000522:	6888      	ldr	r0, [r1, #8]
 8000524:	2800      	cmp	r0, #0
 8000526:	d1fc      	bne.n	8000522 <ai_platform_interface_api_get_version+0x32>
 8000528:	f8df 25c0 	ldr.w	r2, [pc, #1472]	; 8000aec <.text_23>
 800052c:	f8df 35c0 	ldr.w	r3, [pc, #1472]	; 8000af0 <.text_24>
 8000530:	600a      	str	r2, [r1, #0]
 8000532:	6809      	ldr	r1, [r1, #0]
 8000534:	4299      	cmp	r1, r3
 8000536:	d026      	beq.n	8000586 <ai_platform_interface_api_get_version+0x96>
 8000538:	e7fe      	b.n	8000538 <ai_platform_interface_api_get_version+0x48>
 800053a:	2000      	movs	r0, #0
 800053c:	f240 4c51 	movw	ip, #1105	; 0x451
 8000540:	4561      	cmp	r1, ip
 8000542:	bf08      	it	eq
 8000544:	2201      	moveq	r2, #1
 8000546:	d0e4      	beq.n	8000512 <ai_platform_interface_api_get_version+0x22>
 8000548:	2200      	movs	r2, #0
 800054a:	f240 4352 	movw	r3, #1106	; 0x452
 800054e:	4299      	cmp	r1, r3
 8000550:	d1df      	bne.n	8000512 <ai_platform_interface_api_get_version+0x22>
 8000552:	2101      	movs	r1, #1
 8000554:	e7de      	b.n	8000514 <ai_platform_interface_api_get_version+0x24>
 8000556:	f8df 059c 	ldr.w	r0, [pc, #1436]	; 8000af4 <.text_25>
 800055a:	6801      	ldr	r1, [r0, #0]
 800055c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000560:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000564:	d10f      	bne.n	8000586 <ai_platform_interface_api_get_version+0x96>
 8000566:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000af8 <.text_26>
 800056a:	2201      	movs	r2, #1
 800056c:	608a      	str	r2, [r1, #8]
 800056e:	6888      	ldr	r0, [r1, #8]
 8000570:	2800      	cmp	r0, #0
 8000572:	d1fc      	bne.n	800056e <ai_platform_interface_api_get_version+0x7e>
 8000574:	f8df 2574 	ldr.w	r2, [pc, #1396]	; 8000aec <.text_23>
 8000578:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 8000af0 <.text_24>
 800057c:	600a      	str	r2, [r1, #0]
 800057e:	6809      	ldr	r1, [r1, #0]
 8000580:	4299      	cmp	r1, r3
 8000582:	d000      	beq.n	8000586 <ai_platform_interface_api_get_version+0x96>
 8000584:	e7fe      	b.n	8000584 <ai_platform_interface_api_get_version+0x94>
 8000586:	f20f 5090 	addw	r0, pc, #1424	; 0x590
 800058a:	6800      	ldr	r0, [r0, #0]
 800058c:	4770      	bx	lr

0800058e <ai_platform_context_acquire>:
 800058e:	b430      	push	{r4, r5}
 8000590:	b120      	cbz	r0, 800059c <ai_platform_context_acquire+0xe>
 8000592:	6801      	ldr	r1, [r0, #0]
 8000594:	f8df 2564 	ldr.w	r2, [pc, #1380]	; 8000afc <.text_27>
 8000598:	4291      	cmp	r1, r2
 800059a:	d000      	beq.n	800059e <ai_platform_context_acquire+0x10>
 800059c:	2000      	movs	r0, #0
 800059e:	f8df 1540 	ldr.w	r1, [pc, #1344]	; 8000ae0 <.text_20>
 80005a2:	f240 4449 	movw	r4, #1097	; 0x449
 80005a6:	680b      	ldr	r3, [r1, #0]
 80005a8:	085b      	lsrs	r3, r3, #1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	600b      	str	r3, [r1, #0]
 80005ae:	f8df 1534 	ldr.w	r1, [pc, #1332]	; 8000ae4 <.text_21>
 80005b2:	680a      	ldr	r2, [r1, #0]
 80005b4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80005b8:	42a2      	cmp	r2, r4
 80005ba:	d115      	bne.n	80005e8 <ai_platform_context_acquire+0x5a>
 80005bc:	2101      	movs	r1, #1
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	4319      	orrs	r1, r3
 80005c4:	4311      	orrs	r1, r2
 80005c6:	d01d      	beq.n	8000604 <ai_platform_context_acquire+0x76>
 80005c8:	f8df 251c 	ldr.w	r2, [pc, #1308]	; 8000ae8 <.text_22>
 80005cc:	2301      	movs	r3, #1
 80005ce:	6093      	str	r3, [r2, #8]
 80005d0:	6891      	ldr	r1, [r2, #8]
 80005d2:	2900      	cmp	r1, #0
 80005d4:	d1fc      	bne.n	80005d0 <ai_platform_context_acquire+0x42>
 80005d6:	f8df 3514 	ldr.w	r3, [pc, #1300]	; 8000aec <.text_23>
 80005da:	f8df 4514 	ldr.w	r4, [pc, #1300]	; 8000af0 <.text_24>
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	42a2      	cmp	r2, r4
 80005e4:	d026      	beq.n	8000634 <ai_platform_context_acquire+0xa6>
 80005e6:	e7fe      	b.n	80005e6 <ai_platform_context_acquire+0x58>
 80005e8:	2100      	movs	r1, #0
 80005ea:	f240 4551 	movw	r5, #1105	; 0x451
 80005ee:	42aa      	cmp	r2, r5
 80005f0:	bf08      	it	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	d0e4      	beq.n	80005c0 <ai_platform_context_acquire+0x32>
 80005f6:	2300      	movs	r3, #0
 80005f8:	f240 4452 	movw	r4, #1106	; 0x452
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	d1df      	bne.n	80005c0 <ai_platform_context_acquire+0x32>
 8000600:	2201      	movs	r2, #1
 8000602:	e7de      	b.n	80005c2 <ai_platform_context_acquire+0x34>
 8000604:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000af4 <.text_25>
 8000608:	680a      	ldr	r2, [r1, #0]
 800060a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800060e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000612:	d10f      	bne.n	8000634 <ai_platform_context_acquire+0xa6>
 8000614:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000af8 <.text_26>
 8000618:	2301      	movs	r3, #1
 800061a:	6093      	str	r3, [r2, #8]
 800061c:	6891      	ldr	r1, [r2, #8]
 800061e:	2900      	cmp	r1, #0
 8000620:	d1fc      	bne.n	800061c <ai_platform_context_acquire+0x8e>
 8000622:	f8df 34c8 	ldr.w	r3, [pc, #1224]	; 8000aec <.text_23>
 8000626:	f8df 44c8 	ldr.w	r4, [pc, #1224]	; 8000af0 <.text_24>
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	42a2      	cmp	r2, r4
 8000630:	d000      	beq.n	8000634 <ai_platform_context_acquire+0xa6>
 8000632:	e7fe      	b.n	8000632 <ai_platform_context_acquire+0xa4>
 8000634:	bc30      	pop	{r4, r5}
 8000636:	4770      	bx	lr

08000638 <ai_platform_context_release>:
 8000638:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 8000afc <.text_27>
 800063c:	6001      	str	r1, [r0, #0]
 800063e:	4770      	bx	lr

08000640 <.text_11>:
 8000640:	00000000 	.word	0x00000000

08000644 <ai_copy_buffer_fake_src>:
 8000644:	4608      	mov	r0, r1
 8000646:	4770      	bx	lr

08000648 <ai_copy_buffer_fake_dst>:
 8000648:	4770      	bx	lr

0800064a <ai_platform_network_get_error>:
 800064a:	b430      	push	{r4, r5}
 800064c:	b120      	cbz	r0, 8000658 <ai_platform_network_get_error+0xe>
 800064e:	6801      	ldr	r1, [r0, #0]
 8000650:	f8df 24a8 	ldr.w	r2, [pc, #1192]	; 8000afc <.text_27>
 8000654:	4291      	cmp	r1, r2
 8000656:	d000      	beq.n	800065a <ai_platform_network_get_error+0x10>
 8000658:	2000      	movs	r0, #0
 800065a:	f8df 1484 	ldr.w	r1, [pc, #1156]	; 8000ae0 <.text_20>
 800065e:	f240 4449 	movw	r4, #1097	; 0x449
 8000662:	680b      	ldr	r3, [r1, #0]
 8000664:	085b      	lsrs	r3, r3, #1
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	600b      	str	r3, [r1, #0]
 800066a:	f8df 1478 	ldr.w	r1, [pc, #1144]	; 8000ae4 <.text_21>
 800066e:	680a      	ldr	r2, [r1, #0]
 8000670:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000674:	42a2      	cmp	r2, r4
 8000676:	d115      	bne.n	80006a4 <ai_platform_network_get_error+0x5a>
 8000678:	2101      	movs	r1, #1
 800067a:	2300      	movs	r3, #0
 800067c:	2200      	movs	r2, #0
 800067e:	4319      	orrs	r1, r3
 8000680:	4311      	orrs	r1, r2
 8000682:	d01d      	beq.n	80006c0 <ai_platform_network_get_error+0x76>
 8000684:	f8df 2460 	ldr.w	r2, [pc, #1120]	; 8000ae8 <.text_22>
 8000688:	2301      	movs	r3, #1
 800068a:	6093      	str	r3, [r2, #8]
 800068c:	6891      	ldr	r1, [r2, #8]
 800068e:	2900      	cmp	r1, #0
 8000690:	d1fc      	bne.n	800068c <ai_platform_network_get_error+0x42>
 8000692:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 8000aec <.text_23>
 8000696:	f8df 4458 	ldr.w	r4, [pc, #1112]	; 8000af0 <.text_24>
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	42a2      	cmp	r2, r4
 80006a0:	d026      	beq.n	80006f0 <ai_platform_network_get_error+0xa6>
 80006a2:	e7fe      	b.n	80006a2 <ai_platform_network_get_error+0x58>
 80006a4:	2100      	movs	r1, #0
 80006a6:	f240 4551 	movw	r5, #1105	; 0x451
 80006aa:	42aa      	cmp	r2, r5
 80006ac:	bf08      	it	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	d0e4      	beq.n	800067c <ai_platform_network_get_error+0x32>
 80006b2:	2300      	movs	r3, #0
 80006b4:	f240 4452 	movw	r4, #1106	; 0x452
 80006b8:	42a2      	cmp	r2, r4
 80006ba:	d1df      	bne.n	800067c <ai_platform_network_get_error+0x32>
 80006bc:	2201      	movs	r2, #1
 80006be:	e7de      	b.n	800067e <ai_platform_network_get_error+0x34>
 80006c0:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000af4 <.text_25>
 80006c4:	680a      	ldr	r2, [r1, #0]
 80006c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80006ca:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80006ce:	d10f      	bne.n	80006f0 <ai_platform_network_get_error+0xa6>
 80006d0:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8000af8 <.text_26>
 80006d4:	2301      	movs	r3, #1
 80006d6:	6093      	str	r3, [r2, #8]
 80006d8:	6891      	ldr	r1, [r2, #8]
 80006da:	2900      	cmp	r1, #0
 80006dc:	d1fc      	bne.n	80006d8 <ai_platform_network_get_error+0x8e>
 80006de:	f8df 340c 	ldr.w	r3, [pc, #1036]	; 8000aec <.text_23>
 80006e2:	f8df 440c 	ldr.w	r4, [pc, #1036]	; 8000af0 <.text_24>
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	42a2      	cmp	r2, r4
 80006ec:	d000      	beq.n	80006f0 <ai_platform_network_get_error+0xa6>
 80006ee:	e7fe      	b.n	80006ee <ai_platform_network_get_error+0xa4>
 80006f0:	b920      	cbnz	r0, 80006fc <ai_platform_network_get_error+0xb2>
 80006f2:	f20f 4038 	addw	r0, pc, #1080	; 0x438
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	bc30      	pop	{r4, r5}
 80006fa:	4770      	bx	lr
 80006fc:	300c      	adds	r0, #12
 80006fe:	bc30      	pop	{r4, r5}
 8000700:	f000 ba1c 	b.w	8000b3c <core_get_error>

08000704 <ai_platform_network_set_error>:
 8000704:	2800      	cmp	r0, #0
 8000706:	bf1c      	itt	ne
 8000708:	300c      	addne	r0, #12
 800070a:	f000 ba1c 	bne.w	8000b46 <core_set_error>
 800070e:	4770      	bx	lr

08000710 <ai_platform_network_create>:
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	b081      	sub	sp, #4
 8000714:	b2db      	uxtb	r3, r3
 8000716:	9d06      	ldr	r5, [sp, #24]
 8000718:	4604      	mov	r4, r0
 800071a:	9807      	ldr	r0, [sp, #28]
 800071c:	4616      	mov	r6, r2
 800071e:	042d      	lsls	r5, r5, #16
 8000720:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000724:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000728:	f20f 4004 	addw	r0, pc, #1028	; 0x404
 800072c:	6807      	ldr	r7, [r0, #0]
 800072e:	f7ff fda8 	bl	8000282 <CRC_Lock>
 8000732:	b924      	cbnz	r4, 800073e <ai_platform_network_create+0x2e>
 8000734:	f20f 30fc 	addw	r0, pc, #1020	; 0x3fc
 8000738:	b001      	add	sp, #4
 800073a:	6800      	ldr	r0, [r0, #0]
 800073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073e:	f8df 13bc 	ldr.w	r1, [pc, #956]	; 8000afc <.text_27>
 8000742:	6031      	str	r1, [r6, #0]
 8000744:	6026      	str	r6, [r4, #0]
 8000746:	f000 f9f7 	bl	8000b38 <core_init>
 800074a:	b910      	cbnz	r0, 8000752 <ai_platform_network_create+0x42>
 800074c:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8000750:	e00e      	b.n	8000770 <ai_platform_network_create+0x60>
 8000752:	f8df 13ac 	ldr.w	r1, [pc, #940]	; 8000b00 <.text_28>
 8000756:	428d      	cmp	r5, r1
 8000758:	d303      	bcc.n	8000762 <ai_platform_network_create+0x52>
 800075a:	f20f 32c4 	addw	r2, pc, #964	; 0x3c4
 800075e:	6817      	ldr	r7, [r2, #0]
 8000760:	e007      	b.n	8000772 <ai_platform_network_create+0x62>
 8000762:	f20f 30c0 	addw	r0, pc, #960	; 0x3c0
 8000766:	f000 fa03 	bl	8000b70 <ai_check_custom_types>
 800076a:	b920      	cbnz	r0, 8000776 <ai_platform_network_create+0x66>
 800076c:	f20f 30b8 	addw	r0, pc, #952	; 0x3b8
 8000770:	6807      	ldr	r7, [r0, #0]
 8000772:	2100      	movs	r1, #0
 8000774:	6021      	str	r1, [r4, #0]
 8000776:	4638      	mov	r0, r7
 8000778:	b001      	add	sp, #4
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800077c <ai_platform_network_destroy>:
 800077c:	b470      	push	{r4, r5, r6}
 800077e:	b130      	cbz	r0, 800078e <ai_platform_network_destroy+0x12>
 8000780:	6801      	ldr	r1, [r0, #0]
 8000782:	f8df 2378 	ldr.w	r2, [pc, #888]	; 8000afc <.text_27>
 8000786:	4291      	cmp	r1, r2
 8000788:	bf08      	it	eq
 800078a:	4602      	moveq	r2, r0
 800078c:	d000      	beq.n	8000790 <ai_platform_network_destroy+0x14>
 800078e:	2200      	movs	r2, #0
 8000790:	f8df 134c 	ldr.w	r1, [pc, #844]	; 8000ae0 <.text_20>
 8000794:	f240 4449 	movw	r4, #1097	; 0x449
 8000798:	680b      	ldr	r3, [r1, #0]
 800079a:	085b      	lsrs	r3, r3, #1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	600b      	str	r3, [r1, #0]
 80007a0:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000ae4 <.text_21>
 80007a4:	680b      	ldr	r3, [r1, #0]
 80007a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007aa:	42a3      	cmp	r3, r4
 80007ac:	d115      	bne.n	80007da <ai_platform_network_destroy+0x5e>
 80007ae:	2101      	movs	r1, #1
 80007b0:	2400      	movs	r4, #0
 80007b2:	2300      	movs	r3, #0
 80007b4:	4321      	orrs	r1, r4
 80007b6:	4319      	orrs	r1, r3
 80007b8:	d01d      	beq.n	80007f6 <ai_platform_network_destroy+0x7a>
 80007ba:	f8df 332c 	ldr.w	r3, [pc, #812]	; 8000ae8 <.text_22>
 80007be:	2401      	movs	r4, #1
 80007c0:	609c      	str	r4, [r3, #8]
 80007c2:	6899      	ldr	r1, [r3, #8]
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d1fc      	bne.n	80007c2 <ai_platform_network_destroy+0x46>
 80007c8:	f8df 4320 	ldr.w	r4, [pc, #800]	; 8000aec <.text_23>
 80007cc:	f8df 5320 	ldr.w	r5, [pc, #800]	; 8000af0 <.text_24>
 80007d0:	601c      	str	r4, [r3, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	42ab      	cmp	r3, r5
 80007d6:	d024      	beq.n	8000822 <ai_platform_network_destroy+0xa6>
 80007d8:	e7fe      	b.n	80007d8 <ai_platform_network_destroy+0x5c>
 80007da:	2100      	movs	r1, #0
 80007dc:	f240 4651 	movw	r6, #1105	; 0x451
 80007e0:	42b3      	cmp	r3, r6
 80007e2:	bf08      	it	eq
 80007e4:	2401      	moveq	r4, #1
 80007e6:	d0e4      	beq.n	80007b2 <ai_platform_network_destroy+0x36>
 80007e8:	2400      	movs	r4, #0
 80007ea:	f240 4552 	movw	r5, #1106	; 0x452
 80007ee:	42ab      	cmp	r3, r5
 80007f0:	d1df      	bne.n	80007b2 <ai_platform_network_destroy+0x36>
 80007f2:	2301      	movs	r3, #1
 80007f4:	e7de      	b.n	80007b4 <ai_platform_network_destroy+0x38>
 80007f6:	f8df 12fc 	ldr.w	r1, [pc, #764]	; 8000af4 <.text_25>
 80007fa:	680b      	ldr	r3, [r1, #0]
 80007fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000800:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000804:	d10d      	bne.n	8000822 <ai_platform_network_destroy+0xa6>
 8000806:	f8df 32f0 	ldr.w	r3, [pc, #752]	; 8000af8 <.text_26>
 800080a:	2401      	movs	r4, #1
 800080c:	609c      	str	r4, [r3, #8]
 800080e:	6899      	ldr	r1, [r3, #8]
 8000810:	2900      	cmp	r1, #0
 8000812:	d1fc      	bne.n	800080e <ai_platform_network_destroy+0x92>
 8000814:	4cb5      	ldr	r4, [pc, #724]	; (8000aec <.text_23>)
 8000816:	4db6      	ldr	r5, [pc, #728]	; (8000af0 <.text_24>)
 8000818:	601c      	str	r4, [r3, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	42ab      	cmp	r3, r5
 800081e:	d000      	beq.n	8000822 <ai_platform_network_destroy+0xa6>
 8000820:	e7fe      	b.n	8000820 <ai_platform_network_destroy+0xa4>
 8000822:	b102      	cbz	r2, 8000826 <ai_platform_network_destroy+0xaa>
 8000824:	2000      	movs	r0, #0
 8000826:	bc70      	pop	{r4, r5, r6}
 8000828:	4770      	bx	lr

0800082a <ai_platform_network_init>:
 800082a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800082e:	460a      	mov	r2, r1
 8000830:	b118      	cbz	r0, 800083a <ai_platform_network_init+0x10>
 8000832:	6801      	ldr	r1, [r0, #0]
 8000834:	4bb1      	ldr	r3, [pc, #708]	; (8000afc <.text_27>)
 8000836:	4299      	cmp	r1, r3
 8000838:	d000      	beq.n	800083c <ai_platform_network_init+0x12>
 800083a:	2000      	movs	r0, #0
 800083c:	49a8      	ldr	r1, [pc, #672]	; (8000ae0 <.text_20>)
 800083e:	f240 4549 	movw	r5, #1097	; 0x449
 8000842:	680c      	ldr	r4, [r1, #0]
 8000844:	0864      	lsrs	r4, r4, #1
 8000846:	0064      	lsls	r4, r4, #1
 8000848:	600c      	str	r4, [r1, #0]
 800084a:	49a6      	ldr	r1, [pc, #664]	; (8000ae4 <.text_21>)
 800084c:	680b      	ldr	r3, [r1, #0]
 800084e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000852:	42ab      	cmp	r3, r5
 8000854:	d112      	bne.n	800087c <ai_platform_network_init+0x52>
 8000856:	2101      	movs	r1, #1
 8000858:	2400      	movs	r4, #0
 800085a:	2300      	movs	r3, #0
 800085c:	4321      	orrs	r1, r4
 800085e:	4319      	orrs	r1, r3
 8000860:	d01a      	beq.n	8000898 <ai_platform_network_init+0x6e>
 8000862:	4ba1      	ldr	r3, [pc, #644]	; (8000ae8 <.text_22>)
 8000864:	2401      	movs	r4, #1
 8000866:	609c      	str	r4, [r3, #8]
 8000868:	6899      	ldr	r1, [r3, #8]
 800086a:	2900      	cmp	r1, #0
 800086c:	d1fc      	bne.n	8000868 <ai_platform_network_init+0x3e>
 800086e:	4c9f      	ldr	r4, [pc, #636]	; (8000aec <.text_23>)
 8000870:	4d9f      	ldr	r5, [pc, #636]	; (8000af0 <.text_24>)
 8000872:	601c      	str	r4, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	42ab      	cmp	r3, r5
 8000878:	d022      	beq.n	80008c0 <ai_platform_network_init+0x96>
 800087a:	e7fe      	b.n	800087a <ai_platform_network_init+0x50>
 800087c:	2100      	movs	r1, #0
 800087e:	f240 4651 	movw	r6, #1105	; 0x451
 8000882:	42b3      	cmp	r3, r6
 8000884:	bf08      	it	eq
 8000886:	2401      	moveq	r4, #1
 8000888:	d0e7      	beq.n	800085a <ai_platform_network_init+0x30>
 800088a:	2400      	movs	r4, #0
 800088c:	f240 4552 	movw	r5, #1106	; 0x452
 8000890:	42ab      	cmp	r3, r5
 8000892:	d1e2      	bne.n	800085a <ai_platform_network_init+0x30>
 8000894:	2301      	movs	r3, #1
 8000896:	e7e1      	b.n	800085c <ai_platform_network_init+0x32>
 8000898:	4996      	ldr	r1, [pc, #600]	; (8000af4 <.text_25>)
 800089a:	680b      	ldr	r3, [r1, #0]
 800089c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008a0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80008a4:	d10c      	bne.n	80008c0 <ai_platform_network_init+0x96>
 80008a6:	4b94      	ldr	r3, [pc, #592]	; (8000af8 <.text_26>)
 80008a8:	2401      	movs	r4, #1
 80008aa:	609c      	str	r4, [r3, #8]
 80008ac:	6899      	ldr	r1, [r3, #8]
 80008ae:	2900      	cmp	r1, #0
 80008b0:	d1fc      	bne.n	80008ac <ai_platform_network_init+0x82>
 80008b2:	4c8e      	ldr	r4, [pc, #568]	; (8000aec <.text_23>)
 80008b4:	4d8e      	ldr	r5, [pc, #568]	; (8000af0 <.text_24>)
 80008b6:	601c      	str	r4, [r3, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	42ab      	cmp	r3, r5
 80008bc:	d000      	beq.n	80008c0 <ai_platform_network_init+0x96>
 80008be:	e7fe      	b.n	80008be <ai_platform_network_init+0x94>
 80008c0:	b348      	cbz	r0, 8000916 <ai_platform_network_init+0xec>
 80008c2:	b90a      	cbnz	r2, 80008c8 <ai_platform_network_init+0x9e>
 80008c4:	2211      	movs	r2, #17
 80008c6:	e006      	b.n	80008d6 <ai_platform_network_init+0xac>
 80008c8:	69d1      	ldr	r1, [r2, #28]
 80008ca:	b909      	cbnz	r1, 80008d0 <ai_platform_network_init+0xa6>
 80008cc:	2213      	movs	r2, #19
 80008ce:	e002      	b.n	80008d6 <ai_platform_network_init+0xac>
 80008d0:	68d1      	ldr	r1, [r2, #12]
 80008d2:	b939      	cbnz	r1, 80008e4 <ai_platform_network_init+0xba>
 80008d4:	2212      	movs	r2, #18
 80008d6:	2110      	movs	r1, #16
 80008d8:	300c      	adds	r0, #12
 80008da:	f000 f934 	bl	8000b46 <core_set_error>
 80008de:	2000      	movs	r0, #0
 80008e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e4:	f100 0114 	add.w	r1, r0, #20
 80008e8:	f100 0724 	add.w	r7, r0, #36	; 0x24
 80008ec:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 80008ee:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 80008f2:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 80008f6:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 80008fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80008fc:	f04f 0a03 	mov.w	sl, #3
 8000900:	f8c0 a008 	str.w	sl, [r0, #8]
 8000904:	b13a      	cbz	r2, 8000916 <ai_platform_network_init+0xec>
 8000906:	6891      	ldr	r1, [r2, #8]
 8000908:	6050      	str	r0, [r2, #4]
 800090a:	428a      	cmp	r2, r1
 800090c:	bf18      	it	ne
 800090e:	2900      	cmpne	r1, #0
 8000910:	bf18      	it	ne
 8000912:	460a      	movne	r2, r1
 8000914:	d1f7      	bne.n	8000906 <ai_platform_network_init+0xdc>
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800091a <ai_platform_network_process>:
 800091a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	b128      	cbz	r0, 800092e <ai_platform_network_process+0x14>
 8000922:	6803      	ldr	r3, [r0, #0]
 8000924:	4c75      	ldr	r4, [pc, #468]	; (8000afc <.text_27>)
 8000926:	42a3      	cmp	r3, r4
 8000928:	bf08      	it	eq
 800092a:	4605      	moveq	r5, r0
 800092c:	d000      	beq.n	8000930 <ai_platform_network_process+0x16>
 800092e:	2500      	movs	r5, #0
 8000930:	486b      	ldr	r0, [pc, #428]	; (8000ae0 <.text_20>)
 8000932:	f240 4449 	movw	r4, #1097	; 0x449
 8000936:	6803      	ldr	r3, [r0, #0]
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	6003      	str	r3, [r0, #0]
 800093e:	4869      	ldr	r0, [pc, #420]	; (8000ae4 <.text_21>)
 8000940:	6803      	ldr	r3, [r0, #0]
 8000942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000946:	42a3      	cmp	r3, r4
 8000948:	d112      	bne.n	8000970 <ai_platform_network_process+0x56>
 800094a:	2001      	movs	r0, #1
 800094c:	2400      	movs	r4, #0
 800094e:	2300      	movs	r3, #0
 8000950:	4320      	orrs	r0, r4
 8000952:	4318      	orrs	r0, r3
 8000954:	d01a      	beq.n	800098c <ai_platform_network_process+0x72>
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <.text_22>)
 8000958:	2401      	movs	r4, #1
 800095a:	609c      	str	r4, [r3, #8]
 800095c:	6898      	ldr	r0, [r3, #8]
 800095e:	2800      	cmp	r0, #0
 8000960:	d1fc      	bne.n	800095c <ai_platform_network_process+0x42>
 8000962:	4c62      	ldr	r4, [pc, #392]	; (8000aec <.text_23>)
 8000964:	4e62      	ldr	r6, [pc, #392]	; (8000af0 <.text_24>)
 8000966:	601c      	str	r4, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	42b3      	cmp	r3, r6
 800096c:	d022      	beq.n	80009b4 <ai_platform_network_process+0x9a>
 800096e:	e7fe      	b.n	800096e <ai_platform_network_process+0x54>
 8000970:	2000      	movs	r0, #0
 8000972:	f240 4751 	movw	r7, #1105	; 0x451
 8000976:	42bb      	cmp	r3, r7
 8000978:	bf08      	it	eq
 800097a:	2401      	moveq	r4, #1
 800097c:	d0e7      	beq.n	800094e <ai_platform_network_process+0x34>
 800097e:	2400      	movs	r4, #0
 8000980:	f240 4652 	movw	r6, #1106	; 0x452
 8000984:	42b3      	cmp	r3, r6
 8000986:	d1e2      	bne.n	800094e <ai_platform_network_process+0x34>
 8000988:	2301      	movs	r3, #1
 800098a:	e7e1      	b.n	8000950 <ai_platform_network_process+0x36>
 800098c:	4859      	ldr	r0, [pc, #356]	; (8000af4 <.text_25>)
 800098e:	6803      	ldr	r3, [r0, #0]
 8000990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000994:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000998:	d10c      	bne.n	80009b4 <ai_platform_network_process+0x9a>
 800099a:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <.text_26>)
 800099c:	2401      	movs	r4, #1
 800099e:	609c      	str	r4, [r3, #8]
 80009a0:	6898      	ldr	r0, [r3, #8]
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d1fc      	bne.n	80009a0 <ai_platform_network_process+0x86>
 80009a6:	4c51      	ldr	r4, [pc, #324]	; (8000aec <.text_23>)
 80009a8:	4e51      	ldr	r6, [pc, #324]	; (8000af0 <.text_24>)
 80009aa:	601c      	str	r4, [r3, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	42b3      	cmp	r3, r6
 80009b0:	d000      	beq.n	80009b4 <ai_platform_network_process+0x9a>
 80009b2:	e7fe      	b.n	80009b2 <ai_platform_network_process+0x98>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d04b      	beq.n	8000a50 <ai_platform_network_process+0x136>
 80009b8:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80009bc:	f008 0303 	and.w	r3, r8, #3
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d002      	beq.n	80009ca <ai_platform_network_process+0xb0>
 80009c4:	2230      	movs	r2, #48	; 0x30
 80009c6:	2111      	movs	r1, #17
 80009c8:	e03e      	b.n	8000a48 <ai_platform_network_process+0x12e>
 80009ca:	000f      	movs	r7, r1
 80009cc:	bf1c      	itt	ne
 80009ce:	68f8      	ldrne	r0, [r7, #12]
 80009d0:	2800      	cmpne	r0, #0
 80009d2:	d037      	beq.n	8000a44 <ai_platform_network_process+0x12a>
 80009d4:	8878      	ldrh	r0, [r7, #2]
 80009d6:	b908      	cbnz	r0, 80009dc <ai_platform_network_process+0xc2>
 80009d8:	2221      	movs	r2, #33	; 0x21
 80009da:	e034      	b.n	8000a46 <ai_platform_network_process+0x12c>
 80009dc:	0014      	movs	r4, r2
 80009de:	d00b      	beq.n	80009f8 <ai_platform_network_process+0xde>
 80009e0:	68e1      	ldr	r1, [r4, #12]
 80009e2:	b361      	cbz	r1, 8000a3e <ai_platform_network_process+0x124>
 80009e4:	8861      	ldrh	r1, [r4, #2]
 80009e6:	b911      	cbnz	r1, 80009ee <ai_platform_network_process+0xd4>
 80009e8:	2221      	movs	r2, #33	; 0x21
 80009ea:	2113      	movs	r1, #19
 80009ec:	e02c      	b.n	8000a48 <ai_platform_network_process+0x12e>
 80009ee:	4288      	cmp	r0, r1
 80009f0:	d002      	beq.n	80009f8 <ai_platform_network_process+0xde>
 80009f2:	2221      	movs	r2, #33	; 0x21
 80009f4:	2102      	movs	r1, #2
 80009f6:	e027      	b.n	8000a48 <ai_platform_network_process+0x12e>
 80009f8:	ea5f 50c8 	movs.w	r0, r8, lsl #23
 80009fc:	ea4f 2858 	mov.w	r8, r8, lsr #9
 8000a00:	f008 0801 	and.w	r8, r8, #1
 8000a04:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000a06:	bf4c      	ite	mi
 8000a08:	2002      	movmi	r0, #2
 8000a0a:	2000      	movpl	r0, #0
 8000a0c:	ea48 0800 	orr.w	r8, r8, r0
 8000a10:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000a12:	680a      	ldr	r2, [r1, #0]
 8000a14:	6806      	ldr	r6, [r0, #0]
 8000a16:	9200      	str	r2, [sp, #0]
 8000a18:	6871      	ldr	r1, [r6, #4]
 8000a1a:	6830      	ldr	r0, [r6, #0]
 8000a1c:	f7ff fc00 	bl	8000220 <ai_array_get_byte_size>
 8000a20:	9001      	str	r0, [sp, #4]
 8000a22:	9800      	ldr	r0, [sp, #0]
 8000a24:	6841      	ldr	r1, [r0, #4]
 8000a26:	6800      	ldr	r0, [r0, #0]
 8000a28:	f7ff fbfa 	bl	8000220 <ai_array_get_byte_size>
 8000a2c:	2c00      	cmp	r4, #0
 8000a2e:	4602      	mov	r2, r0
 8000a30:	68f9      	ldr	r1, [r7, #12]
 8000a32:	bf14      	ite	ne
 8000a34:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 8000a38:	f04f 0b00 	moveq.w	fp, #0
 8000a3c:	e00c      	b.n	8000a58 <ai_platform_network_process+0x13e>
 8000a3e:	2217      	movs	r2, #23
 8000a40:	2113      	movs	r1, #19
 8000a42:	e001      	b.n	8000a48 <ai_platform_network_process+0x12e>
 8000a44:	2217      	movs	r2, #23
 8000a46:	2112      	movs	r1, #18
 8000a48:	f105 000c 	add.w	r0, r5, #12
 8000a4c:	f000 f87b 	bl	8000b46 <core_set_error>
 8000a50:	2000      	movs	r0, #0
 8000a52:	b003      	add	sp, #12
 8000a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a58:	f018 0002 	ands.w	r0, r8, #2
 8000a5c:	bf14      	ite	ne
 8000a5e:	f8df 90a4 	ldrne.w	r9, [pc, #164]	; 8000b04 <.text_29>
 8000a62:	f8df 90a4 	ldreq.w	r9, [pc, #164]	; 8000b08 <.text_30>
 8000a66:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	bf4c      	ite	mi
 8000a6e:	f8df a094 	ldrmi.w	sl, [pc, #148]	; 8000b04 <.text_29>
 8000a72:	f8df a098 	ldrpl.w	sl, [pc, #152]	; 8000b0c <.text_31>
 8000a76:	2700      	movs	r7, #0
 8000a78:	822b      	strh	r3, [r5, #16]
 8000a7a:	826f      	strh	r7, [r5, #18]
 8000a7c:	b908      	cbnz	r0, 8000a82 <ai_platform_network_process+0x168>
 8000a7e:	60b1      	str	r1, [r6, #8]
 8000a80:	60f1      	str	r1, [r6, #12]
 8000a82:	b144      	cbz	r4, 8000a96 <ai_platform_network_process+0x17c>
 8000a84:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 8000a88:	d405      	bmi.n	8000a96 <ai_platform_network_process+0x17c>
 8000a8a:	9b00      	ldr	r3, [sp, #0]
 8000a8c:	f8c3 b008 	str.w	fp, [r3, #8]
 8000a90:	9800      	ldr	r0, [sp, #0]
 8000a92:	f8c0 b00c 	str.w	fp, [r0, #12]
 8000a96:	8a6b      	ldrh	r3, [r5, #18]
 8000a98:	8a28      	ldrh	r0, [r5, #16]
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	d21c      	bcs.n	8000ad8 <ai_platform_network_process+0x1be>
 8000a9e:	462c      	mov	r4, r5
 8000aa0:	4635      	mov	r5, r6
 8000aa2:	9e01      	ldr	r6, [sp, #4]
 8000aa4:	4617      	mov	r7, r2
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	68a8      	ldr	r0, [r5, #8]
 8000aaa:	4632      	mov	r2, r6
 8000aac:	4641      	mov	r1, r8
 8000aae:	44b0      	add	r8, r6
 8000ab0:	47c8      	blx	r9
 8000ab2:	60a8      	str	r0, [r5, #8]
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f000 f8dd 	bl	8000c74 <ai_layers_forward_all>
 8000aba:	9800      	ldr	r0, [sp, #0]
 8000abc:	463a      	mov	r2, r7
 8000abe:	6881      	ldr	r1, [r0, #8]
 8000ac0:	4658      	mov	r0, fp
 8000ac2:	47d0      	blx	sl
 8000ac4:	eb00 0b07 	add.w	fp, r0, r7
 8000ac8:	8a60      	ldrh	r0, [r4, #18]
 8000aca:	8a21      	ldrh	r1, [r4, #16]
 8000acc:	1c40      	adds	r0, r0, #1
 8000ace:	8260      	strh	r0, [r4, #18]
 8000ad0:	b280      	uxth	r0, r0
 8000ad2:	4288      	cmp	r0, r1
 8000ad4:	d3e8      	bcc.n	8000aa8 <ai_platform_network_process+0x18e>
 8000ad6:	4625      	mov	r5, r4
 8000ad8:	8a68      	ldrh	r0, [r5, #18]
 8000ada:	b003      	add	sp, #12
 8000adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ae0 <.text_20>:
 8000ae0:	e0002000 	.word	0xe0002000

08000ae4 <.text_21>:
 8000ae4:	e0042000 	.word	0xe0042000

08000ae8 <.text_22>:
 8000ae8:	40023000 	.word	0x40023000

08000aec <.text_23>:
 8000aec:	f407a5c2 	.word	0xf407a5c2

08000af0 <.text_24>:
 8000af0:	b5e8b5cd 	.word	0xb5e8b5cd

08000af4 <.text_25>:
 8000af4:	5c001000 	.word	0x5c001000

08000af8 <.text_26>:
 8000af8:	58024c00 	.word	0x58024c00

08000afc <.text_27>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_28>:
 8000b00:	01010001 	.word	0x01010001

08000b04 <.text_29>:
 8000b04:	08000277 	.word	0x08000277

08000b08 <.text_30>:
 8000b08:	08000645 	.word	0x08000645

08000b0c <.text_31>:
 8000b0c:	08000649 	.word	0x08000649

08000b10 <.text_32>:
 8000b10:	00000303 	.word	0x00000303

08000b14 <.text_33>:
 8000b14:	00000001 	.word	0x00000001

08000b18 <.text_34>:
 8000b18:	00000101 	.word	0x00000101

08000b1c <.text_35>:
 8000b1c:	00001030 	.word	0x00001030

08000b20 <.text_36>:
 8000b20:	00001001 	.word	0x00001001

08000b24 <_platform_network_sanity_check{8}::signatures>:
 8000b24:	84048403                                ....

08000b28 <.text_38>:
 8000b28:	00001002 	.word	0x00001002

08000b2c <.text_39>:
 8000b2c:	00001010 	.word	0x00001010

08000b30 <.text_40>:
 8000b30:	00000000 	.word	0x00000000

08000b34 <.text_41>:
 8000b34:	00001010 	.word	0x00001010

08000b38 <core_init>:
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <core_get_error>:
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	6808      	ldr	r0, [r1, #0]
 8000b42:	600a      	str	r2, [r1, #0]
 8000b44:	4770      	bx	lr

08000b46 <core_set_error>:
 8000b46:	7803      	ldrb	r3, [r0, #0]
 8000b48:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b4c:	d104      	bne.n	8000b58 <core_set_error+0x12>
 8000b4e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b52:	6001      	str	r1, [r0, #0]
 8000b54:	2001      	movs	r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	2000      	movs	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <ai_layers_forward_layer>:
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	4604      	mov	r4, r0
 8000b60:	68e1      	ldr	r1, [r4, #12]
 8000b62:	4788      	blx	r1
 8000b64:	68a0      	ldr	r0, [r4, #8]
 8000b66:	42a0      	cmp	r0, r4
 8000b68:	bf08      	it	eq
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	bd10      	pop	{r4, pc}
	...

08000b70 <ai_check_custom_types>:
 8000b70:	b500      	push	{lr}
 8000b72:	b081      	sub	sp, #4
 8000b74:	b160      	cbz	r0, 8000b90 <ai_check_custom_types+0x20>
 8000b76:	7801      	ldrb	r1, [r0, #0]
 8000b78:	2903      	cmp	r1, #3
 8000b7a:	d109      	bne.n	8000b90 <ai_check_custom_types+0x20>
 8000b7c:	f05f 0204 	movs.w	r2, #4
 8000b80:	a163      	add	r1, pc, #396	; (adr r1, 8000d10 <ai_check_custom_types::ref_signatures>)
 8000b82:	f005 fc79 	bl	8006478 <memcmp>
 8000b86:	1e40      	subs	r0, r0, #1
 8000b88:	4180      	sbcs	r0, r0
 8000b8a:	0fc0      	lsrs	r0, r0, #31
 8000b8c:	b001      	add	sp, #4
 8000b8e:	bd00      	pop	{pc}
 8000b90:	2000      	movs	r0, #0
 8000b92:	b001      	add	sp, #4
 8000b94:	bd00      	pop	{pc}
	...

08000b98 <ai_layer_type_name>:
 8000b98:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b9c:	1a81      	subs	r1, r0, r2
 8000b9e:	2901      	cmp	r1, #1
 8000ba0:	bf84      	itt	hi
 8000ba2:	1ec9      	subhi	r1, r1, #3
 8000ba4:	290d      	cmphi	r1, #13
 8000ba6:	d901      	bls.n	8000bac <ai_layer_type_name+0x14>
 8000ba8:	390f      	subs	r1, #15
 8000baa:	d145      	bne.n	8000c38 <ai_layer_type_name+0xa0>
 8000bac:	1a80      	subs	r0, r0, r2
 8000bae:	d021      	beq.n	8000bf4 <ai_layer_type_name+0x5c>
 8000bb0:	1e40      	subs	r0, r0, #1
 8000bb2:	d021      	beq.n	8000bf8 <ai_layer_type_name+0x60>
 8000bb4:	1e80      	subs	r0, r0, #2
 8000bb6:	d021      	beq.n	8000bfc <ai_layer_type_name+0x64>
 8000bb8:	1e40      	subs	r0, r0, #1
 8000bba:	d021      	beq.n	8000c00 <ai_layer_type_name+0x68>
 8000bbc:	1e40      	subs	r0, r0, #1
 8000bbe:	d021      	beq.n	8000c04 <ai_layer_type_name+0x6c>
 8000bc0:	1e40      	subs	r0, r0, #1
 8000bc2:	d021      	beq.n	8000c08 <ai_layer_type_name+0x70>
 8000bc4:	1e40      	subs	r0, r0, #1
 8000bc6:	d021      	beq.n	8000c0c <ai_layer_type_name+0x74>
 8000bc8:	1e40      	subs	r0, r0, #1
 8000bca:	d021      	beq.n	8000c10 <ai_layer_type_name+0x78>
 8000bcc:	1e40      	subs	r0, r0, #1
 8000bce:	d021      	beq.n	8000c14 <ai_layer_type_name+0x7c>
 8000bd0:	1e40      	subs	r0, r0, #1
 8000bd2:	d021      	beq.n	8000c18 <ai_layer_type_name+0x80>
 8000bd4:	1e40      	subs	r0, r0, #1
 8000bd6:	d021      	beq.n	8000c1c <ai_layer_type_name+0x84>
 8000bd8:	1e40      	subs	r0, r0, #1
 8000bda:	d021      	beq.n	8000c20 <ai_layer_type_name+0x88>
 8000bdc:	1e40      	subs	r0, r0, #1
 8000bde:	d021      	beq.n	8000c24 <ai_layer_type_name+0x8c>
 8000be0:	1e40      	subs	r0, r0, #1
 8000be2:	d021      	beq.n	8000c28 <ai_layer_type_name+0x90>
 8000be4:	1e40      	subs	r0, r0, #1
 8000be6:	d021      	beq.n	8000c2c <ai_layer_type_name+0x94>
 8000be8:	1e40      	subs	r0, r0, #1
 8000bea:	d021      	beq.n	8000c30 <ai_layer_type_name+0x98>
 8000bec:	1e80      	subs	r0, r0, #2
 8000bee:	d021      	beq.n	8000c34 <ai_layer_type_name+0x9c>
 8000bf0:	a012      	add	r0, pc, #72	; (adr r0, 8000c3c <.text_5>)
 8000bf2:	4770      	bx	lr
 8000bf4:	a012      	add	r0, pc, #72	; (adr r0, 8000c40 <.text_6>)
 8000bf6:	4770      	bx	lr
 8000bf8:	a012      	add	r0, pc, #72	; (adr r0, 8000c44 <.text_7>)
 8000bfa:	4770      	bx	lr
 8000bfc:	a027      	add	r0, pc, #156	; (adr r0, 8000c9c <.text_14>)
 8000bfe:	4770      	bx	lr
 8000c00:	a028      	add	r0, pc, #160	; (adr r0, 8000ca4 <.text_15>)
 8000c02:	4770      	bx	lr
 8000c04:	a010      	add	r0, pc, #64	; (adr r0, 8000c48 <.text_8>)
 8000c06:	4770      	bx	lr
 8000c08:	a010      	add	r0, pc, #64	; (adr r0, 8000c4c <.text_9>)
 8000c0a:	4770      	bx	lr
 8000c0c:	a027      	add	r0, pc, #156	; (adr r0, 8000cac <.text_16>)
 8000c0e:	4770      	bx	lr
 8000c10:	a00f      	add	r0, pc, #60	; (adr r0, 8000c50 <.text_10>)
 8000c12:	4770      	bx	lr
 8000c14:	a027      	add	r0, pc, #156	; (adr r0, 8000cb4 <.text_17>)
 8000c16:	4770      	bx	lr
 8000c18:	a028      	add	r0, pc, #160	; (adr r0, 8000cbc <.text_18>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a02c      	add	r0, pc, #176	; (adr r0, 8000cd0 <.text_19>)
 8000c1e:	4770      	bx	lr
 8000c20:	a02d      	add	r0, pc, #180	; (adr r0, 8000cd8 <.text_20>)
 8000c22:	4770      	bx	lr
 8000c24:	a00b      	add	r0, pc, #44	; (adr r0, 8000c54 <.text_11>)
 8000c26:	4770      	bx	lr
 8000c28:	a02d      	add	r0, pc, #180	; (adr r0, 8000ce0 <.text_21>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a02e      	add	r0, pc, #184	; (adr r0, 8000ce8 <.text_22>)
 8000c2e:	4770      	bx	lr
 8000c30:	a030      	add	r0, pc, #192	; (adr r0, 8000cf4 <.text_23>)
 8000c32:	4770      	bx	lr
 8000c34:	a034      	add	r0, pc, #208	; (adr r0, 8000d08 <.text_24>)
 8000c36:	4770      	bx	lr
 8000c38:	a000      	add	r0, pc, #0	; (adr r0, 8000c3c <.text_5>)
 8000c3a:	4770      	bx	lr

08000c3c <.text_5>:
 8000c3c:	00000000 	.word	0x00000000

08000c40 <.text_6>:
 8000c40:	00444441 	.word	0x00444441

08000c44 <.text_7>:
 8000c44:	00004e42 	.word	0x00004e42

08000c48 <.text_8>:
 8000c48:	00555247 	.word	0x00555247

08000c4c <.text_9>:
 8000c4c:	004e524c 	.word	0x004e524c

08000c50 <.text_10>:
 8000c50:	00004c4e 	.word	0x00004c4e

08000c54 <.text_11>:
 8000c54:	00004d53 	.word	0x00004d53

08000c58 <ai_layer_type_is_valid>:
 8000c58:	f242 7111 	movw	r1, #10001	; 0x2711
 8000c5c:	1a40      	subs	r0, r0, r1
 8000c5e:	2801      	cmp	r0, #1
 8000c60:	bf84      	itt	hi
 8000c62:	1ec0      	subhi	r0, r0, #3
 8000c64:	280d      	cmphi	r0, #13
 8000c66:	d901      	bls.n	8000c6c <ai_layer_type_is_valid+0x14>
 8000c68:	380f      	subs	r0, #15
 8000c6a:	d101      	bne.n	8000c70 <ai_layer_type_is_valid+0x18>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <ai_layers_forward_all>:
 8000c74:	b530      	push	{r4, r5, lr}
 8000c76:	b081      	sub	sp, #4
 8000c78:	4604      	mov	r4, r0
 8000c7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000c7c:	b158      	cbz	r0, 8000c96 <ai_layers_forward_all+0x22>
 8000c7e:	6420      	str	r0, [r4, #64]	; 0x40
 8000c80:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000c82:	68e9      	ldr	r1, [r5, #12]
 8000c84:	4628      	mov	r0, r5
 8000c86:	4788      	blx	r1
 8000c88:	68a8      	ldr	r0, [r5, #8]
 8000c8a:	42a8      	cmp	r0, r5
 8000c8c:	bf08      	it	eq
 8000c8e:	2000      	moveq	r0, #0
 8000c90:	2800      	cmp	r0, #0
 8000c92:	6420      	str	r0, [r4, #64]	; 0x40
 8000c94:	d1f4      	bne.n	8000c80 <ai_layers_forward_all+0xc>
 8000c96:	b001      	add	sp, #4
 8000c98:	bd30      	pop	{r4, r5, pc}
	...

08000c9c <.text_14>:
 8000c9c:	564e4f43 	.word	0x564e4f43
 8000ca0:	00004432 	.word	0x00004432

08000ca4 <.text_15>:
 8000ca4:	534e4544 	.word	0x534e4544
 8000ca8:	00000045 	.word	0x00000045

08000cac <.text_16>:
 8000cac:	4d54534c 	.word	0x4d54534c
 8000cb0:	00000000 	.word	0x00000000

08000cb4 <.text_17>:
 8000cb4:	4d524f4e 	.word	0x4d524f4e
 8000cb8:	00000000 	.word	0x00000000

08000cbc <.text_18>:
 8000cbc:	4954504f 	.word	0x4954504f
 8000cc0:	455a494d 	.word	0x455a494d
 8000cc4:	4f435f44 	.word	0x4f435f44
 8000cc8:	4432564e 	.word	0x4432564e
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <.text_19>:
 8000cd0:	4d524550 	.word	0x4d524550
 8000cd4:	00455455 	.word	0x00455455

08000cd8 <.text_20>:
 8000cd8:	4c4f4f50 	.word	0x4c4f4f50
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <.text_21>:
 8000ce0:	494c5053 	.word	0x494c5053
 8000ce4:	00000054 	.word	0x00000054

08000ce8 <.text_22>:
 8000ce8:	454d4954 	.word	0x454d4954
 8000cec:	4c45445f 	.word	0x4c45445f
 8000cf0:	00005941 	.word	0x00005941

08000cf4 <.text_23>:
 8000cf4:	454d4954 	.word	0x454d4954
 8000cf8:	5349445f 	.word	0x5349445f
 8000cfc:	42495254 	.word	0x42495254
 8000d00:	44455455 	.word	0x44455455
 8000d04:	00000000 	.word	0x00000000

08000d08 <.text_24>:
 8000d08:	434e4f43 	.word	0x434e4f43
 8000d0c:	00005441 	.word	0x00005441

08000d10 <ai_check_custom_types::ref_signatures>:
 8000d10:	84048403                                ....

08000d14 <ai_conv2d_kernel_simple_f32>:
 8000d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d18:	b081      	sub	sp, #4
 8000d1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000d1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000d1e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8000d20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000d22:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8000d26:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8000d2a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8000d2e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8000d32:	1b37      	subs	r7, r6, r4
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8000d3a:	fb07 f709 	mul.w	r7, r7, r9
 8000d3e:	9700      	str	r7, [sp, #0]
 8000d40:	eba5 0a04 	sub.w	sl, r5, r4
 8000d44:	fb05 f50c 	mul.w	r5, r5, ip
 8000d48:	ebab 0b0e 	sub.w	fp, fp, lr
 8000d4c:	fb06 f709 	mul.w	r7, r6, r9
 8000d50:	fb06 860c 	mla	r6, r6, ip, r8
 8000d54:	bf0c      	ite	eq
 8000d56:	ed9f 0a82 	vldreq	s0, [pc, #520]	; 8000f60 <.text_4>
 8000d5a:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d5e:	fb09 fa0a 	mul.w	sl, r9, sl
 8000d62:	fb06 f609 	mul.w	r6, r6, r9
 8000d66:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000d6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000d6c:	fb04 f409 	mul.w	r4, r4, r9
 8000d70:	fb09 f905 	mul.w	r9, r9, r5
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	fb0b fb07 	mul.w	fp, fp, r7
 8000d7a:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 8000d7e:	d04d      	beq.n	8000e1c <ai_conv2d_kernel_simple_f32+0x108>
 8000d80:	460d      	mov	r5, r1
 8000d82:	4619      	mov	r1, r3
 8000d84:	4632      	mov	r2, r6
 8000d86:	4603      	mov	r3, r0
 8000d88:	f1be 0f01 	cmp.w	lr, #1
 8000d8c:	edd3 0a00 	vldr	s1, [r3]
 8000d90:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d94:	464e      	mov	r6, r9
 8000d96:	db39      	blt.n	8000e0c <ai_conv2d_kernel_simple_f32+0xf8>
 8000d98:	4670      	mov	r0, lr
 8000d9a:	f8dd c000 	ldr.w	ip, [sp]
 8000d9e:	2c01      	cmp	r4, #1
 8000da0:	db2c      	blt.n	8000dfc <ai_conv2d_kernel_simple_f32+0xe8>
 8000da2:	f014 0803 	ands.w	r8, r4, #3
 8000da6:	d00a      	beq.n	8000dbe <ai_conv2d_kernel_simple_f32+0xaa>
 8000da8:	ed91 1a00 	vldr	s2, [r1]
 8000dac:	1d09      	adds	r1, r1, #4
 8000dae:	edd6 1a00 	vldr	s3, [r6]
 8000db2:	1d36      	adds	r6, r6, #4
 8000db4:	f1b8 0801 	subs.w	r8, r8, #1
 8000db8:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dbc:	d1f4      	bne.n	8000da8 <ai_conv2d_kernel_simple_f32+0x94>
 8000dbe:	08a7      	lsrs	r7, r4, #2
 8000dc0:	f000 801c 	beq.w	8000dfc <ai_conv2d_kernel_simple_f32+0xe8>
 8000dc4:	ed91 2a00 	vldr	s4, [r1]
 8000dc8:	ed96 1a00 	vldr	s2, [r6]
 8000dcc:	edd1 1a01 	vldr	s3, [r1, #4]
 8000dd0:	edd6 2a01 	vldr	s5, [r6, #4]
 8000dd4:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000dd8:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000ddc:	ed91 2a02 	vldr	s4, [r1, #8]
 8000de0:	ed96 1a02 	vldr	s2, [r6, #8]
 8000de4:	edd1 1a03 	vldr	s3, [r1, #12]
 8000de8:	3110      	adds	r1, #16
 8000dea:	edd6 2a03 	vldr	s5, [r6, #12]
 8000dee:	3610      	adds	r6, #16
 8000df0:	1e7f      	subs	r7, r7, #1
 8000df2:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000df6:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000dfa:	d1e3      	bne.n	8000dc4 <ai_conv2d_kernel_simple_f32+0xb0>
 8000dfc:	1e40      	subs	r0, r0, #1
 8000dfe:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8000e02:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8000e06:	d1ca      	bne.n	8000d9e <ai_conv2d_kernel_simple_f32+0x8a>
 8000e08:	f8cd c000 	str.w	ip, [sp]
 8000e0c:	edc5 0a00 	vstr	s1, [r5]
 8000e10:	1d2d      	adds	r5, r5, #4
 8000e12:	1d1b      	adds	r3, r3, #4
 8000e14:	1e52      	subs	r2, r2, #1
 8000e16:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8000e1a:	d1b5      	bne.n	8000d88 <ai_conv2d_kernel_simple_f32+0x74>
 8000e1c:	b001      	add	sp, #4
 8000e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e24 <ai_conv2d_kernel_depthwise_f32>:
 8000e24:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8000e2e:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8000e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e34:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8000e36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000e38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e3a:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8000e3e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e42:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e44:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8000e48:	1b00      	subs	r0, r0, r4
 8000e4a:	eba5 0e0c 	sub.w	lr, r5, ip
 8000e4e:	fb09 bb07 	mla	fp, r9, r7, fp
 8000e52:	eba9 080c 	sub.w	r8, r9, ip
 8000e56:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8000e5a:	9b04      	ldr	r3, [sp, #16]
 8000e5c:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e60:	fb0a fe0e 	mul.w	lr, sl, lr
 8000e64:	429a      	cmp	r2, r3
 8000e66:	fb00 f009 	mul.w	r0, r0, r9
 8000e6a:	bf0c      	ite	eq
 8000e6c:	ed9f 0a3c 	vldreq	s0, [pc, #240]	; 8000f60 <.text_4>
 8000e70:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000e74:	437d      	muls	r5, r7
 8000e76:	fb0a f505 	mul.w	r5, sl, r5
 8000e7a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8000e7e:	2500      	movs	r5, #0
 8000e80:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 8000e84:	9700      	str	r7, [sp, #0]
 8000e86:	42b9      	cmp	r1, r7
 8000e88:	d266      	bcs.n	8000f58 <ai_conv2d_kernel_depthwise_f32+0x134>
 8000e8a:	920e      	str	r2, [sp, #56]	; 0x38
 8000e8c:	9603      	str	r6, [sp, #12]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	d05d      	beq.n	8000f50 <ai_conv2d_kernel_depthwise_f32+0x12c>
 8000e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000e96:	9f04      	ldr	r7, [sp, #16]
 8000e98:	9002      	str	r0, [sp, #8]
 8000e9a:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8000ea4:	9101      	str	r1, [sp, #4]
 8000ea6:	2c01      	cmp	r4, #1
 8000ea8:	edd6 0a00 	vldr	s1, [r6]
 8000eac:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000eb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000eb4:	db40      	blt.n	8000f38 <ai_conv2d_kernel_depthwise_f32+0x114>
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	f1bc 0f01 	cmp.w	ip, #1
 8000ebc:	db36      	blt.n	8000f2c <ai_conv2d_kernel_depthwise_f32+0x108>
 8000ebe:	f01c 0103 	ands.w	r1, ip, #3
 8000ec2:	d00b      	beq.n	8000edc <ai_conv2d_kernel_depthwise_f32+0xb8>
 8000ec4:	1e49      	subs	r1, r1, #1
 8000ec6:	ed9b 1a00 	vldr	s2, [fp]
 8000eca:	edd9 1a00 	vldr	s3, [r9]
 8000ece:	f10b 0b04 	add.w	fp, fp, #4
 8000ed2:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ed6:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8000eda:	d1f3      	bne.n	8000ec4 <ai_conv2d_kernel_depthwise_f32+0xa0>
 8000edc:	ea5f 009c 	movs.w	r0, ip, lsr #2
 8000ee0:	f000 8024 	beq.w	8000f2c <ai_conv2d_kernel_depthwise_f32+0x108>
 8000ee4:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8000ee8:	ed9b 1a00 	vldr	s2, [fp]
 8000eec:	edd9 1a00 	vldr	s3, [r9]
 8000ef0:	1e40      	subs	r0, r0, #1
 8000ef2:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ef6:	eddb 1a01 	vldr	s3, [fp, #4]
 8000efa:	ed91 1a00 	vldr	s2, [r1]
 8000efe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000f02:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000f06:	ed9b 1a02 	vldr	s2, [fp, #8]
 8000f0a:	edd1 1a00 	vldr	s3, [r1]
 8000f0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000f12:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f16:	eddb 1a03 	vldr	s3, [fp, #12]
 8000f1a:	f10b 0b10 	add.w	fp, fp, #16
 8000f1e:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000f22:	ed91 1a00 	vldr	s2, [r1]
 8000f26:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000f2a:	d1db      	bne.n	8000ee4 <ai_conv2d_kernel_depthwise_f32+0xc0>
 8000f2c:	1e52      	subs	r2, r2, #1
 8000f2e:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8000f32:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8000f36:	d1bf      	bne.n	8000eb8 <ai_conv2d_kernel_depthwise_f32+0x94>
 8000f38:	1c6d      	adds	r5, r5, #1
 8000f3a:	9802      	ldr	r0, [sp, #8]
 8000f3c:	edc7 0a00 	vstr	s1, [r7]
 8000f40:	1d3f      	adds	r7, r7, #4
 8000f42:	1d36      	adds	r6, r6, #4
 8000f44:	1e5b      	subs	r3, r3, #1
 8000f46:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8000f4a:	d1ac      	bne.n	8000ea6 <ai_conv2d_kernel_depthwise_f32+0x82>
 8000f4c:	9802      	ldr	r0, [sp, #8]
 8000f4e:	9901      	ldr	r1, [sp, #4]
 8000f50:	9a00      	ldr	r2, [sp, #0]
 8000f52:	1d09      	adds	r1, r1, #4
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d39a      	bcc.n	8000e8e <ai_conv2d_kernel_depthwise_f32+0x6a>
 8000f58:	b005      	add	sp, #20
 8000f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000f60 <.text_4>:
 8000f60:	00000000 	.word	0x00000000

08000f64 <ai_conv2d_kernel_group_f32>:
 8000f64:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	4692      	mov	sl, r2
 8000f6c:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8000f70:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000f74:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000f76:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000f78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000f7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000f7c:	ebae 0e0c 	sub.w	lr, lr, ip
 8000f80:	461e      	mov	r6, r3
 8000f82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000f84:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000f86:	fbb1 f9f2 	udiv	r9, r1, r2
 8000f8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8000f90:	fbb7 f3f2 	udiv	r3, r7, r2
 8000f94:	fb04 fb03 	mul.w	fp, r4, r3
 8000f98:	eba7 0903 	sub.w	r9, r7, r3
 8000f9c:	1a09      	subs	r1, r1, r0
 8000f9e:	eba4 0800 	sub.w	r8, r4, r0
 8000fa2:	4379      	muls	r1, r7
 8000fa4:	fb0e fe0b 	mul.w	lr, lr, fp
 8000fa8:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8000fac:	fb08 f803 	mul.w	r8, r8, r3
 8000fb0:	fb04 b405 	mla	r4, r4, r5, fp
 8000fb4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000fb8:	435c      	muls	r4, r3
 8000fba:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000fbe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000fc0:	455e      	cmp	r6, fp
 8000fc2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8000fc6:	fb0b f505 	mul.w	r5, fp, r5
 8000fca:	bf0c      	ite	eq
 8000fcc:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 80010c4 <.text_6>
 8000fd0:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000fd4:	436f      	muls	r7, r5
 8000fd6:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8000fda:	f04f 0a00 	mov.w	sl, #0
 8000fde:	2a00      	cmp	r2, #0
 8000fe0:	d06d      	beq.n	80010be <ai_conv2d_kernel_group_f32+0x15a>
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	9a03      	ldr	r2, [sp, #12]
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	d063      	beq.n	80010b2 <ai_conv2d_kernel_group_f32+0x14e>
 8000fea:	9a04      	ldr	r2, [sp, #16]
 8000fec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000fee:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000ff2:	eb02 078a 	add.w	r7, r2, sl, lsl #2
 8000ff6:	9a03      	ldr	r2, [sp, #12]
 8000ff8:	f8cd e008 	str.w	lr, [sp, #8]
 8000ffc:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8001000:	f8cd 5004 	str.w	r5, [sp, #4]
 8001004:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8001008:	edd6 0a00 	vldr	s1, [r6]
 800100c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001010:	9d01      	ldr	r5, [sp, #4]
 8001012:	f1be 0f01 	cmp.w	lr, #1
 8001016:	db3b      	blt.n	8001090 <ai_conv2d_kernel_group_f32+0x12c>
 8001018:	2801      	cmp	r0, #1
 800101a:	db32      	blt.n	8001082 <ai_conv2d_kernel_group_f32+0x11e>
 800101c:	ea4f 0c00 	mov.w	ip, r0
 8001020:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8001024:	455d      	cmp	r5, fp
 8001026:	d227      	bcs.n	8001078 <ai_conv2d_kernel_group_f32+0x114>
 8001028:	ed94 1a00 	vldr	s2, [r4]
 800102c:	1d24      	adds	r4, r4, #4
 800102e:	edd5 1a00 	vldr	s3, [r5]
 8001032:	1d2d      	adds	r5, r5, #4
 8001034:	455d      	cmp	r5, fp
 8001036:	ee41 0a21 	vmla.f32	s1, s2, s3
 800103a:	d21d      	bcs.n	8001078 <ai_conv2d_kernel_group_f32+0x114>
 800103c:	ed94 2a00 	vldr	s4, [r4]
 8001040:	1d24      	adds	r4, r4, #4
 8001042:	ed95 1a00 	vldr	s2, [r5]
 8001046:	1d2d      	adds	r5, r5, #4
 8001048:	455d      	cmp	r5, fp
 800104a:	ee42 0a01 	vmla.f32	s1, s4, s2
 800104e:	d213      	bcs.n	8001078 <ai_conv2d_kernel_group_f32+0x114>
 8001050:	edd4 1a00 	vldr	s3, [r4]
 8001054:	1d24      	adds	r4, r4, #4
 8001056:	ed95 2a00 	vldr	s4, [r5]
 800105a:	1d2d      	adds	r5, r5, #4
 800105c:	455d      	cmp	r5, fp
 800105e:	ee41 0a82 	vmla.f32	s1, s3, s4
 8001062:	d209      	bcs.n	8001078 <ai_conv2d_kernel_group_f32+0x114>
 8001064:	ed94 1a00 	vldr	s2, [r4]
 8001068:	1d24      	adds	r4, r4, #4
 800106a:	edd5 1a00 	vldr	s3, [r5]
 800106e:	1d2d      	adds	r5, r5, #4
 8001070:	455d      	cmp	r5, fp
 8001072:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001076:	d3d7      	bcc.n	8001028 <ai_conv2d_kernel_group_f32+0xc4>
 8001078:	f1bc 0c01 	subs.w	ip, ip, #1
 800107c:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001080:	d1ce      	bne.n	8001020 <ai_conv2d_kernel_group_f32+0xbc>
 8001082:	f1be 0e01 	subs.w	lr, lr, #1
 8001086:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800108a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800108e:	d1c3      	bne.n	8001018 <ai_conv2d_kernel_group_f32+0xb4>
 8001090:	1d36      	adds	r6, r6, #4
 8001092:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001096:	edc7 0a00 	vstr	s1, [r7]
 800109a:	1d3f      	adds	r7, r7, #4
 800109c:	1e52      	subs	r2, r2, #1
 800109e:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80010a2:	f10a 0a01 	add.w	sl, sl, #1
 80010a6:	d1ad      	bne.n	8001004 <ai_conv2d_kernel_group_f32+0xa0>
 80010a8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80010ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80010b0:	9d01      	ldr	r5, [sp, #4]
 80010b2:	9f00      	ldr	r7, [sp, #0]
 80010b4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80010b8:	1e7f      	subs	r7, r7, #1
 80010ba:	9700      	str	r7, [sp, #0]
 80010bc:	d192      	bne.n	8000fe4 <ai_conv2d_kernel_group_f32+0x80>
 80010be:	b005      	add	sp, #20
 80010c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080010c4 <.text_6>:
 80010c4:	00000000 	.word	0x00000000

080010c8 <ai_conv2d_kernel_f32>:
 80010c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010cc:	b08d      	sub	sp, #52	; 0x34
 80010ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80010d0:	b904      	cbnz	r4, 80010d4 <ai_conv2d_kernel_f32+0xc>
 80010d2:	460c      	mov	r4, r1
 80010d4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80010d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80010d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80010dc:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 80010e0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80010e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80010e4:	1bbf      	subs	r7, r7, r6
 80010e6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80010e8:	f1b8 0f01 	cmp.w	r8, #1
 80010ec:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80010f0:	ebae 0e05 	sub.w	lr, lr, r5
 80010f4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80010f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80010fc:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8001100:	d114      	bne.n	800112c <ai_conv2d_kernel_f32+0x64>
 8001102:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8001106:	9508      	str	r5, [sp, #32]
 8001108:	9707      	str	r7, [sp, #28]
 800110a:	9001      	str	r0, [sp, #4]
 800110c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800110e:	9606      	str	r6, [sp, #24]
 8001110:	f8cd b014 	str.w	fp, [sp, #20]
 8001114:	f8cd a010 	str.w	sl, [sp, #16]
 8001118:	f8cd 900c 	str.w	r9, [sp, #12]
 800111c:	f8cd c008 	str.w	ip, [sp, #8]
 8001120:	9400      	str	r4, [sp, #0]
 8001122:	f7ff fdf7 	bl	8000d14 <ai_conv2d_kernel_simple_f32>
 8001126:	b00d      	add	sp, #52	; 0x34
 8001128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800112c:	4580      	cmp	r8, r0
 800112e:	d114      	bne.n	800115a <ai_conv2d_kernel_f32+0x92>
 8001130:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8001134:	9508      	str	r5, [sp, #32]
 8001136:	9707      	str	r7, [sp, #28]
 8001138:	9001      	str	r0, [sp, #4]
 800113a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800113c:	9606      	str	r6, [sp, #24]
 800113e:	f8cd b014 	str.w	fp, [sp, #20]
 8001142:	f8cd a010 	str.w	sl, [sp, #16]
 8001146:	f8cd 900c 	str.w	r9, [sp, #12]
 800114a:	f8cd c008 	str.w	ip, [sp, #8]
 800114e:	9400      	str	r4, [sp, #0]
 8001150:	f7ff fe68 	bl	8000e24 <ai_conv2d_kernel_depthwise_f32>
 8001154:	b00d      	add	sp, #52	; 0x34
 8001156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800115e:	9509      	str	r5, [sp, #36]	; 0x24
 8001160:	9708      	str	r7, [sp, #32]
 8001162:	9001      	str	r0, [sp, #4]
 8001164:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001166:	9607      	str	r6, [sp, #28]
 8001168:	f8cd 8018 	str.w	r8, [sp, #24]
 800116c:	f8cd b014 	str.w	fp, [sp, #20]
 8001170:	f8cd a010 	str.w	sl, [sp, #16]
 8001174:	f8cd 900c 	str.w	r9, [sp, #12]
 8001178:	f8cd c008 	str.w	ip, [sp, #8]
 800117c:	9400      	str	r4, [sp, #0]
 800117e:	f7ff fef1 	bl	8000f64 <ai_conv2d_kernel_group_f32>
 8001182:	b00d      	add	sp, #52	; 0x34
 8001184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001188 <func_dummy>:
 8001188:	4770      	bx	lr
	...

0800118c <ai_dict8_dot_array_f32>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	4604      	mov	r4, r0
 8001190:	9805      	ldr	r0, [sp, #20]
 8001192:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8001196:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80014fc <.text_11>
 800119a:	3d20      	subs	r5, #32
 800119c:	2808      	cmp	r0, #8
 800119e:	d22e      	bcs.n	80011fe <ai_dict8_dot_array_f32+0x72>
 80011a0:	3520      	adds	r5, #32
 80011a2:	42ab      	cmp	r3, r5
 80011a4:	d224      	bcs.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 80011a6:	7808      	ldrb	r0, [r1, #0]
 80011a8:	ed93 1a00 	vldr	s2, [r3]
 80011ac:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80011b0:	1d18      	adds	r0, r3, #4
 80011b2:	42a8      	cmp	r0, r5
 80011b4:	edd6 0a00 	vldr	s1, [r6]
 80011b8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80011bc:	d218      	bcs.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 80011be:	784b      	ldrb	r3, [r1, #1]
 80011c0:	ed90 1a00 	vldr	s2, [r0]
 80011c4:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80011c8:	1d00      	adds	r0, r0, #4
 80011ca:	42a8      	cmp	r0, r5
 80011cc:	edd6 0a00 	vldr	s1, [r6]
 80011d0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80011d4:	d20c      	bcs.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 80011d6:	788b      	ldrb	r3, [r1, #2]
 80011d8:	1cc9      	adds	r1, r1, #3
 80011da:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80011de:	1d03      	adds	r3, r0, #4
 80011e0:	42ab      	cmp	r3, r5
 80011e2:	ed90 1a00 	vldr	s2, [r0]
 80011e6:	edd6 0a00 	vldr	s1, [r6]
 80011ea:	ee00 0a81 	vmla.f32	s0, s1, s2
 80011ee:	d3da      	bcc.n	80011a6 <ai_dict8_dot_array_f32+0x1a>
 80011f0:	edd4 1a00 	vldr	s3, [r4]
 80011f4:	ee31 0a80 	vadd.f32	s0, s3, s0
 80011f8:	ed84 0a00 	vstr	s0, [r4]
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	f001 0003 	and.w	r0, r1, #3
 8001202:	2803      	cmp	r0, #3
 8001204:	d8f4      	bhi.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 8001206:	e8df f000 	tbb	[pc, r0]
 800120a:	3503      	.short	0x3503
 800120c:	4b40      	.short	0x4b40
 800120e:	e7ef      	b.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 8001210:	429d      	cmp	r5, r3
 8001212:	f080 80d4 	bcs.w	80013be <ai_dict8_dot_array_f32+0x232>
 8001216:	3520      	adds	r5, #32
 8001218:	42ab      	cmp	r3, r5
 800121a:	d2e9      	bcs.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 800121c:	780e      	ldrb	r6, [r1, #0]
 800121e:	1d18      	adds	r0, r3, #4
 8001220:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8001224:	42a8      	cmp	r0, r5
 8001226:	ed93 1a00 	vldr	s2, [r3]
 800122a:	edd7 0a00 	vldr	s1, [r7]
 800122e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001232:	d2dd      	bcs.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 8001234:	784b      	ldrb	r3, [r1, #1]
 8001236:	ed90 1a00 	vldr	s2, [r0]
 800123a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800123e:	1d00      	adds	r0, r0, #4
 8001240:	42a8      	cmp	r0, r5
 8001242:	edd6 0a00 	vldr	s1, [r6]
 8001246:	ee00 0a81 	vmla.f32	s0, s1, s2
 800124a:	d2d1      	bcs.n	80011f0 <ai_dict8_dot_array_f32+0x64>
 800124c:	788b      	ldrb	r3, [r1, #2]
 800124e:	1cc9      	adds	r1, r1, #3
 8001250:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001254:	1d03      	adds	r3, r0, #4
 8001256:	42ab      	cmp	r3, r5
 8001258:	ed90 1a00 	vldr	s2, [r0]
 800125c:	edd6 0a00 	vldr	s1, [r6]
 8001260:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001264:	d3da      	bcc.n	800121c <ai_dict8_dot_array_f32+0x90>
 8001266:	edd4 1a00 	vldr	s3, [r4]
 800126a:	ee31 0a80 	vadd.f32	s0, s3, s0
 800126e:	ed84 0a00 	vstr	s0, [r4]
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001278:	ed93 1a00 	vldr	s2, [r3]
 800127c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001280:	1d1b      	adds	r3, r3, #4
 8001282:	edd6 0a00 	vldr	s1, [r6]
 8001286:	ee00 0a81 	vmla.f32	s0, s1, s2
 800128a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800128e:	ed93 1a00 	vldr	s2, [r3]
 8001292:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001296:	1d1b      	adds	r3, r3, #4
 8001298:	edd6 0a00 	vldr	s1, [r6]
 800129c:	ee00 0a81 	vmla.f32	s0, s1, s2
 80012a0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80012a4:	ed93 1a00 	vldr	s2, [r3]
 80012a8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80012ac:	1d1b      	adds	r3, r3, #4
 80012ae:	429d      	cmp	r5, r3
 80012b0:	edd6 0a00 	vldr	s1, [r6]
 80012b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80012b8:	d34f      	bcc.n	800135a <ai_dict8_dot_array_f32+0x1ce>
 80012ba:	78cf      	ldrb	r7, [r1, #3]
 80012bc:	f891 e000 	ldrb.w	lr, [r1]
 80012c0:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80012c4:	788f      	ldrb	r7, [r1, #2]
 80012c6:	f103 0010 	add.w	r0, r3, #16
 80012ca:	ed93 4a00 	vldr	s8, [r3]
 80012ce:	ed93 3a01 	vldr	s6, [r3, #4]
 80012d2:	ed93 2a02 	vldr	s4, [r3, #8]
 80012d6:	eddc 0a00 	vldr	s1, [ip]
 80012da:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80012de:	784f      	ldrb	r7, [r1, #1]
 80012e0:	ed93 1a03 	vldr	s2, [r3, #12]
 80012e4:	790b      	ldrb	r3, [r1, #4]
 80012e6:	eddc 1a00 	vldr	s3, [ip]
 80012ea:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80012ee:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 80012f2:	edd7 3a00 	vldr	s7, [r7]
 80012f6:	794f      	ldrb	r7, [r1, #5]
 80012f8:	ee03 0a84 	vmla.f32	s0, s7, s8
 80012fc:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001300:	eddc 2a00 	vldr	s5, [ip]
 8001304:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001308:	ee02 0a83 	vmla.f32	s0, s5, s6
 800130c:	798b      	ldrb	r3, [r1, #6]
 800130e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001312:	79cf      	ldrb	r7, [r1, #7]
 8001314:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001318:	3108      	adds	r1, #8
 800131a:	eddc 0a00 	vldr	s1, [ip]
 800131e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001322:	ed9e 1a00 	vldr	s2, [lr]
 8001326:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800132a:	ed90 4a00 	vldr	s8, [r0]
 800132e:	f100 0310 	add.w	r3, r0, #16
 8001332:	edd0 3a01 	vldr	s7, [r0, #4]
 8001336:	429d      	cmp	r5, r3
 8001338:	ee00 0a84 	vmla.f32	s0, s1, s8
 800133c:	eddc 1a00 	vldr	s3, [ip]
 8001340:	ed90 3a02 	vldr	s6, [r0, #8]
 8001344:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001348:	ed9e 2a00 	vldr	s4, [lr]
 800134c:	edd0 2a03 	vldr	s5, [r0, #12]
 8001350:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001354:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001358:	d2af      	bcs.n	80012ba <ai_dict8_dot_array_f32+0x12e>
 800135a:	3520      	adds	r5, #32
 800135c:	42ab      	cmp	r3, r5
 800135e:	f4bf af47 	bcs.w	80011f0 <ai_dict8_dot_array_f32+0x64>
 8001362:	7808      	ldrb	r0, [r1, #0]
 8001364:	ed93 1a00 	vldr	s2, [r3]
 8001368:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800136c:	1d18      	adds	r0, r3, #4
 800136e:	42a8      	cmp	r0, r5
 8001370:	edd6 0a00 	vldr	s1, [r6]
 8001374:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001378:	f4bf af3a 	bcs.w	80011f0 <ai_dict8_dot_array_f32+0x64>
 800137c:	784b      	ldrb	r3, [r1, #1]
 800137e:	ed90 1a00 	vldr	s2, [r0]
 8001382:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001386:	1d00      	adds	r0, r0, #4
 8001388:	42a8      	cmp	r0, r5
 800138a:	edd6 0a00 	vldr	s1, [r6]
 800138e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001392:	f4bf af2d 	bcs.w	80011f0 <ai_dict8_dot_array_f32+0x64>
 8001396:	788b      	ldrb	r3, [r1, #2]
 8001398:	1cc9      	adds	r1, r1, #3
 800139a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800139e:	1d03      	adds	r3, r0, #4
 80013a0:	42ab      	cmp	r3, r5
 80013a2:	ed90 1a00 	vldr	s2, [r0]
 80013a6:	edd6 0a00 	vldr	s1, [r6]
 80013aa:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013ae:	d3d8      	bcc.n	8001362 <ai_dict8_dot_array_f32+0x1d6>
 80013b0:	edd4 1a00 	vldr	s3, [r4]
 80013b4:	ee31 0a80 	vadd.f32	s0, s3, s0
 80013b8:	ed84 0a00 	vstr	s0, [r4]
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	78cf      	ldrb	r7, [r1, #3]
 80013c0:	f891 e000 	ldrb.w	lr, [r1]
 80013c4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80013c8:	788f      	ldrb	r7, [r1, #2]
 80013ca:	f103 0010 	add.w	r0, r3, #16
 80013ce:	ed93 4a00 	vldr	s8, [r3]
 80013d2:	ed93 3a01 	vldr	s6, [r3, #4]
 80013d6:	ed93 2a02 	vldr	s4, [r3, #8]
 80013da:	eddc 0a00 	vldr	s1, [ip]
 80013de:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80013e2:	784f      	ldrb	r7, [r1, #1]
 80013e4:	ed93 1a03 	vldr	s2, [r3, #12]
 80013e8:	790b      	ldrb	r3, [r1, #4]
 80013ea:	eddc 1a00 	vldr	s3, [ip]
 80013ee:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80013f2:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 80013f6:	edd7 3a00 	vldr	s7, [r7]
 80013fa:	794f      	ldrb	r7, [r1, #5]
 80013fc:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001400:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001404:	eddc 2a00 	vldr	s5, [ip]
 8001408:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800140c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001410:	798b      	ldrb	r3, [r1, #6]
 8001412:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001416:	79cf      	ldrb	r7, [r1, #7]
 8001418:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141c:	3108      	adds	r1, #8
 800141e:	eddc 0a00 	vldr	s1, [ip]
 8001422:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001426:	ed9e 1a00 	vldr	s2, [lr]
 800142a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800142e:	ed90 4a00 	vldr	s8, [r0]
 8001432:	f100 0310 	add.w	r3, r0, #16
 8001436:	edd0 3a01 	vldr	s7, [r0, #4]
 800143a:	429d      	cmp	r5, r3
 800143c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001440:	eddc 1a00 	vldr	s3, [ip]
 8001444:	ed90 3a02 	vldr	s6, [r0, #8]
 8001448:	ee01 0a23 	vmla.f32	s0, s2, s7
 800144c:	ed9e 2a00 	vldr	s4, [lr]
 8001450:	edd0 2a03 	vldr	s5, [r0, #12]
 8001454:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001458:	ee02 0a22 	vmla.f32	s0, s4, s5
 800145c:	d2af      	bcs.n	80013be <ai_dict8_dot_array_f32+0x232>
 800145e:	e6da      	b.n	8001216 <ai_dict8_dot_array_f32+0x8a>

08001460 <ai_dict4_dot_array_f32>:
 8001460:	b4f0      	push	{r4, r5, r6, r7}
 8001462:	9c04      	ldr	r4, [sp, #16]
 8001464:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80014fc <.text_11>
 8001468:	0865      	lsrs	r5, r4, #1
 800146a:	006d      	lsls	r5, r5, #1
 800146c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001470:	42ab      	cmp	r3, r5
 8001472:	d22f      	bcs.n	80014d4 <ai_dict4_dot_array_f32+0x74>
 8001474:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001478:	ed93 2a00 	vldr	s4, [r3]
 800147c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001480:	3308      	adds	r3, #8
 8001482:	f006 070f 	and.w	r7, r6, #15
 8001486:	0936      	lsrs	r6, r6, #4
 8001488:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800148c:	42ab      	cmp	r3, r5
 800148e:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001492:	edd6 1a00 	vldr	s3, [r6]
 8001496:	ee01 0a82 	vmla.f32	s0, s3, s4
 800149a:	eddc 0a00 	vldr	s1, [ip]
 800149e:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014a2:	d217      	bcs.n	80014d4 <ai_dict4_dot_array_f32+0x74>
 80014a4:	f811 6b01 	ldrb.w	r6, [r1], #1
 80014a8:	ed93 2a00 	vldr	s4, [r3]
 80014ac:	ed93 1a01 	vldr	s2, [r3, #4]
 80014b0:	3308      	adds	r3, #8
 80014b2:	f006 070f 	and.w	r7, r6, #15
 80014b6:	0936      	lsrs	r6, r6, #4
 80014b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80014bc:	42ab      	cmp	r3, r5
 80014be:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80014c2:	edd6 1a00 	vldr	s3, [r6]
 80014c6:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014ca:	eddc 0a00 	vldr	s1, [ip]
 80014ce:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014d2:	d3cf      	bcc.n	8001474 <ai_dict4_dot_array_f32+0x14>
 80014d4:	07e4      	lsls	r4, r4, #31
 80014d6:	d509      	bpl.n	80014ec <ai_dict4_dot_array_f32+0x8c>
 80014d8:	7809      	ldrb	r1, [r1, #0]
 80014da:	ed93 1a00 	vldr	s2, [r3]
 80014de:	0909      	lsrs	r1, r1, #4
 80014e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80014e4:	edd2 0a00 	vldr	s1, [r2]
 80014e8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014ec:	edd0 1a00 	vldr	s3, [r0]
 80014f0:	ee31 0a80 	vadd.f32	s0, s3, s0
 80014f4:	ed80 0a00 	vstr	s0, [r0]
 80014f8:	bcf0      	pop	{r4, r5, r6, r7}
 80014fa:	4770      	bx	lr

080014fc <.text_11>:
 80014fc:	00000000 	.word	0x00000000

08001500 <forward_conv2d>:
 8001500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001504:	b09b      	sub	sp, #108	; 0x6c
 8001506:	4605      	mov	r5, r0
 8001508:	6968      	ldr	r0, [r5, #20]
 800150a:	6800      	ldr	r0, [r0, #0]
 800150c:	6801      	ldr	r1, [r0, #0]
 800150e:	6842      	ldr	r2, [r0, #4]
 8001510:	6880      	ldr	r0, [r0, #8]
 8001512:	680f      	ldr	r7, [r1, #0]
 8001514:	f8d2 a000 	ldr.w	sl, [r2]
 8001518:	f8d0 e000 	ldr.w	lr, [r0]
 800151c:	6840      	ldr	r0, [r0, #4]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	920d      	str	r2, [sp, #52]	; 0x34
 8001522:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001526:	2800      	cmp	r0, #0
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	8c2b      	ldrh	r3, [r5, #32]
 800152c:	f8da 1010 	ldr.w	r1, [sl, #16]
 8001530:	f8da 900c 	ldr.w	r9, [sl, #12]
 8001534:	693e      	ldr	r6, [r7, #16]
 8001536:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800153a:	930c      	str	r3, [sp, #48]	; 0x30
 800153c:	8cac      	ldrh	r4, [r5, #36]	; 0x24
 800153e:	940f      	str	r4, [sp, #60]	; 0x3c
 8001540:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8001542:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001544:	f8de b00c 	ldr.w	fp, [lr, #12]
 8001548:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800154c:	f8de 3008 	ldr.w	r3, [lr, #8]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	683f      	ldr	r7, [r7, #0]
 8001554:	f8de e000 	ldr.w	lr, [lr]
 8001558:	69ab      	ldr	r3, [r5, #24]
 800155a:	b2a4      	uxth	r4, r4
 800155c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001560:	bf1a      	itte	ne
 8001562:	6800      	ldrne	r0, [r0, #0]
 8001564:	6887      	ldrne	r7, [r0, #8]
 8001566:	2700      	moveq	r7, #0
 8001568:	f8da 0000 	ldr.w	r0, [sl]
 800156c:	f8de e008 	ldr.w	lr, [lr, #8]
 8001570:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001574:	69e8      	ldr	r0, [r5, #28]
 8001576:	2800      	cmp	r0, #0
 8001578:	bf14      	ite	ne
 800157a:	4605      	movne	r5, r0
 800157c:	f8df 576c 	ldreq.w	r5, [pc, #1900]	; 8001cec <.text_17>
 8001580:	4264      	negs	r4, r4
 8001582:	2900      	cmp	r1, #0
 8001584:	940b      	str	r4, [sp, #44]	; 0x2c
 8001586:	d06f      	beq.n	8001668 <forward_conv2d+0x168>
 8001588:	4252      	negs	r2, r2
 800158a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 800158e:	9219      	str	r2, [sp, #100]	; 0x64
 8001590:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8001594:	9615      	str	r6, [sp, #84]	; 0x54
 8001596:	9110      	str	r1, [sp, #64]	; 0x40
 8001598:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800159a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800159c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800159e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80015a0:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80015a4:	4240      	negs	r0, r0
 80015a6:	bfd8      	it	le
 80015a8:	2000      	movle	r0, #0
 80015aa:	1a89      	subs	r1, r1, r2
 80015ac:	4559      	cmp	r1, fp
 80015ae:	fb08 9202 	mla	r2, r8, r2, r9
 80015b2:	bf28      	it	cs
 80015b4:	4659      	movcs	r1, fp
 80015b6:	2c00      	cmp	r4, #0
 80015b8:	d04e      	beq.n	8001658 <forward_conv2d+0x158>
 80015ba:	9402      	str	r4, [sp, #8]
 80015bc:	9c01      	ldr	r4, [sp, #4]
 80015be:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80015c2:	9e00      	ldr	r6, [sp, #0]
 80015c4:	9314      	str	r3, [sp, #80]	; 0x50
 80015c6:	4693      	mov	fp, r2
 80015c8:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80015cc:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80015d0:	9711      	str	r7, [sp, #68]	; 0x44
 80015d2:	9018      	str	r0, [sp, #96]	; 0x60
 80015d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80015d6:	9f02      	ldr	r7, [sp, #8]
 80015d8:	f1d9 0000 	rsbs	r0, r9, #0
 80015dc:	eba8 0109 	sub.w	r1, r8, r9
 80015e0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80015e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80015e6:	f8cd c000 	str.w	ip, [sp]
 80015ea:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80015ee:	bfd8      	it	le
 80015f0:	2000      	movle	r0, #0
 80015f2:	42b1      	cmp	r1, r6
 80015f4:	9009      	str	r0, [sp, #36]	; 0x24
 80015f6:	9207      	str	r2, [sp, #28]
 80015f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80015fa:	9306      	str	r3, [sp, #24]
 80015fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015fe:	bf28      	it	cs
 8001600:	4631      	movcs	r1, r6
 8001602:	910a      	str	r1, [sp, #40]	; 0x28
 8001604:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001606:	9108      	str	r1, [sp, #32]
 8001608:	4458      	add	r0, fp
 800160a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800160e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001610:	9201      	str	r2, [sp, #4]
 8001612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001614:	fb0c f000 	mul.w	r0, ip, r0
 8001618:	9105      	str	r1, [sp, #20]
 800161a:	eb0e 0280 	add.w	r2, lr, r0, lsl #2
 800161e:	9604      	str	r6, [sp, #16]
 8001620:	f8cd 800c 	str.w	r8, [sp, #12]
 8001624:	4651      	mov	r1, sl
 8001626:	9402      	str	r4, [sp, #8]
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fd4d 	bl	80010c8 <ai_conv2d_kernel_f32>
 800162e:	4622      	mov	r2, r4
 8001630:	4651      	mov	r1, sl
 8001632:	4650      	mov	r0, sl
 8001634:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8001638:	47a8      	blx	r5
 800163a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800163c:	1e7f      	subs	r7, r7, #1
 800163e:	4489      	add	r9, r1
 8001640:	448b      	add	fp, r1
 8001642:	d1c9      	bne.n	80015d8 <forward_conv2d+0xd8>
 8001644:	9401      	str	r4, [sp, #4]
 8001646:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800164a:	9600      	str	r6, [sp, #0]
 800164c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800164e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8001652:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 8001656:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800165a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800165c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800165e:	1851      	adds	r1, r2, r1
 8001660:	910b      	str	r1, [sp, #44]	; 0x2c
 8001662:	1e64      	subs	r4, r4, #1
 8001664:	9410      	str	r4, [sp, #64]	; 0x40
 8001666:	d197      	bne.n	8001598 <forward_conv2d+0x98>
 8001668:	b01b      	add	sp, #108	; 0x6c
 800166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001670 <forward_conv2d_nl_pool>:
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b0b5      	sub	sp, #212	; 0xd4
 8001676:	4602      	mov	r2, r0
 8001678:	6950      	ldr	r0, [r2, #20]
 800167a:	6800      	ldr	r0, [r0, #0]
 800167c:	6801      	ldr	r1, [r0, #0]
 800167e:	6843      	ldr	r3, [r0, #4]
 8001680:	6880      	ldr	r0, [r0, #8]
 8001682:	f8d1 b000 	ldr.w	fp, [r1]
 8001686:	a92d      	add	r1, sp, #180	; 0xb4
 8001688:	681f      	ldr	r7, [r3, #0]
 800168a:	f8d0 a000 	ldr.w	sl, [r0]
 800168e:	6843      	ldr	r3, [r0, #4]
 8001690:	f10b 0414 	add.w	r4, fp, #20
 8001694:	e894 5060 	ldmia.w	r4, {r5, r6, ip, lr}
 8001698:	e881 5060 	stmia.w	r1, {r5, r6, ip, lr}
 800169c:	f8db 8008 	ldr.w	r8, [fp, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	9102      	str	r1, [sp, #8]
 80016aa:	6938      	ldr	r0, [r7, #16]
 80016ac:	68fc      	ldr	r4, [r7, #12]
 80016ae:	941c      	str	r4, [sp, #112]	; 0x70
 80016b0:	f8db 5010 	ldr.w	r5, [fp, #16]
 80016b4:	950d      	str	r5, [sp, #52]	; 0x34
 80016b6:	f8db 400c 	ldr.w	r4, [fp, #12]
 80016ba:	9401      	str	r4, [sp, #4]
 80016bc:	8c15      	ldrh	r5, [r2, #32]
 80016be:	9512      	str	r5, [sp, #72]	; 0x48
 80016c0:	8c94      	ldrh	r4, [r2, #36]	; 0x24
 80016c2:	9411      	str	r4, [sp, #68]	; 0x44
 80016c4:	8d15      	ldrh	r5, [r2, #40]	; 0x28
 80016c6:	9510      	str	r5, [sp, #64]	; 0x40
 80016c8:	8d94      	ldrh	r4, [r2, #44]	; 0x2c
 80016ca:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 80016ce:	f8d2 e034 	ldr.w	lr, [r2, #52]	; 0x34
 80016d2:	6995      	ldr	r5, [r2, #24]
 80016d4:	950c      	str	r5, [sp, #48]	; 0x30
 80016d6:	f8da 6008 	ldr.w	r6, [sl, #8]
 80016da:	9600      	str	r6, [sp, #0]
 80016dc:	f8da 100c 	ldr.w	r1, [sl, #12]
 80016e0:	f8d2 9038 	ldr.w	r9, [r2, #56]	; 0x38
 80016e4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80016e8:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80016ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80016ec:	f8d2 9040 	ldr.w	r9, [r2, #64]	; 0x40
 80016f0:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 80016f4:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80016f6:	961e      	str	r6, [sp, #120]	; 0x78
 80016f8:	f8d7 c020 	ldr.w	ip, [r7, #32]
 80016fc:	6c95      	ldr	r5, [r2, #72]	; 0x48
 80016fe:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 8001700:	fb0c fc00 	mul.w	ip, ip, r0
 8001704:	f8cd c010 	str.w	ip, [sp, #16]
 8001708:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800170c:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 8001710:	f8db b000 	ldr.w	fp, [fp]
 8001714:	f8db c008 	ldr.w	ip, [fp, #8]
 8001718:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800171c:	f8da a000 	ldr.w	sl, [sl]
 8001720:	f8da b008 	ldr.w	fp, [sl, #8]
 8001724:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8001728:	bf1a      	itte	ne
 800172a:	681b      	ldrne	r3, [r3, #0]
 800172c:	f8d3 b008 	ldrne.w	fp, [r3, #8]
 8001730:	f04f 0b00 	moveq.w	fp, #0
 8001734:	69d3      	ldr	r3, [r2, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf12      	itee	ne
 800173a:	930e      	strne	r3, [sp, #56]	; 0x38
 800173c:	f8df 95ac 	ldreq.w	r9, [pc, #1452]	; 8001cec <.text_17>
 8001740:	f8cd 9038 	streq.w	r9, [sp, #56]	; 0x38
 8001744:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001746:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800174a:	9217      	str	r2, [sp, #92]	; 0x5c
 800174c:	9b00      	ldr	r3, [sp, #0]
 800174e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001750:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8001754:	f8dd a010 	ldr.w	sl, [sp, #16]
 8001758:	4276      	negs	r6, r6
 800175a:	eba9 0903 	sub.w	r9, r9, r3
 800175e:	4491      	add	r9, r2
 8001760:	fa19 f288 	uxtah	r2, r9, r8
 8001764:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8001768:	f8d7 9000 	ldr.w	r9, [r7]
 800176c:	fbb2 f3fc 	udiv	r3, r2, ip
 8001770:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001772:	1c5b      	adds	r3, r3, #1
 8001774:	eba8 0801 	sub.w	r8, r8, r1
 8001778:	44a0      	add	r8, r4
 800177a:	fa18 fe8e 	uxtah	lr, r8, lr
 800177e:	2800      	cmp	r0, #0
 8001780:	fbbe fcf2 	udiv	ip, lr, r2
 8001784:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8001788:	f10c 0c01 	add.w	ip, ip, #1
 800178c:	44f2      	add	sl, lr
 800178e:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 8001792:	f000 8125 	beq.w	80019e0 <forward_conv2d_nl_pool+0x370>
 8001796:	426d      	negs	r5, r5
 8001798:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800179c:	9534      	str	r5, [sp, #208]	; 0xd0
 800179e:	9615      	str	r6, [sp, #84]	; 0x54
 80017a0:	9025      	str	r0, [sp, #148]	; 0x94
 80017a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80017a4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80017a6:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 80017a8:	2d00      	cmp	r5, #0
 80017aa:	462a      	mov	r2, r5
 80017ac:	bfcc      	ite	gt
 80017ae:	46a9      	movgt	r9, r5
 80017b0:	f04f 0900 	movle.w	r9, #0
 80017b4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80017b6:	18aa      	adds	r2, r5, r2
 80017b8:	4290      	cmp	r0, r2
 80017ba:	bf32      	itee	cc
 80017bc:	4684      	movcc	ip, r0
 80017be:	f8dd c054 	ldrcs.w	ip, [sp, #84]	; 0x54
 80017c2:	44ac      	addcs	ip, r5
 80017c4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80017c6:	2800      	cmp	r0, #0
 80017c8:	f000 8101 	beq.w	80019ce <forward_conv2d_nl_pool+0x35e>
 80017cc:	eba9 0a0c 	sub.w	sl, r9, ip
 80017d0:	942c      	str	r4, [sp, #176]	; 0xb0
 80017d2:	f8cd a0cc 	str.w	sl, [sp, #204]	; 0xcc
 80017d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80017d8:	9326      	str	r3, [sp, #152]	; 0x98
 80017da:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 80017de:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80017e2:	9714      	str	r7, [sp, #80]	; 0x50
 80017e4:	9023      	str	r0, [sp, #140]	; 0x8c
 80017e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80017e8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80017ea:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80017ec:	f8dd a0cc 	ldr.w	sl, [sp, #204]	; 0xcc
 80017f0:	46f0      	mov	r8, lr
 80017f2:	f04f 0900 	mov.w	r9, #0
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	4623      	mov	r3, r4
 80017fa:	bfcc      	ite	gt
 80017fc:	4626      	movgt	r6, r4
 80017fe:	2600      	movle	r6, #0
 8001800:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001802:	18e3      	adds	r3, r4, r3
 8001804:	4298      	cmp	r0, r3
 8001806:	bf32      	itee	cc
 8001808:	4603      	movcc	r3, r0
 800180a:	9b14      	ldrcs	r3, [sp, #80]	; 0x50
 800180c:	18e3      	addcs	r3, r4, r3
 800180e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001810:	1af4      	subs	r4, r6, r3
 8001812:	fb04 fa0a 	mul.w	sl, r4, sl
 8001816:	42a8      	cmp	r0, r5
 8001818:	f280 80cb 	bge.w	80019b2 <forward_conv2d_nl_pool+0x342>
 800181c:	fb02 f700 	mul.w	r7, r2, r0
 8001820:	4628      	mov	r0, r5
 8001822:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8001824:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001826:	1b3c      	subs	r4, r7, r4
 8001828:	9211      	str	r2, [sp, #68]	; 0x44
 800182a:	9622      	str	r6, [sp, #136]	; 0x88
 800182c:	1b45      	subs	r5, r0, r5
 800182e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001830:	9328      	str	r3, [sp, #160]	; 0xa0
 8001832:	9413      	str	r4, [sp, #76]	; 0x4c
 8001834:	9520      	str	r5, [sp, #128]	; 0x80
 8001836:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800183a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800183c:	4252      	negs	r2, r2
 800183e:	bfd8      	it	le
 8001840:	2200      	movle	r2, #0
 8001842:	1b1b      	subs	r3, r3, r4
 8001844:	428b      	cmp	r3, r1
 8001846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001848:	bf3a      	itte	cc
 800184a:	9e0d      	ldrcc	r6, [sp, #52]	; 0x34
 800184c:	1b35      	subcc	r5, r6, r4
 800184e:	460d      	movcs	r5, r1
 8001850:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001852:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001854:	4344      	muls	r4, r0
 8001856:	1ae3      	subs	r3, r4, r3
 8001858:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800185a:	42a6      	cmp	r6, r4
 800185c:	f280 809e 	bge.w	800199c <forward_conv2d_nl_pool+0x32c>
 8001860:	1aad      	subs	r5, r5, r2
 8001862:	eba4 0c06 	sub.w	ip, r4, r6
 8001866:	9532      	str	r5, [sp, #200]	; 0xc8
 8001868:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800186a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800186c:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8001870:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8001874:	9c03      	ldr	r4, [sp, #12]
 8001876:	9012      	str	r0, [sp, #72]	; 0x48
 8001878:	9f00      	ldr	r7, [sp, #0]
 800187a:	4375      	muls	r5, r6
 800187c:	9e01      	ldr	r6, [sp, #4]
 800187e:	9531      	str	r5, [sp, #196]	; 0xc4
 8001880:	9d02      	ldr	r5, [sp, #8]
 8001882:	911d      	str	r1, [sp, #116]	; 0x74
 8001884:	469a      	mov	sl, r3
 8001886:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 800188a:	46e3      	mov	fp, ip
 800188c:	921f      	str	r2, [sp, #124]	; 0x7c
 800188e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001890:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 8001894:	f1da 0100 	rsbs	r1, sl, #0
 8001898:	eba6 000a 	sub.w	r0, r6, sl
 800189c:	bfd8      	it	le
 800189e:	2100      	movle	r1, #0
 80018a0:	eb01 0c0a 	add.w	ip, r1, sl
 80018a4:	42b8      	cmp	r0, r7
 80018a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80018a8:	fb0e 220c 	mla	r2, lr, ip, r2
 80018ac:	4402      	add	r2, r0
 80018ae:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80018b0:	bf34      	ite	cc
 80018b2:	eba6 030a 	subcc.w	r3, r6, sl
 80018b6:	463b      	movcs	r3, r7
 80018b8:	b900      	cbnz	r0, 80018bc <forward_conv2d_nl_pool+0x24c>
 80018ba:	4640      	mov	r0, r8
 80018bc:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80018c0:	1a5b      	subs	r3, r3, r1
 80018c2:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 80018c6:	f1be 0f01 	cmp.w	lr, #1
 80018ca:	d116      	bne.n	80018fa <forward_conv2d_nl_pool+0x28a>
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
 80018ce:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 80018d2:	f8cd c01c 	str.w	ip, [sp, #28]
 80018d6:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 80018da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018dc:	9108      	str	r1, [sp, #32]
 80018de:	9000      	str	r0, [sp, #0]
 80018e0:	4641      	mov	r1, r8
 80018e2:	f8cd c018 	str.w	ip, [sp, #24]
 80018e6:	2000      	movs	r0, #0
 80018e8:	f8cd e014 	str.w	lr, [sp, #20]
 80018ec:	9704      	str	r7, [sp, #16]
 80018ee:	9603      	str	r6, [sp, #12]
 80018f0:	9502      	str	r5, [sp, #8]
 80018f2:	9401      	str	r4, [sp, #4]
 80018f4:	f7ff fa0e 	bl	8000d14 <ai_conv2d_kernel_simple_f32>
 80018f8:	e02a      	b.n	8001950 <forward_conv2d_nl_pool+0x2e0>
 80018fa:	45a6      	cmp	lr, r4
 80018fc:	d112      	bne.n	8001924 <forward_conv2d_nl_pool+0x2b4>
 80018fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001902:	9108      	str	r1, [sp, #32]
 8001904:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001906:	9305      	str	r3, [sp, #20]
 8001908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800190a:	9106      	str	r1, [sp, #24]
 800190c:	4641      	mov	r1, r8
 800190e:	9000      	str	r0, [sp, #0]
 8001910:	2000      	movs	r0, #0
 8001912:	f8cd c01c 	str.w	ip, [sp, #28]
 8001916:	9704      	str	r7, [sp, #16]
 8001918:	9603      	str	r6, [sp, #12]
 800191a:	9502      	str	r5, [sp, #8]
 800191c:	9401      	str	r4, [sp, #4]
 800191e:	f7ff fa81 	bl	8000e24 <ai_conv2d_kernel_depthwise_f32>
 8001922:	e015      	b.n	8001950 <forward_conv2d_nl_pool+0x2e0>
 8001924:	930a      	str	r3, [sp, #40]	; 0x28
 8001926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001928:	9109      	str	r1, [sp, #36]	; 0x24
 800192a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800192c:	9306      	str	r3, [sp, #24]
 800192e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001930:	f8cd c020 	str.w	ip, [sp, #32]
 8001934:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8001938:	9107      	str	r1, [sp, #28]
 800193a:	4641      	mov	r1, r8
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	2000      	movs	r0, #0
 8001940:	f8cd c014 	str.w	ip, [sp, #20]
 8001944:	9704      	str	r7, [sp, #16]
 8001946:	9603      	str	r6, [sp, #12]
 8001948:	9502      	str	r5, [sp, #8]
 800194a:	9401      	str	r4, [sp, #4]
 800194c:	f7ff fb0a 	bl	8000f64 <ai_conv2d_kernel_group_f32>
 8001950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001952:	462a      	mov	r2, r5
 8001954:	4641      	mov	r1, r8
 8001956:	4640      	mov	r0, r8
 8001958:	f109 0901 	add.w	r9, r9, #1
 800195c:	4798      	blx	r3
 800195e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001960:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8001964:	462b      	mov	r3, r5
 8001966:	462a      	mov	r2, r5
 8001968:	4641      	mov	r1, r8
 800196a:	4548      	cmp	r0, r9
 800196c:	bf18      	it	ne
 800196e:	2000      	movne	r0, #0
 8001970:	9000      	str	r0, [sp, #0]
 8001972:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001974:	47e0      	blx	ip
 8001976:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001978:	f1bb 0b01 	subs.w	fp, fp, #1
 800197c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001980:	448a      	add	sl, r1
 8001982:	d184      	bne.n	800188e <forward_conv2d_nl_pool+0x21e>
 8001984:	9403      	str	r4, [sp, #12]
 8001986:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001988:	9502      	str	r5, [sp, #8]
 800198a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800198c:	9601      	str	r6, [sp, #4]
 800198e:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8001992:	9700      	str	r7, [sp, #0]
 8001994:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8001998:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800199c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800199e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80019a0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80019a2:	18e3      	adds	r3, r4, r3
 80019a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80019a6:	1e6d      	subs	r5, r5, #1
 80019a8:	9520      	str	r5, [sp, #128]	; 0x80
 80019aa:	f47f af44 	bne.w	8001836 <forward_conv2d_nl_pool+0x1c6>
 80019ae:	9012      	str	r0, [sp, #72]	; 0x48
 80019b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80019b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80019b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019b6:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80019b8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80019ba:	1818      	adds	r0, r3, r0
 80019bc:	9014      	str	r0, [sp, #80]	; 0x50
 80019be:	1e6d      	subs	r5, r5, #1
 80019c0:	44a6      	add	lr, r4
 80019c2:	9523      	str	r5, [sp, #140]	; 0x8c
 80019c4:	f47f af0f 	bne.w	80017e6 <forward_conv2d_nl_pool+0x176>
 80019c8:	9211      	str	r2, [sp, #68]	; 0x44
 80019ca:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80019cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80019d0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80019d2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80019d4:	18aa      	adds	r2, r5, r2
 80019d6:	9215      	str	r2, [sp, #84]	; 0x54
 80019d8:	1e76      	subs	r6, r6, #1
 80019da:	9625      	str	r6, [sp, #148]	; 0x94
 80019dc:	f47f aee1 	bne.w	80017a2 <forward_conv2d_nl_pool+0x132>
 80019e0:	b035      	add	sp, #212	; 0xd4
 80019e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019e8 <forward_dense>:
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ec:	b089      	sub	sp, #36	; 0x24
 80019ee:	6940      	ldr	r0, [r0, #20]
 80019f0:	f04f 0e00 	mov.w	lr, #0
 80019f4:	6800      	ldr	r0, [r0, #0]
 80019f6:	6801      	ldr	r1, [r0, #0]
 80019f8:	6842      	ldr	r2, [r0, #4]
 80019fa:	6880      	ldr	r0, [r0, #8]
 80019fc:	6805      	ldr	r5, [r0, #0]
 80019fe:	680e      	ldr	r6, [r1, #0]
 8001a00:	6844      	ldr	r4, [r0, #4]
 8001a02:	6817      	ldr	r7, [r2, #0]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	4350      	muls	r0, r2
 8001a10:	682a      	ldr	r2, [r5, #0]
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 8001a18:	f00a 0a03 	and.w	sl, sl, #3
 8001a1c:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8001a20:	0c5b      	lsrs	r3, r3, #17
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	fa29 f90a 	lsr.w	r9, r9, sl
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a30:	6836      	ldr	r6, [r6, #0]
 8001a32:	bf14      	ite	ne
 8001a34:	2b08      	cmpne	r3, #8
 8001a36:	f8d2 e00c 	ldreq.w	lr, [r2, #12]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	69ab      	ldr	r3, [r5, #24]
 8001a40:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001a44:	68b2      	ldr	r2, [r6, #8]
 8001a46:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8001a4a:	d067      	beq.n	8001b1c <forward_dense+0x134>
 8001a4c:	9507      	str	r5, [sp, #28]
 8001a4e:	9405      	str	r4, [sp, #20]
 8001a50:	9106      	str	r1, [sp, #24]
 8001a52:	f8cd e010 	str.w	lr, [sp, #16]
 8001a56:	9600      	str	r6, [sp, #0]
 8001a58:	9003      	str	r0, [sp, #12]
 8001a5a:	9807      	ldr	r0, [sp, #28]
 8001a5c:	9905      	ldr	r1, [sp, #20]
 8001a5e:	6804      	ldr	r4, [r0, #0]
 8001a60:	68a0      	ldr	r0, [r4, #8]
 8001a62:	b109      	cbz	r1, 8001a68 <forward_dense+0x80>
 8001a64:	680d      	ldr	r5, [r1, #0]
 8001a66:	68a9      	ldr	r1, [r5, #8]
 8001a68:	9c04      	ldr	r4, [sp, #16]
 8001a6a:	b994      	cbnz	r4, 8001a92 <forward_dense+0xaa>
 8001a6c:	9e00      	ldr	r6, [sp, #0]
 8001a6e:	45b1      	cmp	r9, r6
 8001a70:	d249      	bcs.n	8001b06 <forward_dense+0x11e>
 8001a72:	46b2      	mov	sl, r6
 8001a74:	4646      	mov	r6, r8
 8001a76:	464f      	mov	r7, r9
 8001a78:	461c      	mov	r4, r3
 8001a7a:	4615      	mov	r5, r2
 8001a7c:	4681      	mov	r9, r0
 8001a7e:	4688      	mov	r8, r1
 8001a80:	f1b8 0f00 	cmp.w	r8, #0
 8001a84:	bf19      	ittee	ne
 8001a86:	f858 0b04 	ldrne.w	r0, [r8], #4
 8001a8a:	9002      	strne	r0, [sp, #8]
 8001a8c:	2200      	moveq	r2, #0
 8001a8e:	9202      	streq	r2, [sp, #8]
 8001a90:	e029      	b.n	8001ae6 <forward_dense+0xfe>
 8001a92:	9c00      	ldr	r4, [sp, #0]
 8001a94:	45a1      	cmp	r9, r4
 8001a96:	d236      	bcs.n	8001b06 <forward_dense+0x11e>
 8001a98:	9c04      	ldr	r4, [sp, #16]
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4616      	mov	r6, r2
 8001a9e:	4682      	mov	sl, r0
 8001aa0:	468b      	mov	fp, r1
 8001aa2:	9f00      	ldr	r7, [sp, #0]
 8001aa4:	f1bb 0f00 	cmp.w	fp, #0
 8001aa8:	4633      	mov	r3, r6
 8001aaa:	a802      	add	r0, sp, #8
 8001aac:	bf19      	ittee	ne
 8001aae:	f85b 1b04 	ldrne.w	r1, [fp], #4
 8001ab2:	9102      	strne	r1, [sp, #8]
 8001ab4:	2200      	moveq	r2, #0
 8001ab6:	9202      	streq	r2, [sp, #8]
 8001ab8:	9901      	ldr	r1, [sp, #4]
 8001aba:	f8cd 8000 	str.w	r8, [sp]
 8001abe:	4622      	mov	r2, r4
 8001ac0:	2904      	cmp	r1, #4
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	d102      	bne.n	8001acc <forward_dense+0xe4>
 8001ac6:	f7ff fccb 	bl	8001460 <ai_dict4_dot_array_f32>
 8001aca:	e001      	b.n	8001ad0 <forward_dense+0xe8>
 8001acc:	f7ff fb5e 	bl	800118c <ai_dict8_dot_array_f32>
 8001ad0:	9a02      	ldr	r2, [sp, #8]
 8001ad2:	44aa      	add	sl, r5
 8001ad4:	f849 2b04 	str.w	r2, [r9], #4
 8001ad8:	45b9      	cmp	r9, r7
 8001ada:	d3e3      	bcc.n	8001aa4 <forward_dense+0xbc>
 8001adc:	9404      	str	r4, [sp, #16]
 8001ade:	462b      	mov	r3, r5
 8001ae0:	4632      	mov	r2, r6
 8001ae2:	9700      	str	r7, [sp, #0]
 8001ae4:	e00f      	b.n	8001b06 <forward_dense+0x11e>
 8001ae6:	4633      	mov	r3, r6
 8001ae8:	462a      	mov	r2, r5
 8001aea:	4649      	mov	r1, r9
 8001aec:	a802      	add	r0, sp, #8
 8001aee:	f000 ff8f 	bl	8002a10 <ai_math_dot_array>
 8001af2:	9802      	ldr	r0, [sp, #8]
 8001af4:	44a1      	add	r9, r4
 8001af6:	f847 0b04 	str.w	r0, [r7], #4
 8001afa:	4557      	cmp	r7, sl
 8001afc:	d3c0      	bcc.n	8001a80 <forward_dense+0x98>
 8001afe:	46b0      	mov	r8, r6
 8001b00:	4623      	mov	r3, r4
 8001b02:	46b9      	mov	r9, r7
 8001b04:	462a      	mov	r2, r5
 8001b06:	9900      	ldr	r1, [sp, #0]
 8001b08:	9c06      	ldr	r4, [sp, #24]
 8001b0a:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 8001b0e:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 8001b12:	9903      	ldr	r1, [sp, #12]
 8001b14:	9500      	str	r5, [sp, #0]
 8001b16:	1e49      	subs	r1, r1, #1
 8001b18:	9103      	str	r1, [sp, #12]
 8001b1a:	d19e      	bne.n	8001a5a <forward_dense+0x72>
 8001b1c:	b009      	add	sp, #36	; 0x24
 8001b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001b24 <arm_mat_gemm_f32>:
 8001b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b28:	b08a      	sub	sp, #40	; 0x28
 8001b2a:	469a      	mov	sl, r3
 8001b2c:	4615      	mov	r5, r2
 8001b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001b30:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8001b34:	686c      	ldr	r4, [r5, #4]
 8001b36:	9400      	str	r4, [sp, #0]
 8001b38:	468b      	mov	fp, r1
 8001b3a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001b3e:	f8cd e008 	str.w	lr, [sp, #8]
 8001b42:	8804      	ldrh	r4, [r0, #0]
 8001b44:	f8bb 1000 	ldrh.w	r1, [fp]
 8001b48:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8001b4c:	8840      	ldrh	r0, [r0, #2]
 8001b4e:	f8b5 e000 	ldrh.w	lr, [r5]
 8001b52:	886f      	ldrh	r7, [r5, #2]
 8001b54:	2500      	movs	r5, #0
 8001b56:	f8b3 9000 	ldrh.w	r9, [r3]
 8001b5a:	885e      	ldrh	r6, [r3, #2]
 8001b5c:	fa4f f38a 	sxtb.w	r3, sl
 8001b60:	f8db b004 	ldr.w	fp, [fp, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f8cd b014 	str.w	fp, [sp, #20]
 8001b6a:	f8cd b010 	str.w	fp, [sp, #16]
 8001b6e:	bf0c      	ite	eq
 8001b70:	46a0      	moveq	r8, r4
 8001b72:	4680      	movne	r8, r0
 8001b74:	2f01      	cmp	r7, #1
 8001b76:	bf0c      	ite	eq
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	2304      	movne	r3, #4
 8001b7c:	f1be 0f01 	cmp.w	lr, #1
 8001b80:	d104      	bne.n	8001b8c <arm_mat_gemm_f32+0x68>
 8001b82:	2f01      	cmp	r7, #1
 8001b84:	d007      	beq.n	8001b96 <arm_mat_gemm_f32+0x72>
 8001b86:	f1c6 0e00 	rsb	lr, r6, #0
 8001b8a:	e005      	b.n	8001b98 <arm_mat_gemm_f32+0x74>
 8001b8c:	2f01      	cmp	r7, #1
 8001b8e:	bf08      	it	eq
 8001b90:	f04f 0e01 	moveq.w	lr, #1
 8001b94:	d000      	beq.n	8001b98 <arm_mat_gemm_f32+0x74>
 8001b96:	46ae      	mov	lr, r5
 8001b98:	fa4f fb8a 	sxtb.w	fp, sl
 8001b9c:	fa0f fe8e 	sxth.w	lr, lr
 8001ba0:	f1bb 0f00 	cmp.w	fp, #0
 8001ba4:	f8cd e004 	str.w	lr, [sp, #4]
 8001ba8:	bf0c      	ite	eq
 8001baa:	46a3      	moveq	fp, r4
 8001bac:	4683      	movne	fp, r0
 8001bae:	45cb      	cmp	fp, r9
 8001bb0:	d116      	bne.n	8001be0 <arm_mat_gemm_f32+0xbc>
 8001bb2:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8001bb6:	f1be 0f00 	cmp.w	lr, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	4691      	moveq	r9, r2
 8001bbe:	4689      	movne	r9, r1
 8001bc0:	45b1      	cmp	r9, r6
 8001bc2:	d10d      	bne.n	8001be0 <arm_mat_gemm_f32+0xbc>
 8001bc4:	fa4f fb8a 	sxtb.w	fp, sl
 8001bc8:	f1bb 0f00 	cmp.w	fp, #0
 8001bcc:	bf0c      	ite	eq
 8001bce:	4683      	moveq	fp, r0
 8001bd0:	46a3      	movne	fp, r4
 8001bd2:	f1be 0f00 	cmp.w	lr, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	460e      	moveq	r6, r1
 8001bda:	4616      	movne	r6, r2
 8001bdc:	45b3      	cmp	fp, r6
 8001bde:	d070      	beq.n	8001cc2 <arm_mat_gemm_f32+0x19e>
 8001be0:	f06f 0002 	mvn.w	r0, #2
 8001be4:	b00a      	add	sp, #40	; 0x28
 8001be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bea:	9d05      	ldr	r5, [sp, #20]
 8001bec:	0097      	lsls	r7, r2, #2
 8001bee:	9708      	str	r7, [sp, #32]
 8001bf0:	0086      	lsls	r6, r0, #2
 8001bf2:	9607      	str	r6, [sp, #28]
 8001bf4:	f8cd c018 	str.w	ip, [sp, #24]
 8001bf8:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001bfc:	f8ad 4002 	strh.w	r4, [sp, #2]
 8001c00:	ea4f 0408 	mov.w	r4, r8
 8001c04:	fa4f f68a 	sxtb.w	r6, sl
 8001c08:	2e00      	cmp	r6, #0
 8001c0a:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8001ce8 <.text_16>
 8001c0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001c12:	bf0c      	ite	eq
 8001c14:	4606      	moveq	r6, r0
 8001c16:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 8001c1a:	b1b6      	cbz	r6, 8001c4a <arm_mat_gemm_f32+0x126>
 8001c1c:	fa4f f78a 	sxtb.w	r7, sl
 8001c20:	2f00      	cmp	r7, #0
 8001c22:	edd8 1a00 	vldr	s3, [r8]
 8001c26:	ed95 2a00 	vldr	s4, [r5]
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2704      	moveq	r7, #4
 8001c2e:	9f07      	ldrne	r7, [sp, #28]
 8001c30:	f1be 0f00 	cmp.w	lr, #0
 8001c34:	44b8      	add	r8, r7
 8001c36:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001c3a:	bf0c      	ite	eq
 8001c3c:	9f08      	ldreq	r7, [sp, #32]
 8001c3e:	2704      	movne	r7, #4
 8001c40:	19ed      	adds	r5, r5, r7
 8001c42:	1e76      	subs	r6, r6, #1
 8001c44:	b2b7      	uxth	r7, r6
 8001c46:	2f00      	cmp	r7, #0
 8001c48:	d1e8      	bne.n	8001c1c <arm_mat_gemm_f32+0xf8>
 8001c4a:	1e64      	subs	r4, r4, #1
 8001c4c:	b2a4      	uxth	r4, r4
 8001c4e:	f1be 0f00 	cmp.w	lr, #0
 8001c52:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001c56:	eddb 1a00 	vldr	s3, [fp]
 8001c5a:	449b      	add	fp, r3
 8001c5c:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8001c60:	ed89 1a00 	vstr	s2, [r9]
 8001c64:	f109 0904 	add.w	r9, r9, #4
 8001c68:	bf0e      	itee	eq
 8001c6a:	1b15      	subeq	r5, r2, r4
 8001c6c:	1b0d      	subne	r5, r1, r4
 8001c6e:	4355      	mulne	r5, r2
 8001c70:	2c00      	cmp	r4, #0
 8001c72:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8001c76:	d1c5      	bne.n	8001c04 <arm_mat_gemm_f32+0xe0>
 8001c78:	f8cd c010 	str.w	ip, [sp, #16]
 8001c7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001c80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001c82:	fa4f fc8a 	sxtb.w	ip, sl
 8001c86:	f1bc 0f00 	cmp.w	ip, #0
 8001c8a:	9d06      	ldr	r5, [sp, #24]
 8001c8c:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8001c90:	44b1      	add	r9, r6
 8001c92:	f8cd 900c 	str.w	r9, [sp, #12]
 8001c96:	f8bd 9000 	ldrh.w	r9, [sp]
 8001c9a:	bf0c      	ite	eq
 8001c9c:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 8001ca0:	f04f 0c04 	movne.w	ip, #4
 8001ca4:	44ac      	add	ip, r5
 8001ca6:	9d01      	ldr	r5, [sp, #4]
 8001ca8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 8001cac:	f1a9 0601 	sub.w	r6, r9, #1
 8001cb0:	f8ad 6000 	strh.w	r6, [sp]
 8001cb4:	f8bd 5000 	ldrh.w	r5, [sp]
 8001cb8:	b955      	cbnz	r5, 8001cd0 <arm_mat_gemm_f32+0x1ac>
 8001cba:	2000      	movs	r0, #0
 8001cbc:	b00a      	add	sp, #40	; 0x28
 8001cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc2:	f8dd b000 	ldr.w	fp, [sp]
 8001cc6:	9503      	str	r5, [sp, #12]
 8001cc8:	f8ad 8000 	strh.w	r8, [sp]
 8001ccc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001cd0:	f1be 0f00 	cmp.w	lr, #0
 8001cd4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8001cd8:	ae03      	add	r6, sp, #12
 8001cda:	8835      	ldrh	r5, [r6, #0]
 8001cdc:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8001ce0:	bf0c      	ite	eq
 8001ce2:	4690      	moveq	r8, r2
 8001ce4:	4688      	movne	r8, r1
 8001ce6:	e780      	b.n	8001bea <arm_mat_gemm_f32+0xc6>

08001ce8 <.text_16>:
 8001ce8:	00000000 	.word	0x00000000

08001cec <.text_17>:
 8001cec:	08001189 	.word	0x08001189

08001cf0 <forward_gemm>:
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	6941      	ldr	r1, [r0, #20]
 8001cf6:	6809      	ldr	r1, [r1, #0]
 8001cf8:	680a      	ldr	r2, [r1, #0]
 8001cfa:	6849      	ldr	r1, [r1, #4]
 8001cfc:	6809      	ldr	r1, [r1, #0]
 8001cfe:	6815      	ldr	r5, [r2, #0]
 8001d00:	6854      	ldr	r4, [r2, #4]
 8001d02:	6893      	ldr	r3, [r2, #8]
 8001d04:	680a      	ldr	r2, [r1, #0]
 8001d06:	68cf      	ldr	r7, [r1, #12]
 8001d08:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8001d0c:	a904      	add	r1, sp, #16
 8001d0e:	6896      	ldr	r6, [r2, #8]
 8001d10:	f8ad e020 	strh.w	lr, [sp, #32]
 8001d14:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8001d18:	9609      	str	r6, [sp, #36]	; 0x24
 8001d1a:	682e      	ldr	r6, [r5, #0]
 8001d1c:	68ef      	ldr	r7, [r5, #12]
 8001d1e:	692d      	ldr	r5, [r5, #16]
 8001d20:	68b6      	ldr	r6, [r6, #8]
 8001d22:	f8ad 5018 	strh.w	r5, [sp, #24]
 8001d26:	f8ad 701a 	strh.w	r7, [sp, #26]
 8001d2a:	9607      	str	r6, [sp, #28]
 8001d2c:	6825      	ldr	r5, [r4, #0]
 8001d2e:	68e6      	ldr	r6, [r4, #12]
 8001d30:	6924      	ldr	r4, [r4, #16]
 8001d32:	68ad      	ldr	r5, [r5, #8]
 8001d34:	f8ad 4010 	strh.w	r4, [sp, #16]
 8001d38:	f8ad 6012 	strh.w	r6, [sp, #18]
 8001d3c:	9505      	str	r5, [sp, #20]
 8001d3e:	681c      	ldr	r4, [r3, #0]
 8001d40:	68dd      	ldr	r5, [r3, #12]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	68a4      	ldr	r4, [r4, #8]
 8001d46:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001d4a:	9403      	str	r4, [sp, #12]
 8001d4c:	ac08      	add	r4, sp, #32
 8001d4e:	f8ad 500a 	strh.w	r5, [sp, #10]
 8001d52:	9401      	str	r4, [sp, #4]
 8001d54:	f990 2021 	ldrsb.w	r2, [r0, #33]	; 0x21
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8001d5e:	edd0 0a07 	vldr	s1, [r0, #28]
 8001d62:	aa02      	add	r2, sp, #8
 8001d64:	ed90 0a06 	vldr	s0, [r0, #24]
 8001d68:	a806      	add	r0, sp, #24
 8001d6a:	f7ff fedb 	bl	8001b24 <arm_mat_gemm_f32>
 8001d6e:	b00b      	add	sp, #44	; 0x2c
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d74 <nl_func_sm_channel_f32>:
 8001d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d78:	4614      	mov	r4, r2
 8001d7a:	460f      	mov	r7, r1
 8001d7c:	2c02      	cmp	r4, #2
 8001d7e:	4606      	mov	r6, r0
 8001d80:	ed2d 8b02 	vpush	{d8}
 8001d84:	ed97 8a00 	vldr	s16, [r7]
 8001d88:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8002098 <.text_11>
 8001d8c:	d33d      	bcc.n	8001e0a <nl_func_sm_channel_f32+0x96>
 8001d8e:	1e61      	subs	r1, r4, #1
 8001d90:	1d3a      	adds	r2, r7, #4
 8001d92:	f011 0003 	ands.w	r0, r1, #3
 8001d96:	d00c      	beq.n	8001db2 <nl_func_sm_channel_f32+0x3e>
 8001d98:	ed92 0a00 	vldr	s0, [r2]
 8001d9c:	f102 0204 	add.w	r2, r2, #4
 8001da0:	eeb4 0a48 	vcmp.f32	s0, s16
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	bf58      	it	pl
 8001daa:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001dae:	1e40      	subs	r0, r0, #1
 8001db0:	d1f2      	bne.n	8001d98 <nl_func_sm_channel_f32+0x24>
 8001db2:	0889      	lsrs	r1, r1, #2
 8001db4:	f000 802b 	beq.w	8001e0e <nl_func_sm_channel_f32+0x9a>
 8001db8:	ed92 0a00 	vldr	s0, [r2]
 8001dbc:	eeb4 0a48 	vcmp.f32	s0, s16
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	bf58      	it	pl
 8001dc6:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001dca:	ed92 0a01 	vldr	s0, [r2, #4]
 8001dce:	eeb4 0a48 	vcmp.f32	s0, s16
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	bf58      	it	pl
 8001dd8:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001ddc:	ed92 0a02 	vldr	s0, [r2, #8]
 8001de0:	eeb4 0a48 	vcmp.f32	s0, s16
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	bf58      	it	pl
 8001dea:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001dee:	ed92 0a03 	vldr	s0, [r2, #12]
 8001df2:	f102 0210 	add.w	r2, r2, #16
 8001df6:	eeb4 0a48 	vcmp.f32	s0, s16
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	bf58      	it	pl
 8001e00:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001e04:	1e49      	subs	r1, r1, #1
 8001e06:	d1d7      	bne.n	8001db8 <nl_func_sm_channel_f32+0x44>
 8001e08:	e001      	b.n	8001e0e <nl_func_sm_channel_f32+0x9a>
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d040      	beq.n	8001e90 <nl_func_sm_channel_f32+0x11c>
 8001e0e:	46b0      	mov	r8, r6
 8001e10:	ea4f 0504 	mov.w	r5, r4
 8001e14:	ed97 0a00 	vldr	s0, [r7]
 8001e18:	1d3f      	adds	r7, r7, #4
 8001e1a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8001e1e:	f005 fa45 	bl	80072ac <expf>
 8001e22:	1e6d      	subs	r5, r5, #1
 8001e24:	ed88 0a00 	vstr	s0, [r8]
 8001e28:	ee78 8a80 	vadd.f32	s17, s17, s0
 8001e2c:	f108 0804 	add.w	r8, r8, #4
 8001e30:	d1f0      	bne.n	8001e14 <nl_func_sm_channel_f32+0xa0>
 8001e32:	f014 0003 	ands.w	r0, r4, #3
 8001e36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001e3a:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8001e3e:	d009      	beq.n	8001e54 <nl_func_sm_channel_f32+0xe0>
 8001e40:	edd6 0a00 	vldr	s1, [r6]
 8001e44:	1e40      	subs	r0, r0, #1
 8001e46:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001e4a:	edc6 0a00 	vstr	s1, [r6]
 8001e4e:	f106 0604 	add.w	r6, r6, #4
 8001e52:	d1f5      	bne.n	8001e40 <nl_func_sm_channel_f32+0xcc>
 8001e54:	08a4      	lsrs	r4, r4, #2
 8001e56:	d01b      	beq.n	8001e90 <nl_func_sm_channel_f32+0x11c>
 8001e58:	edd6 0a00 	vldr	s1, [r6]
 8001e5c:	1e64      	subs	r4, r4, #1
 8001e5e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001e62:	edc6 0a00 	vstr	s1, [r6]
 8001e66:	ed96 1a01 	vldr	s2, [r6, #4]
 8001e6a:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001e6e:	ed86 1a01 	vstr	s2, [r6, #4]
 8001e72:	edd6 0a02 	vldr	s1, [r6, #8]
 8001e76:	ed96 1a03 	vldr	s2, [r6, #12]
 8001e7a:	ee60 1a80 	vmul.f32	s3, s1, s0
 8001e7e:	ee61 0a00 	vmul.f32	s1, s2, s0
 8001e82:	edc6 1a02 	vstr	s3, [r6, #8]
 8001e86:	edc6 0a03 	vstr	s1, [r6, #12]
 8001e8a:	f106 0610 	add.w	r6, r6, #16
 8001e8e:	d1e3      	bne.n	8001e58 <nl_func_sm_channel_f32+0xe4>
 8001e90:	ecbd 8b02 	vpop	{d8}
 8001e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e98 <nl_func_sm_array_f32>:
 8001e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	b081      	sub	sp, #4
 8001ea0:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8001ea4:	4680      	mov	r8, r0
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	9e08      	ldr	r6, [sp, #32]
 8001eaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001eac:	454c      	cmp	r4, r9
 8001eae:	d20a      	bcs.n	8001ec6 <nl_func_sm_array_f32+0x2e>
 8001eb0:	462a      	mov	r2, r5
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8001eb8:	4640      	mov	r0, r8
 8001eba:	f7ff ff5b 	bl	8001d74 <nl_func_sm_channel_f32>
 8001ebe:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8001ec2:	454c      	cmp	r4, r9
 8001ec4:	d3f4      	bcc.n	8001eb0 <nl_func_sm_array_f32+0x18>
 8001ec6:	b001      	add	sp, #4
 8001ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001ecc <nl_func_tanh_array_f32>:
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	460d      	mov	r5, r1
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001ed6:	42b5      	cmp	r5, r6
 8001ed8:	f080 800a 	bcs.w	8001ef0 <nl_func_tanh_array_f32+0x24>
 8001edc:	ed95 0a00 	vldr	s0, [r5]
 8001ee0:	1d2d      	adds	r5, r5, #4
 8001ee2:	f005 f991 	bl	8007208 <tanhf>
 8001ee6:	ed84 0a00 	vstr	s0, [r4]
 8001eea:	1d24      	adds	r4, r4, #4
 8001eec:	42b5      	cmp	r5, r6
 8001eee:	d3f5      	bcc.n	8001edc <nl_func_tanh_array_f32+0x10>
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ef4 <nl_func_sigmoid_array_f32>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	4604      	mov	r4, r0
 8001efa:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001efe:	42b5      	cmp	r5, r6
 8001f00:	f080 8014 	bcs.w	8001f2c <nl_func_sigmoid_array_f32+0x38>
 8001f04:	ed95 0a00 	vldr	s0, [r5]
 8001f08:	1d2d      	adds	r5, r5, #4
 8001f0a:	eeb1 0a40 	vneg.f32	s0, s0
 8001f0e:	f005 f9cd 	bl	80072ac <expf>
 8001f12:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f16:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001f1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001f1e:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8001f22:	ed84 1a00 	vstr	s2, [r4]
 8001f26:	1d24      	adds	r4, r4, #4
 8001f28:	42b5      	cmp	r5, r6
 8001f2a:	d3eb      	bcc.n	8001f04 <nl_func_sigmoid_array_f32+0x10>
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f30 <nl_func_sign_array_f32>:
 8001f30:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001f34:	4291      	cmp	r1, r2
 8001f36:	d216      	bcs.n	8001f66 <nl_func_sign_array_f32+0x36>
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	ed91 0a00 	vldr	s0, [r1]
 8001f40:	4684      	mov	ip, r0
 8001f42:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001f46:	f10c 0004 	add.w	r0, ip, #4
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	bfcc      	ite	gt
 8001f50:	ed9f 0abd 	vldrgt	s0, [pc, #756]	; 8002248 <.text_16>
 8001f54:	ee00 3a10 	vmovle	s0, r3
 8001f58:	1d09      	adds	r1, r1, #4
 8001f5a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001f5e:	4291      	cmp	r1, r2
 8001f60:	ed8c 0a00 	vstr	s0, [ip]
 8001f64:	d3ea      	bcc.n	8001f3c <nl_func_sign_array_f32+0xc>
 8001f66:	4770      	bx	lr

08001f68 <nl_func_clip_array_f32>:
 8001f68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001f6c:	4291      	cmp	r1, r2
 8001f6e:	d216      	bcs.n	8001f9e <nl_func_clip_array_f32+0x36>
 8001f70:	4603      	mov	r3, r0
 8001f72:	ed91 1a00 	vldr	s2, [r1]
 8001f76:	1d18      	adds	r0, r3, #4
 8001f78:	eeb4 0a41 	vcmp.f32	s0, s2
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	bf58      	it	pl
 8001f82:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001f86:	eeb4 1a60 	vcmp.f32	s2, s1
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	bf58      	it	pl
 8001f90:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001f94:	1d09      	adds	r1, r1, #4
 8001f96:	4291      	cmp	r1, r2
 8001f98:	ed83 1a00 	vstr	s2, [r3]
 8001f9c:	d3e8      	bcc.n	8001f70 <nl_func_clip_array_f32+0x8>
 8001f9e:	4770      	bx	lr

08001fa0 <nl_func_relu_array_f32>:
 8001fa0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001fa4:	4291      	cmp	r1, r2
 8001fa6:	d20f      	bcs.n	8001fc8 <nl_func_relu_array_f32+0x28>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	ed91 0a00 	vldr	s0, [r1]
 8001fae:	1d18      	adds	r0, r3, #4
 8001fb0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb8:	bfd8      	it	le
 8001fba:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8002098 <.text_11>
 8001fbe:	1d09      	adds	r1, r1, #4
 8001fc0:	4291      	cmp	r1, r2
 8001fc2:	ed83 0a00 	vstr	s0, [r3]
 8001fc6:	d3ef      	bcc.n	8001fa8 <nl_func_relu_array_f32+0x8>
 8001fc8:	4770      	bx	lr
	...

08001fcc <nl_func_relu6_array_f32>:
 8001fcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001fd0:	4291      	cmp	r1, r2
 8001fd2:	d21a      	bcs.n	800200a <nl_func_relu6_array_f32+0x3e>
 8001fd4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	edd1 0a00 	vldr	s1, [r1]
 8001fde:	1d18      	adds	r0, r3, #4
 8001fe0:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dd08      	ble.n	8001ffc <nl_func_relu6_array_f32+0x30>
 8001fea:	eef4 0a40 	vcmp.f32	s1, s0
 8001fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff2:	bf58      	it	pl
 8001ff4:	eef0 0a40 	vmovpl.f32	s1, s0
 8001ff8:	e002      	b.n	8002000 <nl_func_relu6_array_f32+0x34>
 8001ffa:	bf00      	nop
 8001ffc:	eddf 0a26 	vldr	s1, [pc, #152]	; 8002098 <.text_11>
 8002000:	1d09      	adds	r1, r1, #4
 8002002:	4291      	cmp	r1, r2
 8002004:	edc3 0a00 	vstr	s1, [r3]
 8002008:	d3e6      	bcc.n	8001fd8 <nl_func_relu6_array_f32+0xc>
 800200a:	4770      	bx	lr

0800200c <nl_func_selu_array_f32>:
 800200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200e:	460d      	mov	r5, r1
 8002010:	b081      	sub	sp, #4
 8002012:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8002016:	4604      	mov	r4, r0
 8002018:	ed2d 8b04 	vpush	{d8-d9}
 800201c:	eef0 8a40 	vmov.f32	s17, s0
 8002020:	42b5      	cmp	r5, r6
 8002022:	eeb0 8a60 	vmov.f32	s16, s1
 8002026:	d232      	bcs.n	800208e <nl_func_selu_array_f32+0x82>
 8002028:	4627      	mov	r7, r4
 800202a:	ed95 9a00 	vldr	s18, [r5]
 800202e:	1d3c      	adds	r4, r7, #4
 8002030:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	eeb0 0a49 	vmov.f32	s0, s18
 800203c:	bf4c      	ite	mi
 800203e:	eddf 9a16 	vldrmi	s19, [pc, #88]	; 8002098 <.text_11>
 8002042:	eef0 9a49 	vmovpl.f32	s19, s18
 8002046:	f005 f931 	bl	80072ac <expf>
 800204a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800204e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002052:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002056:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	dd05      	ble.n	800206c <nl_func_selu_array_f32+0x60>
 8002060:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8002098 <.text_11>
 8002064:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002068:	e00a      	b.n	8002080 <nl_func_selu_array_f32+0x74>
 800206a:	bf00      	nop
 800206c:	eeb0 0a49 	vmov.f32	s0, s18
 8002070:	f005 f91c 	bl	80072ac <expf>
 8002074:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ee40 9a28 	vmla.f32	s19, s0, s17
 8002080:	1d2d      	adds	r5, r5, #4
 8002082:	ee28 0a29 	vmul.f32	s0, s16, s19
 8002086:	42b5      	cmp	r5, r6
 8002088:	ed87 0a00 	vstr	s0, [r7]
 800208c:	d3cc      	bcc.n	8002028 <nl_func_selu_array_f32+0x1c>
 800208e:	ecbd 8b04 	vpop	{d8-d9}
 8002092:	b001      	add	sp, #4
 8002094:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002098 <.text_11>:
 8002098:	00000000 	.word	0x00000000

0800209c <nl_func_prelu_array_f32>:
 800209c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80020a0:	4299      	cmp	r1, r3
 80020a2:	d220      	bcs.n	80020e6 <nl_func_prelu_array_f32+0x4a>
 80020a4:	ed91 0a00 	vldr	s0, [r1]
 80020a8:	4684      	mov	ip, r0
 80020aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80020ae:	f10c 0004 	add.w	r0, ip, #4
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	ed92 1a00 	vldr	s2, [r2]
 80020ba:	bf4c      	ite	mi
 80020bc:	eddf 0a98 	vldrmi	s1, [pc, #608]	; 8002320 <.text_19>
 80020c0:	eef0 0a40 	vmovpl.f32	s1, s0
 80020c4:	eeb1 0a40 	vneg.f32	s0, s0
 80020c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	bf48      	it	mi
 80020d2:	ed9f 0a93 	vldrmi	s0, [pc, #588]	; 8002320 <.text_19>
 80020d6:	1d09      	adds	r1, r1, #4
 80020d8:	1d12      	adds	r2, r2, #4
 80020da:	4299      	cmp	r1, r3
 80020dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80020e0:	edcc 0a00 	vstr	s1, [ip]
 80020e4:	d3de      	bcc.n	80020a4 <nl_func_prelu_array_f32+0x8>
 80020e6:	4770      	bx	lr

080020e8 <forward_relu>:
 80020e8:	b430      	push	{r4, r5}
 80020ea:	6940      	ldr	r0, [r0, #20]
 80020ec:	6804      	ldr	r4, [r0, #0]
 80020ee:	6821      	ldr	r1, [r4, #0]
 80020f0:	680d      	ldr	r5, [r1, #0]
 80020f2:	686b      	ldr	r3, [r5, #4]
 80020f4:	68aa      	ldr	r2, [r5, #8]
 80020f6:	68e9      	ldr	r1, [r5, #12]
 80020f8:	6928      	ldr	r0, [r5, #16]
 80020fa:	682d      	ldr	r5, [r5, #0]
 80020fc:	4353      	muls	r3, r2
 80020fe:	434b      	muls	r3, r1
 8002100:	6861      	ldr	r1, [r4, #4]
 8002102:	4343      	muls	r3, r0
 8002104:	68a8      	ldr	r0, [r5, #8]
 8002106:	680a      	ldr	r2, [r1, #0]
 8002108:	6814      	ldr	r4, [r2, #0]
 800210a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800210e:	4290      	cmp	r0, r2
 8002110:	68a1      	ldr	r1, [r4, #8]
 8002112:	d20f      	bcs.n	8002134 <forward_relu+0x4c>
 8002114:	460b      	mov	r3, r1
 8002116:	ed90 0a00 	vldr	s0, [r0]
 800211a:	1d19      	adds	r1, r3, #4
 800211c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	bfd8      	it	le
 8002126:	ed9f 0a7e 	vldrle	s0, [pc, #504]	; 8002320 <.text_19>
 800212a:	1d00      	adds	r0, r0, #4
 800212c:	4290      	cmp	r0, r2
 800212e:	ed83 0a00 	vstr	s0, [r3]
 8002132:	d3ef      	bcc.n	8002114 <forward_relu+0x2c>
 8002134:	bc30      	pop	{r4, r5}
 8002136:	4770      	bx	lr

08002138 <forward_relu6>:
 8002138:	b430      	push	{r4, r5}
 800213a:	6940      	ldr	r0, [r0, #20]
 800213c:	6804      	ldr	r4, [r0, #0]
 800213e:	6821      	ldr	r1, [r4, #0]
 8002140:	680d      	ldr	r5, [r1, #0]
 8002142:	686b      	ldr	r3, [r5, #4]
 8002144:	68aa      	ldr	r2, [r5, #8]
 8002146:	68e9      	ldr	r1, [r5, #12]
 8002148:	6928      	ldr	r0, [r5, #16]
 800214a:	682d      	ldr	r5, [r5, #0]
 800214c:	4353      	muls	r3, r2
 800214e:	434b      	muls	r3, r1
 8002150:	6861      	ldr	r1, [r4, #4]
 8002152:	4343      	muls	r3, r0
 8002154:	68a8      	ldr	r0, [r5, #8]
 8002156:	680a      	ldr	r2, [r1, #0]
 8002158:	6814      	ldr	r4, [r2, #0]
 800215a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800215e:	4290      	cmp	r0, r2
 8002160:	68a1      	ldr	r1, [r4, #8]
 8002162:	d21a      	bcs.n	800219a <forward_relu6+0x62>
 8002164:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8002168:	460b      	mov	r3, r1
 800216a:	edd0 0a00 	vldr	s1, [r0]
 800216e:	1d19      	adds	r1, r3, #4
 8002170:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dd08      	ble.n	800218c <forward_relu6+0x54>
 800217a:	eef4 0a40 	vcmp.f32	s1, s0
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	bf58      	it	pl
 8002184:	eef0 0a40 	vmovpl.f32	s1, s0
 8002188:	e002      	b.n	8002190 <forward_relu6+0x58>
 800218a:	bf00      	nop
 800218c:	eddf 0a64 	vldr	s1, [pc, #400]	; 8002320 <.text_19>
 8002190:	1d00      	adds	r0, r0, #4
 8002192:	4290      	cmp	r0, r2
 8002194:	edc3 0a00 	vstr	s1, [r3]
 8002198:	d3e6      	bcc.n	8002168 <forward_relu6+0x30>
 800219a:	bc30      	pop	{r4, r5}
 800219c:	4770      	bx	lr
	...

080021a0 <forward_selu>:
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	b081      	sub	sp, #4
 80021a4:	ed2d 8b04 	vpush	{d8-d9}
 80021a8:	6941      	ldr	r1, [r0, #20]
 80021aa:	ed90 8a07 	vldr	s16, [r0, #28]
 80021ae:	edd0 8a06 	vldr	s17, [r0, #24]
 80021b2:	680e      	ldr	r6, [r1, #0]
 80021b4:	6832      	ldr	r2, [r6, #0]
 80021b6:	6814      	ldr	r4, [r2, #0]
 80021b8:	6865      	ldr	r5, [r4, #4]
 80021ba:	68a3      	ldr	r3, [r4, #8]
 80021bc:	68e2      	ldr	r2, [r4, #12]
 80021be:	6921      	ldr	r1, [r4, #16]
 80021c0:	6820      	ldr	r0, [r4, #0]
 80021c2:	435d      	muls	r5, r3
 80021c4:	4355      	muls	r5, r2
 80021c6:	6884      	ldr	r4, [r0, #8]
 80021c8:	434d      	muls	r5, r1
 80021ca:	6871      	ldr	r1, [r6, #4]
 80021cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80021d0:	680a      	ldr	r2, [r1, #0]
 80021d2:	6810      	ldr	r0, [r2, #0]
 80021d4:	42ac      	cmp	r4, r5
 80021d6:	6886      	ldr	r6, [r0, #8]
 80021d8:	d231      	bcs.n	800223e <forward_selu+0x9e>
 80021da:	4637      	mov	r7, r6
 80021dc:	ed94 9a00 	vldr	s18, [r4]
 80021e0:	1d3e      	adds	r6, r7, #4
 80021e2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	eeb0 0a49 	vmov.f32	s0, s18
 80021ee:	bf4c      	ite	mi
 80021f0:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002320 <.text_19>
 80021f4:	eef0 9a49 	vmovpl.f32	s19, s18
 80021f8:	f005 f858 	bl	80072ac <expf>
 80021fc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002200:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002204:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002208:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	dd04      	ble.n	800221c <forward_selu+0x7c>
 8002212:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8002320 <.text_19>
 8002216:	ee79 9a81 	vadd.f32	s19, s19, s2
 800221a:	e009      	b.n	8002230 <forward_selu+0x90>
 800221c:	eeb0 0a49 	vmov.f32	s0, s18
 8002220:	f005 f844 	bl	80072ac <expf>
 8002224:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002228:	ee30 0a20 	vadd.f32	s0, s0, s1
 800222c:	ee40 9a28 	vmla.f32	s19, s0, s17
 8002230:	1d24      	adds	r4, r4, #4
 8002232:	ee28 0a29 	vmul.f32	s0, s16, s19
 8002236:	42ac      	cmp	r4, r5
 8002238:	ed87 0a00 	vstr	s0, [r7]
 800223c:	d3cd      	bcc.n	80021da <forward_selu+0x3a>
 800223e:	ecbd 8b04 	vpop	{d8-d9}
 8002242:	b001      	add	sp, #4
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002248 <.text_16>:
 8002248:	00000001 	.word	0x00000001

0800224c <forward_prelu>:
 800224c:	b470      	push	{r4, r5, r6}
 800224e:	6941      	ldr	r1, [r0, #20]
 8002250:	6980      	ldr	r0, [r0, #24]
 8002252:	680d      	ldr	r5, [r1, #0]
 8002254:	682a      	ldr	r2, [r5, #0]
 8002256:	6816      	ldr	r6, [r2, #0]
 8002258:	6874      	ldr	r4, [r6, #4]
 800225a:	68b3      	ldr	r3, [r6, #8]
 800225c:	68f2      	ldr	r2, [r6, #12]
 800225e:	6931      	ldr	r1, [r6, #16]
 8002260:	6836      	ldr	r6, [r6, #0]
 8002262:	435c      	muls	r4, r3
 8002264:	4354      	muls	r4, r2
 8002266:	686a      	ldr	r2, [r5, #4]
 8002268:	434c      	muls	r4, r1
 800226a:	68b1      	ldr	r1, [r6, #8]
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	681d      	ldr	r5, [r3, #0]
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	6898      	ldr	r0, [r3, #8]
 8002274:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8002278:	4299      	cmp	r1, r3
 800227a:	68aa      	ldr	r2, [r5, #8]
 800227c:	d21f      	bcs.n	80022be <forward_prelu+0x72>
 800227e:	4614      	mov	r4, r2
 8002280:	ed91 0a00 	vldr	s0, [r1]
 8002284:	1d22      	adds	r2, r4, #4
 8002286:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	ed90 1a00 	vldr	s2, [r0]
 8002292:	bf4c      	ite	mi
 8002294:	eddf 0a22 	vldrmi	s1, [pc, #136]	; 8002320 <.text_19>
 8002298:	eef0 0a40 	vmovpl.f32	s1, s0
 800229c:	eeb1 0a40 	vneg.f32	s0, s0
 80022a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	bf48      	it	mi
 80022aa:	ed9f 0a1d 	vldrmi	s0, [pc, #116]	; 8002320 <.text_19>
 80022ae:	1d09      	adds	r1, r1, #4
 80022b0:	1d00      	adds	r0, r0, #4
 80022b2:	4299      	cmp	r1, r3
 80022b4:	ee41 0a40 	vmls.f32	s1, s2, s0
 80022b8:	edc4 0a00 	vstr	s1, [r4]
 80022bc:	d3df      	bcc.n	800227e <forward_prelu+0x32>
 80022be:	bc70      	pop	{r4, r5, r6}
 80022c0:	4770      	bx	lr
	...

080022c4 <forward_sign>:
 80022c4:	b430      	push	{r4, r5}
 80022c6:	6940      	ldr	r0, [r0, #20]
 80022c8:	6804      	ldr	r4, [r0, #0]
 80022ca:	6821      	ldr	r1, [r4, #0]
 80022cc:	680d      	ldr	r5, [r1, #0]
 80022ce:	686b      	ldr	r3, [r5, #4]
 80022d0:	68aa      	ldr	r2, [r5, #8]
 80022d2:	68e9      	ldr	r1, [r5, #12]
 80022d4:	6928      	ldr	r0, [r5, #16]
 80022d6:	682d      	ldr	r5, [r5, #0]
 80022d8:	4353      	muls	r3, r2
 80022da:	434b      	muls	r3, r1
 80022dc:	6861      	ldr	r1, [r4, #4]
 80022de:	4343      	muls	r3, r0
 80022e0:	68a8      	ldr	r0, [r5, #8]
 80022e2:	680a      	ldr	r2, [r1, #0]
 80022e4:	6814      	ldr	r4, [r2, #0]
 80022e6:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80022ea:	4290      	cmp	r0, r2
 80022ec:	68a1      	ldr	r1, [r4, #8]
 80022ee:	d215      	bcs.n	800231c <forward_sign+0x58>
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	460c      	mov	r4, r1
 80022f6:	ed90 0a00 	vldr	s0, [r0]
 80022fa:	1d21      	adds	r1, r4, #4
 80022fc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	bfcc      	ite	gt
 8002306:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8002324 <.text_20>
 800230a:	ee00 3a10 	vmovle	s0, r3
 800230e:	1d00      	adds	r0, r0, #4
 8002310:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002314:	4290      	cmp	r0, r2
 8002316:	ed84 0a00 	vstr	s0, [r4]
 800231a:	d3eb      	bcc.n	80022f4 <forward_sign+0x30>
 800231c:	bc30      	pop	{r4, r5}
 800231e:	4770      	bx	lr

08002320 <.text_19>:
 8002320:	00000000 	.word	0x00000000

08002324 <.text_20>:
 8002324:	00000001 	.word	0x00000001

08002328 <forward_clip>:
 8002328:	b470      	push	{r4, r5, r6}
 800232a:	6941      	ldr	r1, [r0, #20]
 800232c:	ed90 0a07 	vldr	s0, [r0, #28]
 8002330:	edd0 0a06 	vldr	s1, [r0, #24]
 8002334:	680d      	ldr	r5, [r1, #0]
 8002336:	682a      	ldr	r2, [r5, #0]
 8002338:	6816      	ldr	r6, [r2, #0]
 800233a:	6874      	ldr	r4, [r6, #4]
 800233c:	68b3      	ldr	r3, [r6, #8]
 800233e:	68f2      	ldr	r2, [r6, #12]
 8002340:	6931      	ldr	r1, [r6, #16]
 8002342:	6830      	ldr	r0, [r6, #0]
 8002344:	435c      	muls	r4, r3
 8002346:	4354      	muls	r4, r2
 8002348:	6880      	ldr	r0, [r0, #8]
 800234a:	434c      	muls	r4, r1
 800234c:	6869      	ldr	r1, [r5, #4]
 800234e:	680a      	ldr	r2, [r1, #0]
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002356:	4290      	cmp	r0, r2
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	d216      	bcs.n	800238a <forward_clip+0x62>
 800235c:	460b      	mov	r3, r1
 800235e:	ed90 1a00 	vldr	s2, [r0]
 8002362:	1d19      	adds	r1, r3, #4
 8002364:	eef4 0a41 	vcmp.f32	s1, s2
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	bf58      	it	pl
 800236e:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002372:	eeb4 1a40 	vcmp.f32	s2, s0
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	bf58      	it	pl
 800237c:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002380:	1d00      	adds	r0, r0, #4
 8002382:	4290      	cmp	r0, r2
 8002384:	ed83 1a00 	vstr	s2, [r3]
 8002388:	d3e8      	bcc.n	800235c <forward_clip+0x34>
 800238a:	bc70      	pop	{r4, r5, r6}
 800238c:	4770      	bx	lr
	...

08002390 <forward_sigmoid>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	6940      	ldr	r0, [r0, #20]
 8002394:	6805      	ldr	r5, [r0, #0]
 8002396:	6829      	ldr	r1, [r5, #0]
 8002398:	680c      	ldr	r4, [r1, #0]
 800239a:	6863      	ldr	r3, [r4, #4]
 800239c:	68a2      	ldr	r2, [r4, #8]
 800239e:	68e1      	ldr	r1, [r4, #12]
 80023a0:	6920      	ldr	r0, [r4, #16]
 80023a2:	6824      	ldr	r4, [r4, #0]
 80023a4:	4353      	muls	r3, r2
 80023a6:	434b      	muls	r3, r1
 80023a8:	6869      	ldr	r1, [r5, #4]
 80023aa:	68a4      	ldr	r4, [r4, #8]
 80023ac:	4343      	muls	r3, r0
 80023ae:	6808      	ldr	r0, [r1, #0]
 80023b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80023b4:	6802      	ldr	r2, [r0, #0]
 80023b6:	42b4      	cmp	r4, r6
 80023b8:	6895      	ldr	r5, [r2, #8]
 80023ba:	d213      	bcs.n	80023e4 <forward_sigmoid+0x54>
 80023bc:	ed94 0a00 	vldr	s0, [r4]
 80023c0:	1d24      	adds	r4, r4, #4
 80023c2:	eeb1 0a40 	vneg.f32	s0, s0
 80023c6:	f004 ff71 	bl	80072ac <expf>
 80023ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80023ce:	ee70 0a20 	vadd.f32	s1, s0, s1
 80023d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80023d6:	ee81 1a20 	vdiv.f32	s2, s2, s1
 80023da:	ed85 1a00 	vstr	s2, [r5]
 80023de:	1d2d      	adds	r5, r5, #4
 80023e0:	42b4      	cmp	r4, r6
 80023e2:	d3eb      	bcc.n	80023bc <forward_sigmoid+0x2c>
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080023e8 <forward_tanh>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	6940      	ldr	r0, [r0, #20]
 80023ec:	6805      	ldr	r5, [r0, #0]
 80023ee:	6829      	ldr	r1, [r5, #0]
 80023f0:	680c      	ldr	r4, [r1, #0]
 80023f2:	6863      	ldr	r3, [r4, #4]
 80023f4:	68a2      	ldr	r2, [r4, #8]
 80023f6:	68e1      	ldr	r1, [r4, #12]
 80023f8:	6920      	ldr	r0, [r4, #16]
 80023fa:	6824      	ldr	r4, [r4, #0]
 80023fc:	4353      	muls	r3, r2
 80023fe:	434b      	muls	r3, r1
 8002400:	6869      	ldr	r1, [r5, #4]
 8002402:	68a4      	ldr	r4, [r4, #8]
 8002404:	4343      	muls	r3, r0
 8002406:	6808      	ldr	r0, [r1, #0]
 8002408:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800240c:	6802      	ldr	r2, [r0, #0]
 800240e:	42b4      	cmp	r4, r6
 8002410:	6895      	ldr	r5, [r2, #8]
 8002412:	d209      	bcs.n	8002428 <forward_tanh+0x40>
 8002414:	ed94 0a00 	vldr	s0, [r4]
 8002418:	1d24      	adds	r4, r4, #4
 800241a:	f004 fef5 	bl	8007208 <tanhf>
 800241e:	ed85 0a00 	vstr	s0, [r5]
 8002422:	1d2d      	adds	r5, r5, #4
 8002424:	42b4      	cmp	r4, r6
 8002426:	d3f5      	bcc.n	8002414 <forward_tanh+0x2c>
 8002428:	bd70      	pop	{r4, r5, r6, pc}

0800242a <forward_sm>:
 800242a:	b570      	push	{r4, r5, r6, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	6940      	ldr	r0, [r0, #20]
 8002430:	6804      	ldr	r4, [r0, #0]
 8002432:	6821      	ldr	r1, [r4, #0]
 8002434:	680d      	ldr	r5, [r1, #0]
 8002436:	68aa      	ldr	r2, [r5, #8]
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9200      	str	r2, [sp, #0]
 800243c:	686e      	ldr	r6, [r5, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	68e9      	ldr	r1, [r5, #12]
 8002442:	6928      	ldr	r0, [r5, #16]
 8002444:	6864      	ldr	r4, [r4, #4]
 8002446:	4372      	muls	r2, r6
 8002448:	682d      	ldr	r5, [r5, #0]
 800244a:	434a      	muls	r2, r1
 800244c:	4342      	muls	r2, r0
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	68a9      	ldr	r1, [r5, #8]
 8002452:	6805      	ldr	r5, [r0, #0]
 8002454:	68a8      	ldr	r0, [r5, #8]
 8002456:	f7ff fd1f 	bl	8001e98 <nl_func_sm_array_f32>
 800245a:	b002      	add	sp, #8
 800245c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002460 <func_lrn_channel_f32>:
 8002460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002464:	461f      	mov	r7, r3
 8002466:	4604      	mov	r4, r0
 8002468:	ed2d 8b04 	vpush	{d8-d9}
 800246c:	4616      	mov	r6, r2
 800246e:	460d      	mov	r5, r1
 8002470:	00b1      	lsls	r1, r6, #2
 8002472:	eef0 8a40 	vmov.f32	s17, s0
 8002476:	f003 fe42 	bl	80060fe <__aeabi_memclr>
 800247a:	2e00      	cmp	r6, #0
 800247c:	eeb0 9a60 	vmov.f32	s18, s1
 8002480:	eeb0 8a41 	vmov.f32	s16, s2
 8002484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002488:	dd4f      	ble.n	800252a <func_lrn_channel_f32+0xca>
 800248a:	f107 0e01 	add.w	lr, r7, #1
 800248e:	427f      	negs	r7, r7
 8002490:	46a9      	mov	r9, r5
 8002492:	4630      	mov	r0, r6
 8002494:	46b4      	mov	ip, r6
 8002496:	463b      	mov	r3, r7
 8002498:	4671      	mov	r1, lr
 800249a:	ed99 0a00 	vldr	s0, [r9]
 800249e:	45e6      	cmp	lr, ip
 80024a0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80024a4:	bfc8      	it	gt
 80024a6:	4661      	movgt	r1, ip
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bfcc      	ite	gt
 80024ac:	461a      	movgt	r2, r3
 80024ae:	2200      	movle	r2, #0
 80024b0:	428a      	cmp	r2, r1
 80024b2:	da33      	bge.n	800251c <func_lrn_channel_f32+0xbc>
 80024b4:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 80024b8:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 80024bc:	1c52      	adds	r2, r2, #1
 80024be:	428a      	cmp	r2, r1
 80024c0:	edd7 0a00 	vldr	s1, [r7]
 80024c4:	ee70 0a80 	vadd.f32	s1, s1, s0
 80024c8:	edc6 0a00 	vstr	s1, [r6]
 80024cc:	da26      	bge.n	800251c <func_lrn_channel_f32+0xbc>
 80024ce:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 80024d2:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 80024d6:	1c52      	adds	r2, r2, #1
 80024d8:	428a      	cmp	r2, r1
 80024da:	ed9a 1a00 	vldr	s2, [sl]
 80024de:	ee31 1a00 	vadd.f32	s2, s2, s0
 80024e2:	ed87 1a00 	vstr	s2, [r7]
 80024e6:	da19      	bge.n	800251c <func_lrn_channel_f32+0xbc>
 80024e8:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 80024ec:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 80024f0:	1c52      	adds	r2, r2, #1
 80024f2:	428a      	cmp	r2, r1
 80024f4:	edd6 0a00 	vldr	s1, [r6]
 80024f8:	ee70 0a80 	vadd.f32	s1, s1, s0
 80024fc:	edca 0a00 	vstr	s1, [sl]
 8002500:	da0c      	bge.n	800251c <func_lrn_channel_f32+0xbc>
 8002502:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8002506:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 800250a:	1c52      	adds	r2, r2, #1
 800250c:	428a      	cmp	r2, r1
 800250e:	ed97 1a00 	vldr	s2, [r7]
 8002512:	ee31 1a00 	vadd.f32	s2, s2, s0
 8002516:	ed86 1a00 	vstr	s2, [r6]
 800251a:	dbcb      	blt.n	80024b4 <func_lrn_channel_f32+0x54>
 800251c:	1c5b      	adds	r3, r3, #1
 800251e:	1e40      	subs	r0, r0, #1
 8002520:	f109 0904 	add.w	r9, r9, #4
 8002524:	f10e 0e01 	add.w	lr, lr, #1
 8002528:	d1b6      	bne.n	8002498 <func_lrn_channel_f32+0x38>
 800252a:	4545      	cmp	r5, r8
 800252c:	f080 8014 	bcs.w	8002558 <func_lrn_channel_f32+0xf8>
 8002530:	ed94 1a00 	vldr	s2, [r4]
 8002534:	eeb0 0a68 	vmov.f32	s0, s17
 8002538:	eef1 0a48 	vneg.f32	s1, s16
 800253c:	ee09 0a01 	vmla.f32	s0, s18, s2
 8002540:	f004 ff2e 	bl	80073a0 <powf>
 8002544:	edd5 0a00 	vldr	s1, [r5]
 8002548:	1d2d      	adds	r5, r5, #4
 800254a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800254e:	edc4 0a00 	vstr	s1, [r4]
 8002552:	1d24      	adds	r4, r4, #4
 8002554:	4545      	cmp	r5, r8
 8002556:	d3eb      	bcc.n	8002530 <func_lrn_channel_f32+0xd0>
 8002558:	ecbd 8b04 	vpop	{d8-d9}
 800255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002560 <func_norm_array_f32>:
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b081      	sub	sp, #4
 8002566:	4614      	mov	r4, r2
 8002568:	fb03 f804 	mul.w	r8, r3, r4
 800256c:	ed2d 8b04 	vpush	{d8-d9}
 8002570:	b084      	sub	sp, #16
 8002572:	eeb0 8a40 	vmov.f32	s16, s0
 8002576:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002578:	eef0 8a60 	vmov.f32	s17, s1
 800257c:	2a00      	cmp	r2, #0
 800257e:	d064      	beq.n	800264a <func_norm_array_f32+0xea>
 8002580:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002584:	9102      	str	r1, [sp, #8]
 8002586:	ee80 9a08 	vdiv.f32	s18, s0, s16
 800258a:	9001      	str	r0, [sp, #4]
 800258c:	9200      	str	r2, [sp, #0]
 800258e:	2600      	movs	r6, #0
 8002590:	2c00      	cmp	r4, #0
 8002592:	d04e      	beq.n	8002632 <func_norm_array_f32+0xd2>
 8002594:	9d02      	ldr	r5, [sp, #8]
 8002596:	9f01      	ldr	r7, [sp, #4]
 8002598:	46a9      	mov	r9, r5
 800259a:	46cb      	mov	fp, r9
 800259c:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80025a0:	9703      	str	r7, [sp, #12]
 80025a2:	eddf 9a63 	vldr	s19, [pc, #396]	; 8002730 <.text_5>
 80025a6:	45d3      	cmp	fp, sl
 80025a8:	f080 800c 	bcs.w	80025c4 <func_norm_array_f32+0x64>
 80025ac:	eef0 0a48 	vmov.f32	s1, s16
 80025b0:	ed99 0a00 	vldr	s0, [r9]
 80025b4:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 80025b8:	f004 fef2 	bl	80073a0 <powf>
 80025bc:	ee79 9a80 	vadd.f32	s19, s19, s0
 80025c0:	45d1      	cmp	r9, sl
 80025c2:	d3f3      	bcc.n	80025ac <func_norm_array_f32+0x4c>
 80025c4:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8002734 <.text_6>
 80025c8:	ee39 1a81 	vadd.f32	s2, s19, s2
 80025cc:	eef0 0a49 	vmov.f32	s1, s18
 80025d0:	ee88 0a81 	vdiv.f32	s0, s17, s2
 80025d4:	f004 fee4 	bl	80073a0 <powf>
 80025d8:	45d3      	cmp	fp, sl
 80025da:	4628      	mov	r0, r5
 80025dc:	d224      	bcs.n	8002628 <func_norm_array_f32+0xc8>
 80025de:	9903      	ldr	r1, [sp, #12]
 80025e0:	edd0 0a00 	vldr	s1, [r0]
 80025e4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80025e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80025ec:	edc1 0a00 	vstr	s1, [r1]
 80025f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80025f4:	4550      	cmp	r0, sl
 80025f6:	d217      	bcs.n	8002628 <func_norm_array_f32+0xc8>
 80025f8:	ed90 1a00 	vldr	s2, [r0]
 80025fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002600:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002604:	ed81 1a00 	vstr	s2, [r1]
 8002608:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800260c:	4550      	cmp	r0, sl
 800260e:	d20b      	bcs.n	8002628 <func_norm_array_f32+0xc8>
 8002610:	edd0 0a00 	vldr	s1, [r0]
 8002614:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002618:	ee60 0a80 	vmul.f32	s1, s1, s0
 800261c:	edc1 0a00 	vstr	s1, [r1]
 8002620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002624:	4550      	cmp	r0, sl
 8002626:	d3db      	bcc.n	80025e0 <func_norm_array_f32+0x80>
 8002628:	1c76      	adds	r6, r6, #1
 800262a:	1d3f      	adds	r7, r7, #4
 800262c:	1d2d      	adds	r5, r5, #4
 800262e:	42a6      	cmp	r6, r4
 8002630:	d3b2      	bcc.n	8002598 <func_norm_array_f32+0x38>
 8002632:	9801      	ldr	r0, [sp, #4]
 8002634:	9a02      	ldr	r2, [sp, #8]
 8002636:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 800263a:	9101      	str	r1, [sp, #4]
 800263c:	eb02 0388 	add.w	r3, r2, r8, lsl #2
 8002640:	9900      	ldr	r1, [sp, #0]
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	1e49      	subs	r1, r1, #1
 8002646:	9100      	str	r1, [sp, #0]
 8002648:	d1a1      	bne.n	800258e <func_norm_array_f32+0x2e>
 800264a:	b004      	add	sp, #16
 800264c:	ecbd 8b04 	vpop	{d8-d9}
 8002650:	b001      	add	sp, #4
 8002652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002658 <func_norm_l2_fast_array_f32>:
 8002658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800265c:	b081      	sub	sp, #4
 800265e:	4616      	mov	r6, r2
 8002660:	460d      	mov	r5, r1
 8002662:	00b7      	lsls	r7, r6, #2
 8002664:	ed2d 8b02 	vpush	{d8}
 8002668:	4604      	mov	r4, r0
 800266a:	eeb0 8a40 	vmov.f32	s16, s0
 800266e:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8002672:	427f      	negs	r7, r7
 8002674:	4545      	cmp	r5, r8
 8002676:	d256      	bcs.n	8002726 <func_norm_l2_fast_array_f32+0xce>
 8002678:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 800267c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002730 <.text_5>
 8002680:	454d      	cmp	r5, r9
 8002682:	d21b      	bcs.n	80026bc <func_norm_l2_fast_array_f32+0x64>
 8002684:	edd5 0a00 	vldr	s1, [r5]
 8002688:	1d2d      	adds	r5, r5, #4
 800268a:	454d      	cmp	r5, r9
 800268c:	ee00 0aa0 	vmla.f32	s0, s1, s1
 8002690:	bf3f      	itttt	cc
 8002692:	edd5 0a00 	vldrcc	s1, [r5]
 8002696:	ee00 0aa0 	vmlacc.f32	s0, s1, s1
 800269a:	1d2d      	addcc	r5, r5, #4
 800269c:	454d      	cmpcc	r5, r9
 800269e:	d20d      	bcs.n	80026bc <func_norm_l2_fast_array_f32+0x64>
 80026a0:	edd5 0a00 	vldr	s1, [r5]
 80026a4:	1d2d      	adds	r5, r5, #4
 80026a6:	454d      	cmp	r5, r9
 80026a8:	ee00 0aa0 	vmla.f32	s0, s1, s1
 80026ac:	bf3f      	itttt	cc
 80026ae:	edd5 0a00 	vldrcc	s1, [r5]
 80026b2:	ee00 0aa0 	vmlacc.f32	s0, s1, s1
 80026b6:	1d2d      	addcc	r5, r5, #4
 80026b8:	454d      	cmpcc	r5, r9
 80026ba:	d3e3      	bcc.n	8002684 <func_norm_l2_fast_array_f32+0x2c>
 80026bc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002734 <.text_6>
 80026c0:	19ed      	adds	r5, r5, r7
 80026c2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80026c6:	ee88 0a00 	vdiv.f32	s0, s16, s0
 80026ca:	f000 f9b7 	bl	8002a3c <ai_math_sqrt>
 80026ce:	454d      	cmp	r5, r9
 80026d0:	f4bf afd0 	bcs.w	8002674 <func_norm_l2_fast_array_f32+0x1c>
 80026d4:	ed95 1a00 	vldr	s2, [r5]
 80026d8:	1d2d      	adds	r5, r5, #4
 80026da:	ee21 1a00 	vmul.f32	s2, s2, s0
 80026de:	ed84 1a00 	vstr	s2, [r4]
 80026e2:	1d24      	adds	r4, r4, #4
 80026e4:	454d      	cmp	r5, r9
 80026e6:	d2c5      	bcs.n	8002674 <func_norm_l2_fast_array_f32+0x1c>
 80026e8:	edd5 0a00 	vldr	s1, [r5]
 80026ec:	1d2d      	adds	r5, r5, #4
 80026ee:	ee60 0a80 	vmul.f32	s1, s1, s0
 80026f2:	edc4 0a00 	vstr	s1, [r4]
 80026f6:	1d24      	adds	r4, r4, #4
 80026f8:	454d      	cmp	r5, r9
 80026fa:	d2bb      	bcs.n	8002674 <func_norm_l2_fast_array_f32+0x1c>
 80026fc:	ed95 1a00 	vldr	s2, [r5]
 8002700:	1d2d      	adds	r5, r5, #4
 8002702:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002706:	ed84 1a00 	vstr	s2, [r4]
 800270a:	1d24      	adds	r4, r4, #4
 800270c:	454d      	cmp	r5, r9
 800270e:	d2b1      	bcs.n	8002674 <func_norm_l2_fast_array_f32+0x1c>
 8002710:	edd5 0a00 	vldr	s1, [r5]
 8002714:	1d2d      	adds	r5, r5, #4
 8002716:	ee60 0a80 	vmul.f32	s1, s1, s0
 800271a:	edc4 0a00 	vstr	s1, [r4]
 800271e:	1d24      	adds	r4, r4, #4
 8002720:	454d      	cmp	r5, r9
 8002722:	d3d7      	bcc.n	80026d4 <func_norm_l2_fast_array_f32+0x7c>
 8002724:	e7a6      	b.n	8002674 <func_norm_l2_fast_array_f32+0x1c>
 8002726:	ecbd 8b02 	vpop	{d8}
 800272a:	b001      	add	sp, #4
 800272c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002730 <.text_5>:
 8002730:	00000000 	.word	0x00000000

08002734 <.text_6>:
 8002734:	34000000 	.word	0x34000000

08002738 <func_lrn_array_f32>:
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273c:	460d      	mov	r5, r1
 800273e:	4604      	mov	r4, r0
 8002740:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8002744:	461e      	mov	r6, r3
 8002746:	ed2d 8b04 	vpush	{d8-d9}
 800274a:	eeb0 8a40 	vmov.f32	s16, s0
 800274e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002750:	4545      	cmp	r5, r8
 8002752:	eef0 8a60 	vmov.f32	s17, s1
 8002756:	eeb0 9a41 	vmov.f32	s18, s2
 800275a:	d211      	bcs.n	8002780 <func_lrn_array_f32+0x48>
 800275c:	eeb0 1a49 	vmov.f32	s2, s18
 8002760:	4629      	mov	r1, r5
 8002762:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8002766:	4620      	mov	r0, r4
 8002768:	eef0 0a68 	vmov.f32	s1, s17
 800276c:	463b      	mov	r3, r7
 800276e:	eeb0 0a48 	vmov.f32	s0, s16
 8002772:	4632      	mov	r2, r6
 8002774:	f7ff fe74 	bl	8002460 <func_lrn_channel_f32>
 8002778:	4545      	cmp	r5, r8
 800277a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800277e:	d3ed      	bcc.n	800275c <func_lrn_array_f32+0x24>
 8002780:	ecbd 8b04 	vpop	{d8-d9}
 8002784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002788 <forward_bn>:
 8002788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	6940      	ldr	r0, [r0, #20]
 800278e:	6800      	ldr	r0, [r0, #0]
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	680d      	ldr	r5, [r1, #0]
 8002794:	68ac      	ldr	r4, [r5, #8]
 8002796:	6842      	ldr	r2, [r0, #4]
 8002798:	6880      	ldr	r0, [r0, #8]
 800279a:	6869      	ldr	r1, [r5, #4]
 800279c:	68eb      	ldr	r3, [r5, #12]
 800279e:	6816      	ldr	r6, [r2, #0]
 80027a0:	692a      	ldr	r2, [r5, #16]
 80027a2:	6807      	ldr	r7, [r0, #0]
 80027a4:	6840      	ldr	r0, [r0, #4]
 80027a6:	4361      	muls	r1, r4
 80027a8:	682d      	ldr	r5, [r5, #0]
 80027aa:	4359      	muls	r1, r3
 80027ac:	6833      	ldr	r3, [r6, #0]
 80027ae:	4351      	muls	r1, r2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	68ad      	ldr	r5, [r5, #8]
 80027b4:	2800      	cmp	r0, #0
 80027b6:	689e      	ldr	r6, [r3, #8]
 80027b8:	6897      	ldr	r7, [r2, #8]
 80027ba:	d061      	beq.n	8002880 <forward_bn+0xf8>
 80027bc:	6800      	ldr	r0, [r0, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	2900      	cmp	r1, #0
 80027c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80027c6:	d059      	beq.n	800287c <forward_bn+0xf4>
 80027c8:	ea4f 0901 	mov.w	r9, r1
 80027cc:	eb04 0e02 	add.w	lr, r4, r2
 80027d0:	4572      	cmp	r2, lr
 80027d2:	d250      	bcs.n	8002876 <forward_bn+0xee>
 80027d4:	f014 0303 	ands.w	r3, r4, #3
 80027d8:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 80027dc:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80027e0:	463a      	mov	r2, r7
 80027e2:	46e0      	mov	r8, ip
 80027e4:	f000 8012 	beq.w	800280c <forward_bn+0x84>
 80027e8:	ed91 0a00 	vldr	s0, [r1]
 80027ec:	1e5b      	subs	r3, r3, #1
 80027ee:	edd2 0a00 	vldr	s1, [r2]
 80027f2:	1d12      	adds	r2, r2, #4
 80027f4:	ed98 1a00 	vldr	s2, [r8]
 80027f8:	1d09      	adds	r1, r1, #4
 80027fa:	ee00 1a20 	vmla.f32	s2, s0, s1
 80027fe:	f108 0804 	add.w	r8, r8, #4
 8002802:	ed80 1a00 	vstr	s2, [r0]
 8002806:	1d00      	adds	r0, r0, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ed      	bne.n	80027e8 <forward_bn+0x60>
 800280c:	08a3      	lsrs	r3, r4, #2
 800280e:	d032      	beq.n	8002876 <forward_bn+0xee>
 8002810:	4682      	mov	sl, r0
 8002812:	4618      	mov	r0, r3
 8002814:	ed91 2a00 	vldr	s4, [r1]
 8002818:	1e40      	subs	r0, r0, #1
 800281a:	ed92 1a00 	vldr	s2, [r2]
 800281e:	ed98 0a00 	vldr	s0, [r8]
 8002822:	ee02 0a01 	vmla.f32	s0, s4, s2
 8002826:	ed8a 0a00 	vstr	s0, [sl]
 800282a:	edd1 2a01 	vldr	s5, [r1, #4]
 800282e:	edd2 1a01 	vldr	s3, [r2, #4]
 8002832:	edd8 0a01 	vldr	s1, [r8, #4]
 8002836:	ee42 0aa1 	vmla.f32	s1, s5, s3
 800283a:	edca 0a01 	vstr	s1, [sl, #4]
 800283e:	ed91 2a02 	vldr	s4, [r1, #8]
 8002842:	ed92 1a02 	vldr	s2, [r2, #8]
 8002846:	ed98 0a02 	vldr	s0, [r8, #8]
 800284a:	ee02 0a01 	vmla.f32	s0, s4, s2
 800284e:	ed8a 0a02 	vstr	s0, [sl, #8]
 8002852:	edd1 1a03 	vldr	s3, [r1, #12]
 8002856:	3110      	adds	r1, #16
 8002858:	edd2 0a03 	vldr	s1, [r2, #12]
 800285c:	3210      	adds	r2, #16
 800285e:	edd8 2a03 	vldr	s5, [r8, #12]
 8002862:	2800      	cmp	r0, #0
 8002864:	ee41 2aa0 	vmla.f32	s5, s3, s1
 8002868:	f108 0810 	add.w	r8, r8, #16
 800286c:	edca 2a03 	vstr	s5, [sl, #12]
 8002870:	f10a 0a10 	add.w	sl, sl, #16
 8002874:	d1ce      	bne.n	8002814 <forward_bn+0x8c>
 8002876:	4672      	mov	r2, lr
 8002878:	454a      	cmp	r2, r9
 800287a:	d3a7      	bcc.n	80027cc <forward_bn+0x44>
 800287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002880:	2900      	cmp	r1, #0
 8002882:	f04f 0c00 	mov.w	ip, #0
 8002886:	d0f9      	beq.n	800287c <forward_bn+0xf4>
 8002888:	eb04 020c 	add.w	r2, r4, ip
 800288c:	4594      	cmp	ip, r2
 800288e:	4663      	mov	r3, ip
 8002890:	d24c      	bcs.n	800292c <forward_bn+0x1a4>
 8002892:	f014 0003 	ands.w	r0, r4, #3
 8002896:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
 800289a:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 800289e:	46b9      	mov	r9, r7
 80028a0:	f000 8011 	beq.w	80028c6 <forward_bn+0x13e>
 80028a4:	ed98 0a00 	vldr	s0, [r8]
 80028a8:	1c5b      	adds	r3, r3, #1
 80028aa:	edd9 0a00 	vldr	s1, [r9]
 80028ae:	1e40      	subs	r0, r0, #1
 80028b0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80028b4:	f109 0904 	add.w	r9, r9, #4
 80028b8:	edce 0a00 	vstr	s1, [lr]
 80028bc:	f108 0804 	add.w	r8, r8, #4
 80028c0:	f10e 0e04 	add.w	lr, lr, #4
 80028c4:	d1ee      	bne.n	80028a4 <forward_bn+0x11c>
 80028c6:	08a0      	lsrs	r0, r4, #2
 80028c8:	f000 8030 	beq.w	800292c <forward_bn+0x1a4>
 80028cc:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
 80028d0:	eba3 0c0c 	sub.w	ip, r3, ip
 80028d4:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80028d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80028dc:	ed9e 1a00 	vldr	s2, [lr]
 80028e0:	1e40      	subs	r0, r0, #1
 80028e2:	ed9c 0a00 	vldr	s0, [ip]
 80028e6:	ee21 0a00 	vmul.f32	s0, s2, s0
 80028ea:	ed83 0a00 	vstr	s0, [r3]
 80028ee:	edde 1a01 	vldr	s3, [lr, #4]
 80028f2:	eddc 0a01 	vldr	s1, [ip, #4]
 80028f6:	ee61 0aa0 	vmul.f32	s1, s3, s1
 80028fa:	edc3 0a01 	vstr	s1, [r3, #4]
 80028fe:	ed9e 1a02 	vldr	s2, [lr, #8]
 8002902:	ed9c 0a02 	vldr	s0, [ip, #8]
 8002906:	ee21 0a00 	vmul.f32	s0, s2, s0
 800290a:	ed83 0a02 	vstr	s0, [r3, #8]
 800290e:	edde 0a03 	vldr	s1, [lr, #12]
 8002912:	f10e 0e10 	add.w	lr, lr, #16
 8002916:	eddc 1a03 	vldr	s3, [ip, #12]
 800291a:	f10c 0c10 	add.w	ip, ip, #16
 800291e:	ee60 0aa1 	vmul.f32	s1, s1, s3
 8002922:	edc3 0a03 	vstr	s1, [r3, #12]
 8002926:	3310      	adds	r3, #16
 8002928:	2800      	cmp	r0, #0
 800292a:	d1d7      	bne.n	80028dc <forward_bn+0x154>
 800292c:	4694      	mov	ip, r2
 800292e:	458c      	cmp	ip, r1
 8002930:	d3aa      	bcc.n	8002888 <forward_bn+0x100>
 8002932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002936 <forward_lrn>:
 8002936:	b570      	push	{r4, r5, r6, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	6941      	ldr	r1, [r0, #20]
 800293c:	680c      	ldr	r4, [r1, #0]
 800293e:	6981      	ldr	r1, [r0, #24]
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	6815      	ldr	r5, [r2, #0]
 8002944:	0849      	lsrs	r1, r1, #1
 8002946:	68aa      	ldr	r2, [r5, #8]
 8002948:	9100      	str	r1, [sp, #0]
 800294a:	686e      	ldr	r6, [r5, #4]
 800294c:	6864      	ldr	r4, [r4, #4]
 800294e:	68e9      	ldr	r1, [r5, #12]
 8002950:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 8002954:	4613      	mov	r3, r2
 8002956:	edd0 0a08 	vldr	s1, [r0, #32]
 800295a:	4372      	muls	r2, r6
 800295c:	ed90 0a07 	vldr	s0, [r0, #28]
 8002960:	6826      	ldr	r6, [r4, #0]
 8002962:	6928      	ldr	r0, [r5, #16]
 8002964:	682d      	ldr	r5, [r5, #0]
 8002966:	434a      	muls	r2, r1
 8002968:	68a9      	ldr	r1, [r5, #8]
 800296a:	6835      	ldr	r5, [r6, #0]
 800296c:	4342      	muls	r2, r0
 800296e:	68a8      	ldr	r0, [r5, #8]
 8002970:	f7ff fee2 	bl	8002738 <func_lrn_array_f32>
 8002974:	b002      	add	sp, #8
 8002976:	bd70      	pop	{r4, r5, r6, pc}

08002978 <forward_norm>:
 8002978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297a:	b081      	sub	sp, #4
 800297c:	6941      	ldr	r1, [r0, #20]
 800297e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002982:	6809      	ldr	r1, [r1, #0]
 8002984:	680a      	ldr	r2, [r1, #0]
 8002986:	6817      	ldr	r7, [r2, #0]
 8002988:	684b      	ldr	r3, [r1, #4]
 800298a:	7e01      	ldrb	r1, [r0, #24]
 800298c:	f8d3 c000 	ldr.w	ip, [r3]
 8002990:	1d3a      	adds	r2, r7, #4
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	697c      	ldr	r4, [r7, #20]
 8002998:	687d      	ldr	r5, [r7, #4]
 800299a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800299e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80029a2:	68fe      	ldr	r6, [r7, #12]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	fb91 f4f4 	sdiv	r4, r1, r4
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	434d      	muls	r5, r1
 80029ae:	f890 1020 	ldrb.w	r1, [r0, #32]
 80029b2:	4375      	muls	r5, r6
 80029b4:	435d      	muls	r5, r3
 80029b6:	fb04 f302 	mul.w	r3, r4, r2
 80029ba:	2900      	cmp	r1, #0
 80029bc:	bf1a      	itte	ne
 80029be:	ee00 2a10 	vmovne	s0, r2
 80029c2:	eef8 0a40 	vcvtne.f32.u32	s1, s0
 80029c6:	eef7 0a00 	vmoveq.f32	s1, #112	; 0x3f800000  1.0
 80029ca:	ed90 0a07 	vldr	s0, [r0, #28]
 80029ce:	eeb4 0a41 	vcmp.f32	s0, s2
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	fbb5 f3f3 	udiv	r3, r5, r3
 80029da:	bf08      	it	eq
 80029dc:	2c01      	cmpeq	r4, #1
 80029de:	d10b      	bne.n	80029f8 <forward_norm+0x80>
 80029e0:	462b      	mov	r3, r5
 80029e2:	683c      	ldr	r4, [r7, #0]
 80029e4:	f8dc 5000 	ldr.w	r5, [ip]
 80029e8:	eeb0 0a60 	vmov.f32	s0, s1
 80029ec:	68a1      	ldr	r1, [r4, #8]
 80029ee:	68a8      	ldr	r0, [r5, #8]
 80029f0:	b001      	add	sp, #4
 80029f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80029f6:	e62f      	b.n	8002658 <func_norm_l2_fast_array_f32>
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	f8dc 0000 	ldr.w	r0, [ip]
 8002a00:	4613      	mov	r3, r2
 8002a02:	6889      	ldr	r1, [r1, #8]
 8002a04:	4622      	mov	r2, r4
 8002a06:	6880      	ldr	r0, [r0, #8]
 8002a08:	f7ff fdaa 	bl	8002560 <func_norm_array_f32>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <ai_math_dot_array>:
 8002a10:	b530      	push	{r4, r5, lr}
 8002a12:	4604      	mov	r4, r0
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	b081      	sub	sp, #4
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2500      	movs	r5, #0
 8002a1e:	9500      	str	r5, [sp, #0]
 8002a20:	466b      	mov	r3, sp
 8002a22:	f000 ff3f 	bl	80038a4 <arm_dot_prod_f32>
 8002a26:	ed94 0a00 	vldr	s0, [r4]
 8002a2a:	eddd 0a00 	vldr	s1, [sp]
 8002a2e:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002a32:	edc4 0a00 	vstr	s1, [r4]
 8002a36:	b001      	add	sp, #4
 8002a38:	bd30      	pop	{r4, r5, pc}
	...

08002a3c <ai_math_sqrt>:
 8002a3c:	eef0 0a40 	vmov.f32	s1, s0
 8002a40:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002aec <.text_12>
 8002a4c:	db01      	blt.n	8002a52 <ai_math_sqrt+0x16>
 8002a4e:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8002a52:	4770      	bx	lr

08002a54 <ai_math_exp>:
 8002a54:	f004 bc2a 	b.w	80072ac <expf>

08002a58 <ai_math_pow>:
 8002a58:	f004 bca2 	b.w	80073a0 <powf>

08002a5c <ai_math_tanh>:
 8002a5c:	f004 bbd4 	b.w	8007208 <tanhf>

08002a60 <ai_math_relu>:
 8002a60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	bfd8      	it	le
 8002a6a:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 8002aec <.text_12>
 8002a6e:	4770      	bx	lr

08002a70 <ai_math_prelu>:
 8002a70:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	bfd8      	it	le
 8002a7a:	ee20 0a20 	vmulle.f32	s0, s0, s1
 8002a7e:	4770      	bx	lr

08002a80 <ai_math_sigmoid>:
 8002a80:	b500      	push	{lr}
 8002a82:	b081      	sub	sp, #4
 8002a84:	eeb1 0a40 	vneg.f32	s0, s0
 8002a88:	f004 fc10 	bl	80072ac <expf>
 8002a8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002a90:	b001      	add	sp, #4
 8002a92:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002a9a:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8002a9e:	bd00      	pop	{pc}

08002aa0 <ai_math_hard_sigmoid>:
 8002aa0:	eef0 0a40 	vmov.f32	s1, s0
 8002aa4:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002af0 <.text_13>
 8002aa8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002aac:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002ab0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002af4 <.text_14>
 8002ab4:	eeb4 0a60 	vcmp.f32	s0, s1
 8002ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abc:	da07      	bge.n	8002ace <ai_math_hard_sigmoid+0x2e>
 8002abe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d504      	bpl.n	8002ad2 <ai_math_hard_sigmoid+0x32>
 8002ac8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002aec <.text_12>
 8002acc:	4770      	bx	lr
 8002ace:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ad2:	4770      	bx	lr

08002ad4 <ai_math_sign>:
 8002ad4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	bfcc      	ite	gt
 8002ade:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8002af8 <.text_15>
 8002ae2:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8002afc <.text_16>
 8002ae6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002aea:	4770      	bx	lr

08002aec <.text_12>:
 8002aec:	00000000 	.word	0x00000000

08002af0 <.text_13>:
 8002af0:	3e4ccccd 	.word	0x3e4ccccd

08002af4 <.text_14>:
 8002af4:	3f800001 	.word	0x3f800001

08002af8 <.text_15>:
 8002af8:	00000001 	.word	0x00000001

08002afc <.text_16>:
 8002afc:	ffffffff 	.word	0xffffffff

08002b00 <__aeabi_memset>:
 8002b00:	b470      	push	{r4, r5, r6}
 8002b02:	0784      	lsls	r4, r0, #30
 8002b04:	d046      	beq.n	8002b94 <__aeabi_memset+0x94>
 8002b06:	1e4c      	subs	r4, r1, #1
 8002b08:	2900      	cmp	r1, #0
 8002b0a:	d041      	beq.n	8002b90 <__aeabi_memset+0x90>
 8002b0c:	b2d5      	uxtb	r5, r2
 8002b0e:	4603      	mov	r3, r0
 8002b10:	e002      	b.n	8002b18 <__aeabi_memset+0x18>
 8002b12:	1e61      	subs	r1, r4, #1
 8002b14:	b3e4      	cbz	r4, 8002b90 <__aeabi_memset+0x90>
 8002b16:	460c      	mov	r4, r1
 8002b18:	f803 5b01 	strb.w	r5, [r3], #1
 8002b1c:	0799      	lsls	r1, r3, #30
 8002b1e:	d1f8      	bne.n	8002b12 <__aeabi_memset+0x12>
 8002b20:	2c03      	cmp	r4, #3
 8002b22:	d92e      	bls.n	8002b82 <__aeabi_memset+0x82>
 8002b24:	b2d5      	uxtb	r5, r2
 8002b26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002b2a:	2c0f      	cmp	r4, #15
 8002b2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002b30:	d919      	bls.n	8002b66 <__aeabi_memset+0x66>
 8002b32:	4626      	mov	r6, r4
 8002b34:	f103 0110 	add.w	r1, r3, #16
 8002b38:	3e10      	subs	r6, #16
 8002b3a:	2e0f      	cmp	r6, #15
 8002b3c:	f841 5c10 	str.w	r5, [r1, #-16]
 8002b40:	f841 5c0c 	str.w	r5, [r1, #-12]
 8002b44:	f841 5c08 	str.w	r5, [r1, #-8]
 8002b48:	f841 5c04 	str.w	r5, [r1, #-4]
 8002b4c:	f101 0110 	add.w	r1, r1, #16
 8002b50:	d8f2      	bhi.n	8002b38 <__aeabi_memset+0x38>
 8002b52:	f1a4 0110 	sub.w	r1, r4, #16
 8002b56:	f021 010f 	bic.w	r1, r1, #15
 8002b5a:	f004 040f 	and.w	r4, r4, #15
 8002b5e:	3110      	adds	r1, #16
 8002b60:	2c03      	cmp	r4, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	d90d      	bls.n	8002b82 <__aeabi_memset+0x82>
 8002b66:	461e      	mov	r6, r3
 8002b68:	4621      	mov	r1, r4
 8002b6a:	3904      	subs	r1, #4
 8002b6c:	2903      	cmp	r1, #3
 8002b6e:	f846 5b04 	str.w	r5, [r6], #4
 8002b72:	d8fa      	bhi.n	8002b6a <__aeabi_memset+0x6a>
 8002b74:	1f21      	subs	r1, r4, #4
 8002b76:	f021 0103 	bic.w	r1, r1, #3
 8002b7a:	3104      	adds	r1, #4
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f004 0403 	and.w	r4, r4, #3
 8002b82:	b12c      	cbz	r4, 8002b90 <__aeabi_memset+0x90>
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	441c      	add	r4, r3
 8002b88:	f803 2b01 	strb.w	r2, [r3], #1
 8002b8c:	42a3      	cmp	r3, r4
 8002b8e:	d1fb      	bne.n	8002b88 <__aeabi_memset+0x88>
 8002b90:	bc70      	pop	{r4, r5, r6}
 8002b92:	4770      	bx	lr
 8002b94:	460c      	mov	r4, r1
 8002b96:	4603      	mov	r3, r0
 8002b98:	e7c2      	b.n	8002b20 <__aeabi_memset+0x20>

08002b9a <strlen>:
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d1fb      	bne.n	8002b9c <strlen+0x2>
 8002ba4:	1a18      	subs	r0, r3, r0
 8002ba6:	3801      	subs	r0, #1
 8002ba8:	4770      	bx	lr
 8002baa:	0000      	movs	r0, r0
 8002bac:	0000      	movs	r0, r0
	...

08002bb0 <memchr>:
 8002bb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002bb4:	2a10      	cmp	r2, #16
 8002bb6:	db2b      	blt.n	8002c10 <memchr+0x60>
 8002bb8:	f010 0f07 	tst.w	r0, #7
 8002bbc:	d008      	beq.n	8002bd0 <memchr+0x20>
 8002bbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002bc2:	3a01      	subs	r2, #1
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	d02d      	beq.n	8002c24 <memchr+0x74>
 8002bc8:	f010 0f07 	tst.w	r0, #7
 8002bcc:	b342      	cbz	r2, 8002c20 <memchr+0x70>
 8002bce:	d1f6      	bne.n	8002bbe <memchr+0xe>
 8002bd0:	b4f0      	push	{r4, r5, r6, r7}
 8002bd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002bd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002bda:	f022 0407 	bic.w	r4, r2, #7
 8002bde:	f07f 0700 	mvns.w	r7, #0
 8002be2:	2300      	movs	r3, #0
 8002be4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002be8:	3c08      	subs	r4, #8
 8002bea:	ea85 0501 	eor.w	r5, r5, r1
 8002bee:	ea86 0601 	eor.w	r6, r6, r1
 8002bf2:	fa85 f547 	uadd8	r5, r5, r7
 8002bf6:	faa3 f587 	sel	r5, r3, r7
 8002bfa:	fa86 f647 	uadd8	r6, r6, r7
 8002bfe:	faa5 f687 	sel	r6, r5, r7
 8002c02:	b98e      	cbnz	r6, 8002c28 <memchr+0x78>
 8002c04:	d1ee      	bne.n	8002be4 <memchr+0x34>
 8002c06:	bcf0      	pop	{r4, r5, r6, r7}
 8002c08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002c0c:	f002 0207 	and.w	r2, r2, #7
 8002c10:	b132      	cbz	r2, 8002c20 <memchr+0x70>
 8002c12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	ea83 0301 	eor.w	r3, r3, r1
 8002c1c:	b113      	cbz	r3, 8002c24 <memchr+0x74>
 8002c1e:	d1f8      	bne.n	8002c12 <memchr+0x62>
 8002c20:	2000      	movs	r0, #0
 8002c22:	4770      	bx	lr
 8002c24:	3801      	subs	r0, #1
 8002c26:	4770      	bx	lr
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	bf06      	itte	eq
 8002c2c:	4635      	moveq	r5, r6
 8002c2e:	3803      	subeq	r0, #3
 8002c30:	3807      	subne	r0, #7
 8002c32:	f015 0f01 	tst.w	r5, #1
 8002c36:	d107      	bne.n	8002c48 <memchr+0x98>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002c3e:	bf02      	ittt	eq
 8002c40:	3001      	addeq	r0, #1
 8002c42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002c46:	3001      	addeq	r0, #1
 8002c48:	bcf0      	pop	{r4, r5, r6, r7}
 8002c4a:	3801      	subs	r0, #1
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <__aeabi_drsub>:
 8002c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002c54:	e002      	b.n	8002c5c <__adddf3>
 8002c56:	bf00      	nop

08002c58 <__aeabi_dsub>:
 8002c58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002c5c <__adddf3>:
 8002c5c:	b530      	push	{r4, r5, lr}
 8002c5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002c62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002c66:	ea94 0f05 	teq	r4, r5
 8002c6a:	bf08      	it	eq
 8002c6c:	ea90 0f02 	teqeq	r0, r2
 8002c70:	bf1f      	itttt	ne
 8002c72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002c76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002c7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002c7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002c82:	f000 80e2 	beq.w	8002e4a <__adddf3+0x1ee>
 8002c86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002c8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002c8e:	bfb8      	it	lt
 8002c90:	426d      	neglt	r5, r5
 8002c92:	dd0c      	ble.n	8002cae <__adddf3+0x52>
 8002c94:	442c      	add	r4, r5
 8002c96:	ea80 0202 	eor.w	r2, r0, r2
 8002c9a:	ea81 0303 	eor.w	r3, r1, r3
 8002c9e:	ea82 0000 	eor.w	r0, r2, r0
 8002ca2:	ea83 0101 	eor.w	r1, r3, r1
 8002ca6:	ea80 0202 	eor.w	r2, r0, r2
 8002caa:	ea81 0303 	eor.w	r3, r1, r3
 8002cae:	2d36      	cmp	r5, #54	; 0x36
 8002cb0:	bf88      	it	hi
 8002cb2:	bd30      	pophi	{r4, r5, pc}
 8002cb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002cb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002cbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002cc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002cc4:	d002      	beq.n	8002ccc <__adddf3+0x70>
 8002cc6:	4240      	negs	r0, r0
 8002cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002ccc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002cd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002cd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002cd8:	d002      	beq.n	8002ce0 <__adddf3+0x84>
 8002cda:	4252      	negs	r2, r2
 8002cdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002ce0:	ea94 0f05 	teq	r4, r5
 8002ce4:	f000 80a7 	beq.w	8002e36 <__adddf3+0x1da>
 8002ce8:	f1a4 0401 	sub.w	r4, r4, #1
 8002cec:	f1d5 0e20 	rsbs	lr, r5, #32
 8002cf0:	db0d      	blt.n	8002d0e <__adddf3+0xb2>
 8002cf2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002cf6:	fa22 f205 	lsr.w	r2, r2, r5
 8002cfa:	1880      	adds	r0, r0, r2
 8002cfc:	f141 0100 	adc.w	r1, r1, #0
 8002d00:	fa03 f20e 	lsl.w	r2, r3, lr
 8002d04:	1880      	adds	r0, r0, r2
 8002d06:	fa43 f305 	asr.w	r3, r3, r5
 8002d0a:	4159      	adcs	r1, r3
 8002d0c:	e00e      	b.n	8002d2c <__adddf3+0xd0>
 8002d0e:	f1a5 0520 	sub.w	r5, r5, #32
 8002d12:	f10e 0e20 	add.w	lr, lr, #32
 8002d16:	2a01      	cmp	r2, #1
 8002d18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002d1c:	bf28      	it	cs
 8002d1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002d22:	fa43 f305 	asr.w	r3, r3, r5
 8002d26:	18c0      	adds	r0, r0, r3
 8002d28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002d2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002d30:	d507      	bpl.n	8002d42 <__adddf3+0xe6>
 8002d32:	f04f 0e00 	mov.w	lr, #0
 8002d36:	f1dc 0c00 	rsbs	ip, ip, #0
 8002d3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002d3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002d42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002d46:	d31b      	bcc.n	8002d80 <__adddf3+0x124>
 8002d48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002d4c:	d30c      	bcc.n	8002d68 <__adddf3+0x10c>
 8002d4e:	0849      	lsrs	r1, r1, #1
 8002d50:	ea5f 0030 	movs.w	r0, r0, rrx
 8002d54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002d58:	f104 0401 	add.w	r4, r4, #1
 8002d5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002d60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002d64:	f080 809a 	bcs.w	8002e9c <__adddf3+0x240>
 8002d68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002d6c:	bf08      	it	eq
 8002d6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002d72:	f150 0000 	adcs.w	r0, r0, #0
 8002d76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002d7a:	ea41 0105 	orr.w	r1, r1, r5
 8002d7e:	bd30      	pop	{r4, r5, pc}
 8002d80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002d84:	4140      	adcs	r0, r0
 8002d86:	eb41 0101 	adc.w	r1, r1, r1
 8002d8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d8e:	f1a4 0401 	sub.w	r4, r4, #1
 8002d92:	d1e9      	bne.n	8002d68 <__adddf3+0x10c>
 8002d94:	f091 0f00 	teq	r1, #0
 8002d98:	bf04      	itt	eq
 8002d9a:	4601      	moveq	r1, r0
 8002d9c:	2000      	moveq	r0, #0
 8002d9e:	fab1 f381 	clz	r3, r1
 8002da2:	bf08      	it	eq
 8002da4:	3320      	addeq	r3, #32
 8002da6:	f1a3 030b 	sub.w	r3, r3, #11
 8002daa:	f1b3 0220 	subs.w	r2, r3, #32
 8002dae:	da0c      	bge.n	8002dca <__adddf3+0x16e>
 8002db0:	320c      	adds	r2, #12
 8002db2:	dd08      	ble.n	8002dc6 <__adddf3+0x16a>
 8002db4:	f102 0c14 	add.w	ip, r2, #20
 8002db8:	f1c2 020c 	rsb	r2, r2, #12
 8002dbc:	fa01 f00c 	lsl.w	r0, r1, ip
 8002dc0:	fa21 f102 	lsr.w	r1, r1, r2
 8002dc4:	e00c      	b.n	8002de0 <__adddf3+0x184>
 8002dc6:	f102 0214 	add.w	r2, r2, #20
 8002dca:	bfd8      	it	le
 8002dcc:	f1c2 0c20 	rsble	ip, r2, #32
 8002dd0:	fa01 f102 	lsl.w	r1, r1, r2
 8002dd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002dd8:	bfdc      	itt	le
 8002dda:	ea41 010c 	orrle.w	r1, r1, ip
 8002dde:	4090      	lslle	r0, r2
 8002de0:	1ae4      	subs	r4, r4, r3
 8002de2:	bfa2      	ittt	ge
 8002de4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002de8:	4329      	orrge	r1, r5
 8002dea:	bd30      	popge	{r4, r5, pc}
 8002dec:	ea6f 0404 	mvn.w	r4, r4
 8002df0:	3c1f      	subs	r4, #31
 8002df2:	da1c      	bge.n	8002e2e <__adddf3+0x1d2>
 8002df4:	340c      	adds	r4, #12
 8002df6:	dc0e      	bgt.n	8002e16 <__adddf3+0x1ba>
 8002df8:	f104 0414 	add.w	r4, r4, #20
 8002dfc:	f1c4 0220 	rsb	r2, r4, #32
 8002e00:	fa20 f004 	lsr.w	r0, r0, r4
 8002e04:	fa01 f302 	lsl.w	r3, r1, r2
 8002e08:	ea40 0003 	orr.w	r0, r0, r3
 8002e0c:	fa21 f304 	lsr.w	r3, r1, r4
 8002e10:	ea45 0103 	orr.w	r1, r5, r3
 8002e14:	bd30      	pop	{r4, r5, pc}
 8002e16:	f1c4 040c 	rsb	r4, r4, #12
 8002e1a:	f1c4 0220 	rsb	r2, r4, #32
 8002e1e:	fa20 f002 	lsr.w	r0, r0, r2
 8002e22:	fa01 f304 	lsl.w	r3, r1, r4
 8002e26:	ea40 0003 	orr.w	r0, r0, r3
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	bd30      	pop	{r4, r5, pc}
 8002e2e:	fa21 f004 	lsr.w	r0, r1, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	bd30      	pop	{r4, r5, pc}
 8002e36:	f094 0f00 	teq	r4, #0
 8002e3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002e3e:	bf06      	itte	eq
 8002e40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002e44:	3401      	addeq	r4, #1
 8002e46:	3d01      	subne	r5, #1
 8002e48:	e74e      	b.n	8002ce8 <__adddf3+0x8c>
 8002e4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002e4e:	bf18      	it	ne
 8002e50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002e54:	d029      	beq.n	8002eaa <__adddf3+0x24e>
 8002e56:	ea94 0f05 	teq	r4, r5
 8002e5a:	bf08      	it	eq
 8002e5c:	ea90 0f02 	teqeq	r0, r2
 8002e60:	d005      	beq.n	8002e6e <__adddf3+0x212>
 8002e62:	ea54 0c00 	orrs.w	ip, r4, r0
 8002e66:	bf04      	itt	eq
 8002e68:	4619      	moveq	r1, r3
 8002e6a:	4610      	moveq	r0, r2
 8002e6c:	bd30      	pop	{r4, r5, pc}
 8002e6e:	ea91 0f03 	teq	r1, r3
 8002e72:	bf1e      	ittt	ne
 8002e74:	2100      	movne	r1, #0
 8002e76:	2000      	movne	r0, #0
 8002e78:	bd30      	popne	{r4, r5, pc}
 8002e7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002e7e:	d105      	bne.n	8002e8c <__adddf3+0x230>
 8002e80:	0040      	lsls	r0, r0, #1
 8002e82:	4149      	adcs	r1, r1
 8002e84:	bf28      	it	cs
 8002e86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002e8a:	bd30      	pop	{r4, r5, pc}
 8002e8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002e90:	bf3c      	itt	cc
 8002e92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002e96:	bd30      	popcc	{r4, r5, pc}
 8002e98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002e9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002ea0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	bd30      	pop	{r4, r5, pc}
 8002eaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002eae:	bf1a      	itte	ne
 8002eb0:	4619      	movne	r1, r3
 8002eb2:	4610      	movne	r0, r2
 8002eb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002eb8:	bf1c      	itt	ne
 8002eba:	460b      	movne	r3, r1
 8002ebc:	4602      	movne	r2, r0
 8002ebe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002ec2:	bf06      	itte	eq
 8002ec4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002ec8:	ea91 0f03 	teqeq	r1, r3
 8002ecc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002ed0:	bd30      	pop	{r4, r5, pc}
 8002ed2:	bf00      	nop

08002ed4 <__aeabi_ui2d>:
 8002ed4:	f090 0f00 	teq	r0, #0
 8002ed8:	bf04      	itt	eq
 8002eda:	2100      	moveq	r1, #0
 8002edc:	4770      	bxeq	lr
 8002ede:	b530      	push	{r4, r5, lr}
 8002ee0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002ee4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002ee8:	f04f 0500 	mov.w	r5, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	e750      	b.n	8002d94 <__adddf3+0x138>
 8002ef2:	bf00      	nop

08002ef4 <__aeabi_i2d>:
 8002ef4:	f090 0f00 	teq	r0, #0
 8002ef8:	bf04      	itt	eq
 8002efa:	2100      	moveq	r1, #0
 8002efc:	4770      	bxeq	lr
 8002efe:	b530      	push	{r4, r5, lr}
 8002f00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002f04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002f08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002f0c:	bf48      	it	mi
 8002f0e:	4240      	negmi	r0, r0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	e73e      	b.n	8002d94 <__adddf3+0x138>
 8002f16:	bf00      	nop

08002f18 <__aeabi_f2d>:
 8002f18:	0042      	lsls	r2, r0, #1
 8002f1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002f1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002f22:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002f26:	bf1f      	itttt	ne
 8002f28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002f2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002f30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002f34:	4770      	bxne	lr
 8002f36:	f092 0f00 	teq	r2, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002f40:	4770      	bxeq	lr
 8002f42:	b530      	push	{r4, r5, lr}
 8002f44:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002f48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002f4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002f50:	e720      	b.n	8002d94 <__adddf3+0x138>
 8002f52:	bf00      	nop

08002f54 <__aeabi_ul2d>:
 8002f54:	ea50 0201 	orrs.w	r2, r0, r1
 8002f58:	bf08      	it	eq
 8002f5a:	4770      	bxeq	lr
 8002f5c:	b530      	push	{r4, r5, lr}
 8002f5e:	f04f 0500 	mov.w	r5, #0
 8002f62:	e00a      	b.n	8002f7a <__aeabi_l2d+0x16>

08002f64 <__aeabi_l2d>:
 8002f64:	ea50 0201 	orrs.w	r2, r0, r1
 8002f68:	bf08      	it	eq
 8002f6a:	4770      	bxeq	lr
 8002f6c:	b530      	push	{r4, r5, lr}
 8002f6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002f72:	d502      	bpl.n	8002f7a <__aeabi_l2d+0x16>
 8002f74:	4240      	negs	r0, r0
 8002f76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002f7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002f7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002f82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002f86:	f43f aedc 	beq.w	8002d42 <__adddf3+0xe6>
 8002f8a:	f04f 0203 	mov.w	r2, #3
 8002f8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002f92:	bf18      	it	ne
 8002f94:	3203      	addne	r2, #3
 8002f96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002f9a:	bf18      	it	ne
 8002f9c:	3203      	addne	r2, #3
 8002f9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002fa2:	f1c2 0320 	rsb	r3, r2, #32
 8002fa6:	fa00 fc03 	lsl.w	ip, r0, r3
 8002faa:	fa20 f002 	lsr.w	r0, r0, r2
 8002fae:	fa01 fe03 	lsl.w	lr, r1, r3
 8002fb2:	ea40 000e 	orr.w	r0, r0, lr
 8002fb6:	fa21 f102 	lsr.w	r1, r1, r2
 8002fba:	4414      	add	r4, r2
 8002fbc:	e6c1      	b.n	8002d42 <__adddf3+0xe6>
 8002fbe:	bf00      	nop

08002fc0 <__aeabi_dmul>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002fc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002fca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002fce:	bf1d      	ittte	ne
 8002fd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002fd4:	ea94 0f0c 	teqne	r4, ip
 8002fd8:	ea95 0f0c 	teqne	r5, ip
 8002fdc:	f000 f8de 	bleq	800319c <__aeabi_dmul+0x1dc>
 8002fe0:	442c      	add	r4, r5
 8002fe2:	ea81 0603 	eor.w	r6, r1, r3
 8002fe6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002fea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002fee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002ff2:	bf18      	it	ne
 8002ff4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002ff8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003000:	d038      	beq.n	8003074 <__aeabi_dmul+0xb4>
 8003002:	fba0 ce02 	umull	ip, lr, r0, r2
 8003006:	f04f 0500 	mov.w	r5, #0
 800300a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800300e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003012:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003016:	f04f 0600 	mov.w	r6, #0
 800301a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800301e:	f09c 0f00 	teq	ip, #0
 8003022:	bf18      	it	ne
 8003024:	f04e 0e01 	orrne.w	lr, lr, #1
 8003028:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800302c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003030:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003034:	d204      	bcs.n	8003040 <__aeabi_dmul+0x80>
 8003036:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800303a:	416d      	adcs	r5, r5
 800303c:	eb46 0606 	adc.w	r6, r6, r6
 8003040:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003044:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003048:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800304c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003050:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003054:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003058:	bf88      	it	hi
 800305a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800305e:	d81e      	bhi.n	800309e <__aeabi_dmul+0xde>
 8003060:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003064:	bf08      	it	eq
 8003066:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800306a:	f150 0000 	adcs.w	r0, r0, #0
 800306e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003078:	ea46 0101 	orr.w	r1, r6, r1
 800307c:	ea40 0002 	orr.w	r0, r0, r2
 8003080:	ea81 0103 	eor.w	r1, r1, r3
 8003084:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003088:	bfc2      	ittt	gt
 800308a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800308e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003092:	bd70      	popgt	{r4, r5, r6, pc}
 8003094:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003098:	f04f 0e00 	mov.w	lr, #0
 800309c:	3c01      	subs	r4, #1
 800309e:	f300 80ab 	bgt.w	80031f8 <__aeabi_dmul+0x238>
 80030a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80030a6:	bfde      	ittt	le
 80030a8:	2000      	movle	r0, #0
 80030aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80030ae:	bd70      	pople	{r4, r5, r6, pc}
 80030b0:	f1c4 0400 	rsb	r4, r4, #0
 80030b4:	3c20      	subs	r4, #32
 80030b6:	da35      	bge.n	8003124 <__aeabi_dmul+0x164>
 80030b8:	340c      	adds	r4, #12
 80030ba:	dc1b      	bgt.n	80030f4 <__aeabi_dmul+0x134>
 80030bc:	f104 0414 	add.w	r4, r4, #20
 80030c0:	f1c4 0520 	rsb	r5, r4, #32
 80030c4:	fa00 f305 	lsl.w	r3, r0, r5
 80030c8:	fa20 f004 	lsr.w	r0, r0, r4
 80030cc:	fa01 f205 	lsl.w	r2, r1, r5
 80030d0:	ea40 0002 	orr.w	r0, r0, r2
 80030d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80030d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80030dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80030e0:	fa21 f604 	lsr.w	r6, r1, r4
 80030e4:	eb42 0106 	adc.w	r1, r2, r6
 80030e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80030ec:	bf08      	it	eq
 80030ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f1c4 040c 	rsb	r4, r4, #12
 80030f8:	f1c4 0520 	rsb	r5, r4, #32
 80030fc:	fa00 f304 	lsl.w	r3, r0, r4
 8003100:	fa20 f005 	lsr.w	r0, r0, r5
 8003104:	fa01 f204 	lsl.w	r2, r1, r4
 8003108:	ea40 0002 	orr.w	r0, r0, r2
 800310c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003110:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003114:	f141 0100 	adc.w	r1, r1, #0
 8003118:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800311c:	bf08      	it	eq
 800311e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f1c4 0520 	rsb	r5, r4, #32
 8003128:	fa00 f205 	lsl.w	r2, r0, r5
 800312c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003130:	fa20 f304 	lsr.w	r3, r0, r4
 8003134:	fa01 f205 	lsl.w	r2, r1, r5
 8003138:	ea43 0302 	orr.w	r3, r3, r2
 800313c:	fa21 f004 	lsr.w	r0, r1, r4
 8003140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003144:	fa21 f204 	lsr.w	r2, r1, r4
 8003148:	ea20 0002 	bic.w	r0, r0, r2
 800314c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003150:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003154:	bf08      	it	eq
 8003156:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	f094 0f00 	teq	r4, #0
 8003160:	d10f      	bne.n	8003182 <__aeabi_dmul+0x1c2>
 8003162:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003166:	0040      	lsls	r0, r0, #1
 8003168:	eb41 0101 	adc.w	r1, r1, r1
 800316c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003170:	bf08      	it	eq
 8003172:	3c01      	subeq	r4, #1
 8003174:	d0f7      	beq.n	8003166 <__aeabi_dmul+0x1a6>
 8003176:	ea41 0106 	orr.w	r1, r1, r6
 800317a:	f095 0f00 	teq	r5, #0
 800317e:	bf18      	it	ne
 8003180:	4770      	bxne	lr
 8003182:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003186:	0052      	lsls	r2, r2, #1
 8003188:	eb43 0303 	adc.w	r3, r3, r3
 800318c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003190:	bf08      	it	eq
 8003192:	3d01      	subeq	r5, #1
 8003194:	d0f7      	beq.n	8003186 <__aeabi_dmul+0x1c6>
 8003196:	ea43 0306 	orr.w	r3, r3, r6
 800319a:	4770      	bx	lr
 800319c:	ea94 0f0c 	teq	r4, ip
 80031a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80031a4:	bf18      	it	ne
 80031a6:	ea95 0f0c 	teqne	r5, ip
 80031aa:	d00c      	beq.n	80031c6 <__aeabi_dmul+0x206>
 80031ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80031b0:	bf18      	it	ne
 80031b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80031b6:	d1d1      	bne.n	800315c <__aeabi_dmul+0x19c>
 80031b8:	ea81 0103 	eor.w	r1, r1, r3
 80031bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80031c0:	f04f 0000 	mov.w	r0, #0
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
 80031c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80031ca:	bf06      	itte	eq
 80031cc:	4610      	moveq	r0, r2
 80031ce:	4619      	moveq	r1, r3
 80031d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80031d4:	d019      	beq.n	800320a <__aeabi_dmul+0x24a>
 80031d6:	ea94 0f0c 	teq	r4, ip
 80031da:	d102      	bne.n	80031e2 <__aeabi_dmul+0x222>
 80031dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80031e0:	d113      	bne.n	800320a <__aeabi_dmul+0x24a>
 80031e2:	ea95 0f0c 	teq	r5, ip
 80031e6:	d105      	bne.n	80031f4 <__aeabi_dmul+0x234>
 80031e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80031ec:	bf1c      	itt	ne
 80031ee:	4610      	movne	r0, r2
 80031f0:	4619      	movne	r1, r3
 80031f2:	d10a      	bne.n	800320a <__aeabi_dmul+0x24a>
 80031f4:	ea81 0103 	eor.w	r1, r1, r3
 80031f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80031fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003200:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800320e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003212:	bd70      	pop	{r4, r5, r6, pc}

08003214 <__aeabi_ddiv>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800321a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800321e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003222:	bf1d      	ittte	ne
 8003224:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003228:	ea94 0f0c 	teqne	r4, ip
 800322c:	ea95 0f0c 	teqne	r5, ip
 8003230:	f000 f8a7 	bleq	8003382 <__aeabi_ddiv+0x16e>
 8003234:	eba4 0405 	sub.w	r4, r4, r5
 8003238:	ea81 0e03 	eor.w	lr, r1, r3
 800323c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003244:	f000 8088 	beq.w	8003358 <__aeabi_ddiv+0x144>
 8003248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800324c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003250:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003254:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003258:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800325c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003260:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003264:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003268:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800326c:	429d      	cmp	r5, r3
 800326e:	bf08      	it	eq
 8003270:	4296      	cmpeq	r6, r2
 8003272:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003276:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800327a:	d202      	bcs.n	8003282 <__aeabi_ddiv+0x6e>
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003282:	1ab6      	subs	r6, r6, r2
 8003284:	eb65 0503 	sbc.w	r5, r5, r3
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	ea4f 0232 	mov.w	r2, r2, rrx
 800328e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003292:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003296:	ebb6 0e02 	subs.w	lr, r6, r2
 800329a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800329e:	bf22      	ittt	cs
 80032a0:	1ab6      	subcs	r6, r6, r2
 80032a2:	4675      	movcs	r5, lr
 80032a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80032ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80032b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80032b6:	bf22      	ittt	cs
 80032b8:	1ab6      	subcs	r6, r6, r2
 80032ba:	4675      	movcs	r5, lr
 80032bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80032c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80032ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80032ce:	bf22      	ittt	cs
 80032d0:	1ab6      	subcs	r6, r6, r2
 80032d2:	4675      	movcs	r5, lr
 80032d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	ea4f 0232 	mov.w	r2, r2, rrx
 80032de:	ebb6 0e02 	subs.w	lr, r6, r2
 80032e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80032e6:	bf22      	ittt	cs
 80032e8:	1ab6      	subcs	r6, r6, r2
 80032ea:	4675      	movcs	r5, lr
 80032ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80032f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80032f4:	d018      	beq.n	8003328 <__aeabi_ddiv+0x114>
 80032f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80032fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80032fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003302:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003306:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800330a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800330e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003312:	d1c0      	bne.n	8003296 <__aeabi_ddiv+0x82>
 8003314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003318:	d10b      	bne.n	8003332 <__aeabi_ddiv+0x11e>
 800331a:	ea41 0100 	orr.w	r1, r1, r0
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003326:	e7b6      	b.n	8003296 <__aeabi_ddiv+0x82>
 8003328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800332c:	bf04      	itt	eq
 800332e:	4301      	orreq	r1, r0
 8003330:	2000      	moveq	r0, #0
 8003332:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003336:	bf88      	it	hi
 8003338:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800333c:	f63f aeaf 	bhi.w	800309e <__aeabi_dmul+0xde>
 8003340:	ebb5 0c03 	subs.w	ip, r5, r3
 8003344:	bf04      	itt	eq
 8003346:	ebb6 0c02 	subseq.w	ip, r6, r2
 800334a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800334e:	f150 0000 	adcs.w	r0, r0, #0
 8003352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800335c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003360:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003364:	bfc2      	ittt	gt
 8003366:	ebd4 050c 	rsbsgt	r5, r4, ip
 800336a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800336e:	bd70      	popgt	{r4, r5, r6, pc}
 8003370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003374:	f04f 0e00 	mov.w	lr, #0
 8003378:	3c01      	subs	r4, #1
 800337a:	e690      	b.n	800309e <__aeabi_dmul+0xde>
 800337c:	ea45 0e06 	orr.w	lr, r5, r6
 8003380:	e68d      	b.n	800309e <__aeabi_dmul+0xde>
 8003382:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003386:	ea94 0f0c 	teq	r4, ip
 800338a:	bf08      	it	eq
 800338c:	ea95 0f0c 	teqeq	r5, ip
 8003390:	f43f af3b 	beq.w	800320a <__aeabi_dmul+0x24a>
 8003394:	ea94 0f0c 	teq	r4, ip
 8003398:	d10a      	bne.n	80033b0 <__aeabi_ddiv+0x19c>
 800339a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800339e:	f47f af34 	bne.w	800320a <__aeabi_dmul+0x24a>
 80033a2:	ea95 0f0c 	teq	r5, ip
 80033a6:	f47f af25 	bne.w	80031f4 <__aeabi_dmul+0x234>
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	e72c      	b.n	800320a <__aeabi_dmul+0x24a>
 80033b0:	ea95 0f0c 	teq	r5, ip
 80033b4:	d106      	bne.n	80033c4 <__aeabi_ddiv+0x1b0>
 80033b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80033ba:	f43f aefd 	beq.w	80031b8 <__aeabi_dmul+0x1f8>
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	e722      	b.n	800320a <__aeabi_dmul+0x24a>
 80033c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80033c8:	bf18      	it	ne
 80033ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80033ce:	f47f aec5 	bne.w	800315c <__aeabi_dmul+0x19c>
 80033d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80033d6:	f47f af0d 	bne.w	80031f4 <__aeabi_dmul+0x234>
 80033da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80033de:	f47f aeeb 	bne.w	80031b8 <__aeabi_dmul+0x1f8>
 80033e2:	e712      	b.n	800320a <__aeabi_dmul+0x24a>

080033e4 <__gedf2>:
 80033e4:	f04f 3cff 	mov.w	ip, #4294967295
 80033e8:	e006      	b.n	80033f8 <__cmpdf2+0x4>
 80033ea:	bf00      	nop

080033ec <__ledf2>:
 80033ec:	f04f 0c01 	mov.w	ip, #1
 80033f0:	e002      	b.n	80033f8 <__cmpdf2+0x4>
 80033f2:	bf00      	nop

080033f4 <__cmpdf2>:
 80033f4:	f04f 0c01 	mov.w	ip, #1
 80033f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80033fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003408:	bf18      	it	ne
 800340a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800340e:	d01b      	beq.n	8003448 <__cmpdf2+0x54>
 8003410:	b001      	add	sp, #4
 8003412:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003416:	bf0c      	ite	eq
 8003418:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800341c:	ea91 0f03 	teqne	r1, r3
 8003420:	bf02      	ittt	eq
 8003422:	ea90 0f02 	teqeq	r0, r2
 8003426:	2000      	moveq	r0, #0
 8003428:	4770      	bxeq	lr
 800342a:	f110 0f00 	cmn.w	r0, #0
 800342e:	ea91 0f03 	teq	r1, r3
 8003432:	bf58      	it	pl
 8003434:	4299      	cmppl	r1, r3
 8003436:	bf08      	it	eq
 8003438:	4290      	cmpeq	r0, r2
 800343a:	bf2c      	ite	cs
 800343c:	17d8      	asrcs	r0, r3, #31
 800343e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003442:	f040 0001 	orr.w	r0, r0, #1
 8003446:	4770      	bx	lr
 8003448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800344c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003450:	d102      	bne.n	8003458 <__cmpdf2+0x64>
 8003452:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003456:	d107      	bne.n	8003468 <__cmpdf2+0x74>
 8003458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800345c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003460:	d1d6      	bne.n	8003410 <__cmpdf2+0x1c>
 8003462:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003466:	d0d3      	beq.n	8003410 <__cmpdf2+0x1c>
 8003468:	f85d 0b04 	ldr.w	r0, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop

08003470 <__aeabi_cdrcmple>:
 8003470:	4684      	mov	ip, r0
 8003472:	4610      	mov	r0, r2
 8003474:	4662      	mov	r2, ip
 8003476:	468c      	mov	ip, r1
 8003478:	4619      	mov	r1, r3
 800347a:	4663      	mov	r3, ip
 800347c:	e000      	b.n	8003480 <__aeabi_cdcmpeq>
 800347e:	bf00      	nop

08003480 <__aeabi_cdcmpeq>:
 8003480:	b501      	push	{r0, lr}
 8003482:	f7ff ffb7 	bl	80033f4 <__cmpdf2>
 8003486:	2800      	cmp	r0, #0
 8003488:	bf48      	it	mi
 800348a:	f110 0f00 	cmnmi.w	r0, #0
 800348e:	bd01      	pop	{r0, pc}

08003490 <__aeabi_dcmpeq>:
 8003490:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003494:	f7ff fff4 	bl	8003480 <__aeabi_cdcmpeq>
 8003498:	bf0c      	ite	eq
 800349a:	2001      	moveq	r0, #1
 800349c:	2000      	movne	r0, #0
 800349e:	f85d fb08 	ldr.w	pc, [sp], #8
 80034a2:	bf00      	nop

080034a4 <__aeabi_dcmplt>:
 80034a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80034a8:	f7ff ffea 	bl	8003480 <__aeabi_cdcmpeq>
 80034ac:	bf34      	ite	cc
 80034ae:	2001      	movcc	r0, #1
 80034b0:	2000      	movcs	r0, #0
 80034b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80034b6:	bf00      	nop

080034b8 <__aeabi_dcmple>:
 80034b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80034bc:	f7ff ffe0 	bl	8003480 <__aeabi_cdcmpeq>
 80034c0:	bf94      	ite	ls
 80034c2:	2001      	movls	r0, #1
 80034c4:	2000      	movhi	r0, #0
 80034c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80034ca:	bf00      	nop

080034cc <__aeabi_dcmpge>:
 80034cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80034d0:	f7ff ffce 	bl	8003470 <__aeabi_cdrcmple>
 80034d4:	bf94      	ite	ls
 80034d6:	2001      	movls	r0, #1
 80034d8:	2000      	movhi	r0, #0
 80034da:	f85d fb08 	ldr.w	pc, [sp], #8
 80034de:	bf00      	nop

080034e0 <__aeabi_dcmpgt>:
 80034e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80034e4:	f7ff ffc4 	bl	8003470 <__aeabi_cdrcmple>
 80034e8:	bf34      	ite	cc
 80034ea:	2001      	movcc	r0, #1
 80034ec:	2000      	movcs	r0, #0
 80034ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80034f2:	bf00      	nop

080034f4 <__aeabi_d2f>:
 80034f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80034f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80034fc:	bf24      	itt	cs
 80034fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003502:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003506:	d90d      	bls.n	8003524 <__aeabi_d2f+0x30>
 8003508:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800350c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003510:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003514:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003518:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800351c:	bf08      	it	eq
 800351e:	f020 0001 	biceq.w	r0, r0, #1
 8003522:	4770      	bx	lr
 8003524:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003528:	d121      	bne.n	800356e <__aeabi_d2f+0x7a>
 800352a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800352e:	bfbc      	itt	lt
 8003530:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003534:	4770      	bxlt	lr
 8003536:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800353a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800353e:	f1c2 0218 	rsb	r2, r2, #24
 8003542:	f1c2 0c20 	rsb	ip, r2, #32
 8003546:	fa10 f30c 	lsls.w	r3, r0, ip
 800354a:	fa20 f002 	lsr.w	r0, r0, r2
 800354e:	bf18      	it	ne
 8003550:	f040 0001 	orrne.w	r0, r0, #1
 8003554:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003558:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800355c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8003560:	ea40 000c 	orr.w	r0, r0, ip
 8003564:	fa23 f302 	lsr.w	r3, r3, r2
 8003568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800356c:	e7cc      	b.n	8003508 <__aeabi_d2f+0x14>
 800356e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003572:	d107      	bne.n	8003584 <__aeabi_d2f+0x90>
 8003574:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003578:	bf1e      	ittt	ne
 800357a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800357e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003582:	4770      	bxne	lr
 8003584:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003588:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800358c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <__aeabi_uldivmod>:
 8003594:	b953      	cbnz	r3, 80035ac <__aeabi_uldivmod+0x18>
 8003596:	b94a      	cbnz	r2, 80035ac <__aeabi_uldivmod+0x18>
 8003598:	2900      	cmp	r1, #0
 800359a:	bf08      	it	eq
 800359c:	2800      	cmpeq	r0, #0
 800359e:	bf1c      	itt	ne
 80035a0:	f04f 31ff 	movne.w	r1, #4294967295
 80035a4:	f04f 30ff 	movne.w	r0, #4294967295
 80035a8:	f000 b97a 	b.w	80038a0 <__aeabi_idiv0>
 80035ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80035b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80035b4:	f000 f806 	bl	80035c4 <__udivmoddi4>
 80035b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80035bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035c0:	b004      	add	sp, #16
 80035c2:	4770      	bx	lr

080035c4 <__udivmoddi4>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	468c      	mov	ip, r1
 80035ca:	460d      	mov	r5, r1
 80035cc:	4604      	mov	r4, r0
 80035ce:	9e08      	ldr	r6, [sp, #32]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d151      	bne.n	8003678 <__udivmoddi4+0xb4>
 80035d4:	428a      	cmp	r2, r1
 80035d6:	4617      	mov	r7, r2
 80035d8:	d96d      	bls.n	80036b6 <__udivmoddi4+0xf2>
 80035da:	fab2 fe82 	clz	lr, r2
 80035de:	f1be 0f00 	cmp.w	lr, #0
 80035e2:	d00b      	beq.n	80035fc <__udivmoddi4+0x38>
 80035e4:	f1ce 0c20 	rsb	ip, lr, #32
 80035e8:	fa01 f50e 	lsl.w	r5, r1, lr
 80035ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80035f0:	fa02 f70e 	lsl.w	r7, r2, lr
 80035f4:	ea4c 0c05 	orr.w	ip, ip, r5
 80035f8:	fa00 f40e 	lsl.w	r4, r0, lr
 80035fc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8003600:	0c25      	lsrs	r5, r4, #16
 8003602:	fbbc f8fa 	udiv	r8, ip, sl
 8003606:	fa1f f987 	uxth.w	r9, r7
 800360a:	fb0a cc18 	mls	ip, sl, r8, ip
 800360e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8003612:	fb08 f309 	mul.w	r3, r8, r9
 8003616:	42ab      	cmp	r3, r5
 8003618:	d90a      	bls.n	8003630 <__udivmoddi4+0x6c>
 800361a:	19ed      	adds	r5, r5, r7
 800361c:	f108 32ff 	add.w	r2, r8, #4294967295
 8003620:	f080 8123 	bcs.w	800386a <__udivmoddi4+0x2a6>
 8003624:	42ab      	cmp	r3, r5
 8003626:	f240 8120 	bls.w	800386a <__udivmoddi4+0x2a6>
 800362a:	f1a8 0802 	sub.w	r8, r8, #2
 800362e:	443d      	add	r5, r7
 8003630:	1aed      	subs	r5, r5, r3
 8003632:	b2a4      	uxth	r4, r4
 8003634:	fbb5 f0fa 	udiv	r0, r5, sl
 8003638:	fb0a 5510 	mls	r5, sl, r0, r5
 800363c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003640:	fb00 f909 	mul.w	r9, r0, r9
 8003644:	45a1      	cmp	r9, r4
 8003646:	d909      	bls.n	800365c <__udivmoddi4+0x98>
 8003648:	19e4      	adds	r4, r4, r7
 800364a:	f100 33ff 	add.w	r3, r0, #4294967295
 800364e:	f080 810a 	bcs.w	8003866 <__udivmoddi4+0x2a2>
 8003652:	45a1      	cmp	r9, r4
 8003654:	f240 8107 	bls.w	8003866 <__udivmoddi4+0x2a2>
 8003658:	3802      	subs	r0, #2
 800365a:	443c      	add	r4, r7
 800365c:	eba4 0409 	sub.w	r4, r4, r9
 8003660:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8003664:	2100      	movs	r1, #0
 8003666:	2e00      	cmp	r6, #0
 8003668:	d061      	beq.n	800372e <__udivmoddi4+0x16a>
 800366a:	fa24 f40e 	lsr.w	r4, r4, lr
 800366e:	2300      	movs	r3, #0
 8003670:	6034      	str	r4, [r6, #0]
 8003672:	6073      	str	r3, [r6, #4]
 8003674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003678:	428b      	cmp	r3, r1
 800367a:	d907      	bls.n	800368c <__udivmoddi4+0xc8>
 800367c:	2e00      	cmp	r6, #0
 800367e:	d054      	beq.n	800372a <__udivmoddi4+0x166>
 8003680:	2100      	movs	r1, #0
 8003682:	e886 0021 	stmia.w	r6, {r0, r5}
 8003686:	4608      	mov	r0, r1
 8003688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368c:	fab3 f183 	clz	r1, r3
 8003690:	2900      	cmp	r1, #0
 8003692:	f040 808e 	bne.w	80037b2 <__udivmoddi4+0x1ee>
 8003696:	42ab      	cmp	r3, r5
 8003698:	d302      	bcc.n	80036a0 <__udivmoddi4+0xdc>
 800369a:	4282      	cmp	r2, r0
 800369c:	f200 80fa 	bhi.w	8003894 <__udivmoddi4+0x2d0>
 80036a0:	1a84      	subs	r4, r0, r2
 80036a2:	eb65 0503 	sbc.w	r5, r5, r3
 80036a6:	2001      	movs	r0, #1
 80036a8:	46ac      	mov	ip, r5
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	d03f      	beq.n	800372e <__udivmoddi4+0x16a>
 80036ae:	e886 1010 	stmia.w	r6, {r4, ip}
 80036b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b6:	b912      	cbnz	r2, 80036be <__udivmoddi4+0xfa>
 80036b8:	2701      	movs	r7, #1
 80036ba:	fbb7 f7f2 	udiv	r7, r7, r2
 80036be:	fab7 fe87 	clz	lr, r7
 80036c2:	f1be 0f00 	cmp.w	lr, #0
 80036c6:	d134      	bne.n	8003732 <__udivmoddi4+0x16e>
 80036c8:	1beb      	subs	r3, r5, r7
 80036ca:	0c3a      	lsrs	r2, r7, #16
 80036cc:	fa1f fc87 	uxth.w	ip, r7
 80036d0:	2101      	movs	r1, #1
 80036d2:	fbb3 f8f2 	udiv	r8, r3, r2
 80036d6:	0c25      	lsrs	r5, r4, #16
 80036d8:	fb02 3318 	mls	r3, r2, r8, r3
 80036dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80036e0:	fb0c f308 	mul.w	r3, ip, r8
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	d907      	bls.n	80036f8 <__udivmoddi4+0x134>
 80036e8:	19ed      	adds	r5, r5, r7
 80036ea:	f108 30ff 	add.w	r0, r8, #4294967295
 80036ee:	d202      	bcs.n	80036f6 <__udivmoddi4+0x132>
 80036f0:	42ab      	cmp	r3, r5
 80036f2:	f200 80d1 	bhi.w	8003898 <__udivmoddi4+0x2d4>
 80036f6:	4680      	mov	r8, r0
 80036f8:	1aed      	subs	r5, r5, r3
 80036fa:	b2a3      	uxth	r3, r4
 80036fc:	fbb5 f0f2 	udiv	r0, r5, r2
 8003700:	fb02 5510 	mls	r5, r2, r0, r5
 8003704:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8003708:	fb0c fc00 	mul.w	ip, ip, r0
 800370c:	45a4      	cmp	ip, r4
 800370e:	d907      	bls.n	8003720 <__udivmoddi4+0x15c>
 8003710:	19e4      	adds	r4, r4, r7
 8003712:	f100 33ff 	add.w	r3, r0, #4294967295
 8003716:	d202      	bcs.n	800371e <__udivmoddi4+0x15a>
 8003718:	45a4      	cmp	ip, r4
 800371a:	f200 80b8 	bhi.w	800388e <__udivmoddi4+0x2ca>
 800371e:	4618      	mov	r0, r3
 8003720:	eba4 040c 	sub.w	r4, r4, ip
 8003724:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8003728:	e79d      	b.n	8003666 <__udivmoddi4+0xa2>
 800372a:	4631      	mov	r1, r6
 800372c:	4630      	mov	r0, r6
 800372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003732:	f1ce 0420 	rsb	r4, lr, #32
 8003736:	fa05 f30e 	lsl.w	r3, r5, lr
 800373a:	fa07 f70e 	lsl.w	r7, r7, lr
 800373e:	fa20 f804 	lsr.w	r8, r0, r4
 8003742:	0c3a      	lsrs	r2, r7, #16
 8003744:	fa25 f404 	lsr.w	r4, r5, r4
 8003748:	ea48 0803 	orr.w	r8, r8, r3
 800374c:	fbb4 f1f2 	udiv	r1, r4, r2
 8003750:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8003754:	fb02 4411 	mls	r4, r2, r1, r4
 8003758:	fa1f fc87 	uxth.w	ip, r7
 800375c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8003760:	fb01 f30c 	mul.w	r3, r1, ip
 8003764:	42ab      	cmp	r3, r5
 8003766:	fa00 f40e 	lsl.w	r4, r0, lr
 800376a:	d909      	bls.n	8003780 <__udivmoddi4+0x1bc>
 800376c:	19ed      	adds	r5, r5, r7
 800376e:	f101 30ff 	add.w	r0, r1, #4294967295
 8003772:	f080 808a 	bcs.w	800388a <__udivmoddi4+0x2c6>
 8003776:	42ab      	cmp	r3, r5
 8003778:	f240 8087 	bls.w	800388a <__udivmoddi4+0x2c6>
 800377c:	3902      	subs	r1, #2
 800377e:	443d      	add	r5, r7
 8003780:	1aeb      	subs	r3, r5, r3
 8003782:	fa1f f588 	uxth.w	r5, r8
 8003786:	fbb3 f0f2 	udiv	r0, r3, r2
 800378a:	fb02 3310 	mls	r3, r2, r0, r3
 800378e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003792:	fb00 f30c 	mul.w	r3, r0, ip
 8003796:	42ab      	cmp	r3, r5
 8003798:	d907      	bls.n	80037aa <__udivmoddi4+0x1e6>
 800379a:	19ed      	adds	r5, r5, r7
 800379c:	f100 38ff 	add.w	r8, r0, #4294967295
 80037a0:	d26f      	bcs.n	8003882 <__udivmoddi4+0x2be>
 80037a2:	42ab      	cmp	r3, r5
 80037a4:	d96d      	bls.n	8003882 <__udivmoddi4+0x2be>
 80037a6:	3802      	subs	r0, #2
 80037a8:	443d      	add	r5, r7
 80037aa:	1aeb      	subs	r3, r5, r3
 80037ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80037b0:	e78f      	b.n	80036d2 <__udivmoddi4+0x10e>
 80037b2:	f1c1 0720 	rsb	r7, r1, #32
 80037b6:	fa22 f807 	lsr.w	r8, r2, r7
 80037ba:	408b      	lsls	r3, r1
 80037bc:	fa05 f401 	lsl.w	r4, r5, r1
 80037c0:	ea48 0303 	orr.w	r3, r8, r3
 80037c4:	fa20 fe07 	lsr.w	lr, r0, r7
 80037c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80037cc:	40fd      	lsrs	r5, r7
 80037ce:	ea4e 0e04 	orr.w	lr, lr, r4
 80037d2:	fbb5 f9fc 	udiv	r9, r5, ip
 80037d6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80037da:	fb0c 5519 	mls	r5, ip, r9, r5
 80037de:	fa1f f883 	uxth.w	r8, r3
 80037e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80037e6:	fb09 f408 	mul.w	r4, r9, r8
 80037ea:	42ac      	cmp	r4, r5
 80037ec:	fa02 f201 	lsl.w	r2, r2, r1
 80037f0:	fa00 fa01 	lsl.w	sl, r0, r1
 80037f4:	d908      	bls.n	8003808 <__udivmoddi4+0x244>
 80037f6:	18ed      	adds	r5, r5, r3
 80037f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80037fc:	d243      	bcs.n	8003886 <__udivmoddi4+0x2c2>
 80037fe:	42ac      	cmp	r4, r5
 8003800:	d941      	bls.n	8003886 <__udivmoddi4+0x2c2>
 8003802:	f1a9 0902 	sub.w	r9, r9, #2
 8003806:	441d      	add	r5, r3
 8003808:	1b2d      	subs	r5, r5, r4
 800380a:	fa1f fe8e 	uxth.w	lr, lr
 800380e:	fbb5 f0fc 	udiv	r0, r5, ip
 8003812:	fb0c 5510 	mls	r5, ip, r0, r5
 8003816:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800381a:	fb00 f808 	mul.w	r8, r0, r8
 800381e:	45a0      	cmp	r8, r4
 8003820:	d907      	bls.n	8003832 <__udivmoddi4+0x26e>
 8003822:	18e4      	adds	r4, r4, r3
 8003824:	f100 35ff 	add.w	r5, r0, #4294967295
 8003828:	d229      	bcs.n	800387e <__udivmoddi4+0x2ba>
 800382a:	45a0      	cmp	r8, r4
 800382c:	d927      	bls.n	800387e <__udivmoddi4+0x2ba>
 800382e:	3802      	subs	r0, #2
 8003830:	441c      	add	r4, r3
 8003832:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003836:	eba4 0408 	sub.w	r4, r4, r8
 800383a:	fba0 8902 	umull	r8, r9, r0, r2
 800383e:	454c      	cmp	r4, r9
 8003840:	46c6      	mov	lr, r8
 8003842:	464d      	mov	r5, r9
 8003844:	d315      	bcc.n	8003872 <__udivmoddi4+0x2ae>
 8003846:	d012      	beq.n	800386e <__udivmoddi4+0x2aa>
 8003848:	b156      	cbz	r6, 8003860 <__udivmoddi4+0x29c>
 800384a:	ebba 030e 	subs.w	r3, sl, lr
 800384e:	eb64 0405 	sbc.w	r4, r4, r5
 8003852:	fa04 f707 	lsl.w	r7, r4, r7
 8003856:	40cb      	lsrs	r3, r1
 8003858:	431f      	orrs	r7, r3
 800385a:	40cc      	lsrs	r4, r1
 800385c:	6037      	str	r7, [r6, #0]
 800385e:	6074      	str	r4, [r6, #4]
 8003860:	2100      	movs	r1, #0
 8003862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003866:	4618      	mov	r0, r3
 8003868:	e6f8      	b.n	800365c <__udivmoddi4+0x98>
 800386a:	4690      	mov	r8, r2
 800386c:	e6e0      	b.n	8003630 <__udivmoddi4+0x6c>
 800386e:	45c2      	cmp	sl, r8
 8003870:	d2ea      	bcs.n	8003848 <__udivmoddi4+0x284>
 8003872:	ebb8 0e02 	subs.w	lr, r8, r2
 8003876:	eb69 0503 	sbc.w	r5, r9, r3
 800387a:	3801      	subs	r0, #1
 800387c:	e7e4      	b.n	8003848 <__udivmoddi4+0x284>
 800387e:	4628      	mov	r0, r5
 8003880:	e7d7      	b.n	8003832 <__udivmoddi4+0x26e>
 8003882:	4640      	mov	r0, r8
 8003884:	e791      	b.n	80037aa <__udivmoddi4+0x1e6>
 8003886:	4681      	mov	r9, r0
 8003888:	e7be      	b.n	8003808 <__udivmoddi4+0x244>
 800388a:	4601      	mov	r1, r0
 800388c:	e778      	b.n	8003780 <__udivmoddi4+0x1bc>
 800388e:	3802      	subs	r0, #2
 8003890:	443c      	add	r4, r7
 8003892:	e745      	b.n	8003720 <__udivmoddi4+0x15c>
 8003894:	4608      	mov	r0, r1
 8003896:	e708      	b.n	80036aa <__udivmoddi4+0xe6>
 8003898:	f1a8 0802 	sub.w	r8, r8, #2
 800389c:	443d      	add	r5, r7
 800389e:	e72b      	b.n	80036f8 <__udivmoddi4+0x134>

080038a0 <__aeabi_idiv0>:
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop

080038a4 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80038a6:	0896      	lsrs	r6, r2, #2
 80038a8:	4605      	mov	r5, r0
 80038aa:	460c      	mov	r4, r1
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80038ac:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003914 <arm_dot_prod_f32+0x70>
  blkCnt = blockSize >> 2U;
 80038b0:	4637      	mov	r7, r6
 80038b2:	3510      	adds	r5, #16
 80038b4:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80038b6:	b95f      	cbnz	r7, 80038d0 <arm_dot_prod_f32+0x2c>
 80038b8:	0134      	lsls	r4, r6, #4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80038ba:	f002 0203 	and.w	r2, r2, #3
 80038be:	4421      	add	r1, r4
 80038c0:	4420      	add	r0, r4
 80038c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80038c6:	4291      	cmp	r1, r2
 80038c8:	d11c      	bne.n	8003904 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 80038ca:	edc3 7a00 	vstr	s15, [r3]
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 80038d0:	ed55 6a04 	vldr	s13, [r5, #-16]
    blkCnt--;
 80038d4:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 80038d6:	ed14 7a04 	vldr	s14, [r4, #-16]
 80038da:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 80038de:	ed55 6a03 	vldr	s13, [r5, #-12]
 80038e2:	ed14 7a03 	vldr	s14, [r4, #-12]
 80038e6:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 80038ea:	ed55 6a02 	vldr	s13, [r5, #-8]
 80038ee:	ed14 7a02 	vldr	s14, [r4, #-8]
 80038f2:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 80038f6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80038fa:	ed14 7a01 	vldr	s14, [r4, #-4]
 80038fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003902:	e7d6      	b.n	80038b2 <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8003904:	ecf0 6a01 	vldmia	r0!, {s13}
 8003908:	ecb1 7a01 	vldmia	r1!, {s14}
 800390c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003910:	e7d9      	b.n	80038c6 <arm_dot_prod_f32+0x22>
 8003912:	bf00      	nop
 8003914:	00000000 	.word	0x00000000

08003918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003918:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_InitTick+0x3c>)
{
 800391c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800391e:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <HAL_InitTick+0x40>)
 8003920:	7818      	ldrb	r0, [r3, #0]
 8003922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003926:	fbb3 f3f0 	udiv	r3, r3, r0
 800392a:	6810      	ldr	r0, [r2, #0]
 800392c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003930:	f000 f8ac 	bl	8003a8c <HAL_SYSTICK_Config>
 8003934:	4604      	mov	r4, r0
 8003936:	b958      	cbnz	r0, 8003950 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003938:	2d0f      	cmp	r5, #15
 800393a:	d809      	bhi.n	8003950 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800393c:	4602      	mov	r2, r0
 800393e:	4629      	mov	r1, r5
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	f000 f86a 	bl	8003a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <HAL_InitTick+0x44>)
 800394a:	4620      	mov	r0, r4
 800394c:	601d      	str	r5, [r3, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003950:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	20000000 	.word	0x20000000
 8003958:	200007e4 	.word	0x200007e4
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_Init>:
{
 8003960:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003964:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003976:	f000 f83f 	bl	80039f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800397a:	2000      	movs	r0, #0
 800397c:	f7ff ffcc 	bl	8003918 <HAL_InitTick>
  HAL_MspInit();
 8003980:	f002 fad0 	bl	8005f24 <HAL_MspInit>
}
 8003984:	2000      	movs	r0, #0
 8003986:	bd08      	pop	{r3, pc}
 8003988:	40023c00 	.word	0x40023c00

0800398c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800398c:	4a03      	ldr	r2, [pc, #12]	; (800399c <HAL_IncTick+0x10>)
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <HAL_IncTick+0x14>)
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	440b      	add	r3, r1
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	2000a9c0 	.word	0x2000a9c0
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <HAL_GetTick+0x8>)
 80039a6:	6818      	ldr	r0, [r3, #0]
}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000a9c0 	.word	0x2000a9c0

080039b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7ff fff6 	bl	80039a4 <HAL_GetTick>
 80039b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80039bc:	bf1e      	ittt	ne
 80039be:	4b04      	ldrne	r3, [pc, #16]	; (80039d0 <HAL_Delay+0x20>)
 80039c0:	781b      	ldrbne	r3, [r3, #0]
 80039c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039c4:	f7ff ffee 	bl	80039a4 <HAL_GetTick>
 80039c8:	1b40      	subs	r0, r0, r5
 80039ca:	4284      	cmp	r4, r0
 80039cc:	d8fa      	bhi.n	80039c4 <HAL_Delay+0x14>
  {
  }
}
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000000 	.word	0x20000000

080039d4 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F7xx_HAL_VERSION;
}
 80039d4:	4800      	ldr	r0, [pc, #0]	; (80039d8 <HAL_GetHalVersion+0x4>)
 80039d6:	4770      	bx	lr
 80039d8:	01020700 	.word	0x01020700

080039dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <HAL_GetREVID+0x8>)
 80039de:	6818      	ldr	r0, [r3, #0]
}
 80039e0:	0c00      	lsrs	r0, r0, #16
 80039e2:	4770      	bx	lr
 80039e4:	e0042000 	.word	0xe0042000

080039e8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80039e8:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <HAL_GetDEVID+0xc>)
 80039ea:	6818      	ldr	r0, [r3, #0]
}
 80039ec:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e0042000 	.word	0xe0042000

080039f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f8:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039fa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039fc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003a12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003a14:	60d3      	str	r3, [r2, #12]
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1e:	b530      	push	{r4, r5, lr}
 8003a20:	68dc      	ldr	r4, [r3, #12]
 8003a22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	bf28      	it	cs
 8003a30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a38:	bf8c      	ite	hi
 8003a3a:	3c03      	subhi	r4, #3
 8003a3c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8003a42:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a48:	ea01 0103 	and.w	r1, r1, r3
 8003a4c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a50:	fa05 f404 	lsl.w	r4, r5, r4
 8003a54:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a58:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	ea42 0201 	orr.w	r2, r2, r1
 8003a60:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8003a64:	db07      	blt.n	8003a76 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a70:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003a74:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a76:	f000 000f 	and.w	r0, r0, #15
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <HAL_NVIC_SetPriority+0x6c>)
 8003a7e:	541a      	strb	r2, [r3, r0]
 8003a80:	bd30      	pop	{r4, r5, pc}
 8003a82:	bf00      	nop
 8003a84:	e000ed00 	.word	0xe000ed00
 8003a88:	e000ed14 	.word	0xe000ed14

08003a8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	3801      	subs	r0, #1
 8003a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003a92:	d20a      	bcs.n	8003aaa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	21f0      	movs	r1, #240	; 0xf0
 8003a98:	4a06      	ldr	r2, [pc, #24]	; (8003ab4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a9c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003aaa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ab8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003aba:	4604      	mov	r4, r0
 8003abc:	b908      	cbnz	r0, 8003ac2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
 8003ac0:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ac2:	7f43      	ldrb	r3, [r0, #29]
 8003ac4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ac8:	b913      	cbnz	r3, 8003ad0 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003aca:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003acc:	f002 fa42 	bl	8005f54 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ad4:	7923      	ldrb	r3, [r4, #4]
 8003ad6:	b9e3      	cbnz	r3, 8003b12 <HAL_CRC_Init+0x5a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_CRC_Init+0x70>)
 8003adc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	f022 0218 	bic.w	r2, r2, #24
 8003ae4:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ae6:	7962      	ldrb	r2, [r4, #5]
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	b9d2      	cbnz	r2, 8003b22 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003af0:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 8003af2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	6961      	ldr	r1, [r4, #20]
 8003af8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003afe:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b00:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	7763      	strb	r3, [r4, #29]
}
 8003b10:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b12:	68e2      	ldr	r2, [r4, #12]
 8003b14:	4620      	mov	r0, r4
 8003b16:	68a1      	ldr	r1, [r4, #8]
 8003b18:	f000 f808 	bl	8003b2c <HAL_CRCEx_Polynomial_Set>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d0e2      	beq.n	8003ae6 <HAL_CRC_Init+0x2e>
 8003b20:	e7cd      	b.n	8003abe <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b22:	6922      	ldr	r2, [r4, #16]
 8003b24:	e7e4      	b.n	8003af0 <HAL_CRC_Init+0x38>
 8003b26:	bf00      	nop
 8003b28:	04c11db7 	.word	0x04c11db7

08003b2c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b2c:	231f      	movs	r3, #31
{
 8003b2e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b30:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003b34:	d306      	bcc.n	8003b44 <HAL_CRCEx_Polynomial_Set+0x18>
 8003b36:	fa21 f403 	lsr.w	r4, r1, r3
 8003b3a:	07e4      	lsls	r4, r4, #31
 8003b3c:	d5f8      	bpl.n	8003b30 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003b3e:	2a08      	cmp	r2, #8
 8003b40:	d014      	beq.n	8003b6c <HAL_CRCEx_Polynomial_Set+0x40>
 8003b42:	d809      	bhi.n	8003b58 <HAL_CRCEx_Polynomial_Set+0x2c>
 8003b44:	b972      	cbnz	r2, 8003b64 <HAL_CRCEx_Polynomial_Set+0x38>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003b46:	6800      	ldr	r0, [r0, #0]
 8003b48:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b4a:	6883      	ldr	r3, [r0, #8]
 8003b4c:	f023 0318 	bic.w	r3, r3, #24
 8003b50:	431a      	orrs	r2, r3
 8003b52:	6082      	str	r2, [r0, #8]
 8003b54:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
 8003b56:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 8003b58:	2a10      	cmp	r2, #16
 8003b5a:	d005      	beq.n	8003b68 <HAL_CRCEx_Polynomial_Set+0x3c>
 8003b5c:	2a18      	cmp	r2, #24
 8003b5e:	d101      	bne.n	8003b64 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_7B)
 8003b60:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8003b62:	d9f0      	bls.n	8003b46 <HAL_CRCEx_Polynomial_Set+0x1a>
  switch (PolyLength)
 8003b64:	2001      	movs	r0, #1
 8003b66:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	e7fa      	b.n	8003b62 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003b6c:	2b0f      	cmp	r3, #15
 8003b6e:	e7f8      	b.n	8003b62 <HAL_CRCEx_Polynomial_Set+0x36>

08003b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b74:	680b      	ldr	r3, [r1, #0]
{
 8003b76:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b78:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d24 <HAL_GPIO_Init+0x1b4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b7e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b80:	4a66      	ldr	r2, [pc, #408]	; (8003d1c <HAL_GPIO_Init+0x1ac>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b82:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8003d28 <HAL_GPIO_Init+0x1b8>
    ioposition = ((uint32_t)0x01) << position;
 8003b86:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8003b8c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b90:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8003b94:	45b6      	cmp	lr, r6
 8003b96:	f040 80ab 	bne.w	8003cf0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9a:	684c      	ldr	r4, [r1, #4]
 8003b9c:	f024 0710 	bic.w	r7, r4, #16
 8003ba0:	2f02      	cmp	r7, #2
 8003ba2:	d116      	bne.n	8003bd2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8003ba4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ba8:	f003 0b07 	and.w	fp, r3, #7
 8003bac:	f04f 0c0f 	mov.w	ip, #15
 8003bb0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003bb4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003bb8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bbc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003bc0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bc4:	690d      	ldr	r5, [r1, #16]
 8003bc6:	fa05 f50b 	lsl.w	r5, r5, fp
 8003bca:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8003bce:	f8ca 5020 	str.w	r5, [sl, #32]
 8003bd2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bd6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8003bd8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bdc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003be0:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003be4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003be6:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bea:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bec:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bee:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bf2:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8003bf6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bfa:	d811      	bhi.n	8003c20 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8003bfc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bfe:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c02:	68cf      	ldr	r7, [r1, #12]
 8003c04:	fa07 fc0a 	lsl.w	ip, r7, sl
 8003c08:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8003c0c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003c0e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c10:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003c14:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8003c18:	409f      	lsls	r7, r3
 8003c1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003c1e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003c20:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c22:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c24:	688f      	ldr	r7, [r1, #8]
 8003c26:	fa07 f70a 	lsl.w	r7, r7, sl
 8003c2a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8003c2c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c2e:	00e5      	lsls	r5, r4, #3
 8003c30:	d55e      	bpl.n	8003cf0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c32:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8003c36:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c3a:	f003 0e03 	and.w	lr, r3, #3
 8003c3e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c42:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8003c46:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8003c52:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8003c56:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8003c5a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8003c5e:	9503      	str	r5, [sp, #12]
 8003c60:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c62:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8003c66:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c6a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c6e:	4d2c      	ldr	r5, [pc, #176]	; (8003d20 <HAL_GPIO_Init+0x1b0>)
 8003c70:	42a8      	cmp	r0, r5
 8003c72:	d044      	beq.n	8003cfe <HAL_GPIO_Init+0x18e>
 8003c74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c78:	42a8      	cmp	r0, r5
 8003c7a:	d042      	beq.n	8003d02 <HAL_GPIO_Init+0x192>
 8003c7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c80:	42a8      	cmp	r0, r5
 8003c82:	d040      	beq.n	8003d06 <HAL_GPIO_Init+0x196>
 8003c84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c88:	42a8      	cmp	r0, r5
 8003c8a:	d03e      	beq.n	8003d0a <HAL_GPIO_Init+0x19a>
 8003c8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c90:	42a8      	cmp	r0, r5
 8003c92:	d03c      	beq.n	8003d0e <HAL_GPIO_Init+0x19e>
 8003c94:	4548      	cmp	r0, r9
 8003c96:	d03c      	beq.n	8003d12 <HAL_GPIO_Init+0x1a2>
 8003c98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c9c:	42a8      	cmp	r0, r5
 8003c9e:	d03a      	beq.n	8003d16 <HAL_GPIO_Init+0x1a6>
 8003ca0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ca4:	42a8      	cmp	r0, r5
 8003ca6:	bf14      	ite	ne
 8003ca8:	2508      	movne	r5, #8
 8003caa:	2507      	moveq	r5, #7
 8003cac:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cb0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cb4:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cb8:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8003cbe:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	bf0c      	ite	eq
 8003cc2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003cc4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cc6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8003cca:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003ccc:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003cce:	bf0c      	ite	eq
 8003cd0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003cd2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cd4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8003cd8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003cda:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003cdc:	bf0c      	ite	eq
 8003cde:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003ce0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8003ce4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003ce6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	bf54      	ite	pl
 8003cea:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8003cec:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8003cee:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	f47f af47 	bne.w	8003b86 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8003cf8:	b005      	add	sp, #20
 8003cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cfe:	2500      	movs	r5, #0
 8003d00:	e7d4      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d02:	2501      	movs	r5, #1
 8003d04:	e7d2      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d06:	2502      	movs	r5, #2
 8003d08:	e7d0      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d0a:	2503      	movs	r5, #3
 8003d0c:	e7ce      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d0e:	2504      	movs	r5, #4
 8003d10:	e7cc      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d12:	2505      	movs	r5, #5
 8003d14:	e7ca      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d16:	2506      	movs	r5, #6
 8003d18:	e7c8      	b.n	8003cac <HAL_GPIO_Init+0x13c>
 8003d1a:	bf00      	nop
 8003d1c:	40013c00 	.word	0x40013c00
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40021400 	.word	0x40021400

08003d2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d2c:	b10a      	cbz	r2, 8003d32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d2e:	6181      	str	r1, [r0, #24]
 8003d30:	4770      	bx	lr
 8003d32:	0409      	lsls	r1, r1, #16
 8003d34:	e7fb      	b.n	8003d2e <HAL_GPIO_WritePin+0x2>
	...

08003d38 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8003d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d3e:	4c19      	ldr	r4, [pc, #100]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d56:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d58:	f7ff fe24 	bl	80039a4 <HAL_GetTick>
 8003d5c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	03da      	lsls	r2, r3, #15
 8003d62:	d50c      	bpl.n	8003d7e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d6c:	f7ff fe1a 	bl	80039a4 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d70:	4c0c      	ldr	r4, [pc, #48]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8003d72:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d74:	6863      	ldr	r3, [r4, #4]
 8003d76:	039b      	lsls	r3, r3, #14
 8003d78:	d50a      	bpl.n	8003d90 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e006      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d7e:	f7ff fe11 	bl	80039a4 <HAL_GetTick>
 8003d82:	1b40      	subs	r0, r0, r5
 8003d84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d88:	d9e9      	bls.n	8003d5e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8003d8a:	2003      	movs	r0, #3
}
 8003d8c:	b003      	add	sp, #12
 8003d8e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d90:	f7ff fe08 	bl	80039a4 <HAL_GetTick>
 8003d94:	1b40      	subs	r0, r0, r5
 8003d96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d9a:	d9eb      	bls.n	8003d74 <HAL_PWREx_EnableOverDrive+0x3c>
 8003d9c:	e7f5      	b.n	8003d8a <HAL_PWREx_EnableOverDrive+0x52>
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000

08003da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dac:	4604      	mov	r4, r0
 8003dae:	b918      	cbnz	r0, 8003db8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8003db2:	b002      	add	sp, #8
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db8:	6803      	ldr	r3, [r0, #0]
 8003dba:	07d8      	lsls	r0, r3, #31
 8003dbc:	d410      	bmi.n	8003de0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	0799      	lsls	r1, r3, #30
 8003dc2:	d45e      	bmi.n	8003e82 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	0719      	lsls	r1, r3, #28
 8003dc8:	f100 80a3 	bmi.w	8003f12 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	075a      	lsls	r2, r3, #29
 8003dd0:	f100 80c4 	bmi.w	8003f5c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd4:	69a2      	ldr	r2, [r4, #24]
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	f040 812e 	bne.w	8004038 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8003ddc:	2000      	movs	r0, #0
 8003dde:	e7e8      	b.n	8003db2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de0:	4b93      	ldr	r3, [pc, #588]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	f002 020c 	and.w	r2, r2, #12
 8003de8:	2a04      	cmp	r2, #4
 8003dea:	d007      	beq.n	8003dfc <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	f002 020c 	and.w	r2, r2, #12
 8003df2:	2a08      	cmp	r2, #8
 8003df4:	d10a      	bne.n	8003e0c <HAL_RCC_OscConfig+0x64>
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	025a      	lsls	r2, r3, #9
 8003dfa:	d507      	bpl.n	8003e0c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b8c      	ldr	r3, [pc, #560]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	039b      	lsls	r3, r3, #14
 8003e02:	d5dc      	bpl.n	8003dbe <HAL_RCC_OscConfig+0x16>
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1d9      	bne.n	8003dbe <HAL_RCC_OscConfig+0x16>
 8003e0a:	e7d1      	b.n	8003db0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	4d88      	ldr	r5, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d111      	bne.n	8003e3a <HAL_RCC_OscConfig+0x92>
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e1e:	f7ff fdc1 	bl	80039a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4d83      	ldr	r5, [pc, #524]	; (8004030 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8003e24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	039f      	lsls	r7, r3, #14
 8003e2a:	d4c8      	bmi.n	8003dbe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7ff fdba 	bl	80039a4 <HAL_GetTick>
 8003e30:	1b80      	subs	r0, r0, r6
 8003e32:	2864      	cmp	r0, #100	; 0x64
 8003e34:	d9f7      	bls.n	8003e26 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8003e36:	2003      	movs	r0, #3
 8003e38:	e7bb      	b.n	8003db2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3a:	b99b      	cbnz	r3, 8003e64 <HAL_RCC_OscConfig+0xbc>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e4c:	f7ff fdaa 	bl	80039a4 <HAL_GetTick>
 8003e50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	0398      	lsls	r0, r3, #14
 8003e56:	d5b2      	bpl.n	8003dbe <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e58:	f7ff fda4 	bl	80039a4 <HAL_GetTick>
 8003e5c:	1b80      	subs	r0, r0, r6
 8003e5e:	2864      	cmp	r0, #100	; 0x64
 8003e60:	d9f7      	bls.n	8003e52 <HAL_RCC_OscConfig+0xaa>
 8003e62:	e7e8      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	d103      	bne.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	e7d0      	b.n	8003e16 <HAL_RCC_OscConfig+0x6e>
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e80:	e7cc      	b.n	8003e1c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e82:	4b6b      	ldr	r3, [pc, #428]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	f012 0f0c 	tst.w	r2, #12
 8003e8a:	d007      	beq.n	8003e9c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	f002 020c 	and.w	r2, r2, #12
 8003e92:	2a08      	cmp	r2, #8
 8003e94:	d111      	bne.n	8003eba <HAL_RCC_OscConfig+0x112>
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0259      	lsls	r1, r3, #9
 8003e9a:	d40e      	bmi.n	8003eba <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9c:	4b64      	ldr	r3, [pc, #400]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	0792      	lsls	r2, r2, #30
 8003ea2:	d502      	bpl.n	8003eaa <HAL_RCC_OscConfig+0x102>
 8003ea4:	68e2      	ldr	r2, [r4, #12]
 8003ea6:	2a01      	cmp	r2, #1
 8003ea8:	d182      	bne.n	8003db0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	6921      	ldr	r1, [r4, #16]
 8003eae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003eb2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003eb6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb8:	e784      	b.n	8003dc4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	4d5c      	ldr	r5, [pc, #368]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003ebe:	b1bb      	cbz	r3, 8003ef0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ec8:	f7ff fd6c 	bl	80039a4 <HAL_GetTick>
 8003ecc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	079f      	lsls	r7, r3, #30
 8003ed2:	d507      	bpl.n	8003ee4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	6922      	ldr	r2, [r4, #16]
 8003ed8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003edc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	e76f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7ff fd5e 	bl	80039a4 <HAL_GetTick>
 8003ee8:	1b80      	subs	r0, r0, r6
 8003eea:	2802      	cmp	r0, #2
 8003eec:	d9ef      	bls.n	8003ece <HAL_RCC_OscConfig+0x126>
 8003eee:	e7a2      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ef8:	f7ff fd54 	bl	80039a4 <HAL_GetTick>
 8003efc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	0798      	lsls	r0, r3, #30
 8003f02:	f57f af5f 	bpl.w	8003dc4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f06:	f7ff fd4d 	bl	80039a4 <HAL_GetTick>
 8003f0a:	1b80      	subs	r0, r0, r6
 8003f0c:	2802      	cmp	r0, #2
 8003f0e:	d9f6      	bls.n	8003efe <HAL_RCC_OscConfig+0x156>
 8003f10:	e791      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f12:	6963      	ldr	r3, [r4, #20]
 8003f14:	4d46      	ldr	r5, [pc, #280]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f16:	b183      	cbz	r3, 8003f3a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8003f18:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003f20:	f7ff fd40 	bl	80039a4 <HAL_GetTick>
 8003f24:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f28:	079b      	lsls	r3, r3, #30
 8003f2a:	f53f af4f 	bmi.w	8003dcc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7ff fd39 	bl	80039a4 <HAL_GetTick>
 8003f32:	1b80      	subs	r0, r0, r6
 8003f34:	2802      	cmp	r0, #2
 8003f36:	d9f6      	bls.n	8003f26 <HAL_RCC_OscConfig+0x17e>
 8003f38:	e77d      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8003f3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003f42:	f7ff fd2f 	bl	80039a4 <HAL_GetTick>
 8003f46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f4a:	079f      	lsls	r7, r3, #30
 8003f4c:	f57f af3e 	bpl.w	8003dcc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f50:	f7ff fd28 	bl	80039a4 <HAL_GetTick>
 8003f54:	1b80      	subs	r0, r0, r6
 8003f56:	2802      	cmp	r0, #2
 8003f58:	d9f6      	bls.n	8003f48 <HAL_RCC_OscConfig+0x1a0>
 8003f5a:	e76c      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5c:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f60:	00d0      	lsls	r0, r2, #3
 8003f62:	d427      	bmi.n	8003fb4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003f66:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	4d2e      	ldr	r5, [pc, #184]	; (8004034 <HAL_RCC_OscConfig+0x28c>)
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	05d9      	lsls	r1, r3, #23
 8003f7e:	d51b      	bpl.n	8003fb8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f80:	68a3      	ldr	r3, [r4, #8]
 8003f82:	4d2b      	ldr	r5, [pc, #172]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d127      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x230>
 8003f88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f94:	f7ff fd06 	bl	80039a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	4f25      	ldr	r7, [pc, #148]	; (8004030 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8003f9a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f9e:	079b      	lsls	r3, r3, #30
 8003fa0:	d53f      	bpl.n	8004022 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	f43f af16 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_RCC_OscConfig+0x288>)
 8003faa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	e70f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	e7df      	b.n	8003f78 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003fc0:	f7ff fcf0 	bl	80039a4 <HAL_GetTick>
 8003fc4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	05da      	lsls	r2, r3, #23
 8003fca:	d4d9      	bmi.n	8003f80 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7ff fcea 	bl	80039a4 <HAL_GetTick>
 8003fd0:	1bc0      	subs	r0, r0, r7
 8003fd2:	2864      	cmp	r0, #100	; 0x64
 8003fd4:	d9f7      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x21e>
 8003fd6:	e72e      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	b9ab      	cbnz	r3, 8004006 <HAL_RCC_OscConfig+0x25e>
 8003fda:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	672b      	str	r3, [r5, #112]	; 0x70
 8003fe6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003fe8:	f023 0304 	bic.w	r3, r3, #4
 8003fec:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003fee:	f7ff fcd9 	bl	80039a4 <HAL_GetTick>
 8003ff2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ff6:	0798      	lsls	r0, r3, #30
 8003ff8:	d5d3      	bpl.n	8003fa2 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7ff fcd3 	bl	80039a4 <HAL_GetTick>
 8003ffe:	1bc0      	subs	r0, r0, r7
 8004000:	4540      	cmp	r0, r8
 8004002:	d9f7      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x24c>
 8004004:	e717      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004006:	2b05      	cmp	r3, #5
 8004008:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800400a:	d103      	bne.n	8004014 <HAL_RCC_OscConfig+0x26c>
 800400c:	f043 0304 	orr.w	r3, r3, #4
 8004010:	672b      	str	r3, [r5, #112]	; 0x70
 8004012:	e7b9      	b.n	8003f88 <HAL_RCC_OscConfig+0x1e0>
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	672b      	str	r3, [r5, #112]	; 0x70
 800401a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	e7b5      	b.n	8003f8e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7ff fcbf 	bl	80039a4 <HAL_GetTick>
 8004026:	eba0 0008 	sub.w	r0, r0, r8
 800402a:	42a8      	cmp	r0, r5
 800402c:	d9b6      	bls.n	8003f9c <HAL_RCC_OscConfig+0x1f4>
 800402e:	e702      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004038:	4d24      	ldr	r5, [pc, #144]	; (80040cc <HAL_RCC_OscConfig+0x324>)
 800403a:	68ab      	ldr	r3, [r5, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	f43f aeb5 	beq.w	8003db0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8004046:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004048:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004050:	d12e      	bne.n	80040b0 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8004052:	f7ff fca7 	bl	80039a4 <HAL_GetTick>
 8004056:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	0199      	lsls	r1, r3, #6
 800405c:	d422      	bmi.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405e:	6a22      	ldr	r2, [r4, #32]
 8004060:	69e3      	ldr	r3, [r4, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800406a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800406e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004070:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004074:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4c15      	ldr	r4, [pc, #84]	; (80040cc <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004078:	0852      	lsrs	r2, r2, #1
 800407a:	3a01      	subs	r2, #1
 800407c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004080:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004082:	682b      	ldr	r3, [r5, #0]
 8004084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004088:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800408a:	f7ff fc8b 	bl	80039a4 <HAL_GetTick>
 800408e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	019a      	lsls	r2, r3, #6
 8004094:	f53f aea2 	bmi.w	8003ddc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7ff fc84 	bl	80039a4 <HAL_GetTick>
 800409c:	1b40      	subs	r0, r0, r5
 800409e:	2802      	cmp	r0, #2
 80040a0:	d9f6      	bls.n	8004090 <HAL_RCC_OscConfig+0x2e8>
 80040a2:	e6c8      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a4:	f7ff fc7e 	bl	80039a4 <HAL_GetTick>
 80040a8:	1b80      	subs	r0, r0, r6
 80040aa:	2802      	cmp	r0, #2
 80040ac:	d9d4      	bls.n	8004058 <HAL_RCC_OscConfig+0x2b0>
 80040ae:	e6c2      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80040b0:	f7ff fc78 	bl	80039a4 <HAL_GetTick>
 80040b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	f57f ae8f 	bpl.w	8003ddc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	f7ff fc71 	bl	80039a4 <HAL_GetTick>
 80040c2:	1b00      	subs	r0, r0, r4
 80040c4:	2802      	cmp	r0, #2
 80040c6:	d9f6      	bls.n	80040b6 <HAL_RCC_OscConfig+0x30e>
 80040c8:	e6b5      	b.n	8003e36 <HAL_RCC_OscConfig+0x8e>
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800

080040d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d0:	4913      	ldr	r1, [pc, #76]	; (8004120 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80040d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d4:	688b      	ldr	r3, [r1, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x16>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e2:	4810      	ldr	r0, [pc, #64]	; (8004124 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80040e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80040e6:	4810      	ldr	r0, [pc, #64]	; (8004128 <HAL_RCC_GetSysClockFreq+0x58>)
 80040e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ea:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ee:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040f4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80040fc:	bf1a      	itte	ne
 80040fe:	480a      	ldrne	r0, [pc, #40]	; (8004128 <HAL_RCC_GetSysClockFreq+0x58>)
 8004100:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004102:	4808      	ldreq	r0, [pc, #32]	; (8004124 <HAL_RCC_GetSysClockFreq+0x54>)
 8004104:	fba1 0100 	umull	r0, r1, r1, r0
 8004108:	f7ff fa44 	bl	8003594 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_RCC_GetSysClockFreq+0x50>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004114:	3301      	adds	r3, #1
 8004116:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004118:	fbb0 f0f3 	udiv	r0, r0, r3
 800411c:	bd08      	pop	{r3, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400
 8004128:	017d7840 	.word	0x017d7840

0800412c <HAL_RCC_ClockConfig>:
{
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004132:	4604      	mov	r4, r0
 8004134:	b910      	cbnz	r0, 800413c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004136:	2001      	movs	r0, #1
 8004138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4a46      	ldr	r2, [pc, #280]	; (8004258 <HAL_RCC_ClockConfig+0x12c>)
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	428b      	cmp	r3, r1
 8004146:	d328      	bcc.n	800419a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	078f      	lsls	r7, r1, #30
 800414c:	d430      	bmi.n	80041b0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	07c8      	lsls	r0, r1, #31
 8004150:	d443      	bmi.n	80041da <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004152:	4a41      	ldr	r2, [pc, #260]	; (8004258 <HAL_RCC_ClockConfig+0x12c>)
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	429d      	cmp	r5, r3
 800415c:	d367      	bcc.n	800422e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	0751      	lsls	r1, r2, #29
 8004162:	d470      	bmi.n	8004246 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004164:	0713      	lsls	r3, r2, #28
 8004166:	d507      	bpl.n	8004178 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004168:	4a3c      	ldr	r2, [pc, #240]	; (800425c <HAL_RCC_ClockConfig+0x130>)
 800416a:	6921      	ldr	r1, [r4, #16]
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004172:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004176:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004178:	f7ff ffaa 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800417c:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCC_ClockConfig+0x130>)
 800417e:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_RCC_ClockConfig+0x134>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	40d8      	lsrs	r0, r3
 800418a:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x138>)
 800418c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800418e:	2000      	movs	r0, #0
 8004190:	f7ff fbc2 	bl	8003918 <HAL_InitTick>
  return HAL_OK;
 8004194:	2000      	movs	r0, #0
 8004196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4299      	cmp	r1, r3
 80041ac:	d1c3      	bne.n	8004136 <HAL_RCC_ClockConfig+0xa>
 80041ae:	e7cb      	b.n	8004148 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	f011 0f04 	tst.w	r1, #4
 80041b4:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_ClockConfig+0x130>)
 80041b6:	d003      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80041be:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	070e      	lsls	r6, r1, #28
 80041c2:	d503      	bpl.n	80041cc <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80041ca:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	68a0      	ldr	r0, [r4, #8]
 80041d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041d4:	4302      	orrs	r2, r0
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	e7b9      	b.n	800414e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	6861      	ldr	r1, [r4, #4]
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_RCC_ClockConfig+0x130>)
 80041de:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e0:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	d11c      	bne.n	800421e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	d0a5      	beq.n	8004136 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ea:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f0:	4e1a      	ldr	r6, [pc, #104]	; (800425c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	f022 0203 	bic.w	r2, r2, #3
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80041fa:	f7ff fbd3 	bl	80039a4 <HAL_GetTick>
 80041fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004200:	68b3      	ldr	r3, [r6, #8]
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800420c:	d0a1      	beq.n	8004152 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420e:	f7ff fbc9 	bl	80039a4 <HAL_GetTick>
 8004212:	1bc0      	subs	r0, r0, r7
 8004214:	4540      	cmp	r0, r8
 8004216:	d9f3      	bls.n	8004200 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004218:	2003      	movs	r0, #3
}
 800421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	2902      	cmp	r1, #2
 8004220:	d102      	bne.n	8004228 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004226:	e7df      	b.n	80041e8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	f012 0f02 	tst.w	r2, #2
 800422c:	e7dc      	b.n	80041e8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	f023 030f 	bic.w	r3, r3, #15
 8004234:	432b      	orrs	r3, r5
 8004236:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	429d      	cmp	r5, r3
 8004240:	f47f af79 	bne.w	8004136 <HAL_RCC_ClockConfig+0xa>
 8004244:	e78b      	b.n	800415e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004246:	4905      	ldr	r1, [pc, #20]	; (800425c <HAL_RCC_ClockConfig+0x130>)
 8004248:	68e0      	ldr	r0, [r4, #12]
 800424a:	688b      	ldr	r3, [r1, #8]
 800424c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004250:	4303      	orrs	r3, r0
 8004252:	608b      	str	r3, [r1, #8]
 8004254:	e786      	b.n	8004164 <HAL_RCC_ClockConfig+0x38>
 8004256:	bf00      	nop
 8004258:	40023c00 	.word	0x40023c00
 800425c:	40023800 	.word	0x40023800
 8004260:	0804c8e4 	.word	0x0804c8e4
 8004264:	200007e4 	.word	0x200007e4

08004268 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004268:	4b01      	ldr	r3, [pc, #4]	; (8004270 <HAL_RCC_GetHCLKFreq+0x8>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	200007e4 	.word	0x200007e4

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800427e:	5cd3      	ldrb	r3, [r2, r3]
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004282:	6810      	ldr	r0, [r2, #0]
}
 8004284:	40d8      	lsrs	r0, r3
 8004286:	4770      	bx	lr
 8004288:	40023800 	.word	0x40023800
 800428c:	0804c8f4 	.word	0x0804c8f4
 8004290:	200007e4 	.word	0x200007e4

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800429e:	5cd3      	ldrb	r3, [r2, r3]
 80042a0:	4a03      	ldr	r2, [pc, #12]	; (80042b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042a2:	6810      	ldr	r0, [r2, #0]
}
 80042a4:	40d8      	lsrs	r0, r3
 80042a6:	4770      	bx	lr
 80042a8:	40023800 	.word	0x40023800
 80042ac:	0804c8f4 	.word	0x0804c8f4
 80042b0:	200007e4 	.word	0x200007e4

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042b8:	6802      	ldr	r2, [r0, #0]
{
 80042ba:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042bc:	f012 0601 	ands.w	r6, r2, #1
 80042c0:	d00b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042c2:	4bb8      	ldr	r3, [pc, #736]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80042ca:	6099      	str	r1, [r3, #8]
 80042cc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042d2:	fab6 f686 	clz	r6, r6
 80042d6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042d8:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042da:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80042de:	d012      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e0:	49b0      	ldr	r1, [pc, #704]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042e2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80042e4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042e8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80042f0:	bf08      	it	eq
 80042f2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042f4:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042f8:	bf16      	itet	ne
 80042fa:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80042fe:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004300:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004306:	02d7      	lsls	r7, r2, #11
 8004308:	d510      	bpl.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800430a:	48a6      	ldr	r0, [pc, #664]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800430c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800430e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004312:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004316:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800431a:	ea43 0301 	orr.w	r3, r3, r1
 800431e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004322:	f000 814c 	beq.w	80045be <HAL_RCCEx_PeriphCLKConfig+0x30a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004326:	2900      	cmp	r1, #0
 8004328:	bf08      	it	eq
 800432a:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800432c:	0690      	lsls	r0, r2, #26
 800432e:	d531      	bpl.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b9c      	ldr	r3, [pc, #624]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004332:	4f9d      	ldr	r7, [pc, #628]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434e:	f7ff fb29 	bl	80039a4 <HAL_GetTick>
 8004352:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	05d9      	lsls	r1, r3, #23
 8004358:	f140 8133 	bpl.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435c:	4f91      	ldr	r7, [pc, #580]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800435e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004360:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004364:	f040 8138 	bne.w	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800436a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800436e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004372:	4a8c      	ldr	r2, [pc, #560]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004374:	f040 8156 	bne.w	8004624 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8004378:	6891      	ldr	r1, [r2, #8]
 800437a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800437e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004382:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004386:	4301      	orrs	r1, r0
 8004388:	6091      	str	r1, [r2, #8]
 800438a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004390:	430b      	orrs	r3, r1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	06df      	lsls	r7, r3, #27
 8004398:	d50c      	bpl.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800439a:	4a82      	ldr	r2, [pc, #520]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800439c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80043a0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80043a4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80043a8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80043ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80043ae:	4301      	orrs	r1, r0
 80043b0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b4:	0458      	lsls	r0, r3, #17
 80043b6:	d508      	bpl.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b8:	497a      	ldr	r1, [pc, #488]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80043bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80043c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80043c4:	4302      	orrs	r2, r0
 80043c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ca:	0419      	lsls	r1, r3, #16
 80043cc:	d508      	bpl.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ce:	4975      	ldr	r1, [pc, #468]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043d0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80043d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80043d6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80043da:	4302      	orrs	r2, r0
 80043dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043e0:	03da      	lsls	r2, r3, #15
 80043e2:	d508      	bpl.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043e4:	496f      	ldr	r1, [pc, #444]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80043e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80043ec:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80043f0:	4302      	orrs	r2, r0
 80043f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f6:	065f      	lsls	r7, r3, #25
 80043f8:	d508      	bpl.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fa:	496a      	ldr	r1, [pc, #424]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80043fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004402:	f022 0203 	bic.w	r2, r2, #3
 8004406:	4302      	orrs	r2, r0
 8004408:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800440c:	0618      	lsls	r0, r3, #24
 800440e:	d508      	bpl.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004410:	4964      	ldr	r1, [pc, #400]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004412:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004414:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004418:	f022 020c 	bic.w	r2, r2, #12
 800441c:	4302      	orrs	r2, r0
 800441e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004422:	05d9      	lsls	r1, r3, #23
 8004424:	d508      	bpl.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004426:	495f      	ldr	r1, [pc, #380]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004428:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800442a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800442e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004432:	4302      	orrs	r2, r0
 8004434:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004438:	059a      	lsls	r2, r3, #22
 800443a:	d508      	bpl.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800443c:	4959      	ldr	r1, [pc, #356]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800443e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004440:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004444:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004448:	4302      	orrs	r2, r0
 800444a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800444e:	055f      	lsls	r7, r3, #21
 8004450:	d508      	bpl.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004452:	4954      	ldr	r1, [pc, #336]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004454:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004456:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800445a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800445e:	4302      	orrs	r2, r0
 8004460:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004464:	0518      	lsls	r0, r3, #20
 8004466:	d508      	bpl.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004468:	494e      	ldr	r1, [pc, #312]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800446a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800446c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004470:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004474:	4302      	orrs	r2, r0
 8004476:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800447a:	04d9      	lsls	r1, r3, #19
 800447c:	d508      	bpl.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800447e:	4949      	ldr	r1, [pc, #292]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004482:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004486:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800448a:	4302      	orrs	r2, r0
 800448c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004490:	049a      	lsls	r2, r3, #18
 8004492:	d508      	bpl.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004494:	4943      	ldr	r1, [pc, #268]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004496:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004498:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800449c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80044a0:	4302      	orrs	r2, r0
 80044a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044a6:	029f      	lsls	r7, r3, #10
 80044a8:	d50c      	bpl.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044aa:	483e      	ldr	r0, [pc, #248]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044ac:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80044ae:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80044b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044b6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80044ba:	bf08      	it	eq
 80044bc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044be:	430a      	orrs	r2, r1
 80044c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044c4:	0358      	lsls	r0, r3, #13
 80044c6:	d508      	bpl.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c8:	4936      	ldr	r1, [pc, #216]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80044d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044d4:	4302      	orrs	r2, r0
 80044d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044da:	0219      	lsls	r1, r3, #8
 80044dc:	d508      	bpl.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044de:	4931      	ldr	r1, [pc, #196]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044e0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80044e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80044e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044ea:	4302      	orrs	r2, r0
 80044ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	d508      	bpl.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80044f4:	492b      	ldr	r1, [pc, #172]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80044f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80044fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004500:	4302      	orrs	r2, r0
 8004502:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004506:	2e00      	cmp	r6, #0
 8004508:	f040 8090 	bne.w	800462c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800450c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004510:	f000 808c 	beq.w	800462c <HAL_RCCEx_PeriphCLKConfig+0x378>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004514:	2d01      	cmp	r5, #1
 8004516:	d150      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004518:	4d22      	ldr	r5, [pc, #136]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800451a:	682b      	ldr	r3, [r5, #0]
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004522:	f7ff fa3f 	bl	80039a4 <HAL_GetTick>
 8004526:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	009f      	lsls	r7, r3, #2
 800452c:	f100 80e1 	bmi.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	0305      	lsls	r5, r0, #12
 8004534:	d501      	bpl.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004538:	b11b      	cbz	r3, 8004542 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800453a:	02c1      	lsls	r1, r0, #11
 800453c:	d518      	bpl.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800453e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004540:	b9b3      	cbnz	r3, 8004570 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004542:	4918      	ldr	r1, [pc, #96]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004544:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004546:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800454a:	6925      	ldr	r5, [r4, #16]
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004552:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800455c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8004560:	6a22      	ldr	r2, [r4, #32]
 8004562:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004566:	3a01      	subs	r2, #1
 8004568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800456c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004570:	0282      	lsls	r2, r0, #10
 8004572:	d510      	bpl.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004574:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457a:	d10c      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800457c:	4909      	ldr	r1, [pc, #36]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800457e:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004580:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004584:	6920      	ldr	r0, [r4, #16]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800458c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004596:	4c03      	ldr	r4, [pc, #12]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	e004      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ac:	f7ff f9fa 	bl	80039a4 <HAL_GetTick>
 80045b0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f140 80a3 	bpl.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0x44c>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80045ba:	2000      	movs	r0, #0
 80045bc:	e009      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      plli2sused = 1;
 80045be:	2601      	movs	r6, #1
 80045c0:	e6b4      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7ff f9ef 	bl	80039a4 <HAL_GetTick>
 80045c6:	eba0 0008 	sub.w	r0, r0, r8
 80045ca:	2864      	cmp	r0, #100	; 0x64
 80045cc:	f67f aec2 	bls.w	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 80045d0:	2003      	movs	r0, #3
}
 80045d2:	b003      	add	sp, #12
 80045d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045da:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80045de:	4293      	cmp	r3, r2
 80045e0:	f43f aec2 	beq.w	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045f0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80045f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045f8:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80045fa:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	f57f aeb2 	bpl.w	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 8004604:	f7ff f9ce 	bl	80039a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800460c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004610:	079b      	lsls	r3, r3, #30
 8004612:	f53f aea9 	bmi.w	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7ff f9c5 	bl	80039a4 <HAL_GetTick>
 800461a:	eba0 0008 	sub.w	r0, r0, r8
 800461e:	4548      	cmp	r0, r9
 8004620:	d9f5      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004622:	e7d5      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004624:	6891      	ldr	r1, [r2, #8]
 8004626:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800462a:	e6ad      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 800462c:	4e38      	ldr	r6, [pc, #224]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800462e:	6833      	ldr	r3, [r6, #0]
 8004630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004634:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004636:	f7ff f9b5 	bl	80039a4 <HAL_GetTick>
 800463a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	d451      	bmi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	07d7      	lsls	r7, r2, #31
 8004646:	d50d      	bpl.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800464a:	b95b      	cbnz	r3, 8004664 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800464c:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800464e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004652:	6860      	ldr	r0, [r4, #4]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800465a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800465e:	430b      	orrs	r3, r1
 8004660:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004664:	0310      	lsls	r0, r2, #12
 8004666:	d503      	bpl.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d005      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004670:	02d1      	lsls	r1, r2, #11
 8004672:	d519      	bpl.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800467a:	d115      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800467c:	4924      	ldr	r1, [pc, #144]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800467e:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004680:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004684:	6866      	ldr	r6, [r4, #4]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800468c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004690:	4303      	orrs	r3, r0
 8004692:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004696:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800469a:	69e3      	ldr	r3, [r4, #28]
 800469c:	f020 001f 	bic.w	r0, r0, #31
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4303      	orrs	r3, r0
 80046a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046a8:	0192      	lsls	r2, r2, #6
 80046aa:	d50a      	bpl.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ac:	68e3      	ldr	r3, [r4, #12]
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80046b6:	68a2      	ldr	r2, [r4, #8]
 80046b8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80046c2:	4e13      	ldr	r6, [pc, #76]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046c4:	6833      	ldr	r3, [r6, #0]
 80046c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80046cc:	f7ff f96a 	bl	80039a4 <HAL_GetTick>
 80046d0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d2:	6833      	ldr	r3, [r6, #0]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	f53f af1d 	bmi.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046da:	f7ff f963 	bl	80039a4 <HAL_GetTick>
 80046de:	1bc0      	subs	r0, r0, r7
 80046e0:	2864      	cmp	r0, #100	; 0x64
 80046e2:	d9f6      	bls.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 80046e4:	e774      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046e6:	f7ff f95d 	bl	80039a4 <HAL_GetTick>
 80046ea:	1bc0      	subs	r0, r0, r7
 80046ec:	2864      	cmp	r0, #100	; 0x64
 80046ee:	d9a5      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x388>
 80046f0:	e76e      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046f2:	f7ff f957 	bl	80039a4 <HAL_GetTick>
 80046f6:	1b80      	subs	r0, r0, r6
 80046f8:	2864      	cmp	r0, #100	; 0x64
 80046fa:	f67f af15 	bls.w	8004528 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80046fe:	e767      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004700:	f7ff f950 	bl	80039a4 <HAL_GetTick>
 8004704:	1b40      	subs	r0, r0, r5
 8004706:	2864      	cmp	r0, #100	; 0x64
 8004708:	f67f af53 	bls.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800470c:	e760      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800

08004714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004714:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004716:	69c2      	ldr	r2, [r0, #28]
{
 8004718:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800471a:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800471c:	6881      	ldr	r1, [r0, #8]
 800471e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004720:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004722:	4301      	orrs	r1, r0
 8004724:	6960      	ldr	r0, [r4, #20]
 8004726:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004728:	4890      	ldr	r0, [pc, #576]	; (800496c <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800472a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800472c:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800472e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004730:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004732:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004734:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800473c:	4301      	orrs	r1, r0
 800473e:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004740:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004742:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004744:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004746:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800474a:	4301      	orrs	r1, r0
 800474c:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474e:	4988      	ldr	r1, [pc, #544]	; (8004970 <UART_SetConfig+0x25c>)
 8004750:	428b      	cmp	r3, r1
 8004752:	d117      	bne.n	8004784 <UART_SetConfig+0x70>
 8004754:	4b87      	ldr	r3, [pc, #540]	; (8004974 <UART_SetConfig+0x260>)
 8004756:	4988      	ldr	r1, [pc, #544]	; (8004978 <UART_SetConfig+0x264>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004760:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004764:	5ccb      	ldrb	r3, [r1, r3]
 8004766:	d129      	bne.n	80047bc <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8004768:	2b08      	cmp	r3, #8
 800476a:	f200 809d 	bhi.w	80048a8 <UART_SetConfig+0x194>
 800476e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004772:	008c      	.short	0x008c
 8004774:	00ee00e8 	.word	0x00ee00e8
 8004778:	00fa009b 	.word	0x00fa009b
 800477c:	009b009b 	.word	0x009b009b
 8004780:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004784:	497d      	ldr	r1, [pc, #500]	; (800497c <UART_SetConfig+0x268>)
 8004786:	428b      	cmp	r3, r1
 8004788:	d106      	bne.n	8004798 <UART_SetConfig+0x84>
 800478a:	4b7a      	ldr	r3, [pc, #488]	; (8004974 <UART_SetConfig+0x260>)
 800478c:	497c      	ldr	r1, [pc, #496]	; (8004980 <UART_SetConfig+0x26c>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	e7e3      	b.n	8004760 <UART_SetConfig+0x4c>
 8004798:	497a      	ldr	r1, [pc, #488]	; (8004984 <UART_SetConfig+0x270>)
 800479a:	428b      	cmp	r3, r1
 800479c:	d11d      	bne.n	80047da <UART_SetConfig+0xc6>
 800479e:	4b75      	ldr	r3, [pc, #468]	; (8004974 <UART_SetConfig+0x260>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	f000 80d9 	beq.w	8004960 <UART_SetConfig+0x24c>
 80047ae:	d80e      	bhi.n	80047ce <UART_SetConfig+0xba>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d067      	beq.n	8004884 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80047b8:	d076      	beq.n	80048a8 <UART_SetConfig+0x194>
 80047ba:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d873      	bhi.n	80048a8 <UART_SetConfig+0x194>
 80047c0:	e8df f003 	tbb	[pc, r3]
 80047c4:	72a29f99 	.word	0x72a29f99
 80047c8:	727272b4 	.word	0x727272b4
 80047cc:	b7          	.byte	0xb7
 80047cd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	f000 80ba 	beq.w	8004948 <UART_SetConfig+0x234>
 80047d4:	2b30      	cmp	r3, #48	; 0x30
 80047d6:	d03f      	beq.n	8004858 <UART_SetConfig+0x144>
 80047d8:	e7ec      	b.n	80047b4 <UART_SetConfig+0xa0>
 80047da:	496b      	ldr	r1, [pc, #428]	; (8004988 <UART_SetConfig+0x274>)
 80047dc:	428b      	cmp	r3, r1
 80047de:	d10d      	bne.n	80047fc <UART_SetConfig+0xe8>
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <UART_SetConfig+0x260>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	f000 80b8 	beq.w	8004960 <UART_SetConfig+0x24c>
 80047f0:	d9de      	bls.n	80047b0 <UART_SetConfig+0x9c>
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	f000 80a8 	beq.w	8004948 <UART_SetConfig+0x234>
 80047f8:	2bc0      	cmp	r3, #192	; 0xc0
 80047fa:	e7ec      	b.n	80047d6 <UART_SetConfig+0xc2>
 80047fc:	4963      	ldr	r1, [pc, #396]	; (800498c <UART_SetConfig+0x278>)
 80047fe:	428b      	cmp	r3, r1
 8004800:	d110      	bne.n	8004824 <UART_SetConfig+0x110>
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <UART_SetConfig+0x260>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004810:	f000 80a6 	beq.w	8004960 <UART_SetConfig+0x24c>
 8004814:	d9cc      	bls.n	80047b0 <UART_SetConfig+0x9c>
 8004816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481a:	f000 8095 	beq.w	8004948 <UART_SetConfig+0x234>
 800481e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004822:	e7d8      	b.n	80047d6 <UART_SetConfig+0xc2>
 8004824:	495a      	ldr	r1, [pc, #360]	; (8004990 <UART_SetConfig+0x27c>)
 8004826:	428b      	cmp	r3, r1
 8004828:	d11e      	bne.n	8004868 <UART_SetConfig+0x154>
 800482a:	4b52      	ldr	r3, [pc, #328]	; (8004974 <UART_SetConfig+0x260>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004838:	f000 8092 	beq.w	8004960 <UART_SetConfig+0x24c>
 800483c:	d806      	bhi.n	800484c <UART_SetConfig+0x138>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d07c      	beq.n	800493c <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004842:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004846:	d12f      	bne.n	80048a8 <UART_SetConfig+0x194>
 8004848:	2310      	movs	r3, #16
 800484a:	e78d      	b.n	8004768 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004850:	d07a      	beq.n	8004948 <UART_SetConfig+0x234>
 8004852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004856:	d1f4      	bne.n	8004842 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004858:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800485c:	d169      	bne.n	8004932 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	0858      	lsrs	r0, r3, #1
 8004862:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8004866:	e078      	b.n	800495a <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004868:	494a      	ldr	r1, [pc, #296]	; (8004994 <UART_SetConfig+0x280>)
 800486a:	428b      	cmp	r3, r1
 800486c:	d124      	bne.n	80048b8 <UART_SetConfig+0x1a4>
 800486e:	4b41      	ldr	r3, [pc, #260]	; (8004974 <UART_SetConfig+0x260>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d070      	beq.n	8004960 <UART_SetConfig+0x24c>
 800487e:	d815      	bhi.n	80048ac <UART_SetConfig+0x198>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1de      	bne.n	8004842 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004884:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004888:	d135      	bne.n	80048f6 <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800488a:	f7ff fcf3 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	0853      	lsrs	r3, r2, #1
 8004892:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004896:	fbb0 f0f2 	udiv	r0, r0, r2
 800489a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80048a0:	f1a0 0210 	sub.w	r2, r0, #16
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d91a      	bls.n	80048de <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80048a8:	2001      	movs	r0, #1
 80048aa:	e020      	b.n	80048ee <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b0:	d04a      	beq.n	8004948 <UART_SetConfig+0x234>
 80048b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048b6:	e7ce      	b.n	8004856 <UART_SetConfig+0x142>
 80048b8:	4937      	ldr	r1, [pc, #220]	; (8004998 <UART_SetConfig+0x284>)
 80048ba:	428b      	cmp	r3, r1
 80048bc:	d1f4      	bne.n	80048a8 <UART_SetConfig+0x194>
 80048be:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <UART_SetConfig+0x260>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048cc:	d048      	beq.n	8004960 <UART_SetConfig+0x24c>
 80048ce:	f67f af6f 	bls.w	80047b0 <UART_SetConfig+0x9c>
 80048d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d6:	d037      	beq.n	8004948 <UART_SetConfig+0x234>
 80048d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048dc:	e77b      	b.n	80047d6 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048de:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e2:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	4318      	orrs	r0, r3
 80048ea:	60d0      	str	r0, [r2, #12]
 80048ec:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80048f2:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048f6:	f7ff fcbd 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004900:	e008      	b.n	8004914 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004902:	f7ff fcc7 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8004906:	e7f8      	b.n	80048fa <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004908:	6863      	ldr	r3, [r4, #4]
 800490a:	0858      	lsrs	r0, r3, #1
 800490c:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8004910:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004914:	fbb0 f0f3 	udiv	r0, r0, r3
 8004918:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800491e:	f1a0 0210 	sub.w	r2, r0, #16
 8004922:	429a      	cmp	r2, r3
 8004924:	d8c0      	bhi.n	80048a8 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	60d8      	str	r0, [r3, #12]
 800492a:	e7df      	b.n	80048ec <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800492c:	f7ff fbd0 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8004930:	e7e3      	b.n	80048fa <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	0858      	lsrs	r0, r3, #1
 8004936:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800493a:	e7eb      	b.n	8004914 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004940:	d1df      	bne.n	8004902 <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004942:	f7ff fca7 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8004946:	e7a2      	b.n	800488e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004948:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800494c:	d1dc      	bne.n	8004908 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	0858      	lsrs	r0, r3, #1
 8004952:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8004956:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800495a:	fbb0 f0f3 	udiv	r0, r0, r3
 800495e:	e79c      	b.n	800489a <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004960:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004964:	d1e2      	bne.n	800492c <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004966:	f7ff fbb3 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800496a:	e790      	b.n	800488e <UART_SetConfig+0x17a>
 800496c:	efff69f3 	.word	0xefff69f3
 8004970:	40011000 	.word	0x40011000
 8004974:	40023800 	.word	0x40023800
 8004978:	08008300 	.word	0x08008300
 800497c:	40004400 	.word	0x40004400
 8004980:	08008304 	.word	0x08008304
 8004984:	40004800 	.word	0x40004800
 8004988:	40004c00 	.word	0x40004c00
 800498c:	40005000 	.word	0x40005000
 8004990:	40011400 	.word	0x40011400
 8004994:	40007800 	.word	0x40007800
 8004998:	40007c00 	.word	0x40007c00

0800499c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800499e:	07da      	lsls	r2, r3, #31
{
 80049a0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a2:	d506      	bpl.n	80049b2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a4:	6801      	ldr	r1, [r0, #0]
 80049a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80049a8:	684a      	ldr	r2, [r1, #4]
 80049aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80049ae:	4322      	orrs	r2, r4
 80049b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b2:	079c      	lsls	r4, r3, #30
 80049b4:	d506      	bpl.n	80049c4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049b6:	6801      	ldr	r1, [r0, #0]
 80049b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80049ba:	684a      	ldr	r2, [r1, #4]
 80049bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049c0:	4322      	orrs	r2, r4
 80049c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049c4:	0759      	lsls	r1, r3, #29
 80049c6:	d506      	bpl.n	80049d6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049c8:	6801      	ldr	r1, [r0, #0]
 80049ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80049cc:	684a      	ldr	r2, [r1, #4]
 80049ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049d2:	4322      	orrs	r2, r4
 80049d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d6:	071a      	lsls	r2, r3, #28
 80049d8:	d506      	bpl.n	80049e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049da:	6801      	ldr	r1, [r0, #0]
 80049dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80049de:	684a      	ldr	r2, [r1, #4]
 80049e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049e4:	4322      	orrs	r2, r4
 80049e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e8:	06dc      	lsls	r4, r3, #27
 80049ea:	d506      	bpl.n	80049fa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ec:	6801      	ldr	r1, [r0, #0]
 80049ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80049f0:	688a      	ldr	r2, [r1, #8]
 80049f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f6:	4322      	orrs	r2, r4
 80049f8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fa:	0699      	lsls	r1, r3, #26
 80049fc:	d506      	bpl.n	8004a0c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fe:	6801      	ldr	r1, [r0, #0]
 8004a00:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004a02:	688a      	ldr	r2, [r1, #8]
 8004a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a08:	4322      	orrs	r2, r4
 8004a0a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a0c:	065a      	lsls	r2, r3, #25
 8004a0e:	d510      	bpl.n	8004a32 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a10:	6801      	ldr	r1, [r0, #0]
 8004a12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004a14:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a16:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004a1e:	ea42 0204 	orr.w	r2, r2, r4
 8004a22:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a24:	d105      	bne.n	8004a32 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a26:	684a      	ldr	r2, [r1, #4]
 8004a28:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004a2a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004a2e:	4322      	orrs	r2, r4
 8004a30:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	d506      	bpl.n	8004a44 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a36:	6802      	ldr	r2, [r0, #0]
 8004a38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004a3a:	6853      	ldr	r3, [r2, #4]
 8004a3c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6053      	str	r3, [r2, #4]
 8004a44:	bd10      	pop	{r4, pc}

08004a46 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4a:	9d06      	ldr	r5, [sp, #24]
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	460f      	mov	r7, r1
 8004a50:	4616      	mov	r6, r2
 8004a52:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a54:	6821      	ldr	r1, [r4, #0]
 8004a56:	69ca      	ldr	r2, [r1, #28]
 8004a58:	ea37 0302 	bics.w	r3, r7, r2
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2201      	moveq	r2, #1
 8004a60:	2200      	movne	r2, #0
 8004a62:	42b2      	cmp	r2, r6
 8004a64:	d002      	beq.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004a66:	2000      	movs	r0, #0
}
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	1c6b      	adds	r3, r5, #1
 8004a6e:	d0f2      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a70:	f7fe ff98 	bl	80039a4 <HAL_GetTick>
 8004a74:	eba0 0008 	sub.w	r0, r0, r8
 8004a78:	4285      	cmp	r5, r0
 8004a7a:	d301      	bcc.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x3a>
 8004a7c:	2d00      	cmp	r5, #0
 8004a7e:	d1e9      	bne.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a80:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004a82:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004a94:	2320      	movs	r3, #32
 8004a96:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a98:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8004aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004aa4 <HAL_UART_Transmit>:
{
 8004aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004aaa:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8004aac:	4604      	mov	r4, r0
 8004aae:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab0:	2b20      	cmp	r3, #32
{
 8004ab2:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab4:	d14b      	bne.n	8004b4e <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	d047      	beq.n	8004b4a <HAL_UART_Transmit+0xa6>
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	d045      	beq.n	8004b4a <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8004abe:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d043      	beq.n	8004b4e <HAL_UART_Transmit+0xaa>
 8004ac6:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004aca:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ace:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad2:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8004ad4:	f7fe ff66 	bl	80039a4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004ada:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004adc:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8004ae4:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	d103      	bne.n	8004af2 <HAL_UART_Transmit+0x4e>
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	b90b      	cbnz	r3, 8004af2 <HAL_UART_Transmit+0x4e>
 8004aee:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004af0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8004af2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004af6:	463b      	mov	r3, r7
 8004af8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004afc:	b292      	uxth	r2, r2
 8004afe:	b94a      	cbnz	r2, 8004b14 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff ff9f 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004b08:	b950      	cbnz	r0, 8004b20 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8004b0a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004b0c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8004b10:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8004b12:	e006      	b.n	8004b22 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7ff ff94 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	b118      	cbz	r0, 8004b28 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004b20:	2003      	movs	r0, #3
}
 8004b22:	b003      	add	sp, #12
 8004b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b28:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004b2a:	b95e      	cbnz	r6, 8004b44 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b34:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004b36:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8004b42:	e7d6      	b.n	8004af2 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b44:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004b48:	e7f4      	b.n	8004b34 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	e7e9      	b.n	8004b22 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8004b4e:	2002      	movs	r0, #2
 8004b50:	e7e7      	b.n	8004b22 <HAL_UART_Transmit+0x7e>

08004b52 <HAL_UART_Receive>:
{
 8004b52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b56:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b58:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b5e:	2b20      	cmp	r3, #32
{
 8004b60:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b62:	d163      	bne.n	8004c2c <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d05f      	beq.n	8004c28 <HAL_UART_Receive+0xd6>
 8004b68:	2a00      	cmp	r2, #0
 8004b6a:	d05d      	beq.n	8004c28 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 8004b6c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d05b      	beq.n	8004c2c <HAL_UART_Receive+0xda>
 8004b74:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b76:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8004b78:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b7c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7e:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b80:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004b82:	f7fe ff0f 	bl	80039a4 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8004b86:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004b88:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 8004b8a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8004b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8004b92:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004b96:	d11b      	bne.n	8004bd0 <HAL_UART_Receive+0x7e>
 8004b98:	6922      	ldr	r2, [r4, #16]
 8004b9a:	b9ba      	cbnz	r2, 8004bcc <HAL_UART_Receive+0x7a>
 8004b9c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ba0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8004ba8:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bac:	d121      	bne.n	8004bf2 <HAL_UART_Receive+0xa0>
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	b9fb      	cbnz	r3, 8004bf2 <HAL_UART_Receive+0xa0>
 8004bb2:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8004bb4:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 8004bb6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8004bba:	b280      	uxth	r0, r0
 8004bbc:	b9d8      	cbnz	r0, 8004bf6 <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004bc0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004bc6:	b003      	add	sp, #12
 8004bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	e7e7      	b.n	8004ba0 <HAL_UART_Receive+0x4e>
 8004bd0:	b923      	cbnz	r3, 8004bdc <HAL_UART_Receive+0x8a>
 8004bd2:	6922      	ldr	r2, [r4, #16]
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	d0f9      	beq.n	8004bcc <HAL_UART_Receive+0x7a>
 8004bd8:	227f      	movs	r2, #127	; 0x7f
 8004bda:	e7e1      	b.n	8004ba0 <HAL_UART_Receive+0x4e>
 8004bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Receive+0x9a>
 8004be2:	6922      	ldr	r2, [r4, #16]
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	d0f7      	beq.n	8004bd8 <HAL_UART_Receive+0x86>
 8004be8:	223f      	movs	r2, #63	; 0x3f
 8004bea:	e7d9      	b.n	8004ba0 <HAL_UART_Receive+0x4e>
 8004bec:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8004bf0:	e7d8      	b.n	8004ba4 <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	e7df      	b.n	8004bb6 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	f8cd 9000 	str.w	r9, [sp]
 8004bfa:	4643      	mov	r3, r8
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2120      	movs	r1, #32
 8004c00:	4620      	mov	r0, r4
 8004c02:	f7ff ff20 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004c06:	b998      	cbnz	r0, 8004c30 <HAL_UART_Receive+0xde>
 8004c08:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8004c0e:	b945      	cbnz	r5, 8004c22 <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c10:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8004c14:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8004c20:	e7c9      	b.n	8004bb6 <HAL_UART_Receive+0x64>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c22:	f805 3b01 	strb.w	r3, [r5], #1
 8004c26:	e7f5      	b.n	8004c14 <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 8004c28:	2001      	movs	r0, #1
 8004c2a:	e7cc      	b.n	8004bc6 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8004c2c:	2002      	movs	r0, #2
 8004c2e:	e7ca      	b.n	8004bc6 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8004c30:	2003      	movs	r0, #3
 8004c32:	e7c8      	b.n	8004bc6 <HAL_UART_Receive+0x74>

08004c34 <UART_CheckIdleState>:
{
 8004c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c36:	2500      	movs	r5, #0
{
 8004c38:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3a:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004c3c:	f7fe feb2 	bl	80039a4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c40:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004c42:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	0712      	lsls	r2, r2, #28
 8004c48:	d407      	bmi.n	8004c5a <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004c4c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c4e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8004c50:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004c54:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004c56:	b003      	add	sp, #12
 8004c58:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004c5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c62:	4620      	mov	r0, r4
 8004c64:	9200      	str	r2, [sp, #0]
 8004c66:	462a      	mov	r2, r5
 8004c68:	f7ff feed 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d0ec      	beq.n	8004c4a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004c70:	2003      	movs	r0, #3
 8004c72:	e7f0      	b.n	8004c56 <UART_CheckIdleState+0x22>

08004c74 <HAL_UART_Init>:
{
 8004c74:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004c76:	4604      	mov	r4, r0
 8004c78:	b340      	cbz	r0, 8004ccc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004c7c:	b91b      	cbnz	r3, 8004c86 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004c82:	f001 f97d 	bl	8005f80 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004c86:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c8a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c96:	f7ff fd3d 	bl	8004714 <UART_SetConfig>
 8004c9a:	2801      	cmp	r0, #1
 8004c9c:	d016      	beq.n	8004ccc <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ca0:	b113      	cbz	r3, 8004ca8 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff fe7a 	bl	800499c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca8:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004caa:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cba:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
}
 8004cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004cc6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004cc8:	f7ff bfb4 	b.w	8004c34 <UART_CheckIdleState>
}
 8004ccc:	2001      	movs	r0, #1
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <ai_cnn_data_weights_get>:
    0x64, 0xbc, 0x2b, 0x16, 0xd2, 0xbc, 0x5e, 0xec, 0x04,
    0x3d, 0xcb, 0xd7, 0x92, 0xbc, 0x31, 0x7d, 0x77, 0x3b
  };

  return AI_HANDLE_PTR(s_cnn_weights);
}
 8004cd0:	4800      	ldr	r0, [pc, #0]	; (8004cd4 <ai_cnn_data_weights_get+0x4>)
 8004cd2:	4770      	bx	lr
 8004cd4:	08008314 	.word	0x08008314

08004cd8 <ai_cnn_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_cnn_get_info(
  ai_handle network, ai_network_report* report)
{
 8004cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cdc:	460f      	mov	r7, r1
 8004cde:	b0a0      	sub	sp, #128	; 0x80
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004ce0:	f7fb fc55 	bl	800058e <ai_platform_context_acquire>
 8004ce4:	4604      	mov	r4, r0

  if ( report && net_ctx )
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	d06d      	beq.n	8004dc6 <ai_cnn_get_info+0xee>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d06d      	beq.n	8004dca <ai_cnn_get_info+0xf2>
      .model_signature   = AI_CNN_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004cee:	f7fb fb14 	bl	800031a <ai_platform_runtime_get_revision>
 8004cf2:	4680      	mov	r8, r0
    ai_network_report r = {
 8004cf4:	f7fb fb5e 	bl	80003b4 <ai_platform_runtime_get_version>
 8004cf8:	9006      	str	r0, [sp, #24]
 8004cfa:	f7fb fbaa 	bl	8000452 <ai_platform_api_get_version>
 8004cfe:	900a      	str	r0, [sp, #40]	; 0x28
 8004d00:	f7fb fbf6 	bl	80004f0 <ai_platform_interface_api_get_version>
 8004d04:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004d08:	ae16      	add	r6, sp, #88	; 0x58
 8004d0a:	900b      	str	r0, [sp, #44]	; 0x2c
      .weights           = net_ctx->params,
      .n_nodes           = 0,
      .signature         = net_ctx->signature,
    };

    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8004d0c:	2500      	movs	r5, #0
    ai_network_report r = {
 8004d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d10:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004d14:	f104 0314 	add.w	r3, r4, #20
 8004d18:	ae1a      	add	r6, sp, #104	; 0x68
 8004d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d1c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      .signature         = net_ctx->signature,
 8004d20:	6861      	ldr	r1, [r4, #4]
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8004d22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d24:	2a00      	cmp	r2, #0
 8004d26:	d147      	bne.n	8004db8 <ai_cnn_get_info+0xe0>
    {
      r.n_nodes++;
    }

    *report = r;
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <ai_cnn_get_info+0xf4>)
 8004d2a:	4829      	ldr	r0, [pc, #164]	; (8004dd0 <ai_cnn_get_info+0xf8>)
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <ai_cnn_get_info+0xfc>)
 8004d30:	900c      	str	r0, [sp, #48]	; 0x30
 8004d32:	2031      	movs	r0, #49	; 0x31
 8004d34:	9302      	str	r3, [sp, #8]
 8004d36:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <ai_cnn_get_info+0x100>)
 8004d38:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004d3c:	200a      	movs	r0, #10
 8004d3e:	9303      	str	r3, [sp, #12]
 8004d40:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <ai_cnn_get_info+0x104>)
 8004d42:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <ai_cnn_get_info+0x108>)
 8004d4a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	2303      	movs	r3, #3
 8004d52:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8004d56:	f88d 3020 	strb.w	r3, [sp, #32]
 8004d5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 8004d64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8004d68:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8004d6c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8004d70:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8004d74:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8004d78:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8004d7c:	9310      	str	r3, [sp, #64]	; 0x40
 8004d7e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8004d82:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8004d86:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8004d8a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8004d8e:	230c      	movs	r3, #12
 8004d90:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8004d94:	4638      	mov	r0, r7
 8004d96:	9211      	str	r2, [sp, #68]	; 0x44
 8004d98:	9215      	str	r2, [sp, #84]	; 0x54
 8004d9a:	227c      	movs	r2, #124	; 0x7c
 8004d9c:	911f      	str	r1, [sp, #124]	; 0x7c
 8004d9e:	a901      	add	r1, sp, #4
 8004da0:	f8cd 8014 	str.w	r8, [sp, #20]
 8004da4:	9314      	str	r3, [sp, #80]	; 0x50
 8004da6:	951e      	str	r5, [sp, #120]	; 0x78
 8004da8:	f001 fb75 	bl	8006496 <memcpy>

    return ( r.n_nodes>0 ) ? true : false;
 8004dac:	1c28      	adds	r0, r5, #0
 8004dae:	bf18      	it	ne
 8004db0:	2001      	movne	r0, #1
  }
  
  return false;
}
 8004db2:	b020      	add	sp, #128	; 0x80
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8004db8:	6893      	ldr	r3, [r2, #8]
 8004dba:	3501      	adds	r5, #1
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf14      	ite	ne
 8004dc0:	461a      	movne	r2, r3
 8004dc2:	2200      	moveq	r2, #0
 8004dc4:	e7ae      	b.n	8004d24 <ai_cnn_get_info+0x4c>
  return false;
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	e7f3      	b.n	8004db2 <ai_cnn_get_info+0xda>
 8004dca:	e7f2      	b.n	8004db2 <ai_cnn_get_info+0xda>
 8004dcc:	0804bebc 	.word	0x0804bebc
 8004dd0:	002692ce 	.word	0x002692ce
 8004dd4:	0804bec0 	.word	0x0804bec0
 8004dd8:	0804bee1 	.word	0x0804bee1
 8004ddc:	0804befa 	.word	0x0804befa
 8004de0:	0804bf0f 	.word	0x0804bf0f

08004de4 <ai_cnn_get_error>:

AI_API_ENTRY
ai_error ai_cnn_get_error(ai_handle network)
{
 8004de4:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8004de6:	f7fb fc30 	bl	800064a <ai_platform_network_get_error>
}
 8004dea:	bd08      	pop	{r3, pc}

08004dec <ai_cnn_create>:

AI_API_ENTRY
ai_error ai_cnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
  return ai_platform_network_create(
 8004dec:	2300      	movs	r3, #0
{
 8004dee:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2301      	movs	r3, #1
 8004df4:	4a03      	ldr	r2, [pc, #12]	; (8004e04 <ai_cnn_create+0x18>)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f7fb fc8a 	bl	8000710 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004dfc:	b003      	add	sp, #12
 8004dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e02:	bf00      	nop
 8004e04:	20000764 	.word	0x20000764

08004e08 <ai_cnn_destroy>:

AI_API_ENTRY
ai_handle ai_cnn_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004e08:	f7fb bcb8 	b.w	800077c <ai_platform_network_destroy>

08004e0c <ai_cnn_init>:
}

AI_API_ENTRY
ai_bool ai_cnn_init(
  ai_handle network, const ai_network_params* params)
{
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004e10:	f7fb fd0b 	bl	800082a <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8004e14:	2800      	cmp	r0, #0
 8004e16:	f000 80b8 	beq.w	8004f8a <ai_cnn_init+0x17e>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e1a:	4a5c      	ldr	r2, [pc, #368]	; (8004f8c <ai_cnn_init+0x180>)
 8004e1c:	68e3      	ldr	r3, [r4, #12]
 8004e1e:	6811      	ldr	r1, [r2, #0]
  conv2d_1_weights_array.data = weights + 0;
 8004e20:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e22:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  conv2d_1_weights_array.data_start = weights + 0;
 8004e26:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e28:	6011      	str	r1, [r2, #0]
  conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e2a:	4a59      	ldr	r2, [pc, #356]	; (8004f90 <ai_cnn_init+0x184>)
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004e32:	6011      	str	r1, [r2, #0]
  conv2d_1_bias_array.data = weights + 4480;
 8004e34:	f503 518c 	add.w	r1, r3, #4480	; 0x1180
 8004e38:	6091      	str	r1, [r2, #8]
  conv2d_1_bias_array.data_start = weights + 4480;
 8004e3a:	60d1      	str	r1, [r2, #12]
  batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 8004e3c:	4a55      	ldr	r2, [pc, #340]	; (8004f94 <ai_cnn_init+0x188>)
 8004e3e:	6811      	ldr	r1, [r2, #0]
 8004e40:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004e44:	6011      	str	r1, [r2, #0]
  batch_normalization_1_scale_array.data = weights + 4592;
 8004e46:	f503 518f 	add.w	r1, r3, #4576	; 0x11e0
 8004e4a:	3110      	adds	r1, #16
 8004e4c:	6091      	str	r1, [r2, #8]
  batch_normalization_1_scale_array.data_start = weights + 4592;
 8004e4e:	60d1      	str	r1, [r2, #12]
  batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e50:	4a51      	ldr	r2, [pc, #324]	; (8004f98 <ai_cnn_init+0x18c>)
 8004e52:	6811      	ldr	r1, [r2, #0]
 8004e54:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004e58:	6011      	str	r1, [r2, #0]
  batch_normalization_1_bias_array.data = weights + 4704;
 8004e5a:	f503 5193 	add.w	r1, r3, #4704	; 0x1260
 8004e5e:	6091      	str	r1, [r2, #8]
  batch_normalization_1_bias_array.data_start = weights + 4704;
 8004e60:	60d1      	str	r1, [r2, #12]
  conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e62:	4a4e      	ldr	r2, [pc, #312]	; (8004f9c <ai_cnn_init+0x190>)
 8004e64:	6811      	ldr	r1, [r2, #0]
 8004e66:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004e6a:	6011      	str	r1, [r2, #0]
  conv2d_2_weights_array.data = weights + 4816;
 8004e6c:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
 8004e70:	3110      	adds	r1, #16
 8004e72:	6091      	str	r1, [r2, #8]
  conv2d_2_weights_array.data_start = weights + 4816;
 8004e74:	60d1      	str	r1, [r2, #12]
  conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e76:	4a4a      	ldr	r2, [pc, #296]	; (8004fa0 <ai_cnn_init+0x194>)
 8004e78:	6811      	ldr	r1, [r2, #0]
 8004e7a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004e7e:	6011      	str	r1, [r2, #0]
  conv2d_2_bias_array.data = weights + 139216;
 8004e80:	f503 3107 	add.w	r1, r3, #138240	; 0x21c00
 8004e84:	f501 7174 	add.w	r1, r1, #976	; 0x3d0
 8004e88:	6091      	str	r1, [r2, #8]
  conv2d_2_bias_array.data_start = weights + 139216;
 8004e8a:	60d1      	str	r1, [r2, #12]
  batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 8004e8c:	4945      	ldr	r1, [pc, #276]	; (8004fa4 <ai_cnn_init+0x198>)
 8004e8e:	680a      	ldr	r2, [r1, #0]
 8004e90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e94:	600a      	str	r2, [r1, #0]
  batch_normalization_2_scale_array.data = weights + 139336;
 8004e96:	f503 3208 	add.w	r2, r3, #139264	; 0x22000
 8004e9a:	f102 0548 	add.w	r5, r2, #72	; 0x48
 8004e9e:	608d      	str	r5, [r1, #8]
  batch_normalization_2_scale_array.data_start = weights + 139336;
 8004ea0:	60cd      	str	r5, [r1, #12]
  batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ea2:	4941      	ldr	r1, [pc, #260]	; (8004fa8 <ai_cnn_init+0x19c>)
 8004ea4:	680d      	ldr	r5, [r1, #0]
 8004ea6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004eaa:	600d      	str	r5, [r1, #0]
  batch_normalization_2_bias_array.data = weights + 139456;
 8004eac:	f102 05c0 	add.w	r5, r2, #192	; 0xc0
  dense_1_weights_array.data = weights + 139576;
 8004eb0:	f502 729c 	add.w	r2, r2, #312	; 0x138
  batch_normalization_2_bias_array.data = weights + 139456;
 8004eb4:	608d      	str	r5, [r1, #8]
  batch_normalization_2_bias_array.data_start = weights + 139456;
 8004eb6:	60cd      	str	r5, [r1, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eb8:	493c      	ldr	r1, [pc, #240]	; (8004fac <ai_cnn_init+0x1a0>)
 8004eba:	680d      	ldr	r5, [r1, #0]
  dense_1_weights_array.data = weights + 139576;
 8004ebc:	608a      	str	r2, [r1, #8]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ebe:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  dense_1_weights_array.data_start = weights + 139576;
 8004ec2:	60ca      	str	r2, [r1, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ec4:	600d      	str	r5, [r1, #0]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ec6:	493a      	ldr	r1, [pc, #232]	; (8004fb0 <ai_cnn_init+0x1a4>)
 8004ec8:	680a      	ldr	r2, [r1, #0]
 8004eca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ece:	600a      	str	r2, [r1, #0]
  dense_1_bias_array.data = weights + 262456;
 8004ed0:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 8004ed4:	f502 759c 	add.w	r5, r2, #312	; 0x138
  dense_2_weights_array.data = weights + 262520;
 8004ed8:	f502 72bc 	add.w	r2, r2, #376	; 0x178
  dense_1_bias_array.data = weights + 262456;
 8004edc:	608d      	str	r5, [r1, #8]
  dense_1_bias_array.data_start = weights + 262456;
 8004ede:	60cd      	str	r5, [r1, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ee0:	4934      	ldr	r1, [pc, #208]	; (8004fb4 <ai_cnn_init+0x1a8>)
 8004ee2:	680d      	ldr	r5, [r1, #0]
  dense_2_weights_array.data = weights + 262520;
 8004ee4:	608a      	str	r2, [r1, #8]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ee6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  dense_2_weights_array.data_start = weights + 262520;
 8004eea:	60ca      	str	r2, [r1, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eec:	600d      	str	r5, [r1, #0]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004eee:	4932      	ldr	r1, [pc, #200]	; (8004fb8 <ai_cnn_init+0x1ac>)
 8004ef0:	680a      	ldr	r2, [r1, #0]
 8004ef2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ef6:	600a      	str	r2, [r1, #0]
  dense_2_bias_array.data = weights + 270712;
 8004ef8:	f503 2284 	add.w	r2, r3, #270336	; 0x42000
  dense_3_bias_array.data = weights + 277368;
 8004efc:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
  dense_2_bias_array.data = weights + 270712;
 8004f00:	f502 75bc 	add.w	r5, r2, #376	; 0x178
  dense_3_weights_array.data = weights + 271224;
 8004f04:	f502 725e 	add.w	r2, r2, #888	; 0x378
  dense_3_bias_array.data = weights + 277368;
 8004f08:	f503 735e 	add.w	r3, r3, #888	; 0x378
  dense_2_bias_array.data = weights + 270712;
 8004f0c:	608d      	str	r5, [r1, #8]
  dense_2_bias_array.data_start = weights + 270712;
 8004f0e:	60cd      	str	r5, [r1, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f10:	492a      	ldr	r1, [pc, #168]	; (8004fbc <ai_cnn_init+0x1b0>)
 8004f12:	680d      	ldr	r5, [r1, #0]
  dense_3_weights_array.data = weights + 271224;
 8004f14:	608a      	str	r2, [r1, #8]
  dense_3_weights_array.data_start = weights + 271224;
 8004f16:	60ca      	str	r2, [r1, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f18:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f1c:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <ai_cnn_init+0x1b4>)
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f1e:	600d      	str	r5, [r1, #0]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f20:	6811      	ldr	r1, [r2, #0]
  dense_3_bias_array.data = weights + 277368;
 8004f22:	6093      	str	r3, [r2, #8]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  dense_3_bias_array.data_start = weights + 277368;
 8004f28:	60d3      	str	r3, [r2, #12]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004f2a:	69e3      	ldr	r3, [r4, #28]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f2c:	6011      	str	r1, [r2, #0]
    input_0_output_array.data = NULL;
 8004f2e:	2100      	movs	r1, #0
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8004f30:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004f32:	3303      	adds	r3, #3
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8004f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004f38:	f023 0303 	bic.w	r3, r3, #3
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8004f3c:	6082      	str	r2, [r0, #8]

  ai_bool ok = true;
  ok &= cnn_configure_weights(net_ctx, &params->params);
  ok &= cnn_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8004f3e:	2001      	movs	r0, #1
    input_0_output_array.data = NULL;
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <ai_cnn_init+0x1b8>)
 8004f42:	6091      	str	r1, [r2, #8]
  input_0_output_array.data_start = NULL;
 8004f44:	60d1      	str	r1, [r2, #12]
  conv2d_1_output_array.data = activations + 0;
 8004f46:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <ai_cnn_init+0x1bc>)
  conv2d_2_output_array.data = activations + 31360;
 8004f48:	4920      	ldr	r1, [pc, #128]	; (8004fcc <ai_cnn_init+0x1c0>)
  conv2d_1_output_array.data = activations + 0;
 8004f4a:	6093      	str	r3, [r2, #8]
  conv2d_1_output_array.data_start = activations + 0;
 8004f4c:	60d3      	str	r3, [r2, #12]
  batch_normalization_1_output_array.data = activations + 0;
 8004f4e:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <ai_cnn_init+0x1c4>)
 8004f50:	6093      	str	r3, [r2, #8]
  batch_normalization_1_output_array.data_start = activations + 0;
 8004f52:	60d3      	str	r3, [r2, #12]
  conv2d_2_output_array.data = activations + 31360;
 8004f54:	f503 42f5 	add.w	r2, r3, #31360	; 0x7a80
 8004f58:	608a      	str	r2, [r1, #8]
  conv2d_2_output_array.data_start = activations + 31360;
 8004f5a:	60ca      	str	r2, [r1, #12]
  batch_normalization_2_output_in_array.data = activations + 31360;
 8004f5c:	491d      	ldr	r1, [pc, #116]	; (8004fd4 <ai_cnn_init+0x1c8>)
 8004f5e:	608a      	str	r2, [r1, #8]
  batch_normalization_2_output_in_array.data_start = activations + 31360;
 8004f60:	60ca      	str	r2, [r1, #12]
  batch_normalization_2_output_out_array.data = activations + 31360;
 8004f62:	491d      	ldr	r1, [pc, #116]	; (8004fd8 <ai_cnn_init+0x1cc>)
 8004f64:	608a      	str	r2, [r1, #8]
  batch_normalization_2_output_out_array.data_start = activations + 31360;
 8004f66:	60ca      	str	r2, [r1, #12]
  dense_1_output_array.data = activations + 0;
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <ai_cnn_init+0x1d0>)
  dense_2_output_array.data = activations + 64;
 8004f6a:	491d      	ldr	r1, [pc, #116]	; (8004fe0 <ai_cnn_init+0x1d4>)
  dense_1_output_array.data = activations + 0;
 8004f6c:	6093      	str	r3, [r2, #8]
  dense_1_output_array.data_start = activations + 0;
 8004f6e:	60d3      	str	r3, [r2, #12]
  dense_2_output_array.data = activations + 64;
 8004f70:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004f74:	608a      	str	r2, [r1, #8]
  dense_2_output_array.data_start = activations + 64;
 8004f76:	60ca      	str	r2, [r1, #12]
  dense_2_nl_output_array.data = activations + 64;
 8004f78:	491a      	ldr	r1, [pc, #104]	; (8004fe4 <ai_cnn_init+0x1d8>)
 8004f7a:	608a      	str	r2, [r1, #8]
  dense_2_nl_output_array.data_start = activations + 64;
 8004f7c:	60ca      	str	r2, [r1, #12]
  dense_3_output_array.data = activations + 0;
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <ai_cnn_init+0x1dc>)
 8004f80:	6093      	str	r3, [r2, #8]
  dense_3_output_array.data_start = activations + 0;
 8004f82:	60d3      	str	r3, [r2, #12]
  dense_3_nl_output_array.data = activations + 0;
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <ai_cnn_init+0x1e0>)
 8004f86:	6093      	str	r3, [r2, #8]
  dense_3_nl_output_array.data_start = activations + 0;
 8004f88:	60d3      	str	r3, [r2, #12]
}
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	200003d4 	.word	0x200003d4
 8004f90:	2000033c 	.word	0x2000033c
 8004f94:	20000220 	.word	0x20000220
 8004f98:	200001a0 	.word	0x200001a0
 8004f9c:	200004a0 	.word	0x200004a0
 8004fa0:	20000408 	.word	0x20000408
 8004fa4:	20000308 	.word	0x20000308
 8004fa8:	20000254 	.word	0x20000254
 8004fac:	20000554 	.word	0x20000554
 8004fb0:	200004d4 	.word	0x200004d4
 8004fb4:	20000654 	.word	0x20000654
 8004fb8:	20000588 	.word	0x20000588
 8004fbc:	20000754 	.word	0x20000754
 8004fc0:	20000688 	.word	0x20000688
 8004fc4:	200007d0 	.word	0x200007d0
 8004fc8:	200003a0 	.word	0x200003a0
 8004fcc:	2000046c 	.word	0x2000046c
 8004fd0:	200001ec 	.word	0x200001ec
 8004fd4:	200002a0 	.word	0x200002a0
 8004fd8:	200002d4 	.word	0x200002d4
 8004fdc:	20000520 	.word	0x20000520
 8004fe0:	20000620 	.word	0x20000620
 8004fe4:	200005ec 	.word	0x200005ec
 8004fe8:	20000720 	.word	0x20000720
 8004fec:	200006ec 	.word	0x200006ec

08004ff0 <ai_cnn_run>:

AI_API_ENTRY
ai_i32 ai_cnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004ff0:	f7fb bc93 	b.w	800091a <ai_platform_network_process>

08004ff4 <ai_cnn_forward>:
}

AI_API_ENTRY
ai_i32 ai_cnn_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f7fb bc90 	b.w	800091a <ai_platform_network_process>
	...

08004ffc <aiTestConsole>:
#define CONS_EVT_PROF       (5)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8004ffc:	b513      	push	{r0, r1, r4, lr}
    uint8_t c = 0;
 8004ffe:	2400      	movs	r4, #0
 8005000:	a902      	add	r1, sp, #8
    status = HAL_UART_Receive(&UartHandle, (uint8_t *)buff, count,
 8005002:	f241 3388 	movw	r3, #5000	; 0x1388
 8005006:	2201      	movs	r2, #1
    uint8_t c = 0;
 8005008:	f801 4d01 	strb.w	r4, [r1, #-1]!
    status = HAL_UART_Receive(&UartHandle, (uint8_t *)buff, count,
 800500c:	4811      	ldr	r0, [pc, #68]	; (8005054 <aiTestConsole+0x58>)
 800500e:	f7ff fda0 	bl	8004b52 <HAL_UART_Receive>
    if (status == HAL_TIMEOUT)
 8005012:	2803      	cmp	r0, #3
 8005014:	d115      	bne.n	8005042 <aiTestConsole+0x46>

    if (ioGetUint8(&c, 1, 5000) == -1) /* Timeout */
        return CONS_EVT_TIMEOUT;
 8005016:	4620      	mov	r0, r4
 8005018:	e00b      	b.n	8005032 <aiTestConsole+0x36>

    if ((c == 'q') || (c == 'Q'))
        return CONS_EVT_QUIT;

    if ((c == 'r') || (c == 'R'))
 800501a:	2b52      	cmp	r3, #82	; 0x52
 800501c:	d00b      	beq.n	8005036 <aiTestConsole+0x3a>
        return CONS_EVT_RESTART;

    if ((c == 'h') || (c == 'H') || (c == '?'))
 800501e:	2b48      	cmp	r3, #72	; 0x48
 8005020:	d00b      	beq.n	800503a <aiTestConsole+0x3e>
 8005022:	2a3f      	cmp	r2, #63	; 0x3f
 8005024:	d009      	beq.n	800503a <aiTestConsole+0x3e>
        return CONS_EVT_HELP;

    if ((c == 'p') || (c == 'P'))
 8005026:	2b50      	cmp	r3, #80	; 0x50
 8005028:	d009      	beq.n	800503e <aiTestConsole+0x42>
        return CONS_EVT_PAUSE;

    if ((c == 'x') || (c == 'X'))
 800502a:	2b58      	cmp	r3, #88	; 0x58
        return CONS_EVT_PROF;
 800502c:	bf14      	ite	ne
 800502e:	2064      	movne	r0, #100	; 0x64
 8005030:	2005      	moveq	r0, #5

    return CONS_EVT_UNDEFINED;
}
 8005032:	b002      	add	sp, #8
 8005034:	bd10      	pop	{r4, pc}
        return CONS_EVT_RESTART;
 8005036:	2002      	movs	r0, #2
 8005038:	e7fb      	b.n	8005032 <aiTestConsole+0x36>
        return CONS_EVT_HELP;
 800503a:	2003      	movs	r0, #3
 800503c:	e7f9      	b.n	8005032 <aiTestConsole+0x36>
        return CONS_EVT_PAUSE;
 800503e:	2004      	movs	r0, #4
 8005040:	e7f7      	b.n	8005032 <aiTestConsole+0x36>
    if ((c == 'q') || (c == 'Q'))
 8005042:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005046:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800504a:	2b51      	cmp	r3, #81	; 0x51
 800504c:	d1e5      	bne.n	800501a <aiTestConsole+0x1e>
        return CONS_EVT_QUIT;
 800504e:	2001      	movs	r0, #1
 8005050:	e7ef      	b.n	8005032 <aiTestConsole+0x36>
 8005052:	bf00      	nop
 8005054:	2000a9e8 	.word	0x2000a9e8

08005058 <aiPrintLayoutBuffer>:
    printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 8005058:	888a      	ldrh	r2, [r1, #4]
 800505a:	88cb      	ldrh	r3, [r1, #6]
{
 800505c:	b5f0      	push	{r4, r5, r6, r7, lr}
    printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 800505e:	688e      	ldr	r6, [r1, #8]
    return buffer->height * buffer->width * buffer->channels;
 8005060:	fb03 f502 	mul.w	r5, r3, r2
    printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 8005064:	880c      	ldrh	r4, [r1, #0]
{
 8005066:	b085      	sub	sp, #20
    return buffer->height * buffer->width * buffer->channels;
 8005068:	4375      	muls	r5, r6
    if (val == AI_BUFFER_FORMAT_NONE)
 800506a:	b19c      	cbz	r4, 8005094 <aiPrintLayoutBuffer+0x3c>
    else if (val == AI_BUFFER_FORMAT_FLOAT)
 800506c:	2c01      	cmp	r4, #1
 800506e:	d013      	beq.n	8005098 <aiPrintLayoutBuffer+0x40>
    else if (val == AI_BUFFER_FORMAT_U8)
 8005070:	2c10      	cmp	r4, #16
 8005072:	d013      	beq.n	800509c <aiPrintLayoutBuffer+0x44>
    else if (val == AI_BUFFER_FORMAT_Q15)
 8005074:	2c32      	cmp	r4, #50	; 0x32
 8005076:	d013      	beq.n	80050a0 <aiPrintLayoutBuffer+0x48>
        return "UNKNOWN";
 8005078:	4f0a      	ldr	r7, [pc, #40]	; (80050a4 <aiPrintLayoutBuffer+0x4c>)
 800507a:	490b      	ldr	r1, [pc, #44]	; (80050a8 <aiPrintLayoutBuffer+0x50>)
 800507c:	2c31      	cmp	r4, #49	; 0x31
 800507e:	bf18      	it	ne
 8005080:	4639      	movne	r1, r7
    printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 8005082:	9102      	str	r1, [sp, #8]
 8005084:	4601      	mov	r1, r0
 8005086:	9501      	str	r5, [sp, #4]
 8005088:	9600      	str	r6, [sp, #0]
 800508a:	4808      	ldr	r0, [pc, #32]	; (80050ac <aiPrintLayoutBuffer+0x54>)
 800508c:	f001 fac2 	bl	8006614 <iprintf>
}
 8005090:	b005      	add	sp, #20
 8005092:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return "AI_BUFFER_FORMAT_NONE";
 8005094:	4906      	ldr	r1, [pc, #24]	; (80050b0 <aiPrintLayoutBuffer+0x58>)
 8005096:	e7f4      	b.n	8005082 <aiPrintLayoutBuffer+0x2a>
        return "AI_BUFFER_FORMAT_FLOAT";
 8005098:	4906      	ldr	r1, [pc, #24]	; (80050b4 <aiPrintLayoutBuffer+0x5c>)
 800509a:	e7f2      	b.n	8005082 <aiPrintLayoutBuffer+0x2a>
        return "AI_BUFFER_FORMAT_U8";
 800509c:	4906      	ldr	r1, [pc, #24]	; (80050b8 <aiPrintLayoutBuffer+0x60>)
 800509e:	e7f0      	b.n	8005082 <aiPrintLayoutBuffer+0x2a>
        return "AI_BUFFER_FORMAT_Q15";
 80050a0:	4906      	ldr	r1, [pc, #24]	; (80050bc <aiPrintLayoutBuffer+0x64>)
 80050a2:	e7ee      	b.n	8005082 <aiPrintLayoutBuffer+0x2a>
 80050a4:	0804bffc 	.word	0x0804bffc
 80050a8:	0804bfe8 	.word	0x0804bfe8
 80050ac:	0804c004 	.word	0x0804c004
 80050b0:	0804bf92 	.word	0x0804bf92
 80050b4:	0804bfa8 	.word	0x0804bfa8
 80050b8:	0804bfbf 	.word	0x0804bfbf
 80050bc:	0804bfd3 	.word	0x0804bfd3

080050c0 <aiDeInit>:
{
 80050c0:	b510      	push	{r4, lr}
        if (net_ctx[idx].handle) {
 80050c2:	4c0b      	ldr	r4, [pc, #44]	; (80050f0 <aiDeInit+0x30>)
    printf("Releasing the network(s)...\r\n");
 80050c4:	480b      	ldr	r0, [pc, #44]	; (80050f4 <aiDeInit+0x34>)
 80050c6:	f001 fb2d 	bl	8006724 <puts>
        if (net_ctx[idx].handle) {
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	b178      	cbz	r0, 80050ee <aiDeInit+0x2e>
            if (ai_mnetwork_destroy(net_ctx[idx].handle) != AI_HANDLE_NULL) {
 80050ce:	f000 fd55 	bl	8005b7c <ai_mnetwork_destroy>
 80050d2:	b910      	cbnz	r0, 80050da <aiDeInit+0x1a>
            net_ctx[idx].handle = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	bd10      	pop	{r4, pc}
                err = ai_mnetwork_get_error(net_ctx[idx].handle);
 80050da:	6820      	ldr	r0, [r4, #0]
 80050dc:	f000 fd6f 	bl	8005bbe <ai_mnetwork_get_error>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80050e0:	4905      	ldr	r1, [pc, #20]	; (80050f8 <aiDeInit+0x38>)
 80050e2:	0a03      	lsrs	r3, r0, #8
 80050e4:	b2c2      	uxtb	r2, r0
 80050e6:	4805      	ldr	r0, [pc, #20]	; (80050fc <aiDeInit+0x3c>)
 80050e8:	f001 fa94 	bl	8006614 <iprintf>
 80050ec:	e7f2      	b.n	80050d4 <aiDeInit+0x14>
 80050ee:	bd10      	pop	{r4, pc}
 80050f0:	2000a8d8 	.word	0x2000a8d8
 80050f4:	0804bf3c 	.word	0x0804bf3c
 80050f8:	0804bf59 	.word	0x0804bf59
 80050fc:	0804bf6d 	.word	0x0804bf6d

08005100 <_write>:
{
 8005100:	b510      	push	{r4, lr}
    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8005102:	1e14      	subs	r4, r2, #0
 8005104:	da0a      	bge.n	800511c <_write+0x1c>
 8005106:	3801      	subs	r0, #1
 8005108:	2801      	cmp	r0, #1
 800510a:	d907      	bls.n	800511c <_write+0x1c>
        errno = EBADF;
 800510c:	f000 fffc 	bl	8006108 <__errno>
        return -1;
 8005110:	f04f 34ff 	mov.w	r4, #4294967295
        errno = EBADF;
 8005114:	2309      	movs	r3, #9
 8005116:	6003      	str	r3, [r0, #0]
}
 8005118:	4620      	mov	r0, r4
 800511a:	bd10      	pop	{r4, pc}
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800511c:	b2a2      	uxth	r2, r4
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	4803      	ldr	r0, [pc, #12]	; (8005130 <_write+0x30>)
 8005124:	f7ff fcbe 	bl	8004aa4 <HAL_UART_Transmit>
    return (status == HAL_OK ? count : 0);
 8005128:	2800      	cmp	r0, #0
 800512a:	bf18      	it	ne
 800512c:	2400      	movne	r4, #0
 800512e:	e7f3      	b.n	8005118 <_write+0x18>
 8005130:	2000a9e8 	.word	0x2000a9e8

08005134 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8005134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n#\r\n");
 8005138:	48bc      	ldr	r0, [pc, #752]	; (800542c <aiSystemPerformanceInit+0x2f8>)
{
 800513a:	b08d      	sub	sp, #52	; 0x34
    printf("\r\n#\r\n");
 800513c:	f001 faf2 	bl	8006724 <puts>
    printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8005140:	2301      	movs	r3, #1
 8005142:	2202      	movs	r2, #2
 8005144:	49ba      	ldr	r1, [pc, #744]	; (8005430 <aiSystemPerformanceInit+0x2fc>)
 8005146:	48bb      	ldr	r0, [pc, #748]	; (8005434 <aiSystemPerformanceInit+0x300>)
 8005148:	f001 fa64 	bl	8006614 <iprintf>
            _APP_VERSION_MINOR_ );
    printf("#\r\n");
 800514c:	48ba      	ldr	r0, [pc, #744]	; (8005438 <aiSystemPerformanceInit+0x304>)
 800514e:	f001 fae9 	bl	8006724 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8005152:	2301      	movs	r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	2106      	movs	r1, #6
 8005158:	48b8      	ldr	r0, [pc, #736]	; (800543c <aiSystemPerformanceInit+0x308>)
 800515a:	f001 fa5b 	bl	8006614 <iprintf>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800515e:	4ab8      	ldr	r2, [pc, #736]	; (8005440 <aiSystemPerformanceInit+0x30c>)
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8005160:	4cb8      	ldr	r4, [pc, #736]	; (8005444 <aiSystemPerformanceInit+0x310>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005162:	68d3      	ldr	r3, [r2, #12]
 8005164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005168:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 800516a:	4ab7      	ldr	r2, [pc, #732]	; (8005448 <aiSystemPerformanceInit+0x314>)
 800516c:	4bb7      	ldr	r3, [pc, #732]	; (800544c <aiSystemPerformanceInit+0x318>)
 800516e:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
    DWT->CYCCNT = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8005176:	6813      	ldr	r3, [r2, #0]
 8005178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6013      	str	r3, [r2, #0]
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8005182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005184:	04db      	lsls	r3, r3, #19
 8005186:	d402      	bmi.n	800518e <aiSystemPerformanceInit+0x5a>
        printf("W: CRC IP clock is NOT enabled\r\n");
 8005188:	48b1      	ldr	r0, [pc, #708]	; (8005450 <aiSystemPerformanceInit+0x31c>)
 800518a:	f001 facb 	bl	8006724 <puts>
    __HAL_RCC_CRC_CLK_ENABLE();
 800518e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    printf("STM32 Runtime configuration...\r\n");
 8005190:	48b0      	ldr	r0, [pc, #704]	; (8005454 <aiSystemPerformanceInit+0x320>)
    __HAL_RCC_CRC_CLK_ENABLE();
 8005192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005196:	6323      	str	r3, [r4, #48]	; 0x30
 8005198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800519a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	9b03      	ldr	r3, [sp, #12]
    uint32_t acr = FLASH->ACR ;
 80051a2:	4bad      	ldr	r3, [pc, #692]	; (8005458 <aiSystemPerformanceInit+0x324>)
 80051a4:	681e      	ldr	r6, [r3, #0]
    printf("STM32 Runtime configuration...\r\n");
 80051a6:	f001 fabd 	bl	8006724 <puts>
            (int)HAL_GetDEVID(),
 80051aa:	f7fe fc1d 	bl	80039e8 <HAL_GetDEVID>
 80051ae:	4605      	mov	r5, r0
            devIdToStr(HAL_GetDEVID()),
 80051b0:	f7fe fc1a 	bl	80039e8 <HAL_GetDEVID>
    switch (dev_id) {
 80051b4:	b280      	uxth	r0, r0
 80051b6:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
 80051ba:	f000 80af 	beq.w	800531c <aiSystemPerformanceInit+0x1e8>
 80051be:	d816      	bhi.n	80051ee <aiSystemPerformanceInit+0xba>
 80051c0:	f240 4322 	movw	r3, #1058	; 0x422
 80051c4:	4298      	cmp	r0, r3
 80051c6:	d02b      	beq.n	8005220 <aiSystemPerformanceInit+0xec>
 80051c8:	d806      	bhi.n	80051d8 <aiSystemPerformanceInit+0xa4>
 80051ca:	f240 4315 	movw	r3, #1045	; 0x415
 80051ce:	4298      	cmp	r0, r3
 80051d0:	f000 80a0 	beq.w	8005314 <aiSystemPerformanceInit+0x1e0>
    default:    str = "UNKNOWN";
 80051d4:	4ca1      	ldr	r4, [pc, #644]	; (800545c <aiSystemPerformanceInit+0x328>)
 80051d6:	e024      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    switch (dev_id) {
 80051d8:	f240 4331 	movw	r3, #1073	; 0x431
 80051dc:	4298      	cmp	r0, r3
 80051de:	f000 8095 	beq.w	800530c <aiSystemPerformanceInit+0x1d8>
 80051e2:	f240 4335 	movw	r3, #1077	; 0x435
 80051e6:	4298      	cmp	r0, r3
 80051e8:	d1f4      	bne.n	80051d4 <aiSystemPerformanceInit+0xa0>
    case 0x435: str = "STM32L43xxx"; break;
 80051ea:	4c9d      	ldr	r4, [pc, #628]	; (8005460 <aiSystemPerformanceInit+0x32c>)
 80051ec:	e019      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    switch (dev_id) {
 80051ee:	f5b0 6f8a 	cmp.w	r0, #1104	; 0x450
 80051f2:	f000 8091 	beq.w	8005318 <aiSystemPerformanceInit+0x1e4>
 80051f6:	d80a      	bhi.n	800520e <aiSystemPerformanceInit+0xda>
 80051f8:	f240 4346 	movw	r3, #1094	; 0x446
 80051fc:	4298      	cmp	r0, r3
 80051fe:	f000 8083 	beq.w	8005308 <aiSystemPerformanceInit+0x1d4>
 8005202:	f240 4349 	movw	r3, #1097	; 0x449
 8005206:	4298      	cmp	r0, r3
 8005208:	d1e4      	bne.n	80051d4 <aiSystemPerformanceInit+0xa0>
    case 0x449: str = "STM32F74xxx"; break;
 800520a:	4c96      	ldr	r4, [pc, #600]	; (8005464 <aiSystemPerformanceInit+0x330>)
 800520c:	e009      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    switch (dev_id) {
 800520e:	f240 4362 	movw	r3, #1122	; 0x462
 8005212:	4298      	cmp	r0, r3
 8005214:	d07c      	beq.n	8005310 <aiSystemPerformanceInit+0x1dc>
 8005216:	f5b0 6f8e 	cmp.w	r0, #1136	; 0x470
 800521a:	d1db      	bne.n	80051d4 <aiSystemPerformanceInit+0xa0>
    case 0x470: str = "STM32L4Rxxx"; break;
 800521c:	4c92      	ldr	r4, [pc, #584]	; (8005468 <aiSystemPerformanceInit+0x334>)
 800521e:	e000      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    case 0x422: str = "STM32F303xB/C"; break;
 8005220:	4c92      	ldr	r4, [pc, #584]	; (800546c <aiSystemPerformanceInit+0x338>)
            (int)HAL_GetREVID()
 8005222:	f7fe fbdb 	bl	80039dc <HAL_GetREVID>
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 8005226:	4622      	mov	r2, r4
 8005228:	4603      	mov	r3, r0
 800522a:	4629      	mov	r1, r5
 800522c:	4890      	ldr	r0, [pc, #576]	; (8005470 <aiSystemPerformanceInit+0x33c>)
 800522e:	f001 f9f1 	bl	8006614 <iprintf>
    printf(" Core Arch.   : M%d - %s %s\r\n",
 8005232:	4a90      	ldr	r2, [pc, #576]	; (8005474 <aiSystemPerformanceInit+0x340>)
 8005234:	4b90      	ldr	r3, [pc, #576]	; (8005478 <aiSystemPerformanceInit+0x344>)
 8005236:	2107      	movs	r1, #7
 8005238:	4890      	ldr	r0, [pc, #576]	; (800547c <aiSystemPerformanceInit+0x348>)
 800523a:	f001 f9eb 	bl	8006614 <iprintf>
        return "True";
 800523e:	4d90      	ldr	r5, [pc, #576]	; (8005480 <aiSystemPerformanceInit+0x34c>)
    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8005240:	f7fe fbc8 	bl	80039d4 <HAL_GetHalVersion>
 8005244:	4601      	mov	r1, r0
 8005246:	488f      	ldr	r0, [pc, #572]	; (8005484 <aiSystemPerformanceInit+0x350>)
 8005248:	f001 f9e4 	bl	8006614 <iprintf>
        return "True";
 800524c:	4c8e      	ldr	r4, [pc, #568]	; (8005488 <aiSystemPerformanceInit+0x354>)
    return HAL_RCC_GetHCLKFreq();
 800524e:	f7ff f80b 	bl	8004268 <HAL_RCC_GetHCLKFreq>
    printf(" system clock : %u MHz\r\n", (int)val);
 8005252:	498e      	ldr	r1, [pc, #568]	; (800548c <aiSystemPerformanceInit+0x358>)
    		printf("\r\nFound network \"%s\"\r\n", nn_name);
 8005254:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8005514 <aiSystemPerformanceInit+0x3e0>
    printf("Creating the network \"%s\"..\r\n", nn_name);
 8005258:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8005518 <aiSystemPerformanceInit+0x3e4>
  printf("Network configuration...\r\n");
 800525c:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800551c <aiSystemPerformanceInit+0x3e8>
    printf(" system clock : %u MHz\r\n", (int)val);
 8005260:	fbb0 f1f1 	udiv	r1, r0, r1
 8005264:	488a      	ldr	r0, [pc, #552]	; (8005490 <aiSystemPerformanceInit+0x35c>)
 8005266:	f001 f9d5 	bl	8006614 <iprintf>
        return "True";
 800526a:	f416 7f80 	tst.w	r6, #256	; 0x100
    val = SCB->CCR;
 800526e:	4b89      	ldr	r3, [pc, #548]	; (8005494 <aiSystemPerformanceInit+0x360>)
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8005270:	4631      	mov	r1, r6
        return "True";
 8005272:	bf0c      	ite	eq
 8005274:	462a      	moveq	r2, r5
 8005276:	4622      	movne	r2, r4
    val = SCB->CCR;
 8005278:	695f      	ldr	r7, [r3, #20]
        return "True";
 800527a:	f416 7f00 	tst.w	r6, #512	; 0x200
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800527e:	f006 030f 	and.w	r3, r6, #15
 8005282:	4885      	ldr	r0, [pc, #532]	; (8005498 <aiSystemPerformanceInit+0x364>)
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	bf0c      	ite	eq
 8005288:	462b      	moveq	r3, r5
 800528a:	4623      	movne	r3, r4
 800528c:	f001 f9c2 	bl	8006614 <iprintf>
        return "True";
 8005290:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8005294:	4881      	ldr	r0, [pc, #516]	; (800549c <aiSystemPerformanceInit+0x368>)
        return "True";
 8005296:	bf0c      	ite	eq
 8005298:	4629      	moveq	r1, r5
 800529a:	4621      	movne	r1, r4
 800529c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 80052a0:	bf0c      	ite	eq
 80052a2:	462a      	moveq	r2, r5
 80052a4:	4622      	movne	r2, r4
 80052a6:	f001 f9b5 	bl	8006614 <iprintf>
    printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 80052aa:	2300      	movs	r3, #0
 80052ac:	4c7c      	ldr	r4, [pc, #496]	; (80054a0 <aiSystemPerformanceInit+0x36c>)
    idx = 0;
 80052ae:	2500      	movs	r5, #0
    printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 80052b0:	461a      	mov	r2, r3
 80052b2:	2101      	movs	r1, #1
 80052b4:	487b      	ldr	r0, [pc, #492]	; (80054a4 <aiSystemPerformanceInit+0x370>)
 80052b6:	f001 f9ad 	bl	8006614 <iprintf>
    	nn_name = ai_mnetwork_find(NULL, idx);
 80052ba:	4629      	mov	r1, r5
 80052bc:	2000      	movs	r0, #0
 80052be:	f000 fc1d 	bl	8005afc <ai_mnetwork_find>
    	if (nn_name) {
 80052c2:	4680      	mov	r8, r0
 80052c4:	2800      	cmp	r0, #0
 80052c6:	f000 813b 	beq.w	8005540 <aiSystemPerformanceInit+0x40c>
    		printf("\r\nFound network \"%s\"\r\n", nn_name);
 80052ca:	4601      	mov	r1, r0
 80052cc:	4648      	mov	r0, r9
 80052ce:	f001 f9a1 	bl	8006614 <iprintf>
    printf("Creating the network \"%s\"..\r\n", nn_name);
 80052d2:	4641      	mov	r1, r8
 80052d4:	4650      	mov	r0, sl
 80052d6:	f001 f99d 	bl	8006614 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_ctx[idx].handle, NULL);
 80052da:	2200      	movs	r2, #0
 80052dc:	f1a4 0138 	sub.w	r1, r4, #56	; 0x38
 80052e0:	4640      	mov	r0, r8
 80052e2:	f000 fc1d 	bl	8005b20 <ai_mnetwork_create>
    if (err.type) {
 80052e6:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80052ea:	d019      	beq.n	8005320 <aiSystemPerformanceInit+0x1ec>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80052ec:	0a03      	lsrs	r3, r0, #8
 80052ee:	496e      	ldr	r1, [pc, #440]	; (80054a8 <aiSystemPerformanceInit+0x374>)
 80052f0:	486e      	ldr	r0, [pc, #440]	; (80054ac <aiSystemPerformanceInit+0x378>)
 80052f2:	f001 f98f 	bl	8006614 <iprintf>
    crcIpInit();
    logDeviceConf();

    aiInit();

    srand(3); /* deterministic outcome */
 80052f6:	2003      	movs	r0, #3
 80052f8:	f001 fa1c 	bl	8006734 <srand>
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80052fc:	2000      	movs	r0, #0
 80052fe:	4b52      	ldr	r3, [pc, #328]	; (8005448 <aiSystemPerformanceInit+0x314>)
 8005300:	6058      	str	r0, [r3, #4]

    dwtReset();
    return 0;
}
 8005302:	b00d      	add	sp, #52	; 0x34
 8005304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case 0x446: str = "STM32F303xD/E"; break;
 8005308:	4c69      	ldr	r4, [pc, #420]	; (80054b0 <aiSystemPerformanceInit+0x37c>)
 800530a:	e78a      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    case 0x431: str = "STM32F411xC/E"; break;
 800530c:	4c69      	ldr	r4, [pc, #420]	; (80054b4 <aiSystemPerformanceInit+0x380>)
 800530e:	e788      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    case 0x462: str = "STM32L45xxx"; break;
 8005310:	4c69      	ldr	r4, [pc, #420]	; (80054b8 <aiSystemPerformanceInit+0x384>)
 8005312:	e786      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    case 0x415: str = "STM32L4x6xx"; break;
 8005314:	4c69      	ldr	r4, [pc, #420]	; (80054bc <aiSystemPerformanceInit+0x388>)
 8005316:	e784      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 8005318:	4c69      	ldr	r4, [pc, #420]	; (80054c0 <aiSystemPerformanceInit+0x38c>)
 800531a:	e782      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    case 0x438: str = "STM32F303x6/8"; break;
 800531c:	4c69      	ldr	r4, [pc, #420]	; (80054c4 <aiSystemPerformanceInit+0x390>)
 800531e:	e780      	b.n	8005222 <aiSystemPerformanceInit+0xee>
    if (ai_mnetwork_get_info(net_ctx[idx].handle, &net_ctx[idx].report)) {
 8005320:	f1a4 0134 	sub.w	r1, r4, #52	; 0x34
 8005324:	f854 0c38 	ldr.w	r0, [r4, #-56]
 8005328:	f000 fc3e 	bl	8005ba8 <ai_mnetwork_get_info>
 800532c:	4606      	mov	r6, r0
 800532e:	2800      	cmp	r0, #0
 8005330:	f000 80f6 	beq.w	8005520 <aiSystemPerformanceInit+0x3ec>
  printf("Network configuration...\r\n");
 8005334:	4658      	mov	r0, fp
    const ai_network_params params = {
 8005336:	4f64      	ldr	r7, [pc, #400]	; (80054c8 <aiSystemPerformanceInit+0x394>)
  printf("Network configuration...\r\n");
 8005338:	f001 f9f4 	bl	8006724 <puts>
  printf(" Model name         : %s\r\n", report->model_name);
 800533c:	f854 1c34 	ldr.w	r1, [r4, #-52]
 8005340:	4862      	ldr	r0, [pc, #392]	; (80054cc <aiSystemPerformanceInit+0x398>)
    const ai_network_params params = {
 8005342:	ae04      	add	r6, sp, #16
  printf(" Model name         : %s\r\n", report->model_name);
 8005344:	f001 f966 	bl	8006614 <iprintf>
  printf(" Model signature    : %s\r\n", report->model_signature);
 8005348:	f854 1c30 	ldr.w	r1, [r4, #-48]
 800534c:	4860      	ldr	r0, [pc, #384]	; (80054d0 <aiSystemPerformanceInit+0x39c>)
 800534e:	f001 f961 	bl	8006614 <iprintf>
  printf(" Model datetime     : %s\r\n", report->model_datetime);
 8005352:	f854 1c2c 	ldr.w	r1, [r4, #-44]
 8005356:	485f      	ldr	r0, [pc, #380]	; (80054d4 <aiSystemPerformanceInit+0x3a0>)
 8005358:	f001 f95c 	bl	8006614 <iprintf>
  printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 800535c:	f854 1c28 	ldr.w	r1, [r4, #-40]
 8005360:	485d      	ldr	r0, [pc, #372]	; (80054d8 <aiSystemPerformanceInit+0x3a4>)
 8005362:	f001 f957 	bl	8006614 <iprintf>
  printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 8005366:	f814 1c1e 	ldrb.w	r1, [r4, #-30]
 800536a:	f814 3c1f 	ldrb.w	r3, [r4, #-31]
 800536e:	f814 2c20 	ldrb.w	r2, [r4, #-32]
 8005372:	485a      	ldr	r0, [pc, #360]	; (80054dc <aiSystemPerformanceInit+0x3a8>)
 8005374:	9100      	str	r1, [sp, #0]
 8005376:	f854 1c24 	ldr.w	r1, [r4, #-36]
 800537a:	f001 f94b 	bl	8006614 <iprintf>
  printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800537e:	f814 1c16 	ldrb.w	r1, [r4, #-22]
 8005382:	f814 2c18 	ldrb.w	r2, [r4, #-24]
 8005386:	f814 3c17 	ldrb.w	r3, [r4, #-23]
 800538a:	4855      	ldr	r0, [pc, #340]	; (80054e0 <aiSystemPerformanceInit+0x3ac>)
 800538c:	9100      	str	r1, [sp, #0]
 800538e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 8005392:	f001 f93f 	bl	8006614 <iprintf>
  printf("Network info...\r\n");
 8005396:	4853      	ldr	r0, [pc, #332]	; (80054e4 <aiSystemPerformanceInit+0x3b0>)
 8005398:	f001 f9c4 	bl	8006724 <puts>
  printf("  signature         : 0x%lx\r\n", report->signature);
 800539c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800539e:	4852      	ldr	r0, [pc, #328]	; (80054e8 <aiSystemPerformanceInit+0x3b4>)
 80053a0:	f001 f938 	bl	8006614 <iprintf>
  printf("  nodes             : %ld\r\n", report->n_nodes);
 80053a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80053a6:	4851      	ldr	r0, [pc, #324]	; (80054ec <aiSystemPerformanceInit+0x3b8>)
 80053a8:	f001 f934 	bl	8006614 <iprintf>
  printf("  complexity        : %ld MACC\r\n", report->n_macc);
 80053ac:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80053b0:	484f      	ldr	r0, [pc, #316]	; (80054f0 <aiSystemPerformanceInit+0x3bc>)
 80053b2:	f001 f92f 	bl	8006614 <iprintf>
    return buffer->height * buffer->width * buffer->channels;
 80053b6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80053b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
  printf("  activation        : %ld bytes\r\n", aiBufferSize(&report->activations));
 80053ba:	484e      	ldr	r0, [pc, #312]	; (80054f4 <aiSystemPerformanceInit+0x3c0>)
    return buffer->height * buffer->width * buffer->channels;
 80053bc:	434b      	muls	r3, r1
 80053be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  printf("  activation        : %ld bytes\r\n", aiBufferSize(&report->activations));
 80053c0:	4359      	muls	r1, r3
 80053c2:	f001 f927 	bl	8006614 <iprintf>
    return buffer->height * buffer->width * buffer->channels;
 80053c6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80053c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  printf("  weights           : %ld bytes\r\n", aiBufferSize(&report->weights));
 80053ca:	484b      	ldr	r0, [pc, #300]	; (80054f8 <aiSystemPerformanceInit+0x3c4>)
    return buffer->height * buffer->width * buffer->channels;
 80053cc:	434b      	muls	r3, r1
 80053ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  printf("  weights           : %ld bytes\r\n", aiBufferSize(&report->weights));
 80053d0:	4359      	muls	r1, r3
 80053d2:	f001 f91f 	bl	8006614 <iprintf>
  printf("  inputs/outputs    : %u/%u\r\n", report->n_inputs, report->n_outputs);
 80053d6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80053da:	f834 1c04 	ldrh.w	r1, [r4, #-4]
 80053de:	4847      	ldr	r0, [pc, #284]	; (80054fc <aiSystemPerformanceInit+0x3c8>)
 80053e0:	f001 f918 	bl	8006614 <iprintf>
  aiPrintLayoutBuffer("  IN tensor format  :", &report->inputs);
 80053e4:	4621      	mov	r1, r4
 80053e6:	4846      	ldr	r0, [pc, #280]	; (8005500 <aiSystemPerformanceInit+0x3cc>)
 80053e8:	f7ff fe36 	bl	8005058 <aiPrintLayoutBuffer>
  aiPrintLayoutBuffer("  OUT tensor format :", &report->outputs);
 80053ec:	f104 0110 	add.w	r1, r4, #16
 80053f0:	4844      	ldr	r0, [pc, #272]	; (8005504 <aiSystemPerformanceInit+0x3d0>)
 80053f2:	f7ff fe31 	bl	8005058 <aiPrintLayoutBuffer>
    printf("Initializing the network\r\n");
 80053f6:	4844      	ldr	r0, [pc, #272]	; (8005508 <aiSystemPerformanceInit+0x3d4>)
 80053f8:	f001 f994 	bl	8006724 <puts>
    const ai_network_params params = {
 80053fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80053fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005400:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005404:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    if (!ai_mnetwork_init(net_ctx[idx].handle, &params)) {
 8005408:	a904      	add	r1, sp, #16
 800540a:	f854 0c38 	ldr.w	r0, [r4, #-56]
 800540e:	f000 fbe7 	bl	8005be0 <ai_mnetwork_init>
 8005412:	4606      	mov	r6, r0
 8005414:	2800      	cmp	r0, #0
 8005416:	f040 8093 	bne.w	8005540 <aiSystemPerformanceInit+0x40c>
        err = ai_mnetwork_get_error(net_ctx[idx].handle);
 800541a:	4c3c      	ldr	r4, [pc, #240]	; (800550c <aiSystemPerformanceInit+0x3d8>)
 800541c:	01ed      	lsls	r5, r5, #7
 800541e:	5960      	ldr	r0, [r4, r5]
 8005420:	f000 fbcd 	bl	8005bbe <ai_mnetwork_get_error>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 8005424:	493a      	ldr	r1, [pc, #232]	; (8005510 <aiSystemPerformanceInit+0x3dc>)
 8005426:	0a03      	lsrs	r3, r0, #8
 8005428:	b2c2      	uxtb	r2, r0
 800542a:	e081      	b.n	8005530 <aiSystemPerformanceInit+0x3fc>
 800542c:	0804c0c6 	.word	0x0804c0c6
 8005430:	0804c0cb 	.word	0x0804c0cb
 8005434:	0804c0ed 	.word	0x0804c0ed
 8005438:	0804c0c8 	.word	0x0804c0c8
 800543c:	0804c0fa 	.word	0x0804c0fa
 8005440:	e000edf0 	.word	0xe000edf0
 8005444:	40023800 	.word	0x40023800
 8005448:	e0001000 	.word	0xe0001000
 800544c:	c5acce55 	.word	0xc5acce55
 8005450:	0804c117 	.word	0x0804c117
 8005454:	0804c137 	.word	0x0804c137
 8005458:	40023c00 	.word	0x40023c00
 800545c:	0804bffc 	.word	0x0804bffc
 8005460:	0804c063 	.word	0x0804c063
 8005464:	0804c093 	.word	0x0804c093
 8005468:	0804c087 	.word	0x0804c087
 800546c:	0804c02b 	.word	0x0804c02b
 8005470:	0804c157 	.word	0x0804c157
 8005474:	0804c191 	.word	0x0804c191
 8005478:	0804c188 	.word	0x0804c188
 800547c:	0804c19d 	.word	0x0804c19d
 8005480:	0804c0c0 	.word	0x0804c0c0
 8005484:	0804c1bb 	.word	0x0804c1bb
 8005488:	0804c0bb 	.word	0x0804c0bb
 800548c:	000f4240 	.word	0x000f4240
 8005490:	0804c1d4 	.word	0x0804c1d4
 8005494:	e000ed00 	.word	0xe000ed00
 8005498:	0804c1ed 	.word	0x0804c1ed
 800549c:	0804c22a 	.word	0x0804c22a
 80054a0:	2000a910 	.word	0x2000a910
 80054a4:	0804c24a 	.word	0x0804c24a
 80054a8:	0804c2ac 	.word	0x0804c2ac
 80054ac:	0804bf6d 	.word	0x0804bf6d
 80054b0:	0804c047 	.word	0x0804c047
 80054b4:	0804c055 	.word	0x0804c055
 80054b8:	0804c06f 	.word	0x0804c06f
 80054bc:	0804c07b 	.word	0x0804c07b
 80054c0:	0804c09f 	.word	0x0804c09f
 80054c4:	0804c039 	.word	0x0804c039
 80054c8:	080082e0 	.word	0x080082e0
 80054cc:	0804c2d9 	.word	0x0804c2d9
 80054d0:	0804c2f4 	.word	0x0804c2f4
 80054d4:	0804c30f 	.word	0x0804c30f
 80054d8:	0804c32a 	.word	0x0804c32a
 80054dc:	0804c345 	.word	0x0804c345
 80054e0:	0804c36b 	.word	0x0804c36b
 80054e4:	0804c391 	.word	0x0804c391
 80054e8:	0804c3a2 	.word	0x0804c3a2
 80054ec:	0804c3c0 	.word	0x0804c3c0
 80054f0:	0804c3dc 	.word	0x0804c3dc
 80054f4:	0804c3fd 	.word	0x0804c3fd
 80054f8:	0804c41f 	.word	0x0804c41f
 80054fc:	0804c441 	.word	0x0804c441
 8005500:	0804c45f 	.word	0x0804c45f
 8005504:	0804c475 	.word	0x0804c475
 8005508:	0804c48b 	.word	0x0804c48b
 800550c:	2000a8d8 	.word	0x2000a8d8
 8005510:	0804c4ba 	.word	0x0804c4ba
 8005514:	0804c277 	.word	0x0804c277
 8005518:	0804c28e 	.word	0x0804c28e
 800551c:	0804c2bf 	.word	0x0804c2bf
        err = ai_mnetwork_get_error(net_ctx[idx].handle);
 8005520:	4c0b      	ldr	r4, [pc, #44]	; (8005550 <aiSystemPerformanceInit+0x41c>)
 8005522:	01ed      	lsls	r5, r5, #7
 8005524:	5960      	ldr	r0, [r4, r5]
 8005526:	f000 fb4a 	bl	8005bbe <ai_mnetwork_get_error>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800552a:	490a      	ldr	r1, [pc, #40]	; (8005554 <aiSystemPerformanceInit+0x420>)
 800552c:	0a03      	lsrs	r3, r0, #8
 800552e:	b2c2      	uxtb	r2, r0
 8005530:	4809      	ldr	r0, [pc, #36]	; (8005558 <aiSystemPerformanceInit+0x424>)
 8005532:	f001 f86f 	bl	8006614 <iprintf>
        ai_mnetwork_destroy(net_ctx[idx].handle);
 8005536:	5960      	ldr	r0, [r4, r5]
 8005538:	f000 fb20 	bl	8005b7c <ai_mnetwork_destroy>
        net_ctx[idx].handle = AI_HANDLE_NULL;
 800553c:	5166      	str	r6, [r4, r5]
 800553e:	e6da      	b.n	80052f6 <aiSystemPerformanceInit+0x1c2>
    	idx++;
 8005540:	3501      	adds	r5, #1
 8005542:	3480      	adds	r4, #128	; 0x80
    } while (nn_name);
 8005544:	f1b8 0f00 	cmp.w	r8, #0
 8005548:	f47f aeb7 	bne.w	80052ba <aiSystemPerformanceInit+0x186>
 800554c:	e6d3      	b.n	80052f6 <aiSystemPerformanceInit+0x1c2>
 800554e:	bf00      	nop
 8005550:	2000a8d8 	.word	0x2000a8d8
 8005554:	0804c4a5 	.word	0x0804c4a5
 8005558:	0804bf6d 	.word	0x0804bf6d

0800555c <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	ed2d 8b02 	vpush	{d8}
            in_data[i] = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8005564:	ed9f 8a8c 	vldr	s16, [pc, #560]	; 8005798 <aiSystemPerformanceProcess+0x23c>
{
 8005568:	b095      	sub	sp, #84	; 0x54
    if (net_ctx[idx].handle == AI_HANDLE_NULL) {
 800556a:	4b8c      	ldr	r3, [pc, #560]	; (800579c <aiSystemPerformanceProcess+0x240>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	b94a      	cbnz	r2, 8005584 <aiSystemPerformanceProcess+0x28>
        printf("E: network handle is NULL\r\n");
 8005570:	488b      	ldr	r0, [pc, #556]	; (80057a0 <aiSystemPerformanceProcess+0x244>)
 8005572:	f001 f8d7 	bl	8006724 <puts>
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
            }
        }
    } while (r==0);

    return r;
}
 800557a:	b015      	add	sp, #84	; 0x54
 800557c:	ecbd 8b02 	vpop	{d8}
 8005580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005584:	f3ef 8414 	mrs	r4, CONTROL
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8005588:	f3ef 8608 	mrs	r6, MSP
    if (profiling_mode)
 800558c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 80057e4 <aiSystemPerformanceProcess+0x288>
 8005590:	f898 2000 	ldrb.w	r2, [r8]
 8005594:	2a00      	cmp	r2, #0
 8005596:	d061      	beq.n	800565c <aiSystemPerformanceProcess+0x100>
        niter = _APP_ITER_ * profiling_factor;
 8005598:	4a82      	ldr	r2, [pc, #520]	; (80057a4 <aiSystemPerformanceProcess+0x248>)
 800559a:	6817      	ldr	r7, [r2, #0]
 800559c:	013f      	lsls	r7, r7, #4
    printf("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 800559e:	6859      	ldr	r1, [r3, #4]
 80055a0:	463a      	mov	r2, r7
 80055a2:	4881      	ldr	r0, [pc, #516]	; (80057a8 <aiSystemPerformanceProcess+0x24c>)
 80055a4:	f001 f836 	bl	8006614 <iprintf>
    if (ctrl & CONTROL_SPSEL_Msk) {
 80055a8:	07a3      	lsls	r3, r4, #30
 80055aa:	d559      	bpl.n	8005660 <aiSystemPerformanceProcess+0x104>
        stack_mon = false;
 80055ac:	2400      	movs	r4, #0
        printf("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 80055ae:	487f      	ldr	r0, [pc, #508]	; (80057ac <aiSystemPerformanceProcess+0x250>)
 80055b0:	f001 f8b8 	bl	8006724 <puts>
    ustack_size = estack - cstack;
 80055b4:	4d7e      	ldr	r5, [pc, #504]	; (80057b0 <aiSystemPerformanceProcess+0x254>)
 80055b6:	1bad      	subs	r5, r5, r6
    if ((stack_mon) && (ustack_size > mstack_size)) {
 80055b8:	b14c      	cbz	r4, 80055ce <aiSystemPerformanceProcess+0x72>
 80055ba:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 80055be:	d906      	bls.n	80055ce <aiSystemPerformanceProcess+0x72>
        stack_mon = false;
 80055c0:	2400      	movs	r4, #0
        printf("E: !stack overflow detected %ld > %ld\r\n", ustack_size,
 80055c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055c6:	4629      	mov	r1, r5
 80055c8:	487a      	ldr	r0, [pc, #488]	; (80057b4 <aiSystemPerformanceProcess+0x258>)
 80055ca:	f001 f823 	bl	8006614 <iprintf>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80055d2:	b672      	cpsid	i
    if (stack_mon) {
 80055d4:	2c00      	cmp	r4, #0
 80055d6:	d145      	bne.n	8005664 <aiSystemPerformanceProcess+0x108>
    memset(&ia_malloc,0,sizeof(struct ia_malloc));
 80055d8:	2214      	movs	r2, #20
 80055da:	2100      	movs	r1, #0
 80055dc:	4876      	ldr	r0, [pc, #472]	; (80057b8 <aiSystemPerformanceProcess+0x25c>)
 80055de:	f000 ff65 	bl	80064ac <memset>
    ai_input[0] = net_ctx[idx].report.inputs;
 80055e2:	f8df e204 	ldr.w	lr, [pc, #516]	; 80057e8 <aiSystemPerformanceProcess+0x28c>
 80055e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80055ea:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    ai_output[0] = net_ctx[idx].report.outputs;
 80055ee:	f10e 0e10 	add.w	lr, lr, #16
    ai_input[0] = net_ctx[idx].report.inputs;
 80055f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ai_output[0] = net_ctx[idx].report.outputs;
 80055f6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80055fa:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 80055fe:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
    ai_input[0].n_batches  = 1;
 8005602:	2301      	movs	r3, #1
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005604:	4a6d      	ldr	r2, [pc, #436]	; (80057bc <aiSystemPerformanceProcess+0x260>)
    ai_input[0].n_batches  = 1;
 8005606:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    ai_output[0].n_batches = 1;
 800560a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800560e:	4b6c      	ldr	r3, [pc, #432]	; (80057c0 <aiSystemPerformanceProcess+0x264>)
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005610:	920f      	str	r2, [sp, #60]	; 0x3c
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005612:	9313      	str	r3, [sp, #76]	; 0x4c
    if (profiling_mode) {
 8005614:	f898 3000 	ldrb.w	r3, [r8]
 8005618:	b14b      	cbz	r3, 800562e <aiSystemPerformanceProcess+0xd2>
        printf("Profiling mode (%d)...\r\n", profiling_factor);
 800561a:	4b62      	ldr	r3, [pc, #392]	; (80057a4 <aiSystemPerformanceProcess+0x248>)
 800561c:	4869      	ldr	r0, [pc, #420]	; (80057c4 <aiSystemPerformanceProcess+0x268>)
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	f000 fff8 	bl	8006614 <iprintf>
        fflush(stdout);
 8005624:	4b68      	ldr	r3, [pc, #416]	; (80057c8 <aiSystemPerformanceProcess+0x26c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6898      	ldr	r0, [r3, #8]
 800562a:	f000 fe25 	bl	8006278 <fflush>
    for (iter = 0; iter < niter; iter++) {
 800562e:	2300      	movs	r3, #0
 8005630:	2200      	movs	r2, #0
        ia_malloc.cfg |= 1UL;
 8005632:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80057b8 <aiSystemPerformanceProcess+0x25c>
    for (iter = 0; iter < niter; iter++) {
 8005636:	9303      	str	r3, [sp, #12]
 8005638:	f04f 33ff 	mov.w	r3, #4294967295
 800563c:	9306      	str	r3, [sp, #24]
 800563e:	2300      	movs	r3, #0
 8005640:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005644:	2300      	movs	r3, #0
 8005646:	9302      	str	r3, [sp, #8]
 8005648:	9b02      	ldr	r3, [sp, #8]
 800564a:	429f      	cmp	r7, r3
 800564c:	dd50      	ble.n	80056f0 <aiSystemPerformanceProcess+0x194>
 800564e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80057bc <aiSystemPerformanceProcess+0x260>
 8005652:	f04f 0900 	mov.w	r9, #0
            in_data[i] = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8005656:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800565a:	e01d      	b.n	8005698 <aiSystemPerformanceProcess+0x13c>
        niter = _APP_ITER_;
 800565c:	2710      	movs	r7, #16
 800565e:	e79e      	b.n	800559e <aiSystemPerformanceProcess+0x42>
      stack_mon = true;
 8005660:	2401      	movs	r4, #1
 8005662:	e7a7      	b.n	80055b4 <aiSystemPerformanceProcess+0x58>
      uint32_t *pw =  (uint32_t*)((bstack + 3) & (~3));
 8005664:	4b59      	ldr	r3, [pc, #356]	; (80057cc <aiSystemPerformanceProcess+0x270>)
        *pw = 0xDEDEDEDE;
 8005666:	f04f 32de 	mov.w	r2, #3739147998	; 0xdededede
      uint32_t *pw =  (uint32_t*)((bstack + 3) & (~3));
 800566a:	f023 0303 	bic.w	r3, r3, #3
      while ((uint32_t)pw < cstack) {
 800566e:	42b3      	cmp	r3, r6
 8005670:	d2b2      	bcs.n	80055d8 <aiSystemPerformanceProcess+0x7c>
        *pw = 0xDEDEDEDE;
 8005672:	f843 2b04 	str.w	r2, [r3], #4
 8005676:	e7fa      	b.n	800566e <aiSystemPerformanceProcess+0x112>
            in_data[i] = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8005678:	f001 f884 	bl	8006784 <rand>
 800567c:	ee07 0a90 	vmov	s15, r0
 8005680:	eeb0 7a68 	vmov.f32	s14, s17
        for (ai_size i = 0; i < aiBufferSize(&ai_input[0]); ++i) {
 8005684:	f109 0901 	add.w	r9, r9, #1
            in_data[i] = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8005688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005690:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005694:	ecaa 7a01 	vstmia	sl!, {s14}
    return buffer->height * buffer->width * buffer->channels;
 8005698:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800569c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80056a0:	435a      	muls	r2, r3
 80056a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a4:	4353      	muls	r3, r2
        for (ai_size i = 0; i < aiBufferSize(&ai_input[0]); ++i) {
 80056a6:	4599      	cmp	r9, r3
 80056a8:	d3e6      	bcc.n	8005678 <aiSystemPerformanceProcess+0x11c>
        ia_malloc.cfg |= 1UL;
 80056aa:	f8d8 3000 	ldr.w	r3, [r8]
        batch = ai_mnetwork_run(net_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 80056ae:	aa10      	add	r2, sp, #64	; 0x40
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80056b0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80057ec <aiSystemPerformanceProcess+0x290>
        batch = ai_mnetwork_run(net_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 80056b4:	a90c      	add	r1, sp, #48	; 0x30
        ia_malloc.cfg |= 1UL;
 80056b6:	f043 0301 	orr.w	r3, r3, #1
        batch = ai_mnetwork_run(net_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 80056ba:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800579c <aiSystemPerformanceProcess+0x240>
        ia_malloc.cfg |= 1UL;
 80056be:	f8c8 3000 	str.w	r3, [r8]
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80056c2:	2300      	movs	r3, #0
        batch = ai_mnetwork_run(net_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 80056c4:	f8da 0000 	ldr.w	r0, [sl]
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80056c8:	f8c9 3004 	str.w	r3, [r9, #4]
    return DWT->CYCCNT;
 80056cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80056d0:	9307      	str	r3, [sp, #28]
        batch = ai_mnetwork_run(net_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 80056d2:	f000 fab6 	bl	8005c42 <ai_mnetwork_run>
        if (batch != 1) {
 80056d6:	2801      	cmp	r0, #1
 80056d8:	9b07      	ldr	r3, [sp, #28]
 80056da:	d033      	beq.n	8005744 <aiSystemPerformanceProcess+0x1e8>
            aiLogErr(ai_mnetwork_get_error(net_ctx[idx].handle),
 80056dc:	f8da 0000 	ldr.w	r0, [sl]
 80056e0:	f000 fa6d 	bl	8005bbe <ai_mnetwork_get_error>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80056e4:	493a      	ldr	r1, [pc, #232]	; (80057d0 <aiSystemPerformanceProcess+0x274>)
 80056e6:	0a03      	lsrs	r3, r0, #8
 80056e8:	b2c2      	uxtb	r2, r0
 80056ea:	483a      	ldr	r0, [pc, #232]	; (80057d4 <aiSystemPerformanceProcess+0x278>)
 80056ec:	f000 ff92 	bl	8006614 <iprintf>
    printf("\r\n");
 80056f0:	4839      	ldr	r0, [pc, #228]	; (80057d8 <aiSystemPerformanceProcess+0x27c>)
 80056f2:	f001 f817 	bl	8006724 <puts>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80056f6:	f3ef 8308 	mrs	r3, MSP
    if (__get_MSP() != cstack) {
 80056fa:	429e      	cmp	r6, r3
 80056fc:	d005      	beq.n	800570a <aiSystemPerformanceProcess+0x1ae>
 80056fe:	f3ef 8108 	mrs	r1, MSP
       printf("E: !current stack address is not coherent 0x%08lx instead 0x%08lx\r\n",
 8005702:	4836      	ldr	r0, [pc, #216]	; (80057dc <aiSystemPerformanceProcess+0x280>)
 8005704:	4632      	mov	r2, r6
 8005706:	f000 ff85 	bl	8006614 <iprintf>
   if (stack_mon) {
 800570a:	2c00      	cmp	r4, #0
 800570c:	f000 814a 	beq.w	80059a4 <aiSystemPerformanceProcess+0x448>
        uint32_t *pr =  (uint32_t*)((bstack + 3) & (~3));
 8005710:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <aiSystemPerformanceProcess+0x270>)
        uint32_t rstack = mstack_size - ustack_size;
 8005712:	f5c5 4180 	rsb	r1, r5, #16384	; 0x4000
        bool overflow = false;
 8005716:	2000      	movs	r0, #0
        uint32_t *pr =  (uint32_t*)((bstack + 3) & (~3));
 8005718:	f023 0303 	bic.w	r3, r3, #3
 800571c:	1f1a      	subs	r2, r3, #4
 800571e:	f103 051c 	add.w	r5, r3, #28
          if (*pr != 0xDEDEDEDE)
 8005722:	f852 7f04 	ldr.w	r7, [r2, #4]!
            overflow = true;
 8005726:	f1b7 3fde 	cmp.w	r7, #3739147998	; 0xdededede
 800572a:	bf18      	it	ne
 800572c:	4620      	movne	r0, r4
        for (int i = 0; i < 8; i++) {
 800572e:	4295      	cmp	r5, r2
 8005730:	d1f7      	bne.n	8005722 <aiSystemPerformanceProcess+0x1c6>
 8005732:	f103 0220 	add.w	r2, r3, #32
        if (!overflow) {
 8005736:	2800      	cmp	r0, #0
 8005738:	d05d      	beq.n	80057f6 <aiSystemPerformanceProcess+0x29a>
            printf("E: !stack overflow detected > %ld\r\n", rstack);
 800573a:	4829      	ldr	r0, [pc, #164]	; (80057e0 <aiSystemPerformanceProcess+0x284>)
 800573c:	f000 ff6a 	bl	8006614 <iprintf>
   susage = 0UL;
 8005740:	2300      	movs	r3, #0
 8005742:	e05e      	b.n	8005802 <aiSystemPerformanceProcess+0x2a6>
    return DWT->CYCCNT;
 8005744:	f8d9 2004 	ldr.w	r2, [r9, #4]
        tend = dwtGetCycles() - tstart;
 8005748:	1ad3      	subs	r3, r2, r3
        ia_malloc.cfg &= ~1UL;
 800574a:	f8d8 2000 	ldr.w	r2, [r8]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	f8c8 2000 	str.w	r2, [r8]
 8005756:	9a06      	ldr	r2, [sp, #24]
 8005758:	429a      	cmp	r2, r3
 800575a:	bf28      	it	cs
 800575c:	461a      	movcs	r2, r3
 800575e:	9206      	str	r2, [sp, #24]
 8005760:	9a03      	ldr	r2, [sp, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	bf38      	it	cc
 8005766:	461a      	movcc	r2, r3
 8005768:	9203      	str	r2, [sp, #12]
        tcumul += (uint64_t)tend;
 800576a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800576e:	18c9      	adds	r1, r1, r3
        if (!profiling_mode) {
 8005770:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <aiSystemPerformanceProcess+0x288>)
        tcumul += (uint64_t)tend;
 8005772:	f142 0200 	adc.w	r2, r2, #0
        if (!profiling_mode) {
 8005776:	781b      	ldrb	r3, [r3, #0]
        tcumul += (uint64_t)tend;
 8005778:	e9cd 1204 	strd	r1, r2, [sp, #16]
        if (!profiling_mode) {
 800577c:	b93b      	cbnz	r3, 800578e <aiSystemPerformanceProcess+0x232>
            printf(".");
 800577e:	202e      	movs	r0, #46	; 0x2e
 8005780:	f000 ff60 	bl	8006644 <putchar>
            fflush(stdout);
 8005784:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <aiSystemPerformanceProcess+0x26c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6898      	ldr	r0, [r3, #8]
 800578a:	f000 fd75 	bl	8006278 <fflush>
    for (iter = 0; iter < niter; iter++) {
 800578e:	9b02      	ldr	r3, [sp, #8]
 8005790:	3301      	adds	r3, #1
 8005792:	9302      	str	r3, [sp, #8]
 8005794:	e758      	b.n	8005648 <aiSystemPerformanceProcess+0xec>
 8005796:	bf00      	nop
 8005798:	30000000 	.word	0x30000000
 800579c:	2000a8d8 	.word	0x2000a8d8
 80057a0:	0804c4cb 	.word	0x0804c4cb
 80057a4:	200007e0 	.word	0x200007e0
 80057a8:	0804c4e6 	.word	0x0804c4e6
 80057ac:	0804c529 	.word	0x0804c529
 80057b0:	20040000 	.word	0x20040000
 80057b4:	0804c568 	.word	0x0804c568
 80057b8:	2000a11c 	.word	0x2000a11c
 80057bc:	2000a130 	.word	0x2000a130
 80057c0:	2000a958 	.word	0x2000a958
 80057c4:	0804c590 	.word	0x0804c590
 80057c8:	200007e8 	.word	0x200007e8
 80057cc:	2003c003 	.word	0x2003c003
 80057d0:	0804c5a9 	.word	0x0804c5a9
 80057d4:	0804bf6d 	.word	0x0804bf6d
 80057d8:	0804c0c9 	.word	0x0804c0c9
 80057dc:	0804c5b9 	.word	0x0804c5b9
 80057e0:	0804c5fd 	.word	0x0804c5fd
 80057e4:	2000a988 	.word	0x2000a988
 80057e8:	2000a910 	.word	0x2000a910
 80057ec:	e0001000 	.word	0xe0001000
          while ((*pr == 0xDEDEDEDE) && ((uint32_t)pr < cstack)) {
 80057f0:	42b2      	cmp	r2, r6
 80057f2:	d205      	bcs.n	8005800 <aiSystemPerformanceProcess+0x2a4>
            pr++;
 80057f4:	3204      	adds	r2, #4
          while ((*pr == 0xDEDEDEDE) && ((uint32_t)pr < cstack)) {
 80057f6:	6810      	ldr	r0, [r2, #0]
 80057f8:	1ad5      	subs	r5, r2, r3
 80057fa:	f1b0 3fde 	cmp.w	r0, #3739147998	; 0xdededede
 80057fe:	d0f7      	beq.n	80057f0 <aiSystemPerformanceProcess+0x294>
          susage = rstack - susage;
 8005800:	1b4b      	subs	r3, r1, r5
   susage = 0UL;
 8005802:	9307      	str	r3, [sp, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	f38b 8810 	msr	PRIMASK, fp
    printf("\r\n");
 8005808:	488b      	ldr	r0, [pc, #556]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
    uint64_t ms = (clks * 1000) / fcpu;
 800580a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    printf("\r\n");
 800580e:	f000 ff89 	bl	8006724 <puts>
    tcumul /= (uint64_t)iter;
 8005812:	9b02      	ldr	r3, [sp, #8]
    uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005814:	f8df a270 	ldr.w	sl, [pc, #624]	; 8005a88 <aiSystemPerformanceProcess+0x52c>
    tcumul /= (uint64_t)iter;
 8005818:	4619      	mov	r1, r3
 800581a:	17da      	asrs	r2, r3, #31
 800581c:	4613      	mov	r3, r2
 800581e:	460a      	mov	r2, r1
 8005820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005824:	f7fd feb6 	bl	8003594 <__aeabi_uldivmod>
 8005828:	4606      	mov	r6, r0
 800582a:	4688      	mov	r8, r1
    return HAL_RCC_GetHCLKFreq();
 800582c:	f7fe fd1c 	bl	8004268 <HAL_RCC_GetHCLKFreq>
    uint64_t s  = clks / fcpu;
 8005830:	2300      	movs	r3, #0
    return HAL_RCC_GetHCLKFreq();
 8005832:	4605      	mov	r5, r0
    uint64_t s  = clks / fcpu;
 8005834:	4602      	mov	r2, r0
 8005836:	4641      	mov	r1, r8
 8005838:	4630      	mov	r0, r6
 800583a:	f7fd feab 	bl	8003594 <__aeabi_uldivmod>
 800583e:	4683      	mov	fp, r0
 8005840:	4689      	mov	r9, r1
    uint64_t ms = (clks * 1000) / fcpu;
 8005842:	fba6 0107 	umull	r0, r1, r6, r7
 8005846:	462a      	mov	r2, r5
 8005848:	2300      	movs	r3, #0
 800584a:	fb07 1108 	mla	r1, r7, r8, r1
 800584e:	f7fd fea1 	bl	8003594 <__aeabi_uldivmod>
    ms -= (s * 1000);
 8005852:	fbab 2307 	umull	r2, r3, fp, r7
 8005856:	1a82      	subs	r2, r0, r2
 8005858:	fb07 3309 	mla	r3, r7, r9, r3
 800585c:	eb61 0303 	sbc.w	r3, r1, r3
    uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005860:	fba6 010a 	umull	r0, r1, r6, sl
    ms -= (s * 1000);
 8005864:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005868:	fb0a 1108 	mla	r1, sl, r8, r1
 800586c:	462a      	mov	r2, r5
 800586e:	2300      	movs	r3, #0
 8005870:	f7fd fe90 	bl	8003594 <__aeabi_uldivmod>
    us -= (ms * 1000 + s * 1000000);
 8005874:	fbab 230a 	umull	r2, r3, fp, sl
 8005878:	1a82      	subs	r2, r0, r2
 800587a:	fb0a 3309 	mla	r3, sl, r9, r3
    printf("Results for \"%s\", %d inferences @%ldMHz/%ldMHz (complexity: %lu MACC)\r\n",
 800587e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8005a8c <aiSystemPerformanceProcess+0x530>
 8005882:	eb61 0303 	sbc.w	r3, r1, r3
 8005886:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800588a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800588e:	910b      	str	r1, [sp, #44]	; 0x2c
            HAL_RCC_GetSysClockFreq() / 1000000,
 8005890:	f7fe fc1e 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8005894:	900a      	str	r0, [sp, #40]	; 0x28
            HAL_RCC_GetHCLKFreq() / 1000000,
 8005896:	f7fe fce7 	bl	8004268 <HAL_RCC_GetHCLKFreq>
    printf("Results for \"%s\", %d inferences @%ldMHz/%ldMHz (complexity: %lu MACC)\r\n",
 800589a:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 800589e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a0:	9201      	str	r2, [sp, #4]
 80058a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058a4:	9a02      	ldr	r2, [sp, #8]
 80058a6:	fbb0 f0fa 	udiv	r0, r0, sl
 80058aa:	fbb3 f3fa 	udiv	r3, r3, sl
 80058ae:	9000      	str	r0, [sp, #0]
    printf(" CPU Workload : %d%c\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80058b0:	f04f 0a64 	mov.w	sl, #100	; 0x64
    printf("Results for \"%s\", %d inferences @%ldMHz/%ldMHz (complexity: %lu MACC)\r\n",
 80058b4:	4861      	ldr	r0, [pc, #388]	; (8005a3c <aiSystemPerformanceProcess+0x4e0>)
 80058b6:	f000 fead 	bl	8006614 <iprintf>
    us -= (ms * 1000 + s * 1000000);
 80058ba:	9b04      	ldr	r3, [sp, #16]
    printf(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 80058bc:	9908      	ldr	r1, [sp, #32]
    us -= (ms * 1000 + s * 1000000);
 80058be:	fba3 2307 	umull	r2, r3, r3, r7
    printf(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 80058c2:	9b04      	ldr	r3, [sp, #16]
 80058c4:	485e      	ldr	r0, [pc, #376]	; (8005a40 <aiSystemPerformanceProcess+0x4e4>)
 80058c6:	1a8a      	subs	r2, r1, r2
 80058c8:	fb07 310b 	mla	r1, r7, fp, r3
 80058cc:	f000 fea2 	bl	8006614 <iprintf>
    printf(" CPU cycles   : %lu -%lu/+%lu (average,-/+)\r\n",
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	9a06      	ldr	r2, [sp, #24]
 80058d4:	4631      	mov	r1, r6
 80058d6:	1b9b      	subs	r3, r3, r6
 80058d8:	485a      	ldr	r0, [pc, #360]	; (8005a44 <aiSystemPerformanceProcess+0x4e8>)
 80058da:	1ab2      	subs	r2, r6, r2
    printf(" CPU Workload : %d%c\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80058dc:	fba6 670a 	umull	r6, r7, r6, sl
    printf(" CPU cycles   : %lu -%lu/+%lu (average,-/+)\r\n",
 80058e0:	f000 fe98 	bl	8006614 <iprintf>
    printf(" CPU Workload : %d%c\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80058e4:	2300      	movs	r3, #0
 80058e6:	fb0a 7708 	mla	r7, sl, r8, r7
 80058ea:	462a      	mov	r2, r5
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fd fe50 	bl	8003594 <__aeabi_uldivmod>
 80058f4:	2225      	movs	r2, #37	; 0x25
 80058f6:	4601      	mov	r1, r0
 80058f8:	4853      	ldr	r0, [pc, #332]	; (8005a48 <aiSystemPerformanceProcess+0x4ec>)
 80058fa:	f000 fe8b 	bl	8006614 <iprintf>
    cmacc = (uint32_t)((tcumul * 100)/ net_ctx[idx].report.n_macc);
 80058fe:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8005902:	2300      	movs	r3, #0
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f7fd fe44 	bl	8003594 <__aeabi_uldivmod>
    printf(" cycles/MACC  : %lu.%02lu (average for all layers)\r\n",
 800590c:	fbb0 f1fa 	udiv	r1, r0, sl
 8005910:	fb0a 0211 	mls	r2, sl, r1, r0
 8005914:	484d      	ldr	r0, [pc, #308]	; (8005a4c <aiSystemPerformanceProcess+0x4f0>)
 8005916:	f000 fe7d 	bl	8006614 <iprintf>
    if (stack_mon)
 800591a:	2c00      	cmp	r4, #0
 800591c:	d044      	beq.n	80059a8 <aiSystemPerformanceProcess+0x44c>
      printf(" used stack   : %ld bytes\r\n", susage);
 800591e:	9907      	ldr	r1, [sp, #28]
 8005920:	484b      	ldr	r0, [pc, #300]	; (8005a50 <aiSystemPerformanceProcess+0x4f4>)
 8005922:	f000 fe77 	bl	8006614 <iprintf>
    printf(" used heap    : %ld:%ld %ld:%ld (req:allocated,req:released) cfg=%ld\r\n",
 8005926:	494b      	ldr	r1, [pc, #300]	; (8005a54 <aiSystemPerformanceProcess+0x4f8>)
 8005928:	484b      	ldr	r0, [pc, #300]	; (8005a58 <aiSystemPerformanceProcess+0x4fc>)
            (ia_malloc.cfg & (3 << 1)) >> 1);
 800592a:	680b      	ldr	r3, [r1, #0]
    printf(" used heap    : %ld:%ld %ld:%ld (req:allocated,req:released) cfg=%ld\r\n",
 800592c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	688b      	ldr	r3, [r1, #8]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	690b      	ldr	r3, [r1, #16]
 8005938:	684a      	ldr	r2, [r1, #4]
 800593a:	68c9      	ldr	r1, [r1, #12]
 800593c:	f000 fe6a 	bl	8006614 <iprintf>
            r = aiTestConsole();
 8005940:	f7ff fb5c 	bl	8004ffc <aiTestConsole>
            if (r == CONS_EVT_UNDEFINED) {
 8005944:	2864      	cmp	r0, #100	; 0x64
 8005946:	f43f ae10 	beq.w	800556a <aiSystemPerformanceProcess+0xe>
            } else if (r == CONS_EVT_HELP) {
 800594a:	2803      	cmp	r0, #3
 800594c:	d120      	bne.n	8005990 <aiSystemPerformanceProcess+0x434>
                printf("\r\n");
 800594e:	483a      	ldr	r0, [pc, #232]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
 8005950:	f000 fee8 	bl	8006724 <puts>
                printf("Possible key for the interactive console:\r\n");
 8005954:	4841      	ldr	r0, [pc, #260]	; (8005a5c <aiSystemPerformanceProcess+0x500>)
 8005956:	f000 fee5 	bl	8006724 <puts>
                printf("  [q,Q]      quit the application\r\n");
 800595a:	4841      	ldr	r0, [pc, #260]	; (8005a60 <aiSystemPerformanceProcess+0x504>)
 800595c:	f000 fee2 	bl	8006724 <puts>
                printf("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8005960:	4840      	ldr	r0, [pc, #256]	; (8005a64 <aiSystemPerformanceProcess+0x508>)
 8005962:	f000 fedf 	bl	8006724 <puts>
                printf("  [p,P]      pause\r\n");
 8005966:	4840      	ldr	r0, [pc, #256]	; (8005a68 <aiSystemPerformanceProcess+0x50c>)
 8005968:	f000 fedc 	bl	8006724 <puts>
                printf("  [h,H,?]    this information\r\n");
 800596c:	483f      	ldr	r0, [pc, #252]	; (8005a6c <aiSystemPerformanceProcess+0x510>)
 800596e:	f000 fed9 	bl	8006724 <puts>
                printf("   xx        continue immediately\r\n");
 8005972:	483f      	ldr	r0, [pc, #252]	; (8005a70 <aiSystemPerformanceProcess+0x514>)
 8005974:	f000 fed6 	bl	8006724 <puts>
                printf("\r\n");
 8005978:	482f      	ldr	r0, [pc, #188]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
 800597a:	f000 fed3 	bl	8006724 <puts>
                printf("Press any key to continue..\r\n");
 800597e:	483d      	ldr	r0, [pc, #244]	; (8005a74 <aiSystemPerformanceProcess+0x518>)
 8005980:	f000 fed0 	bl	8006724 <puts>
                while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8005984:	f7ff fb3a 	bl	8004ffc <aiTestConsole>
 8005988:	b190      	cbz	r0, 80059b0 <aiSystemPerformanceProcess+0x454>
                if (r == CONS_EVT_UNDEFINED)
 800598a:	2864      	cmp	r0, #100	; 0x64
 800598c:	f43f aded 	beq.w	800556a <aiSystemPerformanceProcess+0xe>
            if (r == CONS_EVT_PROF) {
 8005990:	2805      	cmp	r0, #5
 8005992:	d112      	bne.n	80059ba <aiSystemPerformanceProcess+0x45e>
                profiling_mode = true;
 8005994:	2201      	movs	r2, #1
 8005996:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <aiSystemPerformanceProcess+0x51c>)
 8005998:	701a      	strb	r2, [r3, #0]
                profiling_factor *= 2;
 800599a:	4a38      	ldr	r2, [pc, #224]	; (8005a7c <aiSystemPerformanceProcess+0x520>)
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e5e2      	b.n	800556a <aiSystemPerformanceProcess+0xe>
   susage = 0UL;
 80059a4:	9407      	str	r4, [sp, #28]
 80059a6:	e72d      	b.n	8005804 <aiSystemPerformanceProcess+0x2a8>
      printf(" used stack   : NOT CALCULATED\r\n");
 80059a8:	4835      	ldr	r0, [pc, #212]	; (8005a80 <aiSystemPerformanceProcess+0x524>)
 80059aa:	f000 febb 	bl	8006724 <puts>
 80059ae:	e7ba      	b.n	8005926 <aiSystemPerformanceProcess+0x3ca>
                    HAL_Delay(1000);
 80059b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059b4:	f7fd fffc 	bl	80039b0 <HAL_Delay>
 80059b8:	e7e4      	b.n	8005984 <aiSystemPerformanceProcess+0x428>
            if (r == CONS_EVT_RESTART) {
 80059ba:	2802      	cmp	r0, #2
 80059bc:	d10d      	bne.n	80059da <aiSystemPerformanceProcess+0x47e>
                profiling_mode = false;
 80059be:	2200      	movs	r2, #0
 80059c0:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <aiSystemPerformanceProcess+0x51c>)
                printf("\r\n");
 80059c2:	481d      	ldr	r0, [pc, #116]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
                profiling_mode = false;
 80059c4:	701a      	strb	r2, [r3, #0]
                profiling_factor = 5;
 80059c6:	2205      	movs	r2, #5
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <aiSystemPerformanceProcess+0x520>)
 80059ca:	601a      	str	r2, [r3, #0]
                printf("\r\n");
 80059cc:	f000 feaa 	bl	8006724 <puts>
                aiDeInit();
 80059d0:	f7ff fb76 	bl	80050c0 <aiDeInit>
                aiSystemPerformanceInit();
 80059d4:	f7ff fbae 	bl	8005134 <aiSystemPerformanceInit>
 80059d8:	e5c7      	b.n	800556a <aiSystemPerformanceProcess+0xe>
            if (r == CONS_EVT_QUIT) {
 80059da:	2801      	cmp	r0, #1
 80059dc:	d115      	bne.n	8005a0a <aiSystemPerformanceProcess+0x4ae>
                profiling_mode = false;
 80059de:	2200      	movs	r2, #0
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <aiSystemPerformanceProcess+0x51c>)
                printf("\r\n");
 80059e2:	4815      	ldr	r0, [pc, #84]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
                profiling_mode = false;
 80059e4:	701a      	strb	r2, [r3, #0]
                printf("\r\n");
 80059e6:	f000 fe9d 	bl	8006724 <puts>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80059ee:	b672      	cpsid	i
                aiDeInit();
 80059f0:	f7ff fb66 	bl	80050c0 <aiDeInit>
                printf("\r\n");
 80059f4:	4810      	ldr	r0, [pc, #64]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
 80059f6:	f000 fe95 	bl	8006724 <puts>
                printf("Board should be reseted...\r\n");
 80059fa:	4822      	ldr	r0, [pc, #136]	; (8005a84 <aiSystemPerformanceProcess+0x528>)
 80059fc:	f000 fe92 	bl	8006724 <puts>
                    HAL_Delay(1000);
 8005a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a04:	f7fd ffd4 	bl	80039b0 <HAL_Delay>
 8005a08:	e7fa      	b.n	8005a00 <aiSystemPerformanceProcess+0x4a4>
            if (r == CONS_EVT_PAUSE) {
 8005a0a:	2804      	cmp	r0, #4
 8005a0c:	d10f      	bne.n	8005a2e <aiSystemPerformanceProcess+0x4d2>
                printf("\r\n");
 8005a0e:	480a      	ldr	r0, [pc, #40]	; (8005a38 <aiSystemPerformanceProcess+0x4dc>)
 8005a10:	f000 fe88 	bl	8006724 <puts>
                printf("Press any key to continue..\r\n");
 8005a14:	4817      	ldr	r0, [pc, #92]	; (8005a74 <aiSystemPerformanceProcess+0x518>)
 8005a16:	f000 fe85 	bl	8006724 <puts>
                while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8005a1a:	f7ff faef 	bl	8004ffc <aiTestConsole>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f47f ada3 	bne.w	800556a <aiSystemPerformanceProcess+0xe>
                    HAL_Delay(1000);
 8005a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a28:	f7fd ffc2 	bl	80039b0 <HAL_Delay>
 8005a2c:	e7f5      	b.n	8005a1a <aiSystemPerformanceProcess+0x4be>
    } while (r==0);
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f43f ad9b 	beq.w	800556a <aiSystemPerformanceProcess+0xe>
 8005a34:	e5a1      	b.n	800557a <aiSystemPerformanceProcess+0x1e>
 8005a36:	bf00      	nop
 8005a38:	0804c0c9 	.word	0x0804c0c9
 8005a3c:	0804c621 	.word	0x0804c621
 8005a40:	0804c669 	.word	0x0804c669
 8005a44:	0804c690 	.word	0x0804c690
 8005a48:	0804c6be 	.word	0x0804c6be
 8005a4c:	0804c6d5 	.word	0x0804c6d5
 8005a50:	0804c70a 	.word	0x0804c70a
 8005a54:	2000a11c 	.word	0x2000a11c
 8005a58:	0804c746 	.word	0x0804c746
 8005a5c:	0804c78d 	.word	0x0804c78d
 8005a60:	0804c7b8 	.word	0x0804c7b8
 8005a64:	0804c7db 	.word	0x0804c7db
 8005a68:	0804c80b 	.word	0x0804c80b
 8005a6c:	0804c81f 	.word	0x0804c81f
 8005a70:	0804c83e 	.word	0x0804c83e
 8005a74:	0804c861 	.word	0x0804c861
 8005a78:	2000a988 	.word	0x2000a988
 8005a7c:	200007e0 	.word	0x200007e0
 8005a80:	0804c726 	.word	0x0804c726
 8005a84:	0804c87e 	.word	0x0804c87e
 8005a88:	000f4240 	.word	0x000f4240
 8005a8c:	2000a8d8 	.word	0x2000a8d8

08005a90 <ai_mnetwork_handle>:
    return false;
}

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <ai_mnetwork_handle+0x18>)
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8005a92:	b120      	cbz	r0, 8005a9e <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8005a94:	4298      	cmp	r0, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	4618      	moveq	r0, r3
 8005a9a:	2000      	movne	r0, #0
 8005a9c:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8005a9e:	681a      	ldr	r2, [r3, #0]
            return &gnetworks[i];
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	bf08      	it	eq
 8005aa4:	4618      	moveq	r0, r3
}
 8005aa6:	4770      	bx	lr
 8005aa8:	2000a98c 	.word	0x2000a98c

08005aac <ai_mnetwork_is_valid.isra.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8005aac:	b570      	push	{r4, r5, r6, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8005aae:	4604      	mov	r4, r0
 8005ab0:	b190      	cbz	r0, 8005ad8 <ai_mnetwork_is_valid.isra.0+0x2c>
 8005ab2:	680d      	ldr	r5, [r1, #0]
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f7fd f870 	bl	8002b9a <strlen>
 8005aba:	4606      	mov	r6, r0
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7fd f86c 	bl	8002b9a <strlen>
 8005ac2:	4286      	cmp	r6, r0
 8005ac4:	d108      	bne.n	8005ad8 <ai_mnetwork_is_valid.isra.0+0x2c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fee7 	bl	800689e <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8005ad0:	fab0 f080 	clz	r0, r0
 8005ad4:	0940      	lsrs	r0, r0, #5
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8005ad8:	2000      	movs	r0, #0
}
 8005ada:	bd70      	pop	{r4, r5, r6, pc}

08005adc <MX_X_CUBE_AI_Init>:
{
 8005adc:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8005ade:	f000 fa0b 	bl	8005ef8 <MX_USART2_UART_Init>
}
 8005ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 8005ae6:	f7ff bb25 	b.w	8005134 <aiSystemPerformanceInit>

08005aea <MX_X_CUBE_AI_Process>:
{
 8005aea:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 8005aec:	f7ff fd36 	bl	800555c <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 8005af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8005af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 8005af8:	f7fd bf5a 	b.w	80039b0 <HAL_Delay>

08005afc <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8005afc:	b510      	push	{r4, lr}
 8005afe:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8005b00:	4905      	ldr	r1, [pc, #20]	; (8005b18 <ai_mnetwork_find+0x1c>)
 8005b02:	f7ff ffd3 	bl	8005aac <ai_mnetwork_is_valid.isra.0>
 8005b06:	b920      	cbnz	r0, 8005b12 <ai_mnetwork_find+0x16>
            return entry->name;
        else {
            if (!idx--)
 8005b08:	2c00      	cmp	r4, #0
                return entry->name;
        }
    }
    return NULL;
 8005b0a:	4804      	ldr	r0, [pc, #16]	; (8005b1c <ai_mnetwork_find+0x20>)
 8005b0c:	bf18      	it	ne
 8005b0e:	2000      	movne	r0, #0
 8005b10:	bd10      	pop	{r4, pc}
                return entry->name;
 8005b12:	4802      	ldr	r0, [pc, #8]	; (8005b1c <ai_mnetwork_find+0x20>)
}
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	0804c89c 	.word	0x0804c89c
 8005b1c:	0804bebc 	.word	0x0804bebc

08005b20 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8005b24:	2000      	movs	r0, #0
{
 8005b26:	460d      	mov	r5, r1
 8005b28:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8005b2a:	f7ff ffb1 	bl	8005a90 <ai_mnetwork_handle>

    if (!inst) {
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b1c8      	cbz	r0, 8005b66 <ai_mnetwork_create+0x46>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8005b32:	4911      	ldr	r1, [pc, #68]	; (8005b78 <ai_mnetwork_create+0x58>)
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff ffb9 	bl	8005aac <ai_mnetwork_is_valid.isra.0>
 8005b3a:	b1d0      	cbz	r0, 8005b72 <ai_mnetwork_create+0x52>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f7ff f954 	bl	8004dec <ai_cnn_create>
 8005b44:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8005b48:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8005b4a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8005b4e:	d104      	bne.n	8005b5a <ai_mnetwork_create+0x3a>
        inst->entry = found;
 8005b50:	4909      	ldr	r1, [pc, #36]	; (8005b78 <ai_mnetwork_create+0x58>)
 8005b52:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8005b54:	6829      	ldr	r1, [r5, #0]
 8005b56:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8005b58:	602c      	str	r4, [r5, #0]
    }

    return err;
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f362 0007 	bfi	r0, r2, #0, #8
        return err;
 8005b60:	f363 201f 	bfi	r0, r3, #8, #24
 8005b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err;
 8005b66:	2000      	movs	r0, #0
 8005b68:	2331      	movs	r3, #49	; 0x31
        return err;
 8005b6a:	f363 0007 	bfi	r0, r3, #0, #8
 8005b6e:	2310      	movs	r3, #16
 8005b70:	e7f6      	b.n	8005b60 <ai_mnetwork_create+0x40>
 8005b72:	2000      	movs	r0, #0
 8005b74:	2314      	movs	r3, #20
 8005b76:	e7f8      	b.n	8005b6a <ai_mnetwork_create+0x4a>
 8005b78:	0804c89c 	.word	0x0804c89c

08005b7c <ai_mnetwork_destroy>:
}

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005b80:	f7ff ff86 	bl	8005a90 <ai_mnetwork_handle>
    if (inn) {
 8005b84:	4605      	mov	r5, r0
 8005b86:	b158      	cbz	r0, 8005ba0 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8005b88:	6803      	ldr	r3, [r0, #0]
 8005b8a:	6840      	ldr	r0, [r0, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	4798      	blx	r3
        if (hdl != inn->handle) {
 8005b90:	686b      	ldr	r3, [r5, #4]
 8005b92:	4283      	cmp	r3, r0
 8005b94:	d004      	beq.n	8005ba0 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8005b96:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <ai_mnetwork_destroy+0x28>)
 8005b98:	2400      	movs	r4, #0
 8005b9a:	429d      	cmp	r5, r3
            gnetworks[i].entry = NULL;
 8005b9c:	bf08      	it	eq
 8005b9e:	602c      	streq	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	2000a98c 	.word	0x2000a98c

08005ba8 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8005ba8:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005baa:	f7ff ff71 	bl	8005a90 <ai_mnetwork_handle>
    if (inn)
 8005bae:	b128      	cbz	r0, 8005bbc <ai_mnetwork_get_info+0x14>
        return inn->entry->ai_get_info(inn->handle, report);
 8005bb0:	6802      	ldr	r2, [r0, #0]
 8005bb2:	6840      	ldr	r0, [r0, #4]
 8005bb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    else
        return false;
}
 8005bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_info(inn->handle, report);
 8005bba:	4710      	bx	r2
}
 8005bbc:	bd10      	pop	{r4, pc}

08005bbe <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8005bbe:	b508      	push	{r3, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005bc0:	f7ff ff66 	bl	8005a90 <ai_mnetwork_handle>
    if (inn)
 8005bc4:	b120      	cbz	r0, 8005bd0 <ai_mnetwork_get_error+0x12>
        return inn->entry->ai_get_error(inn->handle);
 8005bc6:	6803      	ldr	r3, [r0, #0]
 8005bc8:	6840      	ldr	r0, [r0, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	4798      	blx	r3
 8005bce:	bd08      	pop	{r3, pc}
    else
        return err;
 8005bd0:	2314      	movs	r3, #20
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f363 0007 	bfi	r0, r3, #0, #8
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f363 201f 	bfi	r0, r3, #8, #24
}
 8005bde:	bd08      	pop	{r3, pc}

08005be0 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b089      	sub	sp, #36	; 0x24
 8005be4:	460f      	mov	r7, r1
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005be6:	f7ff ff53 	bl	8005a90 <ai_mnetwork_handle>
    if (inn) {
 8005bea:	4606      	mov	r6, r0
 8005bec:	b340      	cbz	r0, 8005c40 <ai_mnetwork_init+0x60>
        par = inn->entry->params;
 8005bee:	f8d0 e000 	ldr.w	lr, [r0]
 8005bf2:	466c      	mov	r4, sp
 8005bf4:	f10e 0504 	add.w	r5, lr, #4
 8005bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8005c04:	8a7b      	ldrh	r3, [r7, #18]
 8005c06:	466c      	mov	r4, sp
 8005c08:	b193      	cbz	r3, 8005c30 <ai_mnetwork_init+0x50>
            par.activations = params->activations;
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	ad08      	add	r5, sp, #32
 8005c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c12:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
        else
            par.activations.data = params->activations.data;
        if (params->params.n_batches)
 8005c16:	887b      	ldrh	r3, [r7, #2]
 8005c18:	b16b      	cbz	r3, 8005c36 <ai_mnetwork_init+0x56>
            par.params = params->params;
 8005c1a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
        return inn->entry->ai_init(inn->handle, &par);
 8005c22:	6833      	ldr	r3, [r6, #0]
 8005c24:	4621      	mov	r1, r4
 8005c26:	6870      	ldr	r0, [r6, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	4798      	blx	r3
    }
    else
        return false;
}
 8005c2c:	b009      	add	sp, #36	; 0x24
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            par.activations.data = params->activations.data;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	9307      	str	r3, [sp, #28]
 8005c34:	e7ef      	b.n	8005c16 <ai_mnetwork_init+0x36>
            par.params.data = inn->entry->ai_data_weights_get_default();
 8005c36:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 8005c3a:	4798      	blx	r3
 8005c3c:	9003      	str	r0, [sp, #12]
 8005c3e:	e7f0      	b.n	8005c22 <ai_mnetwork_init+0x42>
 8005c40:	e7f4      	b.n	8005c2c <ai_mnetwork_init+0x4c>

08005c42 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8005c42:	b570      	push	{r4, r5, r6, lr}
 8005c44:	4615      	mov	r5, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005c46:	f7ff ff23 	bl	8005a90 <ai_mnetwork_handle>
    if (inn)
 8005c4a:	b138      	cbz	r0, 8005c5c <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 8005c4c:	6802      	ldr	r2, [r0, #0]
 8005c4e:	6840      	ldr	r0, [r0, #4]
 8005c50:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005c52:	462a      	mov	r2, r5
 8005c54:	4623      	mov	r3, r4
    else
        return 0;
}
 8005c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8005c5a:	4718      	bx	r3
}
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c64:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c66:	2230      	movs	r2, #48	; 0x30
 8005c68:	2100      	movs	r1, #0
 8005c6a:	a808      	add	r0, sp, #32
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c6c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c6e:	f000 fc1d 	bl	80064ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c72:	2214      	movs	r2, #20
 8005c74:	2100      	movs	r1, #0
 8005c76:	a803      	add	r0, sp, #12
 8005c78:	f000 fc18 	bl	80064ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4632      	mov	r2, r6
 8005c80:	a814      	add	r0, sp, #80	; 0x50
 8005c82:	f000 fc13 	bl	80064ac <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005c88:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c8a:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c9e:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <SystemClock_Config+0xa4>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005caa:	9408      	str	r4, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cb0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005cb2:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005cb8:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005cba:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005cbc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005cbe:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005cc0:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005cc2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005cc8:	23d8      	movs	r3, #216	; 0xd8
 8005cca:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ccc:	f7fe f86c 	bl	8003da8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005cd0:	f7fe f832 	bl	8003d38 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cd4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005cd6:	2107      	movs	r1, #7
 8005cd8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cda:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005cdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ce0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ce2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ce8:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005cea:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005cec:	f7fe fa1e 	bl	800412c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cf0:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005cf2:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005cf4:	9524      	str	r5, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cf6:	f7fe fadd 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005cfa:	b034      	add	sp, #208	; 0xd0
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800
 8005d04:	40007000 	.word	0x40007000

08005d08 <main>:
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08c      	sub	sp, #48	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d10:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005d14:	4b6e      	ldr	r3, [pc, #440]	; (8005ed0 <main+0x1c8>)
 8005d16:	2100      	movs	r1, #0
 8005d18:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d20:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005d2a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d30:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005d34:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005d38:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005d3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005d40:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005d44:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005d48:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8005d4c:	07a5      	lsls	r5, r4, #30
 8005d4e:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005d50:	ea02 0e06 	and.w	lr, r2, r6
 8005d54:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005d56:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005d58:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways-- != 0U);
 8005d5c:	3901      	subs	r1, #1
 8005d5e:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005d62:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8005d66:	1c4f      	adds	r7, r1, #1
 8005d68:	d1f6      	bne.n	8005d58 <main+0x50>
 8005d6a:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8005d6c:	f112 0f20 	cmn.w	r2, #32
 8005d70:	d1ee      	bne.n	8005d50 <main+0x48>
 8005d72:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d7c:	615a      	str	r2, [r3, #20]
 8005d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d82:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005d86:	f7fd fdeb 	bl	8003960 <HAL_Init>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8a:	2400      	movs	r4, #0
  SystemClock_Config();
 8005d8c:	f7ff ff68 	bl	8005c60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d90:	2214      	movs	r2, #20
 8005d92:	2100      	movs	r1, #0
 8005d94:	a807      	add	r0, sp, #28
 8005d96:	f000 fb89 	bl	80064ac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d9a:	4b4e      	ldr	r3, [pc, #312]	; (8005ed4 <main+0x1cc>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005d9c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005da0:	484d      	ldr	r0, [pc, #308]	; (8005ed8 <main+0x1d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005da4:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da6:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005da8:	2603      	movs	r6, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005daa:	f042 0204 	orr.w	r2, r2, #4
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
 8005db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db2:	f002 0204 	and.w	r2, r2, #4
 8005db6:	9201      	str	r2, [sp, #4]
 8005db8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8005dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd6:	f002 0201 	and.w	r2, r2, #1
 8005dda:	9203      	str	r2, [sp, #12]
 8005ddc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de0:	f042 0202 	orr.w	r2, r2, #2
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
 8005de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de8:	f002 0202 	and.w	r2, r2, #2
 8005dec:	9204      	str	r2, [sp, #16]
 8005dee:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
 8005df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfa:	f002 0208 	and.w	r2, r2, #8
 8005dfe:	9205      	str	r2, [sp, #20]
 8005e00:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005e0a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	9306      	str	r3, [sp, #24]
 8005e14:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005e16:	f7fd ff89 	bl	8003d2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2140      	movs	r1, #64	; 0x40
 8005e1e:	482f      	ldr	r0, [pc, #188]	; (8005edc <main+0x1d4>)
 8005e20:	f7fd ff84 	bl	8003d2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005e28:	a907      	add	r1, sp, #28
 8005e2a:	482d      	ldr	r0, [pc, #180]	; (8005ee0 <main+0x1d8>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005e2c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005e2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e30:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005e32:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005e34:	f7fd fe9c 	bl	8003b70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005e38:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e3c:	a907      	add	r1, sp, #28
 8005e3e:	4826      	ldr	r0, [pc, #152]	; (8005ed8 <main+0x1d0>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005e40:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e42:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e46:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e48:	f7fd fe92 	bl	8003b70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e50:	a907      	add	r1, sp, #28
 8005e52:	4825      	ldr	r0, [pc, #148]	; (8005ee8 <main+0x1e0>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005e54:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e56:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e58:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e5a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e5e:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e60:	f7fd fe86 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005e64:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005e66:	a907      	add	r1, sp, #28
 8005e68:	481c      	ldr	r0, [pc, #112]	; (8005edc <main+0x1d4>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005e6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e6c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e70:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005e72:	f7fd fe7d 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005e76:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005e78:	a907      	add	r1, sp, #28
 8005e7a:	4818      	ldr	r0, [pc, #96]	; (8005edc <main+0x1d4>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005e7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e7e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e80:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005e82:	f7fd fe75 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005e86:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e8a:	a907      	add	r1, sp, #28
 8005e8c:	4817      	ldr	r0, [pc, #92]	; (8005eec <main+0x1e4>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005e8e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e90:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e92:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e94:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e98:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9a:	f7fd fe69 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005ea2:	a907      	add	r1, sp, #28
 8005ea4:	4811      	ldr	r0, [pc, #68]	; (8005eec <main+0x1e4>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005ea6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ea8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005eac:	f7fd fe60 	bl	8003b70 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8005eb0:	480f      	ldr	r0, [pc, #60]	; (8005ef0 <main+0x1e8>)
 8005eb2:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <main+0x1ec>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8005eb4:	7104      	strb	r4, [r0, #4]
  hcrc.Instance = CRC;
 8005eb6:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8005eb8:	7144      	strb	r4, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8005eba:	6144      	str	r4, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8005ebc:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8005ebe:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005ec0:	f7fd fdfa 	bl	8003ab8 <HAL_CRC_Init>
  MX_X_CUBE_AI_Init();
 8005ec4:	f7ff fe0a 	bl	8005adc <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8005ec8:	f7ff fe0f 	bl	8005aea <MX_X_CUBE_AI_Process>
 8005ecc:	e7fc      	b.n	8005ec8 <main+0x1c0>
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40020400 	.word	0x40020400
 8005edc:	40021800 	.word	0x40021800
 8005ee0:	40020800 	.word	0x40020800
 8005ee4:	10110000 	.word	0x10110000
 8005ee8:	40020c00 	.word	0x40020c00
 8005eec:	40020000 	.word	0x40020000
 8005ef0:	2000a9c4 	.word	0x2000a9c4
 8005ef4:	40023000 	.word	0x40023000

08005ef8 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8005ef8:	4808      	ldr	r0, [pc, #32]	; (8005f1c <MX_USART2_UART_Init+0x24>)
  huart2.Init.BaudRate = 115200;
 8005efa:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <MX_USART2_UART_Init+0x28>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f00:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8005f02:	e880 1008 	stmia.w	r0, {r3, ip}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f06:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f08:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f0a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f0c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f0e:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f10:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f12:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f14:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f16:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f18:	f7fe beac 	b.w	8004c74 <HAL_UART_Init>
 8005f1c:	2000a9e8 	.word	0x2000a9e8
 8005f20:	40004400 	.word	0x40004400

08005f24 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f24:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <HAL_MspInit+0x2c>)
{
 8005f26:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8005f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f32:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005f36:	9200      	str	r2, [sp, #0]
 8005f38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f40:	645a      	str	r2, [r3, #68]	; 0x44
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f4c:	b002      	add	sp, #8
 8005f4e:	4770      	bx	lr
 8005f50:	40023800 	.word	0x40023800

08005f54 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8005f54:	6802      	ldr	r2, [r0, #0]
{
 8005f56:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <HAL_CRC_MspInit+0x28>)
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d10b      	bne.n	8005f76 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005f5e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005f76:	b002      	add	sp, #8
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40023000 	.word	0x40023000

08005f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f80:	b510      	push	{r4, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f86:	2214      	movs	r2, #20
 8005f88:	2100      	movs	r1, #0
 8005f8a:	a803      	add	r0, sp, #12
 8005f8c:	f000 fa8e 	bl	80064ac <memset>
  if(huart->Instance==USART2)
 8005f90:	6822      	ldr	r2, [r4, #0]
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <HAL_UART_MspInit+0x5c>)
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d11f      	bne.n	8005fd8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f98:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f9c:	a903      	add	r1, sp, #12
 8005f9e:	4810      	ldr	r0, [pc, #64]	; (8005fe0 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40
 8005fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005faa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005fae:	9201      	str	r2, [sp, #4]
 8005fb0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fd0:	2307      	movs	r3, #7
 8005fd2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd4:	f7fd fdcc 	bl	8003b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005fd8:	b008      	add	sp, #32
 8005fda:	bd10      	pop	{r4, pc}
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	40020000 	.word	0x40020000

08005fe4 <NMI_Handler>:
 8005fe4:	4770      	bx	lr

08005fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fe6:	e7fe      	b.n	8005fe6 <HardFault_Handler>

08005fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fe8:	e7fe      	b.n	8005fe8 <MemManage_Handler>

08005fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fea:	e7fe      	b.n	8005fea <BusFault_Handler>

08005fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fec:	e7fe      	b.n	8005fec <UsageFault_Handler>

08005fee <SVC_Handler>:
 8005fee:	4770      	bx	lr

08005ff0 <DebugMon_Handler>:
 8005ff0:	4770      	bx	lr

08005ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ff2:	4770      	bx	lr

08005ff4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ff4:	f7fd bcca 	b.w	800398c <HAL_IncTick>

08005ff8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ffe:	460c      	mov	r4, r1
 8006000:	1ba3      	subs	r3, r4, r6
 8006002:	429d      	cmp	r5, r3
 8006004:	dc01      	bgt.n	800600a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8006006:	4628      	mov	r0, r5
 8006008:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800600a:	f3af 8000 	nop.w
 800600e:	f804 0b01 	strb.w	r0, [r4], #1
 8006012:	e7f5      	b.n	8006000 <_read+0x8>

08006014 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006014:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <_sbrk+0x2c>)
{
 8006018:	4602      	mov	r2, r0
	if (heap_end == 0)
 800601a:	6819      	ldr	r1, [r3, #0]
 800601c:	b909      	cbnz	r1, 8006022 <_sbrk+0xe>
		heap_end = &end;
 800601e:	4909      	ldr	r1, [pc, #36]	; (8006044 <_sbrk+0x30>)
 8006020:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8006022:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006024:	4669      	mov	r1, sp
 8006026:	4402      	add	r2, r0
 8006028:	428a      	cmp	r2, r1
 800602a:	d906      	bls.n	800603a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800602c:	f000 f86c 	bl	8006108 <__errno>
 8006030:	230c      	movs	r3, #12
 8006032:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800603a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800603c:	bd08      	pop	{r3, pc}
 800603e:	bf00      	nop
 8006040:	2000a9b4 	.word	0x2000a9b4
 8006044:	2000aa6c 	.word	0x2000aa6c

08006048 <_close>:

int _close(int file)
{
	return -1;
}
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	4770      	bx	lr

0800604e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800604e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006052:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006054:	604b      	str	r3, [r1, #4]
}
 8006056:	4770      	bx	lr

08006058 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006058:	2001      	movs	r0, #1
 800605a:	4770      	bx	lr

0800605c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800605c:	2000      	movs	r0, #0
 800605e:	4770      	bx	lr

08006060 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006060:	490f      	ldr	r1, [pc, #60]	; (80060a0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006062:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006064:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <SystemInit+0x44>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800607a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006082:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006086:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006088:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <SystemInit+0x48>)
 800608a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006092:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006094:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800609a:	608b      	str	r3, [r1, #8]
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	e000ed00 	.word	0xe000ed00
 80060a4:	40023800 	.word	0x40023800
 80060a8:	24003010 	.word	0x24003010

080060ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80060ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80060b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80060b2:	e003      	b.n	80060bc <LoopCopyDataInit>

080060b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80060b4:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80060b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80060b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80060ba:	3104      	adds	r1, #4

080060bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80060bc:	480b      	ldr	r0, [pc, #44]	; (80060ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80060c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80060c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80060c4:	d3f6      	bcc.n	80060b4 <CopyDataInit>
  ldr  r2, =_sbss
 80060c6:	4a0b      	ldr	r2, [pc, #44]	; (80060f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80060c8:	e002      	b.n	80060d0 <LoopFillZerobss>

080060ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80060ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80060cc:	f842 3b04 	str.w	r3, [r2], #4

080060d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80060d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80060d4:	d3f9      	bcc.n	80060ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060d6:	f7ff ffc3 	bl	8006060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060da:	f000 f9a9 	bl	8006430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060de:	f7ff fe13 	bl	8005d08 <main>
  bx  lr    
 80060e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80060e4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80060e8:	0804c9f0 	.word	0x0804c9f0
  ldr  r0, =_sdata
 80060ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80060f0:	20000850 	.word	0x20000850
  ldr  r2, =_sbss
 80060f4:	20000850 	.word	0x20000850
  ldr  r3, = _ebss
 80060f8:	2000aa6c 	.word	0x2000aa6c

080060fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060fc:	e7fe      	b.n	80060fc <ADC_IRQHandler>

080060fe <__aeabi_memclr>:
 80060fe:	2200      	movs	r2, #0
 8006100:	f7fc bcfe 	b.w	8002b00 <__aeabi_memset>

08006104 <__aeabi_memcpy>:
 8006104:	f000 b9c7 	b.w	8006496 <memcpy>

08006108 <__errno>:
 8006108:	4b01      	ldr	r3, [pc, #4]	; (8006110 <__errno+0x8>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	200007e8 	.word	0x200007e8

08006114 <__sflush_r>:
 8006114:	898a      	ldrh	r2, [r1, #12]
 8006116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	0710      	lsls	r0, r2, #28
 800611e:	460c      	mov	r4, r1
 8006120:	d45a      	bmi.n	80061d8 <__sflush_r+0xc4>
 8006122:	684b      	ldr	r3, [r1, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	dc05      	bgt.n	8006134 <__sflush_r+0x20>
 8006128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	dc02      	bgt.n	8006134 <__sflush_r+0x20>
 800612e:	2000      	movs	r0, #0
 8006130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006136:	2e00      	cmp	r6, #0
 8006138:	d0f9      	beq.n	800612e <__sflush_r+0x1a>
 800613a:	2300      	movs	r3, #0
 800613c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006140:	682f      	ldr	r7, [r5, #0]
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	d033      	beq.n	80061ae <__sflush_r+0x9a>
 8006146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	075a      	lsls	r2, r3, #29
 800614c:	d505      	bpl.n	800615a <__sflush_r+0x46>
 800614e:	6863      	ldr	r3, [r4, #4]
 8006150:	1ac0      	subs	r0, r0, r3
 8006152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006154:	b10b      	cbz	r3, 800615a <__sflush_r+0x46>
 8006156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006158:	1ac0      	subs	r0, r0, r3
 800615a:	2300      	movs	r3, #0
 800615c:	4602      	mov	r2, r0
 800615e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006160:	6a21      	ldr	r1, [r4, #32]
 8006162:	4628      	mov	r0, r5
 8006164:	47b0      	blx	r6
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	d106      	bne.n	800617a <__sflush_r+0x66>
 800616c:	6829      	ldr	r1, [r5, #0]
 800616e:	291d      	cmp	r1, #29
 8006170:	d84b      	bhi.n	800620a <__sflush_r+0xf6>
 8006172:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <__sflush_r+0x10c>)
 8006174:	40ca      	lsrs	r2, r1
 8006176:	07d6      	lsls	r6, r2, #31
 8006178:	d547      	bpl.n	800620a <__sflush_r+0xf6>
 800617a:	2200      	movs	r2, #0
 800617c:	6062      	str	r2, [r4, #4]
 800617e:	04d9      	lsls	r1, r3, #19
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	6022      	str	r2, [r4, #0]
 8006184:	d504      	bpl.n	8006190 <__sflush_r+0x7c>
 8006186:	1c42      	adds	r2, r0, #1
 8006188:	d101      	bne.n	800618e <__sflush_r+0x7a>
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	b903      	cbnz	r3, 8006190 <__sflush_r+0x7c>
 800618e:	6560      	str	r0, [r4, #84]	; 0x54
 8006190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006192:	602f      	str	r7, [r5, #0]
 8006194:	2900      	cmp	r1, #0
 8006196:	d0ca      	beq.n	800612e <__sflush_r+0x1a>
 8006198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800619c:	4299      	cmp	r1, r3
 800619e:	d002      	beq.n	80061a6 <__sflush_r+0x92>
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f98b 	bl	80064bc <_free_r>
 80061a6:	2000      	movs	r0, #0
 80061a8:	6360      	str	r0, [r4, #52]	; 0x34
 80061aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ae:	6a21      	ldr	r1, [r4, #32]
 80061b0:	2301      	movs	r3, #1
 80061b2:	4628      	mov	r0, r5
 80061b4:	47b0      	blx	r6
 80061b6:	1c41      	adds	r1, r0, #1
 80061b8:	d1c6      	bne.n	8006148 <__sflush_r+0x34>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0c3      	beq.n	8006148 <__sflush_r+0x34>
 80061c0:	2b1d      	cmp	r3, #29
 80061c2:	d001      	beq.n	80061c8 <__sflush_r+0xb4>
 80061c4:	2b16      	cmp	r3, #22
 80061c6:	d101      	bne.n	80061cc <__sflush_r+0xb8>
 80061c8:	602f      	str	r7, [r5, #0]
 80061ca:	e7b0      	b.n	800612e <__sflush_r+0x1a>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d8:	690f      	ldr	r7, [r1, #16]
 80061da:	2f00      	cmp	r7, #0
 80061dc:	d0a7      	beq.n	800612e <__sflush_r+0x1a>
 80061de:	0793      	lsls	r3, r2, #30
 80061e0:	680e      	ldr	r6, [r1, #0]
 80061e2:	bf08      	it	eq
 80061e4:	694b      	ldreq	r3, [r1, #20]
 80061e6:	600f      	str	r7, [r1, #0]
 80061e8:	bf18      	it	ne
 80061ea:	2300      	movne	r3, #0
 80061ec:	eba6 0807 	sub.w	r8, r6, r7
 80061f0:	608b      	str	r3, [r1, #8]
 80061f2:	f1b8 0f00 	cmp.w	r8, #0
 80061f6:	dd9a      	ble.n	800612e <__sflush_r+0x1a>
 80061f8:	4643      	mov	r3, r8
 80061fa:	463a      	mov	r2, r7
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006200:	4628      	mov	r0, r5
 8006202:	47b0      	blx	r6
 8006204:	2800      	cmp	r0, #0
 8006206:	dc07      	bgt.n	8006218 <__sflush_r+0x104>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006218:	4407      	add	r7, r0
 800621a:	eba8 0800 	sub.w	r8, r8, r0
 800621e:	e7e8      	b.n	80061f2 <__sflush_r+0xde>
 8006220:	20400001 	.word	0x20400001

08006224 <_fflush_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	690b      	ldr	r3, [r1, #16]
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	b1db      	cbz	r3, 8006266 <_fflush_r+0x42>
 800622e:	b118      	cbz	r0, 8006238 <_fflush_r+0x14>
 8006230:	6983      	ldr	r3, [r0, #24]
 8006232:	b90b      	cbnz	r3, 8006238 <_fflush_r+0x14>
 8006234:	f000 f872 	bl	800631c <__sinit>
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <_fflush_r+0x48>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d109      	bne.n	8006252 <_fflush_r+0x2e>
 800623e:	686c      	ldr	r4, [r5, #4]
 8006240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006244:	b17b      	cbz	r3, 8006266 <_fflush_r+0x42>
 8006246:	4621      	mov	r1, r4
 8006248:	4628      	mov	r0, r5
 800624a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800624e:	f7ff bf61 	b.w	8006114 <__sflush_r>
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <_fflush_r+0x4c>)
 8006254:	429c      	cmp	r4, r3
 8006256:	d101      	bne.n	800625c <_fflush_r+0x38>
 8006258:	68ac      	ldr	r4, [r5, #8]
 800625a:	e7f1      	b.n	8006240 <_fflush_r+0x1c>
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <_fflush_r+0x50>)
 800625e:	429c      	cmp	r4, r3
 8006260:	bf08      	it	eq
 8006262:	68ec      	ldreq	r4, [r5, #12]
 8006264:	e7ec      	b.n	8006240 <_fflush_r+0x1c>
 8006266:	2000      	movs	r0, #0
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	0804c91c 	.word	0x0804c91c
 8006270:	0804c93c 	.word	0x0804c93c
 8006274:	0804c8fc 	.word	0x0804c8fc

08006278 <fflush>:
 8006278:	4601      	mov	r1, r0
 800627a:	b920      	cbnz	r0, 8006286 <fflush+0xe>
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <fflush+0x18>)
 800627e:	4905      	ldr	r1, [pc, #20]	; (8006294 <fflush+0x1c>)
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 b8b7 	b.w	80063f4 <_fwalk_reent>
 8006286:	4b04      	ldr	r3, [pc, #16]	; (8006298 <fflush+0x20>)
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	f7ff bfcb 	b.w	8006224 <_fflush_r>
 800628e:	bf00      	nop
 8006290:	0804c95c 	.word	0x0804c95c
 8006294:	08006225 	.word	0x08006225
 8006298:	200007e8 	.word	0x200007e8

0800629c <_cleanup_r>:
 800629c:	4901      	ldr	r1, [pc, #4]	; (80062a4 <_cleanup_r+0x8>)
 800629e:	f000 b8a9 	b.w	80063f4 <_fwalk_reent>
 80062a2:	bf00      	nop
 80062a4:	08006225 	.word	0x08006225

080062a8 <std.isra.0>:
 80062a8:	2300      	movs	r3, #0
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	6003      	str	r3, [r0, #0]
 80062b0:	6043      	str	r3, [r0, #4]
 80062b2:	6083      	str	r3, [r0, #8]
 80062b4:	8181      	strh	r1, [r0, #12]
 80062b6:	6643      	str	r3, [r0, #100]	; 0x64
 80062b8:	81c2      	strh	r2, [r0, #14]
 80062ba:	6103      	str	r3, [r0, #16]
 80062bc:	6143      	str	r3, [r0, #20]
 80062be:	6183      	str	r3, [r0, #24]
 80062c0:	4619      	mov	r1, r3
 80062c2:	2208      	movs	r2, #8
 80062c4:	305c      	adds	r0, #92	; 0x5c
 80062c6:	f000 f8f1 	bl	80064ac <memset>
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <std.isra.0+0x38>)
 80062cc:	6263      	str	r3, [r4, #36]	; 0x24
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <std.isra.0+0x3c>)
 80062d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <std.isra.0+0x40>)
 80062d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <std.isra.0+0x44>)
 80062d8:	6224      	str	r4, [r4, #32]
 80062da:	6323      	str	r3, [r4, #48]	; 0x30
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	08006819 	.word	0x08006819
 80062e4:	0800683b 	.word	0x0800683b
 80062e8:	08006873 	.word	0x08006873
 80062ec:	08006897 	.word	0x08006897

080062f0 <__sfmoreglue>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	1e4a      	subs	r2, r1, #1
 80062f4:	2568      	movs	r5, #104	; 0x68
 80062f6:	4355      	muls	r5, r2
 80062f8:	460e      	mov	r6, r1
 80062fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062fe:	f000 f92b 	bl	8006558 <_malloc_r>
 8006302:	4604      	mov	r4, r0
 8006304:	b140      	cbz	r0, 8006318 <__sfmoreglue+0x28>
 8006306:	2100      	movs	r1, #0
 8006308:	e880 0042 	stmia.w	r0, {r1, r6}
 800630c:	300c      	adds	r0, #12
 800630e:	60a0      	str	r0, [r4, #8]
 8006310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006314:	f000 f8ca 	bl	80064ac <memset>
 8006318:	4620      	mov	r0, r4
 800631a:	bd70      	pop	{r4, r5, r6, pc}

0800631c <__sinit>:
 800631c:	6983      	ldr	r3, [r0, #24]
 800631e:	b510      	push	{r4, lr}
 8006320:	4604      	mov	r4, r0
 8006322:	bb33      	cbnz	r3, 8006372 <__sinit+0x56>
 8006324:	6483      	str	r3, [r0, #72]	; 0x48
 8006326:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006328:	6503      	str	r3, [r0, #80]	; 0x50
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <__sinit+0x58>)
 800632c:	4a12      	ldr	r2, [pc, #72]	; (8006378 <__sinit+0x5c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6282      	str	r2, [r0, #40]	; 0x28
 8006332:	4298      	cmp	r0, r3
 8006334:	bf04      	itt	eq
 8006336:	2301      	moveq	r3, #1
 8006338:	6183      	streq	r3, [r0, #24]
 800633a:	f000 f81f 	bl	800637c <__sfp>
 800633e:	6060      	str	r0, [r4, #4]
 8006340:	4620      	mov	r0, r4
 8006342:	f000 f81b 	bl	800637c <__sfp>
 8006346:	60a0      	str	r0, [r4, #8]
 8006348:	4620      	mov	r0, r4
 800634a:	f000 f817 	bl	800637c <__sfp>
 800634e:	2200      	movs	r2, #0
 8006350:	60e0      	str	r0, [r4, #12]
 8006352:	2104      	movs	r1, #4
 8006354:	6860      	ldr	r0, [r4, #4]
 8006356:	f7ff ffa7 	bl	80062a8 <std.isra.0>
 800635a:	2201      	movs	r2, #1
 800635c:	2109      	movs	r1, #9
 800635e:	68a0      	ldr	r0, [r4, #8]
 8006360:	f7ff ffa2 	bl	80062a8 <std.isra.0>
 8006364:	2202      	movs	r2, #2
 8006366:	2112      	movs	r1, #18
 8006368:	68e0      	ldr	r0, [r4, #12]
 800636a:	f7ff ff9d 	bl	80062a8 <std.isra.0>
 800636e:	2301      	movs	r3, #1
 8006370:	61a3      	str	r3, [r4, #24]
 8006372:	bd10      	pop	{r4, pc}
 8006374:	0804c95c 	.word	0x0804c95c
 8006378:	0800629d 	.word	0x0800629d

0800637c <__sfp>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <__sfp+0x74>)
 8006380:	681e      	ldr	r6, [r3, #0]
 8006382:	69b3      	ldr	r3, [r6, #24]
 8006384:	4607      	mov	r7, r0
 8006386:	b913      	cbnz	r3, 800638e <__sfp+0x12>
 8006388:	4630      	mov	r0, r6
 800638a:	f7ff ffc7 	bl	800631c <__sinit>
 800638e:	3648      	adds	r6, #72	; 0x48
 8006390:	68b4      	ldr	r4, [r6, #8]
 8006392:	6873      	ldr	r3, [r6, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	d503      	bpl.n	80063a0 <__sfp+0x24>
 8006398:	6833      	ldr	r3, [r6, #0]
 800639a:	b133      	cbz	r3, 80063aa <__sfp+0x2e>
 800639c:	6836      	ldr	r6, [r6, #0]
 800639e:	e7f7      	b.n	8006390 <__sfp+0x14>
 80063a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063a4:	b16d      	cbz	r5, 80063c2 <__sfp+0x46>
 80063a6:	3468      	adds	r4, #104	; 0x68
 80063a8:	e7f4      	b.n	8006394 <__sfp+0x18>
 80063aa:	2104      	movs	r1, #4
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ff9f 	bl	80062f0 <__sfmoreglue>
 80063b2:	6030      	str	r0, [r6, #0]
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d1f1      	bne.n	800639c <__sfp+0x20>
 80063b8:	230c      	movs	r3, #12
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4604      	mov	r4, r0
 80063be:	4620      	mov	r0, r4
 80063c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063c6:	81e3      	strh	r3, [r4, #14]
 80063c8:	2301      	movs	r3, #1
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	6665      	str	r5, [r4, #100]	; 0x64
 80063ce:	6025      	str	r5, [r4, #0]
 80063d0:	60a5      	str	r5, [r4, #8]
 80063d2:	6065      	str	r5, [r4, #4]
 80063d4:	6125      	str	r5, [r4, #16]
 80063d6:	6165      	str	r5, [r4, #20]
 80063d8:	61a5      	str	r5, [r4, #24]
 80063da:	2208      	movs	r2, #8
 80063dc:	4629      	mov	r1, r5
 80063de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063e2:	f000 f863 	bl	80064ac <memset>
 80063e6:	6365      	str	r5, [r4, #52]	; 0x34
 80063e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80063ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80063ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80063ee:	e7e6      	b.n	80063be <__sfp+0x42>
 80063f0:	0804c95c 	.word	0x0804c95c

080063f4 <_fwalk_reent>:
 80063f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f8:	4680      	mov	r8, r0
 80063fa:	4689      	mov	r9, r1
 80063fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006400:	2600      	movs	r6, #0
 8006402:	b914      	cbnz	r4, 800640a <_fwalk_reent+0x16>
 8006404:	4630      	mov	r0, r6
 8006406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800640a:	68a5      	ldr	r5, [r4, #8]
 800640c:	6867      	ldr	r7, [r4, #4]
 800640e:	3f01      	subs	r7, #1
 8006410:	d501      	bpl.n	8006416 <_fwalk_reent+0x22>
 8006412:	6824      	ldr	r4, [r4, #0]
 8006414:	e7f5      	b.n	8006402 <_fwalk_reent+0xe>
 8006416:	89ab      	ldrh	r3, [r5, #12]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d907      	bls.n	800642c <_fwalk_reent+0x38>
 800641c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006420:	3301      	adds	r3, #1
 8006422:	d003      	beq.n	800642c <_fwalk_reent+0x38>
 8006424:	4629      	mov	r1, r5
 8006426:	4640      	mov	r0, r8
 8006428:	47c8      	blx	r9
 800642a:	4306      	orrs	r6, r0
 800642c:	3568      	adds	r5, #104	; 0x68
 800642e:	e7ee      	b.n	800640e <_fwalk_reent+0x1a>

08006430 <__libc_init_array>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4e0d      	ldr	r6, [pc, #52]	; (8006468 <__libc_init_array+0x38>)
 8006434:	4c0d      	ldr	r4, [pc, #52]	; (800646c <__libc_init_array+0x3c>)
 8006436:	1ba4      	subs	r4, r4, r6
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	2500      	movs	r5, #0
 800643c:	42a5      	cmp	r5, r4
 800643e:	d109      	bne.n	8006454 <__libc_init_array+0x24>
 8006440:	4e0b      	ldr	r6, [pc, #44]	; (8006470 <__libc_init_array+0x40>)
 8006442:	4c0c      	ldr	r4, [pc, #48]	; (8006474 <__libc_init_array+0x44>)
 8006444:	f001 ff40 	bl	80082c8 <_init>
 8006448:	1ba4      	subs	r4, r4, r6
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	2500      	movs	r5, #0
 800644e:	42a5      	cmp	r5, r4
 8006450:	d105      	bne.n	800645e <__libc_init_array+0x2e>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006458:	4798      	blx	r3
 800645a:	3501      	adds	r5, #1
 800645c:	e7ee      	b.n	800643c <__libc_init_array+0xc>
 800645e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006462:	4798      	blx	r3
 8006464:	3501      	adds	r5, #1
 8006466:	e7f2      	b.n	800644e <__libc_init_array+0x1e>
 8006468:	0804c9e8 	.word	0x0804c9e8
 800646c:	0804c9e8 	.word	0x0804c9e8
 8006470:	0804c9e8 	.word	0x0804c9e8
 8006474:	0804c9ec 	.word	0x0804c9ec

08006478 <memcmp>:
 8006478:	b510      	push	{r4, lr}
 800647a:	3901      	subs	r1, #1
 800647c:	4402      	add	r2, r0
 800647e:	4290      	cmp	r0, r2
 8006480:	d101      	bne.n	8006486 <memcmp+0xe>
 8006482:	2000      	movs	r0, #0
 8006484:	bd10      	pop	{r4, pc}
 8006486:	f810 3b01 	ldrb.w	r3, [r0], #1
 800648a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800648e:	42a3      	cmp	r3, r4
 8006490:	d0f5      	beq.n	800647e <memcmp+0x6>
 8006492:	1b18      	subs	r0, r3, r4
 8006494:	bd10      	pop	{r4, pc}

08006496 <memcpy>:
 8006496:	b510      	push	{r4, lr}
 8006498:	1e43      	subs	r3, r0, #1
 800649a:	440a      	add	r2, r1
 800649c:	4291      	cmp	r1, r2
 800649e:	d100      	bne.n	80064a2 <memcpy+0xc>
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064aa:	e7f7      	b.n	800649c <memcpy+0x6>

080064ac <memset>:
 80064ac:	4402      	add	r2, r0
 80064ae:	4603      	mov	r3, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d100      	bne.n	80064b6 <memset+0xa>
 80064b4:	4770      	bx	lr
 80064b6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ba:	e7f9      	b.n	80064b0 <memset+0x4>

080064bc <_free_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4605      	mov	r5, r0
 80064c0:	2900      	cmp	r1, #0
 80064c2:	d045      	beq.n	8006550 <_free_r+0x94>
 80064c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c8:	1f0c      	subs	r4, r1, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bfb8      	it	lt
 80064ce:	18e4      	addlt	r4, r4, r3
 80064d0:	f000 fb58 	bl	8006b84 <__malloc_lock>
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <_free_r+0x98>)
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	4610      	mov	r0, r2
 80064da:	b933      	cbnz	r3, 80064ea <_free_r+0x2e>
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	6014      	str	r4, [r2, #0]
 80064e0:	4628      	mov	r0, r5
 80064e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e6:	f000 bb4e 	b.w	8006b86 <__malloc_unlock>
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	d90c      	bls.n	8006508 <_free_r+0x4c>
 80064ee:	6821      	ldr	r1, [r4, #0]
 80064f0:	1862      	adds	r2, r4, r1
 80064f2:	4293      	cmp	r3, r2
 80064f4:	bf04      	itt	eq
 80064f6:	681a      	ldreq	r2, [r3, #0]
 80064f8:	685b      	ldreq	r3, [r3, #4]
 80064fa:	6063      	str	r3, [r4, #4]
 80064fc:	bf04      	itt	eq
 80064fe:	1852      	addeq	r2, r2, r1
 8006500:	6022      	streq	r2, [r4, #0]
 8006502:	6004      	str	r4, [r0, #0]
 8006504:	e7ec      	b.n	80064e0 <_free_r+0x24>
 8006506:	4613      	mov	r3, r2
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	b10a      	cbz	r2, 8006510 <_free_r+0x54>
 800650c:	42a2      	cmp	r2, r4
 800650e:	d9fa      	bls.n	8006506 <_free_r+0x4a>
 8006510:	6819      	ldr	r1, [r3, #0]
 8006512:	1858      	adds	r0, r3, r1
 8006514:	42a0      	cmp	r0, r4
 8006516:	d10b      	bne.n	8006530 <_free_r+0x74>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	4401      	add	r1, r0
 800651c:	1858      	adds	r0, r3, r1
 800651e:	4282      	cmp	r2, r0
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	d1dd      	bne.n	80064e0 <_free_r+0x24>
 8006524:	6810      	ldr	r0, [r2, #0]
 8006526:	6852      	ldr	r2, [r2, #4]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	4401      	add	r1, r0
 800652c:	6019      	str	r1, [r3, #0]
 800652e:	e7d7      	b.n	80064e0 <_free_r+0x24>
 8006530:	d902      	bls.n	8006538 <_free_r+0x7c>
 8006532:	230c      	movs	r3, #12
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	e7d3      	b.n	80064e0 <_free_r+0x24>
 8006538:	6820      	ldr	r0, [r4, #0]
 800653a:	1821      	adds	r1, r4, r0
 800653c:	428a      	cmp	r2, r1
 800653e:	bf04      	itt	eq
 8006540:	6811      	ldreq	r1, [r2, #0]
 8006542:	6852      	ldreq	r2, [r2, #4]
 8006544:	6062      	str	r2, [r4, #4]
 8006546:	bf04      	itt	eq
 8006548:	1809      	addeq	r1, r1, r0
 800654a:	6021      	streq	r1, [r4, #0]
 800654c:	605c      	str	r4, [r3, #4]
 800654e:	e7c7      	b.n	80064e0 <_free_r+0x24>
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	2000a9b8 	.word	0x2000a9b8

08006558 <_malloc_r>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	1ccd      	adds	r5, r1, #3
 800655c:	f025 0503 	bic.w	r5, r5, #3
 8006560:	3508      	adds	r5, #8
 8006562:	2d0c      	cmp	r5, #12
 8006564:	bf38      	it	cc
 8006566:	250c      	movcc	r5, #12
 8006568:	2d00      	cmp	r5, #0
 800656a:	4606      	mov	r6, r0
 800656c:	db01      	blt.n	8006572 <_malloc_r+0x1a>
 800656e:	42a9      	cmp	r1, r5
 8006570:	d903      	bls.n	800657a <_malloc_r+0x22>
 8006572:	230c      	movs	r3, #12
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	2000      	movs	r0, #0
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	f000 fb03 	bl	8006b84 <__malloc_lock>
 800657e:	4a23      	ldr	r2, [pc, #140]	; (800660c <_malloc_r+0xb4>)
 8006580:	6814      	ldr	r4, [r2, #0]
 8006582:	4621      	mov	r1, r4
 8006584:	b991      	cbnz	r1, 80065ac <_malloc_r+0x54>
 8006586:	4c22      	ldr	r4, [pc, #136]	; (8006610 <_malloc_r+0xb8>)
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	b91b      	cbnz	r3, 8006594 <_malloc_r+0x3c>
 800658c:	4630      	mov	r0, r6
 800658e:	f000 f933 	bl	80067f8 <_sbrk_r>
 8006592:	6020      	str	r0, [r4, #0]
 8006594:	4629      	mov	r1, r5
 8006596:	4630      	mov	r0, r6
 8006598:	f000 f92e 	bl	80067f8 <_sbrk_r>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d126      	bne.n	80065ee <_malloc_r+0x96>
 80065a0:	230c      	movs	r3, #12
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	4630      	mov	r0, r6
 80065a6:	f000 faee 	bl	8006b86 <__malloc_unlock>
 80065aa:	e7e4      	b.n	8006576 <_malloc_r+0x1e>
 80065ac:	680b      	ldr	r3, [r1, #0]
 80065ae:	1b5b      	subs	r3, r3, r5
 80065b0:	d41a      	bmi.n	80065e8 <_malloc_r+0x90>
 80065b2:	2b0b      	cmp	r3, #11
 80065b4:	d90f      	bls.n	80065d6 <_malloc_r+0x7e>
 80065b6:	600b      	str	r3, [r1, #0]
 80065b8:	50cd      	str	r5, [r1, r3]
 80065ba:	18cc      	adds	r4, r1, r3
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 fae2 	bl	8006b86 <__malloc_unlock>
 80065c2:	f104 000b 	add.w	r0, r4, #11
 80065c6:	1d23      	adds	r3, r4, #4
 80065c8:	f020 0007 	bic.w	r0, r0, #7
 80065cc:	1ac3      	subs	r3, r0, r3
 80065ce:	d01b      	beq.n	8006608 <_malloc_r+0xb0>
 80065d0:	425a      	negs	r2, r3
 80065d2:	50e2      	str	r2, [r4, r3]
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
 80065d6:	428c      	cmp	r4, r1
 80065d8:	bf0d      	iteet	eq
 80065da:	6863      	ldreq	r3, [r4, #4]
 80065dc:	684b      	ldrne	r3, [r1, #4]
 80065de:	6063      	strne	r3, [r4, #4]
 80065e0:	6013      	streq	r3, [r2, #0]
 80065e2:	bf18      	it	ne
 80065e4:	460c      	movne	r4, r1
 80065e6:	e7e9      	b.n	80065bc <_malloc_r+0x64>
 80065e8:	460c      	mov	r4, r1
 80065ea:	6849      	ldr	r1, [r1, #4]
 80065ec:	e7ca      	b.n	8006584 <_malloc_r+0x2c>
 80065ee:	1cc4      	adds	r4, r0, #3
 80065f0:	f024 0403 	bic.w	r4, r4, #3
 80065f4:	42a0      	cmp	r0, r4
 80065f6:	d005      	beq.n	8006604 <_malloc_r+0xac>
 80065f8:	1a21      	subs	r1, r4, r0
 80065fa:	4630      	mov	r0, r6
 80065fc:	f000 f8fc 	bl	80067f8 <_sbrk_r>
 8006600:	3001      	adds	r0, #1
 8006602:	d0cd      	beq.n	80065a0 <_malloc_r+0x48>
 8006604:	6025      	str	r5, [r4, #0]
 8006606:	e7d9      	b.n	80065bc <_malloc_r+0x64>
 8006608:	bd70      	pop	{r4, r5, r6, pc}
 800660a:	bf00      	nop
 800660c:	2000a9b8 	.word	0x2000a9b8
 8006610:	2000a9bc 	.word	0x2000a9bc

08006614 <iprintf>:
 8006614:	b40f      	push	{r0, r1, r2, r3}
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <iprintf+0x2c>)
 8006618:	b513      	push	{r0, r1, r4, lr}
 800661a:	681c      	ldr	r4, [r3, #0]
 800661c:	b124      	cbz	r4, 8006628 <iprintf+0x14>
 800661e:	69a3      	ldr	r3, [r4, #24]
 8006620:	b913      	cbnz	r3, 8006628 <iprintf+0x14>
 8006622:	4620      	mov	r0, r4
 8006624:	f7ff fe7a 	bl	800631c <__sinit>
 8006628:	ab05      	add	r3, sp, #20
 800662a:	9a04      	ldr	r2, [sp, #16]
 800662c:	68a1      	ldr	r1, [r4, #8]
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fad3 	bl	8006bdc <_vfiprintf_r>
 8006636:	b002      	add	sp, #8
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	b004      	add	sp, #16
 800663e:	4770      	bx	lr
 8006640:	200007e8 	.word	0x200007e8

08006644 <putchar>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <putchar+0x24>)
 8006648:	681c      	ldr	r4, [r3, #0]
 800664a:	4605      	mov	r5, r0
 800664c:	b124      	cbz	r4, 8006658 <putchar+0x14>
 800664e:	69a3      	ldr	r3, [r4, #24]
 8006650:	b913      	cbnz	r3, 8006658 <putchar+0x14>
 8006652:	4620      	mov	r0, r4
 8006654:	f7ff fe62 	bl	800631c <__sinit>
 8006658:	68a2      	ldr	r2, [r4, #8]
 800665a:	4629      	mov	r1, r5
 800665c:	4620      	mov	r0, r4
 800665e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006662:	f000 bd67 	b.w	8007134 <_putc_r>
 8006666:	bf00      	nop
 8006668:	200007e8 	.word	0x200007e8

0800666c <_puts_r>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	460e      	mov	r6, r1
 8006670:	4605      	mov	r5, r0
 8006672:	b118      	cbz	r0, 800667c <_puts_r+0x10>
 8006674:	6983      	ldr	r3, [r0, #24]
 8006676:	b90b      	cbnz	r3, 800667c <_puts_r+0x10>
 8006678:	f7ff fe50 	bl	800631c <__sinit>
 800667c:	69ab      	ldr	r3, [r5, #24]
 800667e:	68ac      	ldr	r4, [r5, #8]
 8006680:	b913      	cbnz	r3, 8006688 <_puts_r+0x1c>
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fe4a 	bl	800631c <__sinit>
 8006688:	4b23      	ldr	r3, [pc, #140]	; (8006718 <_puts_r+0xac>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d117      	bne.n	80066be <_puts_r+0x52>
 800668e:	686c      	ldr	r4, [r5, #4]
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	071b      	lsls	r3, r3, #28
 8006694:	d51d      	bpl.n	80066d2 <_puts_r+0x66>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	b1db      	cbz	r3, 80066d2 <_puts_r+0x66>
 800669a:	3e01      	subs	r6, #1
 800669c:	68a3      	ldr	r3, [r4, #8]
 800669e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60a3      	str	r3, [r4, #8]
 80066a6:	b9e9      	cbnz	r1, 80066e4 <_puts_r+0x78>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	da2e      	bge.n	800670a <_puts_r+0x9e>
 80066ac:	4622      	mov	r2, r4
 80066ae:	210a      	movs	r1, #10
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f907 	bl	80068c4 <__swbuf_r>
 80066b6:	3001      	adds	r0, #1
 80066b8:	d011      	beq.n	80066de <_puts_r+0x72>
 80066ba:	200a      	movs	r0, #10
 80066bc:	bd70      	pop	{r4, r5, r6, pc}
 80066be:	4b17      	ldr	r3, [pc, #92]	; (800671c <_puts_r+0xb0>)
 80066c0:	429c      	cmp	r4, r3
 80066c2:	d101      	bne.n	80066c8 <_puts_r+0x5c>
 80066c4:	68ac      	ldr	r4, [r5, #8]
 80066c6:	e7e3      	b.n	8006690 <_puts_r+0x24>
 80066c8:	4b15      	ldr	r3, [pc, #84]	; (8006720 <_puts_r+0xb4>)
 80066ca:	429c      	cmp	r4, r3
 80066cc:	bf08      	it	eq
 80066ce:	68ec      	ldreq	r4, [r5, #12]
 80066d0:	e7de      	b.n	8006690 <_puts_r+0x24>
 80066d2:	4621      	mov	r1, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 f959 	bl	800698c <__swsetup_r>
 80066da:	2800      	cmp	r0, #0
 80066dc:	d0dd      	beq.n	800669a <_puts_r+0x2e>
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da04      	bge.n	80066f2 <_puts_r+0x86>
 80066e8:	69a2      	ldr	r2, [r4, #24]
 80066ea:	4293      	cmp	r3, r2
 80066ec:	db06      	blt.n	80066fc <_puts_r+0x90>
 80066ee:	290a      	cmp	r1, #10
 80066f0:	d004      	beq.n	80066fc <_puts_r+0x90>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	7019      	strb	r1, [r3, #0]
 80066fa:	e7cf      	b.n	800669c <_puts_r+0x30>
 80066fc:	4622      	mov	r2, r4
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 f8e0 	bl	80068c4 <__swbuf_r>
 8006704:	3001      	adds	r0, #1
 8006706:	d1c9      	bne.n	800669c <_puts_r+0x30>
 8006708:	e7e9      	b.n	80066de <_puts_r+0x72>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	200a      	movs	r0, #10
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	6022      	str	r2, [r4, #0]
 8006712:	7018      	strb	r0, [r3, #0]
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	bf00      	nop
 8006718:	0804c91c 	.word	0x0804c91c
 800671c:	0804c93c 	.word	0x0804c93c
 8006720:	0804c8fc 	.word	0x0804c8fc

08006724 <puts>:
 8006724:	4b02      	ldr	r3, [pc, #8]	; (8006730 <puts+0xc>)
 8006726:	4601      	mov	r1, r0
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	f7ff bf9f 	b.w	800666c <_puts_r>
 800672e:	bf00      	nop
 8006730:	200007e8 	.word	0x200007e8

08006734 <srand>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4b12      	ldr	r3, [pc, #72]	; (8006780 <srand+0x4c>)
 8006738:	681c      	ldr	r4, [r3, #0]
 800673a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800673c:	4605      	mov	r5, r0
 800673e:	b9d3      	cbnz	r3, 8006776 <srand+0x42>
 8006740:	2018      	movs	r0, #24
 8006742:	f000 fa17 	bl	8006b74 <malloc>
 8006746:	f243 330e 	movw	r3, #13070	; 0x330e
 800674a:	63a0      	str	r0, [r4, #56]	; 0x38
 800674c:	8003      	strh	r3, [r0, #0]
 800674e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8006752:	8043      	strh	r3, [r0, #2]
 8006754:	f241 2334 	movw	r3, #4660	; 0x1234
 8006758:	8083      	strh	r3, [r0, #4]
 800675a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800675e:	80c3      	strh	r3, [r0, #6]
 8006760:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006764:	8103      	strh	r3, [r0, #8]
 8006766:	2305      	movs	r3, #5
 8006768:	8143      	strh	r3, [r0, #10]
 800676a:	230b      	movs	r3, #11
 800676c:	8183      	strh	r3, [r0, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	2300      	movs	r3, #0
 8006772:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006778:	2200      	movs	r2, #0
 800677a:	611d      	str	r5, [r3, #16]
 800677c:	615a      	str	r2, [r3, #20]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	200007e8 	.word	0x200007e8

08006784 <rand>:
 8006784:	4b19      	ldr	r3, [pc, #100]	; (80067ec <rand+0x68>)
 8006786:	b510      	push	{r4, lr}
 8006788:	681c      	ldr	r4, [r3, #0]
 800678a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800678c:	b9d3      	cbnz	r3, 80067c4 <rand+0x40>
 800678e:	2018      	movs	r0, #24
 8006790:	f000 f9f0 	bl	8006b74 <malloc>
 8006794:	f243 330e 	movw	r3, #13070	; 0x330e
 8006798:	63a0      	str	r0, [r4, #56]	; 0x38
 800679a:	8003      	strh	r3, [r0, #0]
 800679c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80067a0:	8043      	strh	r3, [r0, #2]
 80067a2:	f241 2334 	movw	r3, #4660	; 0x1234
 80067a6:	8083      	strh	r3, [r0, #4]
 80067a8:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80067ac:	80c3      	strh	r3, [r0, #6]
 80067ae:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80067b2:	8103      	strh	r3, [r0, #8]
 80067b4:	2305      	movs	r3, #5
 80067b6:	8143      	strh	r3, [r0, #10]
 80067b8:	230b      	movs	r3, #11
 80067ba:	8183      	strh	r3, [r0, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	2300      	movs	r3, #0
 80067c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80067c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067c6:	480a      	ldr	r0, [pc, #40]	; (80067f0 <rand+0x6c>)
 80067c8:	690a      	ldr	r2, [r1, #16]
 80067ca:	694b      	ldr	r3, [r1, #20]
 80067cc:	4c09      	ldr	r4, [pc, #36]	; (80067f4 <rand+0x70>)
 80067ce:	4350      	muls	r0, r2
 80067d0:	fb04 0003 	mla	r0, r4, r3, r0
 80067d4:	fba2 2304 	umull	r2, r3, r2, r4
 80067d8:	3201      	adds	r2, #1
 80067da:	4403      	add	r3, r0
 80067dc:	f143 0300 	adc.w	r3, r3, #0
 80067e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80067e4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	200007e8 	.word	0x200007e8
 80067f0:	5851f42d 	.word	0x5851f42d
 80067f4:	4c957f2d 	.word	0x4c957f2d

080067f8 <_sbrk_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4c06      	ldr	r4, [pc, #24]	; (8006814 <_sbrk_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4605      	mov	r5, r0
 8006800:	4608      	mov	r0, r1
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	f7ff fc06 	bl	8006014 <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_sbrk_r+0x1a>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	b103      	cbz	r3, 8006812 <_sbrk_r+0x1a>
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	2000aa68 	.word	0x2000aa68

08006818 <__sread>:
 8006818:	b510      	push	{r4, lr}
 800681a:	460c      	mov	r4, r1
 800681c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006820:	f000 fcbe 	bl	80071a0 <_read_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	bfab      	itete	ge
 8006828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800682a:	89a3      	ldrhlt	r3, [r4, #12]
 800682c:	181b      	addge	r3, r3, r0
 800682e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006832:	bfac      	ite	ge
 8006834:	6563      	strge	r3, [r4, #84]	; 0x54
 8006836:	81a3      	strhlt	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__swrite>:
 800683a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683e:	461f      	mov	r7, r3
 8006840:	898b      	ldrh	r3, [r1, #12]
 8006842:	05db      	lsls	r3, r3, #23
 8006844:	4605      	mov	r5, r0
 8006846:	460c      	mov	r4, r1
 8006848:	4616      	mov	r6, r2
 800684a:	d505      	bpl.n	8006858 <__swrite+0x1e>
 800684c:	2302      	movs	r3, #2
 800684e:	2200      	movs	r2, #0
 8006850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006854:	f000 f918 	bl	8006a88 <_lseek_r>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800685e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	4632      	mov	r2, r6
 8006866:	463b      	mov	r3, r7
 8006868:	4628      	mov	r0, r5
 800686a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686e:	f000 b87b 	b.w	8006968 <_write_r>

08006872 <__sseek>:
 8006872:	b510      	push	{r4, lr}
 8006874:	460c      	mov	r4, r1
 8006876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687a:	f000 f905 	bl	8006a88 <_lseek_r>
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	bf15      	itete	ne
 8006884:	6560      	strne	r0, [r4, #84]	; 0x54
 8006886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800688a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800688e:	81a3      	strheq	r3, [r4, #12]
 8006890:	bf18      	it	ne
 8006892:	81a3      	strhne	r3, [r4, #12]
 8006894:	bd10      	pop	{r4, pc}

08006896 <__sclose>:
 8006896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689a:	f000 b8e5 	b.w	8006a68 <_close_r>

0800689e <strncmp>:
 800689e:	b510      	push	{r4, lr}
 80068a0:	b16a      	cbz	r2, 80068be <strncmp+0x20>
 80068a2:	3901      	subs	r1, #1
 80068a4:	1884      	adds	r4, r0, r2
 80068a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d103      	bne.n	80068ba <strncmp+0x1c>
 80068b2:	42a0      	cmp	r0, r4
 80068b4:	d001      	beq.n	80068ba <strncmp+0x1c>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f5      	bne.n	80068a6 <strncmp+0x8>
 80068ba:	1a98      	subs	r0, r3, r2
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	4610      	mov	r0, r2
 80068c0:	bd10      	pop	{r4, pc}
	...

080068c4 <__swbuf_r>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	460e      	mov	r6, r1
 80068c8:	4614      	mov	r4, r2
 80068ca:	4605      	mov	r5, r0
 80068cc:	b118      	cbz	r0, 80068d6 <__swbuf_r+0x12>
 80068ce:	6983      	ldr	r3, [r0, #24]
 80068d0:	b90b      	cbnz	r3, 80068d6 <__swbuf_r+0x12>
 80068d2:	f7ff fd23 	bl	800631c <__sinit>
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <__swbuf_r+0x98>)
 80068d8:	429c      	cmp	r4, r3
 80068da:	d12a      	bne.n	8006932 <__swbuf_r+0x6e>
 80068dc:	686c      	ldr	r4, [r5, #4]
 80068de:	69a3      	ldr	r3, [r4, #24]
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	071a      	lsls	r2, r3, #28
 80068e6:	d52e      	bpl.n	8006946 <__swbuf_r+0x82>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	b363      	cbz	r3, 8006946 <__swbuf_r+0x82>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	1ac0      	subs	r0, r0, r3
 80068f2:	6963      	ldr	r3, [r4, #20]
 80068f4:	b2f6      	uxtb	r6, r6
 80068f6:	4298      	cmp	r0, r3
 80068f8:	4637      	mov	r7, r6
 80068fa:	db04      	blt.n	8006906 <__swbuf_r+0x42>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	f7ff fc90 	bl	8006224 <_fflush_r>
 8006904:	bb28      	cbnz	r0, 8006952 <__swbuf_r+0x8e>
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	3b01      	subs	r3, #1
 800690a:	60a3      	str	r3, [r4, #8]
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	701e      	strb	r6, [r3, #0]
 8006914:	6963      	ldr	r3, [r4, #20]
 8006916:	3001      	adds	r0, #1
 8006918:	4298      	cmp	r0, r3
 800691a:	d004      	beq.n	8006926 <__swbuf_r+0x62>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	07db      	lsls	r3, r3, #31
 8006920:	d519      	bpl.n	8006956 <__swbuf_r+0x92>
 8006922:	2e0a      	cmp	r6, #10
 8006924:	d117      	bne.n	8006956 <__swbuf_r+0x92>
 8006926:	4621      	mov	r1, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff fc7b 	bl	8006224 <_fflush_r>
 800692e:	b190      	cbz	r0, 8006956 <__swbuf_r+0x92>
 8006930:	e00f      	b.n	8006952 <__swbuf_r+0x8e>
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <__swbuf_r+0x9c>)
 8006934:	429c      	cmp	r4, r3
 8006936:	d101      	bne.n	800693c <__swbuf_r+0x78>
 8006938:	68ac      	ldr	r4, [r5, #8]
 800693a:	e7d0      	b.n	80068de <__swbuf_r+0x1a>
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <__swbuf_r+0xa0>)
 800693e:	429c      	cmp	r4, r3
 8006940:	bf08      	it	eq
 8006942:	68ec      	ldreq	r4, [r5, #12]
 8006944:	e7cb      	b.n	80068de <__swbuf_r+0x1a>
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f000 f81f 	bl	800698c <__swsetup_r>
 800694e:	2800      	cmp	r0, #0
 8006950:	d0cc      	beq.n	80068ec <__swbuf_r+0x28>
 8006952:	f04f 37ff 	mov.w	r7, #4294967295
 8006956:	4638      	mov	r0, r7
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695a:	bf00      	nop
 800695c:	0804c91c 	.word	0x0804c91c
 8006960:	0804c93c 	.word	0x0804c93c
 8006964:	0804c8fc 	.word	0x0804c8fc

08006968 <_write_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4c07      	ldr	r4, [pc, #28]	; (8006988 <_write_r+0x20>)
 800696c:	4605      	mov	r5, r0
 800696e:	4608      	mov	r0, r1
 8006970:	4611      	mov	r1, r2
 8006972:	2200      	movs	r2, #0
 8006974:	6022      	str	r2, [r4, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f7fe fbc2 	bl	8005100 <_write>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_write_r+0x1e>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	b103      	cbz	r3, 8006986 <_write_r+0x1e>
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	2000aa68 	.word	0x2000aa68

0800698c <__swsetup_r>:
 800698c:	4b32      	ldr	r3, [pc, #200]	; (8006a58 <__swsetup_r+0xcc>)
 800698e:	b570      	push	{r4, r5, r6, lr}
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	4606      	mov	r6, r0
 8006994:	460c      	mov	r4, r1
 8006996:	b125      	cbz	r5, 80069a2 <__swsetup_r+0x16>
 8006998:	69ab      	ldr	r3, [r5, #24]
 800699a:	b913      	cbnz	r3, 80069a2 <__swsetup_r+0x16>
 800699c:	4628      	mov	r0, r5
 800699e:	f7ff fcbd 	bl	800631c <__sinit>
 80069a2:	4b2e      	ldr	r3, [pc, #184]	; (8006a5c <__swsetup_r+0xd0>)
 80069a4:	429c      	cmp	r4, r3
 80069a6:	d10f      	bne.n	80069c8 <__swsetup_r+0x3c>
 80069a8:	686c      	ldr	r4, [r5, #4]
 80069aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	0715      	lsls	r5, r2, #28
 80069b2:	d42c      	bmi.n	8006a0e <__swsetup_r+0x82>
 80069b4:	06d0      	lsls	r0, r2, #27
 80069b6:	d411      	bmi.n	80069dc <__swsetup_r+0x50>
 80069b8:	2209      	movs	r2, #9
 80069ba:	6032      	str	r2, [r6, #0]
 80069bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	f04f 30ff 	mov.w	r0, #4294967295
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <__swsetup_r+0xd4>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d101      	bne.n	80069d2 <__swsetup_r+0x46>
 80069ce:	68ac      	ldr	r4, [r5, #8]
 80069d0:	e7eb      	b.n	80069aa <__swsetup_r+0x1e>
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <__swsetup_r+0xd8>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	bf08      	it	eq
 80069d8:	68ec      	ldreq	r4, [r5, #12]
 80069da:	e7e6      	b.n	80069aa <__swsetup_r+0x1e>
 80069dc:	0751      	lsls	r1, r2, #29
 80069de:	d512      	bpl.n	8006a06 <__swsetup_r+0x7a>
 80069e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069e2:	b141      	cbz	r1, 80069f6 <__swsetup_r+0x6a>
 80069e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069e8:	4299      	cmp	r1, r3
 80069ea:	d002      	beq.n	80069f2 <__swsetup_r+0x66>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff fd65 	bl	80064bc <_free_r>
 80069f2:	2300      	movs	r3, #0
 80069f4:	6363      	str	r3, [r4, #52]	; 0x34
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f043 0308 	orr.w	r3, r3, #8
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	b94b      	cbnz	r3, 8006a26 <__swsetup_r+0x9a>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1c:	d003      	beq.n	8006a26 <__swsetup_r+0x9a>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f867 	bl	8006af4 <__smakebuf_r>
 8006a26:	89a2      	ldrh	r2, [r4, #12]
 8006a28:	f012 0301 	ands.w	r3, r2, #1
 8006a2c:	d00c      	beq.n	8006a48 <__swsetup_r+0xbc>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	6963      	ldr	r3, [r4, #20]
 8006a34:	425b      	negs	r3, r3
 8006a36:	61a3      	str	r3, [r4, #24]
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b953      	cbnz	r3, 8006a52 <__swsetup_r+0xc6>
 8006a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006a44:	d1ba      	bne.n	80069bc <__swsetup_r+0x30>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	0792      	lsls	r2, r2, #30
 8006a4a:	bf58      	it	pl
 8006a4c:	6963      	ldrpl	r3, [r4, #20]
 8006a4e:	60a3      	str	r3, [r4, #8]
 8006a50:	e7f2      	b.n	8006a38 <__swsetup_r+0xac>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e7f7      	b.n	8006a46 <__swsetup_r+0xba>
 8006a56:	bf00      	nop
 8006a58:	200007e8 	.word	0x200007e8
 8006a5c:	0804c91c 	.word	0x0804c91c
 8006a60:	0804c93c 	.word	0x0804c93c
 8006a64:	0804c8fc 	.word	0x0804c8fc

08006a68 <_close_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4c06      	ldr	r4, [pc, #24]	; (8006a84 <_close_r+0x1c>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4605      	mov	r5, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	f7ff fae8 	bl	8006048 <_close>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_close_r+0x1a>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_close_r+0x1a>
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	2000aa68 	.word	0x2000aa68

08006a88 <_lseek_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4c07      	ldr	r4, [pc, #28]	; (8006aa8 <_lseek_r+0x20>)
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	4608      	mov	r0, r1
 8006a90:	4611      	mov	r1, r2
 8006a92:	2200      	movs	r2, #0
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7ff fae0 	bl	800605c <_lseek>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_lseek_r+0x1e>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_lseek_r+0x1e>
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	2000aa68 	.word	0x2000aa68

08006aac <__swhatbuf_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	460e      	mov	r6, r1
 8006ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	b090      	sub	sp, #64	; 0x40
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	da07      	bge.n	8006ace <__swhatbuf_r+0x22>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	89b3      	ldrh	r3, [r6, #12]
 8006ac4:	061a      	lsls	r2, r3, #24
 8006ac6:	d410      	bmi.n	8006aea <__swhatbuf_r+0x3e>
 8006ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006acc:	e00e      	b.n	8006aec <__swhatbuf_r+0x40>
 8006ace:	aa01      	add	r2, sp, #4
 8006ad0:	f000 fb78 	bl	80071c4 <_fstat_r>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	dbf2      	blt.n	8006abe <__swhatbuf_r+0x12>
 8006ad8:	9a02      	ldr	r2, [sp, #8]
 8006ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ae2:	425a      	negs	r2, r3
 8006ae4:	415a      	adcs	r2, r3
 8006ae6:	602a      	str	r2, [r5, #0]
 8006ae8:	e7ee      	b.n	8006ac8 <__swhatbuf_r+0x1c>
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	2000      	movs	r0, #0
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	b010      	add	sp, #64	; 0x40
 8006af2:	bd70      	pop	{r4, r5, r6, pc}

08006af4 <__smakebuf_r>:
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af8:	079d      	lsls	r5, r3, #30
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d507      	bpl.n	8006b10 <__smakebuf_r+0x1c>
 8006b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	ab01      	add	r3, sp, #4
 8006b12:	466a      	mov	r2, sp
 8006b14:	f7ff ffca 	bl	8006aac <__swhatbuf_r>
 8006b18:	9900      	ldr	r1, [sp, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff fd1b 	bl	8006558 <_malloc_r>
 8006b22:	b948      	cbnz	r0, 8006b38 <__smakebuf_r+0x44>
 8006b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b28:	059a      	lsls	r2, r3, #22
 8006b2a:	d4ef      	bmi.n	8006b0c <__smakebuf_r+0x18>
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e7e3      	b.n	8006b00 <__smakebuf_r+0xc>
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <__smakebuf_r+0x7c>)
 8006b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	6020      	str	r0, [r4, #0]
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	6163      	str	r3, [r4, #20]
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	6120      	str	r0, [r4, #16]
 8006b4e:	b15b      	cbz	r3, 8006b68 <__smakebuf_r+0x74>
 8006b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 fb47 	bl	80071e8 <_isatty_r>
 8006b5a:	b128      	cbz	r0, 8006b68 <__smakebuf_r+0x74>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	431d      	orrs	r5, r3
 8006b6c:	81a5      	strh	r5, [r4, #12]
 8006b6e:	e7cd      	b.n	8006b0c <__smakebuf_r+0x18>
 8006b70:	0800629d 	.word	0x0800629d

08006b74 <malloc>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <malloc+0xc>)
 8006b76:	4601      	mov	r1, r0
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	f7ff bced 	b.w	8006558 <_malloc_r>
 8006b7e:	bf00      	nop
 8006b80:	200007e8 	.word	0x200007e8

08006b84 <__malloc_lock>:
 8006b84:	4770      	bx	lr

08006b86 <__malloc_unlock>:
 8006b86:	4770      	bx	lr

08006b88 <__sfputc_r>:
 8006b88:	6893      	ldr	r3, [r2, #8]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	b410      	push	{r4}
 8006b90:	6093      	str	r3, [r2, #8]
 8006b92:	da09      	bge.n	8006ba8 <__sfputc_r+0x20>
 8006b94:	6994      	ldr	r4, [r2, #24]
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	db02      	blt.n	8006ba0 <__sfputc_r+0x18>
 8006b9a:	b2cb      	uxtb	r3, r1
 8006b9c:	2b0a      	cmp	r3, #10
 8006b9e:	d103      	bne.n	8006ba8 <__sfputc_r+0x20>
 8006ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba4:	f7ff be8e 	b.w	80068c4 <__swbuf_r>
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	1c58      	adds	r0, r3, #1
 8006bac:	6010      	str	r0, [r2, #0]
 8006bae:	7019      	strb	r1, [r3, #0]
 8006bb0:	b2c8      	uxtb	r0, r1
 8006bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <__sfputs_r>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	18d5      	adds	r5, r2, r3
 8006bc2:	42ac      	cmp	r4, r5
 8006bc4:	d101      	bne.n	8006bca <__sfputs_r+0x12>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e007      	b.n	8006bda <__sfputs_r+0x22>
 8006bca:	463a      	mov	r2, r7
 8006bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7ff ffd9 	bl	8006b88 <__sfputc_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d1f3      	bne.n	8006bc2 <__sfputs_r+0xa>
 8006bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bdc <_vfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	b09d      	sub	sp, #116	; 0x74
 8006be2:	460c      	mov	r4, r1
 8006be4:	4617      	mov	r7, r2
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	4606      	mov	r6, r0
 8006bea:	b118      	cbz	r0, 8006bf4 <_vfiprintf_r+0x18>
 8006bec:	6983      	ldr	r3, [r0, #24]
 8006bee:	b90b      	cbnz	r3, 8006bf4 <_vfiprintf_r+0x18>
 8006bf0:	f7ff fb94 	bl	800631c <__sinit>
 8006bf4:	4b7c      	ldr	r3, [pc, #496]	; (8006de8 <_vfiprintf_r+0x20c>)
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	d157      	bne.n	8006caa <_vfiprintf_r+0xce>
 8006bfa:	6874      	ldr	r4, [r6, #4]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	0718      	lsls	r0, r3, #28
 8006c00:	d55d      	bpl.n	8006cbe <_vfiprintf_r+0xe2>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d05a      	beq.n	8006cbe <_vfiprintf_r+0xe2>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c12:	2330      	movs	r3, #48	; 0x30
 8006c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c18:	f04f 0b01 	mov.w	fp, #1
 8006c1c:	46b8      	mov	r8, r7
 8006c1e:	4645      	mov	r5, r8
 8006c20:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d155      	bne.n	8006cd4 <_vfiprintf_r+0xf8>
 8006c28:	ebb8 0a07 	subs.w	sl, r8, r7
 8006c2c:	d00b      	beq.n	8006c46 <_vfiprintf_r+0x6a>
 8006c2e:	4653      	mov	r3, sl
 8006c30:	463a      	mov	r2, r7
 8006c32:	4621      	mov	r1, r4
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ffbf 	bl	8006bb8 <__sfputs_r>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	f000 80c4 	beq.w	8006dc8 <_vfiprintf_r+0x1ec>
 8006c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c42:	4453      	add	r3, sl
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	f898 3000 	ldrb.w	r3, [r8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80bc 	beq.w	8006dc8 <_vfiprintf_r+0x1ec>
 8006c50:	2300      	movs	r3, #0
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	9304      	str	r3, [sp, #16]
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	9205      	str	r2, [sp, #20]
 8006c5c:	9306      	str	r3, [sp, #24]
 8006c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c62:	931a      	str	r3, [sp, #104]	; 0x68
 8006c64:	2205      	movs	r2, #5
 8006c66:	7829      	ldrb	r1, [r5, #0]
 8006c68:	4860      	ldr	r0, [pc, #384]	; (8006dec <_vfiprintf_r+0x210>)
 8006c6a:	f7fb ffa1 	bl	8002bb0 <memchr>
 8006c6e:	f105 0801 	add.w	r8, r5, #1
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d131      	bne.n	8006cdc <_vfiprintf_r+0x100>
 8006c78:	06d9      	lsls	r1, r3, #27
 8006c7a:	bf44      	itt	mi
 8006c7c:	2220      	movmi	r2, #32
 8006c7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c82:	071a      	lsls	r2, r3, #28
 8006c84:	bf44      	itt	mi
 8006c86:	222b      	movmi	r2, #43	; 0x2b
 8006c88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c8c:	782a      	ldrb	r2, [r5, #0]
 8006c8e:	2a2a      	cmp	r2, #42	; 0x2a
 8006c90:	d02c      	beq.n	8006cec <_vfiprintf_r+0x110>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	2100      	movs	r1, #0
 8006c96:	200a      	movs	r0, #10
 8006c98:	46a8      	mov	r8, r5
 8006c9a:	3501      	adds	r5, #1
 8006c9c:	f898 3000 	ldrb.w	r3, [r8]
 8006ca0:	3b30      	subs	r3, #48	; 0x30
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d96d      	bls.n	8006d82 <_vfiprintf_r+0x1a6>
 8006ca6:	b371      	cbz	r1, 8006d06 <_vfiprintf_r+0x12a>
 8006ca8:	e026      	b.n	8006cf8 <_vfiprintf_r+0x11c>
 8006caa:	4b51      	ldr	r3, [pc, #324]	; (8006df0 <_vfiprintf_r+0x214>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d101      	bne.n	8006cb4 <_vfiprintf_r+0xd8>
 8006cb0:	68b4      	ldr	r4, [r6, #8]
 8006cb2:	e7a3      	b.n	8006bfc <_vfiprintf_r+0x20>
 8006cb4:	4b4f      	ldr	r3, [pc, #316]	; (8006df4 <_vfiprintf_r+0x218>)
 8006cb6:	429c      	cmp	r4, r3
 8006cb8:	bf08      	it	eq
 8006cba:	68f4      	ldreq	r4, [r6, #12]
 8006cbc:	e79e      	b.n	8006bfc <_vfiprintf_r+0x20>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7ff fe63 	bl	800698c <__swsetup_r>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d09e      	beq.n	8006c08 <_vfiprintf_r+0x2c>
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	b01d      	add	sp, #116	; 0x74
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	2b25      	cmp	r3, #37	; 0x25
 8006cd6:	d0a7      	beq.n	8006c28 <_vfiprintf_r+0x4c>
 8006cd8:	46a8      	mov	r8, r5
 8006cda:	e7a0      	b.n	8006c1e <_vfiprintf_r+0x42>
 8006cdc:	4a43      	ldr	r2, [pc, #268]	; (8006dec <_vfiprintf_r+0x210>)
 8006cde:	1a80      	subs	r0, r0, r2
 8006ce0:	fa0b f000 	lsl.w	r0, fp, r0
 8006ce4:	4318      	orrs	r0, r3
 8006ce6:	9004      	str	r0, [sp, #16]
 8006ce8:	4645      	mov	r5, r8
 8006cea:	e7bb      	b.n	8006c64 <_vfiprintf_r+0x88>
 8006cec:	9a03      	ldr	r2, [sp, #12]
 8006cee:	1d11      	adds	r1, r2, #4
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	9103      	str	r1, [sp, #12]
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	db01      	blt.n	8006cfc <_vfiprintf_r+0x120>
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	e004      	b.n	8006d06 <_vfiprintf_r+0x12a>
 8006cfc:	4252      	negs	r2, r2
 8006cfe:	f043 0302 	orr.w	r3, r3, #2
 8006d02:	9207      	str	r2, [sp, #28]
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	f898 3000 	ldrb.w	r3, [r8]
 8006d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d0c:	d110      	bne.n	8006d30 <_vfiprintf_r+0x154>
 8006d0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006d12:	2b2a      	cmp	r3, #42	; 0x2a
 8006d14:	f108 0101 	add.w	r1, r8, #1
 8006d18:	d137      	bne.n	8006d8a <_vfiprintf_r+0x1ae>
 8006d1a:	9b03      	ldr	r3, [sp, #12]
 8006d1c:	1d1a      	adds	r2, r3, #4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	9203      	str	r2, [sp, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bfb8      	it	lt
 8006d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d2a:	f108 0802 	add.w	r8, r8, #2
 8006d2e:	9305      	str	r3, [sp, #20]
 8006d30:	4d31      	ldr	r5, [pc, #196]	; (8006df8 <_vfiprintf_r+0x21c>)
 8006d32:	f898 1000 	ldrb.w	r1, [r8]
 8006d36:	2203      	movs	r2, #3
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f7fb ff39 	bl	8002bb0 <memchr>
 8006d3e:	b140      	cbz	r0, 8006d52 <_vfiprintf_r+0x176>
 8006d40:	2340      	movs	r3, #64	; 0x40
 8006d42:	1b40      	subs	r0, r0, r5
 8006d44:	fa03 f000 	lsl.w	r0, r3, r0
 8006d48:	9b04      	ldr	r3, [sp, #16]
 8006d4a:	4303      	orrs	r3, r0
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	f898 1000 	ldrb.w	r1, [r8]
 8006d56:	4829      	ldr	r0, [pc, #164]	; (8006dfc <_vfiprintf_r+0x220>)
 8006d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	f108 0701 	add.w	r7, r8, #1
 8006d62:	f7fb ff25 	bl	8002bb0 <memchr>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d034      	beq.n	8006dd4 <_vfiprintf_r+0x1f8>
 8006d6a:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <_vfiprintf_r+0x224>)
 8006d6c:	bb03      	cbnz	r3, 8006db0 <_vfiprintf_r+0x1d4>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	3308      	adds	r3, #8
 8006d78:	9303      	str	r3, [sp, #12]
 8006d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7c:	444b      	add	r3, r9
 8006d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d80:	e74c      	b.n	8006c1c <_vfiprintf_r+0x40>
 8006d82:	fb00 3202 	mla	r2, r0, r2, r3
 8006d86:	2101      	movs	r1, #1
 8006d88:	e786      	b.n	8006c98 <_vfiprintf_r+0xbc>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	250a      	movs	r5, #10
 8006d92:	4688      	mov	r8, r1
 8006d94:	3101      	adds	r1, #1
 8006d96:	f898 2000 	ldrb.w	r2, [r8]
 8006d9a:	3a30      	subs	r2, #48	; 0x30
 8006d9c:	2a09      	cmp	r2, #9
 8006d9e:	d903      	bls.n	8006da8 <_vfiprintf_r+0x1cc>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0c5      	beq.n	8006d30 <_vfiprintf_r+0x154>
 8006da4:	9005      	str	r0, [sp, #20]
 8006da6:	e7c3      	b.n	8006d30 <_vfiprintf_r+0x154>
 8006da8:	fb05 2000 	mla	r0, r5, r0, r2
 8006dac:	2301      	movs	r3, #1
 8006dae:	e7f0      	b.n	8006d92 <_vfiprintf_r+0x1b6>
 8006db0:	ab03      	add	r3, sp, #12
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4622      	mov	r2, r4
 8006db6:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <_vfiprintf_r+0x228>)
 8006db8:	a904      	add	r1, sp, #16
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f3af 8000 	nop.w
 8006dc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006dc4:	4681      	mov	r9, r0
 8006dc6:	d1d8      	bne.n	8006d7a <_vfiprintf_r+0x19e>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	065b      	lsls	r3, r3, #25
 8006dcc:	f53f af7d 	bmi.w	8006cca <_vfiprintf_r+0xee>
 8006dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd2:	e77c      	b.n	8006cce <_vfiprintf_r+0xf2>
 8006dd4:	ab03      	add	r3, sp, #12
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <_vfiprintf_r+0x228>)
 8006ddc:	a904      	add	r1, sp, #16
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 f888 	bl	8006ef4 <_printf_i>
 8006de4:	e7ec      	b.n	8006dc0 <_vfiprintf_r+0x1e4>
 8006de6:	bf00      	nop
 8006de8:	0804c91c 	.word	0x0804c91c
 8006dec:	0804c960 	.word	0x0804c960
 8006df0:	0804c93c 	.word	0x0804c93c
 8006df4:	0804c8fc 	.word	0x0804c8fc
 8006df8:	0804c966 	.word	0x0804c966
 8006dfc:	0804c96a 	.word	0x0804c96a
 8006e00:	00000000 	.word	0x00000000
 8006e04:	08006bb9 	.word	0x08006bb9

08006e08 <_printf_common>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	4691      	mov	r9, r2
 8006e0e:	461f      	mov	r7, r3
 8006e10:	688a      	ldr	r2, [r1, #8]
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	bfb8      	it	lt
 8006e1c:	4613      	movlt	r3, r2
 8006e1e:	f8c9 3000 	str.w	r3, [r9]
 8006e22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e26:	4606      	mov	r6, r0
 8006e28:	460c      	mov	r4, r1
 8006e2a:	b112      	cbz	r2, 8006e32 <_printf_common+0x2a>
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	f8c9 3000 	str.w	r3, [r9]
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	0699      	lsls	r1, r3, #26
 8006e36:	bf42      	ittt	mi
 8006e38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e3c:	3302      	addmi	r3, #2
 8006e3e:	f8c9 3000 	strmi.w	r3, [r9]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	f015 0506 	ands.w	r5, r5, #6
 8006e48:	d107      	bne.n	8006e5a <_printf_common+0x52>
 8006e4a:	f104 0a19 	add.w	sl, r4, #25
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	f8d9 2000 	ldr.w	r2, [r9]
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	429d      	cmp	r5, r3
 8006e58:	db29      	blt.n	8006eae <_printf_common+0xa6>
 8006e5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	3300      	adds	r3, #0
 8006e62:	bf18      	it	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	0692      	lsls	r2, r2, #26
 8006e68:	d42e      	bmi.n	8006ec8 <_printf_common+0xc0>
 8006e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4630      	mov	r0, r6
 8006e72:	47c0      	blx	r8
 8006e74:	3001      	adds	r0, #1
 8006e76:	d021      	beq.n	8006ebc <_printf_common+0xb4>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	68e5      	ldr	r5, [r4, #12]
 8006e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e80:	f003 0306 	and.w	r3, r3, #6
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	bf08      	it	eq
 8006e88:	1aad      	subeq	r5, r5, r2
 8006e8a:	68a3      	ldr	r3, [r4, #8]
 8006e8c:	6922      	ldr	r2, [r4, #16]
 8006e8e:	bf0c      	ite	eq
 8006e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e94:	2500      	movne	r5, #0
 8006e96:	4293      	cmp	r3, r2
 8006e98:	bfc4      	itt	gt
 8006e9a:	1a9b      	subgt	r3, r3, r2
 8006e9c:	18ed      	addgt	r5, r5, r3
 8006e9e:	f04f 0900 	mov.w	r9, #0
 8006ea2:	341a      	adds	r4, #26
 8006ea4:	454d      	cmp	r5, r9
 8006ea6:	d11b      	bne.n	8006ee0 <_printf_common+0xd8>
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	47c0      	blx	r8
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d103      	bne.n	8006ec4 <_printf_common+0xbc>
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	e7c2      	b.n	8006e4e <_printf_common+0x46>
 8006ec8:	18e1      	adds	r1, r4, r3
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	2030      	movs	r0, #48	; 0x30
 8006ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ed2:	4422      	add	r2, r4
 8006ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006edc:	3302      	adds	r3, #2
 8006ede:	e7c4      	b.n	8006e6a <_printf_common+0x62>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	47c0      	blx	r8
 8006eea:	3001      	adds	r0, #1
 8006eec:	d0e6      	beq.n	8006ebc <_printf_common+0xb4>
 8006eee:	f109 0901 	add.w	r9, r9, #1
 8006ef2:	e7d7      	b.n	8006ea4 <_printf_common+0x9c>

08006ef4 <_printf_i>:
 8006ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ef8:	4617      	mov	r7, r2
 8006efa:	7e0a      	ldrb	r2, [r1, #24]
 8006efc:	b085      	sub	sp, #20
 8006efe:	2a6e      	cmp	r2, #110	; 0x6e
 8006f00:	4698      	mov	r8, r3
 8006f02:	4606      	mov	r6, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f08:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006f0c:	f000 80bc 	beq.w	8007088 <_printf_i+0x194>
 8006f10:	d81a      	bhi.n	8006f48 <_printf_i+0x54>
 8006f12:	2a63      	cmp	r2, #99	; 0x63
 8006f14:	d02e      	beq.n	8006f74 <_printf_i+0x80>
 8006f16:	d80a      	bhi.n	8006f2e <_printf_i+0x3a>
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	f000 80c8 	beq.w	80070ae <_printf_i+0x1ba>
 8006f1e:	2a58      	cmp	r2, #88	; 0x58
 8006f20:	f000 808a 	beq.w	8007038 <_printf_i+0x144>
 8006f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f28:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006f2c:	e02a      	b.n	8006f84 <_printf_i+0x90>
 8006f2e:	2a64      	cmp	r2, #100	; 0x64
 8006f30:	d001      	beq.n	8006f36 <_printf_i+0x42>
 8006f32:	2a69      	cmp	r2, #105	; 0x69
 8006f34:	d1f6      	bne.n	8006f24 <_printf_i+0x30>
 8006f36:	6821      	ldr	r1, [r4, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006f3e:	d023      	beq.n	8006f88 <_printf_i+0x94>
 8006f40:	1d11      	adds	r1, r2, #4
 8006f42:	6019      	str	r1, [r3, #0]
 8006f44:	6813      	ldr	r3, [r2, #0]
 8006f46:	e027      	b.n	8006f98 <_printf_i+0xa4>
 8006f48:	2a73      	cmp	r2, #115	; 0x73
 8006f4a:	f000 80b4 	beq.w	80070b6 <_printf_i+0x1c2>
 8006f4e:	d808      	bhi.n	8006f62 <_printf_i+0x6e>
 8006f50:	2a6f      	cmp	r2, #111	; 0x6f
 8006f52:	d02a      	beq.n	8006faa <_printf_i+0xb6>
 8006f54:	2a70      	cmp	r2, #112	; 0x70
 8006f56:	d1e5      	bne.n	8006f24 <_printf_i+0x30>
 8006f58:	680a      	ldr	r2, [r1, #0]
 8006f5a:	f042 0220 	orr.w	r2, r2, #32
 8006f5e:	600a      	str	r2, [r1, #0]
 8006f60:	e003      	b.n	8006f6a <_printf_i+0x76>
 8006f62:	2a75      	cmp	r2, #117	; 0x75
 8006f64:	d021      	beq.n	8006faa <_printf_i+0xb6>
 8006f66:	2a78      	cmp	r2, #120	; 0x78
 8006f68:	d1dc      	bne.n	8006f24 <_printf_i+0x30>
 8006f6a:	2278      	movs	r2, #120	; 0x78
 8006f6c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006f70:	496e      	ldr	r1, [pc, #440]	; (800712c <_printf_i+0x238>)
 8006f72:	e064      	b.n	800703e <_printf_i+0x14a>
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006f7a:	1d11      	adds	r1, r2, #4
 8006f7c:	6019      	str	r1, [r3, #0]
 8006f7e:	6813      	ldr	r3, [r2, #0]
 8006f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0a3      	b.n	80070d0 <_printf_i+0x1dc>
 8006f88:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006f8c:	f102 0104 	add.w	r1, r2, #4
 8006f90:	6019      	str	r1, [r3, #0]
 8006f92:	d0d7      	beq.n	8006f44 <_printf_i+0x50>
 8006f94:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	da03      	bge.n	8006fa4 <_printf_i+0xb0>
 8006f9c:	222d      	movs	r2, #45	; 0x2d
 8006f9e:	425b      	negs	r3, r3
 8006fa0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fa4:	4962      	ldr	r1, [pc, #392]	; (8007130 <_printf_i+0x23c>)
 8006fa6:	220a      	movs	r2, #10
 8006fa8:	e017      	b.n	8006fda <_printf_i+0xe6>
 8006faa:	6820      	ldr	r0, [r4, #0]
 8006fac:	6819      	ldr	r1, [r3, #0]
 8006fae:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006fb2:	d003      	beq.n	8006fbc <_printf_i+0xc8>
 8006fb4:	1d08      	adds	r0, r1, #4
 8006fb6:	6018      	str	r0, [r3, #0]
 8006fb8:	680b      	ldr	r3, [r1, #0]
 8006fba:	e006      	b.n	8006fca <_printf_i+0xd6>
 8006fbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fc0:	f101 0004 	add.w	r0, r1, #4
 8006fc4:	6018      	str	r0, [r3, #0]
 8006fc6:	d0f7      	beq.n	8006fb8 <_printf_i+0xc4>
 8006fc8:	880b      	ldrh	r3, [r1, #0]
 8006fca:	4959      	ldr	r1, [pc, #356]	; (8007130 <_printf_i+0x23c>)
 8006fcc:	2a6f      	cmp	r2, #111	; 0x6f
 8006fce:	bf14      	ite	ne
 8006fd0:	220a      	movne	r2, #10
 8006fd2:	2208      	moveq	r2, #8
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006fda:	6865      	ldr	r5, [r4, #4]
 8006fdc:	60a5      	str	r5, [r4, #8]
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	f2c0 809c 	blt.w	800711c <_printf_i+0x228>
 8006fe4:	6820      	ldr	r0, [r4, #0]
 8006fe6:	f020 0004 	bic.w	r0, r0, #4
 8006fea:	6020      	str	r0, [r4, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d13f      	bne.n	8007070 <_printf_i+0x17c>
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	f040 8095 	bne.w	8007120 <_printf_i+0x22c>
 8006ff6:	4675      	mov	r5, lr
 8006ff8:	2a08      	cmp	r2, #8
 8006ffa:	d10b      	bne.n	8007014 <_printf_i+0x120>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07da      	lsls	r2, r3, #31
 8007000:	d508      	bpl.n	8007014 <_printf_i+0x120>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6862      	ldr	r2, [r4, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	bfde      	ittt	le
 800700a:	2330      	movle	r3, #48	; 0x30
 800700c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007014:	ebae 0305 	sub.w	r3, lr, r5
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	f8cd 8000 	str.w	r8, [sp]
 800701e:	463b      	mov	r3, r7
 8007020:	aa03      	add	r2, sp, #12
 8007022:	4621      	mov	r1, r4
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff feef 	bl	8006e08 <_printf_common>
 800702a:	3001      	adds	r0, #1
 800702c:	d155      	bne.n	80070da <_printf_i+0x1e6>
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
 8007032:	b005      	add	sp, #20
 8007034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007038:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800703c:	493c      	ldr	r1, [pc, #240]	; (8007130 <_printf_i+0x23c>)
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007046:	f100 0504 	add.w	r5, r0, #4
 800704a:	601d      	str	r5, [r3, #0]
 800704c:	d001      	beq.n	8007052 <_printf_i+0x15e>
 800704e:	6803      	ldr	r3, [r0, #0]
 8007050:	e002      	b.n	8007058 <_printf_i+0x164>
 8007052:	0655      	lsls	r5, r2, #25
 8007054:	d5fb      	bpl.n	800704e <_printf_i+0x15a>
 8007056:	8803      	ldrh	r3, [r0, #0]
 8007058:	07d0      	lsls	r0, r2, #31
 800705a:	bf44      	itt	mi
 800705c:	f042 0220 	orrmi.w	r2, r2, #32
 8007060:	6022      	strmi	r2, [r4, #0]
 8007062:	b91b      	cbnz	r3, 800706c <_printf_i+0x178>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f022 0220 	bic.w	r2, r2, #32
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	2210      	movs	r2, #16
 800706e:	e7b1      	b.n	8006fd4 <_printf_i+0xe0>
 8007070:	4675      	mov	r5, lr
 8007072:	fbb3 f0f2 	udiv	r0, r3, r2
 8007076:	fb02 3310 	mls	r3, r2, r0, r3
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007080:	4603      	mov	r3, r0
 8007082:	2800      	cmp	r0, #0
 8007084:	d1f5      	bne.n	8007072 <_printf_i+0x17e>
 8007086:	e7b7      	b.n	8006ff8 <_printf_i+0x104>
 8007088:	6808      	ldr	r0, [r1, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	6949      	ldr	r1, [r1, #20]
 800708e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007092:	d004      	beq.n	800709e <_printf_i+0x1aa>
 8007094:	1d10      	adds	r0, r2, #4
 8007096:	6018      	str	r0, [r3, #0]
 8007098:	6813      	ldr	r3, [r2, #0]
 800709a:	6019      	str	r1, [r3, #0]
 800709c:	e007      	b.n	80070ae <_printf_i+0x1ba>
 800709e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070a2:	f102 0004 	add.w	r0, r2, #4
 80070a6:	6018      	str	r0, [r3, #0]
 80070a8:	6813      	ldr	r3, [r2, #0]
 80070aa:	d0f6      	beq.n	800709a <_printf_i+0x1a6>
 80070ac:	8019      	strh	r1, [r3, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	4675      	mov	r5, lr
 80070b4:	e7b1      	b.n	800701a <_printf_i+0x126>
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	1d11      	adds	r1, r2, #4
 80070ba:	6019      	str	r1, [r3, #0]
 80070bc:	6815      	ldr	r5, [r2, #0]
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f7fb fd74 	bl	8002bb0 <memchr>
 80070c8:	b108      	cbz	r0, 80070ce <_printf_i+0x1da>
 80070ca:	1b40      	subs	r0, r0, r5
 80070cc:	6060      	str	r0, [r4, #4]
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	2300      	movs	r3, #0
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d8:	e79f      	b.n	800701a <_printf_i+0x126>
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	462a      	mov	r2, r5
 80070de:	4639      	mov	r1, r7
 80070e0:	4630      	mov	r0, r6
 80070e2:	47c0      	blx	r8
 80070e4:	3001      	adds	r0, #1
 80070e6:	d0a2      	beq.n	800702e <_printf_i+0x13a>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	079b      	lsls	r3, r3, #30
 80070ec:	d507      	bpl.n	80070fe <_printf_i+0x20a>
 80070ee:	2500      	movs	r5, #0
 80070f0:	f104 0919 	add.w	r9, r4, #25
 80070f4:	68e3      	ldr	r3, [r4, #12]
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	429d      	cmp	r5, r3
 80070fc:	db05      	blt.n	800710a <_printf_i+0x216>
 80070fe:	68e0      	ldr	r0, [r4, #12]
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	4298      	cmp	r0, r3
 8007104:	bfb8      	it	lt
 8007106:	4618      	movlt	r0, r3
 8007108:	e793      	b.n	8007032 <_printf_i+0x13e>
 800710a:	2301      	movs	r3, #1
 800710c:	464a      	mov	r2, r9
 800710e:	4639      	mov	r1, r7
 8007110:	4630      	mov	r0, r6
 8007112:	47c0      	blx	r8
 8007114:	3001      	adds	r0, #1
 8007116:	d08a      	beq.n	800702e <_printf_i+0x13a>
 8007118:	3501      	adds	r5, #1
 800711a:	e7eb      	b.n	80070f4 <_printf_i+0x200>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1a7      	bne.n	8007070 <_printf_i+0x17c>
 8007120:	780b      	ldrb	r3, [r1, #0]
 8007122:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007126:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800712a:	e765      	b.n	8006ff8 <_printf_i+0x104>
 800712c:	0804c982 	.word	0x0804c982
 8007130:	0804c971 	.word	0x0804c971

08007134 <_putc_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	460d      	mov	r5, r1
 8007138:	4614      	mov	r4, r2
 800713a:	4606      	mov	r6, r0
 800713c:	b118      	cbz	r0, 8007146 <_putc_r+0x12>
 800713e:	6983      	ldr	r3, [r0, #24]
 8007140:	b90b      	cbnz	r3, 8007146 <_putc_r+0x12>
 8007142:	f7ff f8eb 	bl	800631c <__sinit>
 8007146:	4b13      	ldr	r3, [pc, #76]	; (8007194 <_putc_r+0x60>)
 8007148:	429c      	cmp	r4, r3
 800714a:	d112      	bne.n	8007172 <_putc_r+0x3e>
 800714c:	6874      	ldr	r4, [r6, #4]
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	3b01      	subs	r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	da16      	bge.n	8007186 <_putc_r+0x52>
 8007158:	69a2      	ldr	r2, [r4, #24]
 800715a:	4293      	cmp	r3, r2
 800715c:	db02      	blt.n	8007164 <_putc_r+0x30>
 800715e:	b2eb      	uxtb	r3, r5
 8007160:	2b0a      	cmp	r3, #10
 8007162:	d110      	bne.n	8007186 <_putc_r+0x52>
 8007164:	4622      	mov	r2, r4
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800716e:	f7ff bba9 	b.w	80068c4 <__swbuf_r>
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <_putc_r+0x64>)
 8007174:	429c      	cmp	r4, r3
 8007176:	d101      	bne.n	800717c <_putc_r+0x48>
 8007178:	68b4      	ldr	r4, [r6, #8]
 800717a:	e7e8      	b.n	800714e <_putc_r+0x1a>
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <_putc_r+0x68>)
 800717e:	429c      	cmp	r4, r3
 8007180:	bf08      	it	eq
 8007182:	68f4      	ldreq	r4, [r6, #12]
 8007184:	e7e3      	b.n	800714e <_putc_r+0x1a>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	701d      	strb	r5, [r3, #0]
 800718e:	b2e8      	uxtb	r0, r5
 8007190:	bd70      	pop	{r4, r5, r6, pc}
 8007192:	bf00      	nop
 8007194:	0804c91c 	.word	0x0804c91c
 8007198:	0804c93c 	.word	0x0804c93c
 800719c:	0804c8fc 	.word	0x0804c8fc

080071a0 <_read_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4c07      	ldr	r4, [pc, #28]	; (80071c0 <_read_r+0x20>)
 80071a4:	4605      	mov	r5, r0
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7fe ff22 	bl	8005ff8 <_read>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_read_r+0x1e>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	b103      	cbz	r3, 80071be <_read_r+0x1e>
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	2000aa68 	.word	0x2000aa68

080071c4 <_fstat_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4c07      	ldr	r4, [pc, #28]	; (80071e4 <_fstat_r+0x20>)
 80071c8:	2300      	movs	r3, #0
 80071ca:	4605      	mov	r5, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	f7fe ff3c 	bl	800604e <_fstat>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	d102      	bne.n	80071e0 <_fstat_r+0x1c>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	b103      	cbz	r3, 80071e0 <_fstat_r+0x1c>
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	bf00      	nop
 80071e4:	2000aa68 	.word	0x2000aa68

080071e8 <_isatty_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4c06      	ldr	r4, [pc, #24]	; (8007204 <_isatty_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4605      	mov	r5, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	f7fe ff30 	bl	8006058 <_isatty>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_isatty_r+0x1a>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_isatty_r+0x1a>
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	2000aa68 	.word	0x2000aa68

08007208 <tanhf>:
 8007208:	b510      	push	{r4, lr}
 800720a:	ee10 4a10 	vmov	r4, s0
 800720e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007212:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007216:	ed2d 8b02 	vpush	{d8}
 800721a:	eef0 7a40 	vmov.f32	s15, s0
 800721e:	db0c      	blt.n	800723a <tanhf+0x32>
 8007220:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007224:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8007228:	2c00      	cmp	r4, #0
 800722a:	bfac      	ite	ge
 800722c:	ee37 0a00 	vaddge.f32	s0, s14, s0
 8007230:	ee37 0a40 	vsublt.f32	s0, s14, s0
 8007234:	ecbd 8b02 	vpop	{d8}
 8007238:	bd10      	pop	{r4, pc}
 800723a:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <tanhf+0xa0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	dc30      	bgt.n	80072a2 <tanhf+0x9a>
 8007240:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8007244:	da06      	bge.n	8007254 <tanhf+0x4c>
 8007246:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800724a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800724e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007252:	e7ef      	b.n	8007234 <tanhf+0x2c>
 8007254:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007258:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800725c:	db12      	blt.n	8007284 <tanhf+0x7c>
 800725e:	f000 ffaf 	bl	80081c0 <fabsf>
 8007262:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007266:	f000 fe7f 	bl	8007f68 <expm1f>
 800726a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800726e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007272:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007276:	ee30 0a67 	vsub.f32	s0, s0, s15
 800727a:	2c00      	cmp	r4, #0
 800727c:	bfb8      	it	lt
 800727e:	eeb1 0a40 	vneglt.f32	s0, s0
 8007282:	e7d7      	b.n	8007234 <tanhf+0x2c>
 8007284:	f000 ff9c 	bl	80081c0 <fabsf>
 8007288:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800728c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007290:	f000 fe6a 	bl	8007f68 <expm1f>
 8007294:	ee70 7a08 	vadd.f32	s15, s0, s16
 8007298:	eeb1 7a40 	vneg.f32	s14, s0
 800729c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80072a0:	e7eb      	b.n	800727a <tanhf+0x72>
 80072a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072a6:	e7e8      	b.n	800727a <tanhf+0x72>
 80072a8:	41afffff 	.word	0x41afffff

080072ac <expf>:
 80072ac:	b530      	push	{r4, r5, lr}
 80072ae:	ed2d 8b02 	vpush	{d8}
 80072b2:	4d35      	ldr	r5, [pc, #212]	; (8007388 <expf+0xdc>)
 80072b4:	b08b      	sub	sp, #44	; 0x2c
 80072b6:	eeb0 8a40 	vmov.f32	s16, s0
 80072ba:	f000 f9ed 	bl	8007698 <__ieee754_expf>
 80072be:	f995 3000 	ldrsb.w	r3, [r5]
 80072c2:	3301      	adds	r3, #1
 80072c4:	ee10 4a10 	vmov	r4, s0
 80072c8:	d030      	beq.n	800732c <expf+0x80>
 80072ca:	eeb0 0a48 	vmov.f32	s0, s16
 80072ce:	f000 ff7e 	bl	80081ce <finitef>
 80072d2:	b358      	cbz	r0, 800732c <expf+0x80>
 80072d4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800738c <expf+0xe0>
 80072d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	dd35      	ble.n	800734e <expf+0xa2>
 80072e2:	2303      	movs	r3, #3
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <expf+0xe4>)
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	ee18 0a10 	vmov	r0, s16
 80072ee:	2300      	movs	r3, #0
 80072f0:	9308      	str	r3, [sp, #32]
 80072f2:	f7fb fe11 	bl	8002f18 <__aeabi_f2d>
 80072f6:	f995 3000 	ldrsb.w	r3, [r5]
 80072fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007302:	b9cb      	cbnz	r3, 8007338 <expf+0x8c>
 8007304:	4b23      	ldr	r3, [pc, #140]	; (8007394 <expf+0xe8>)
 8007306:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800730a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800730e:	4668      	mov	r0, sp
 8007310:	f000 fd9f 	bl	8007e52 <matherr>
 8007314:	b1b0      	cbz	r0, 8007344 <expf+0x98>
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	b11b      	cbz	r3, 8007322 <expf+0x76>
 800731a:	f7fe fef5 	bl	8006108 <__errno>
 800731e:	9b08      	ldr	r3, [sp, #32]
 8007320:	6003      	str	r3, [r0, #0]
 8007322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007326:	f7fc f8e5 	bl	80034f4 <__aeabi_d2f>
 800732a:	4604      	mov	r4, r0
 800732c:	ee00 4a10 	vmov	s0, r4
 8007330:	b00b      	add	sp, #44	; 0x2c
 8007332:	ecbd 8b02 	vpop	{d8}
 8007336:	bd30      	pop	{r4, r5, pc}
 8007338:	4917      	ldr	r1, [pc, #92]	; (8007398 <expf+0xec>)
 800733a:	2000      	movs	r0, #0
 800733c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d1e4      	bne.n	800730e <expf+0x62>
 8007344:	f7fe fee0 	bl	8006108 <__errno>
 8007348:	2322      	movs	r3, #34	; 0x22
 800734a:	6003      	str	r3, [r0, #0]
 800734c:	e7e3      	b.n	8007316 <expf+0x6a>
 800734e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800739c <expf+0xf0>
 8007352:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	d5e7      	bpl.n	800732c <expf+0x80>
 800735c:	2304      	movs	r3, #4
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <expf+0xe4>)
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	ee18 0a10 	vmov	r0, s16
 8007368:	2300      	movs	r3, #0
 800736a:	9308      	str	r3, [sp, #32]
 800736c:	f7fb fdd4 	bl	8002f18 <__aeabi_f2d>
 8007370:	2300      	movs	r3, #0
 8007372:	2200      	movs	r2, #0
 8007374:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800737c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007380:	f995 3000 	ldrsb.w	r3, [r5]
 8007384:	e7dc      	b.n	8007340 <expf+0x94>
 8007386:	bf00      	nop
 8007388:	2000084c 	.word	0x2000084c
 800738c:	42b17180 	.word	0x42b17180
 8007390:	0804c993 	.word	0x0804c993
 8007394:	47efffff 	.word	0x47efffff
 8007398:	7ff00000 	.word	0x7ff00000
 800739c:	c2cff1b5 	.word	0xc2cff1b5

080073a0 <powf>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	ed2d 8b04 	vpush	{d8-d9}
 80073a6:	4cb5      	ldr	r4, [pc, #724]	; (800767c <powf+0x2dc>)
 80073a8:	b08a      	sub	sp, #40	; 0x28
 80073aa:	eef0 8a40 	vmov.f32	s17, s0
 80073ae:	eeb0 8a60 	vmov.f32	s16, s1
 80073b2:	f000 fa45 	bl	8007840 <__ieee754_powf>
 80073b6:	f994 5000 	ldrsb.w	r5, [r4]
 80073ba:	1c6b      	adds	r3, r5, #1
 80073bc:	eeb0 9a40 	vmov.f32	s18, s0
 80073c0:	4626      	mov	r6, r4
 80073c2:	d05d      	beq.n	8007480 <powf+0xe0>
 80073c4:	eeb4 8a48 	vcmp.f32	s16, s16
 80073c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073cc:	d658      	bvs.n	8007480 <powf+0xe0>
 80073ce:	eef4 8a68 	vcmp.f32	s17, s17
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	d721      	bvc.n	800741c <powf+0x7c>
 80073d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	d14e      	bne.n	8007480 <powf+0xe0>
 80073e2:	2301      	movs	r3, #1
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	4ba6      	ldr	r3, [pc, #664]	; (8007680 <powf+0x2e0>)
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	ee18 0a90 	vmov	r0, s17
 80073ee:	2300      	movs	r3, #0
 80073f0:	9308      	str	r3, [sp, #32]
 80073f2:	f7fb fd91 	bl	8002f18 <__aeabi_f2d>
 80073f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073fa:	ee18 0a10 	vmov	r0, s16
 80073fe:	f7fb fd8b 	bl	8002f18 <__aeabi_f2d>
 8007402:	4ba0      	ldr	r3, [pc, #640]	; (8007684 <powf+0x2e4>)
 8007404:	2200      	movs	r2, #0
 8007406:	2d02      	cmp	r5, #2
 8007408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800740c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007410:	d030      	beq.n	8007474 <powf+0xd4>
 8007412:	4668      	mov	r0, sp
 8007414:	f000 fd1d 	bl	8007e52 <matherr>
 8007418:	bb30      	cbnz	r0, 8007468 <powf+0xc8>
 800741a:	e062      	b.n	80074e2 <powf+0x142>
 800741c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007424:	d162      	bne.n	80074ec <powf+0x14c>
 8007426:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742e:	d12d      	bne.n	800748c <powf+0xec>
 8007430:	2301      	movs	r3, #1
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	4b92      	ldr	r3, [pc, #584]	; (8007680 <powf+0x2e0>)
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	ee18 0a90 	vmov	r0, s17
 800743c:	2300      	movs	r3, #0
 800743e:	9308      	str	r3, [sp, #32]
 8007440:	f7fb fd6a 	bl	8002f18 <__aeabi_f2d>
 8007444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007448:	ee18 0a10 	vmov	r0, s16
 800744c:	f7fb fd64 	bl	8002f18 <__aeabi_f2d>
 8007450:	2200      	movs	r2, #0
 8007452:	2300      	movs	r3, #0
 8007454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800745c:	2d00      	cmp	r5, #0
 800745e:	d0d8      	beq.n	8007412 <powf+0x72>
 8007460:	4b88      	ldr	r3, [pc, #544]	; (8007684 <powf+0x2e4>)
 8007462:	2200      	movs	r2, #0
 8007464:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007468:	9b08      	ldr	r3, [sp, #32]
 800746a:	b11b      	cbz	r3, 8007474 <powf+0xd4>
 800746c:	f7fe fe4c 	bl	8006108 <__errno>
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	6003      	str	r3, [r0, #0]
 8007474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007478:	f7fc f83c 	bl	80034f4 <__aeabi_d2f>
 800747c:	ee09 0a10 	vmov	s18, r0
 8007480:	eeb0 0a49 	vmov.f32	s0, s18
 8007484:	b00a      	add	sp, #40	; 0x28
 8007486:	ecbd 8b04 	vpop	{d8-d9}
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	eeb0 0a48 	vmov.f32	s0, s16
 8007490:	f000 fe9d 	bl	80081ce <finitef>
 8007494:	2800      	cmp	r0, #0
 8007496:	d0f3      	beq.n	8007480 <powf+0xe0>
 8007498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a0:	d5ee      	bpl.n	8007480 <powf+0xe0>
 80074a2:	2301      	movs	r3, #1
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4b76      	ldr	r3, [pc, #472]	; (8007680 <powf+0x2e0>)
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	ee18 0a90 	vmov	r0, s17
 80074ae:	2300      	movs	r3, #0
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	f7fb fd31 	bl	8002f18 <__aeabi_f2d>
 80074b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ba:	ee18 0a10 	vmov	r0, s16
 80074be:	f7fb fd2b 	bl	8002f18 <__aeabi_f2d>
 80074c2:	f994 3000 	ldrsb.w	r3, [r4]
 80074c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ca:	b923      	cbnz	r3, 80074d6 <powf+0x136>
 80074cc:	2200      	movs	r2, #0
 80074ce:	2300      	movs	r3, #0
 80074d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074d4:	e79d      	b.n	8007412 <powf+0x72>
 80074d6:	496c      	ldr	r1, [pc, #432]	; (8007688 <powf+0x2e8>)
 80074d8:	2000      	movs	r0, #0
 80074da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d197      	bne.n	8007412 <powf+0x72>
 80074e2:	f7fe fe11 	bl	8006108 <__errno>
 80074e6:	2321      	movs	r3, #33	; 0x21
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	e7bd      	b.n	8007468 <powf+0xc8>
 80074ec:	f000 fe6f 	bl	80081ce <finitef>
 80074f0:	4605      	mov	r5, r0
 80074f2:	2800      	cmp	r0, #0
 80074f4:	f040 8091 	bne.w	800761a <powf+0x27a>
 80074f8:	eeb0 0a68 	vmov.f32	s0, s17
 80074fc:	f000 fe67 	bl	80081ce <finitef>
 8007500:	2800      	cmp	r0, #0
 8007502:	f000 808a 	beq.w	800761a <powf+0x27a>
 8007506:	eeb0 0a48 	vmov.f32	s0, s16
 800750a:	f000 fe60 	bl	80081ce <finitef>
 800750e:	2800      	cmp	r0, #0
 8007510:	f000 8083 	beq.w	800761a <powf+0x27a>
 8007514:	eeb4 9a49 	vcmp.f32	s18, s18
 8007518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751c:	f994 4000 	ldrsb.w	r4, [r4]
 8007520:	4b57      	ldr	r3, [pc, #348]	; (8007680 <powf+0x2e0>)
 8007522:	d71b      	bvc.n	800755c <powf+0x1bc>
 8007524:	2201      	movs	r2, #1
 8007526:	ee18 0a90 	vmov	r0, s17
 800752a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800752e:	9508      	str	r5, [sp, #32]
 8007530:	f7fb fcf2 	bl	8002f18 <__aeabi_f2d>
 8007534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007538:	ee18 0a10 	vmov	r0, s16
 800753c:	f7fb fcec 	bl	8002f18 <__aeabi_f2d>
 8007540:	2200      	movs	r2, #0
 8007542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007546:	2300      	movs	r3, #0
 8007548:	2c00      	cmp	r4, #0
 800754a:	d0c1      	beq.n	80074d0 <powf+0x130>
 800754c:	4610      	mov	r0, r2
 800754e:	4619      	mov	r1, r3
 8007550:	f7fb fe60 	bl	8003214 <__aeabi_ddiv>
 8007554:	2c02      	cmp	r4, #2
 8007556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800755a:	e7c1      	b.n	80074e0 <powf+0x140>
 800755c:	2203      	movs	r2, #3
 800755e:	ee18 0a90 	vmov	r0, s17
 8007562:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007566:	9508      	str	r5, [sp, #32]
 8007568:	f7fb fcd6 	bl	8002f18 <__aeabi_f2d>
 800756c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007570:	ee18 0a10 	vmov	r0, s16
 8007574:	f7fb fcd0 	bl	8002f18 <__aeabi_f2d>
 8007578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800757c:	bb5c      	cbnz	r4, 80075d6 <powf+0x236>
 800757e:	4b43      	ldr	r3, [pc, #268]	; (800768c <powf+0x2ec>)
 8007580:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007584:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007590:	d56c      	bpl.n	800766c <powf+0x2cc>
 8007592:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007596:	ee68 7a27 	vmul.f32	s15, s16, s15
 800759a:	ee17 0a90 	vmov	r0, s15
 800759e:	f7fb fcbb 	bl	8002f18 <__aeabi_f2d>
 80075a2:	4604      	mov	r4, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	ec45 4b10 	vmov	d0, r4, r5
 80075aa:	f000 fc55 	bl	8007e58 <rint>
 80075ae:	4620      	mov	r0, r4
 80075b0:	ec53 2b10 	vmov	r2, r3, d0
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7fb ff6b 	bl	8003490 <__aeabi_dcmpeq>
 80075ba:	b920      	cbnz	r0, 80075c6 <powf+0x226>
 80075bc:	4b34      	ldr	r3, [pc, #208]	; (8007690 <powf+0x2f0>)
 80075be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80075c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075c6:	f996 3000 	ldrsb.w	r3, [r6]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d14e      	bne.n	800766c <powf+0x2cc>
 80075ce:	f7fe fd9b 	bl	8006108 <__errno>
 80075d2:	2322      	movs	r3, #34	; 0x22
 80075d4:	e788      	b.n	80074e8 <powf+0x148>
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <powf+0x2f4>)
 80075d8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80075dc:	2200      	movs	r2, #0
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075e6:	d5ee      	bpl.n	80075c6 <powf+0x226>
 80075e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80075ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 80075f0:	ee17 0a90 	vmov	r0, s15
 80075f4:	f7fb fc90 	bl	8002f18 <__aeabi_f2d>
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	ec45 4b10 	vmov	d0, r4, r5
 8007600:	f000 fc2a 	bl	8007e58 <rint>
 8007604:	4620      	mov	r0, r4
 8007606:	ec53 2b10 	vmov	r2, r3, d0
 800760a:	4629      	mov	r1, r5
 800760c:	f7fb ff40 	bl	8003490 <__aeabi_dcmpeq>
 8007610:	2800      	cmp	r0, #0
 8007612:	d1d8      	bne.n	80075c6 <powf+0x226>
 8007614:	2200      	movs	r2, #0
 8007616:	4b1c      	ldr	r3, [pc, #112]	; (8007688 <powf+0x2e8>)
 8007618:	e7d3      	b.n	80075c2 <powf+0x222>
 800761a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	f47f af2d 	bne.w	8007480 <powf+0xe0>
 8007626:	eeb0 0a68 	vmov.f32	s0, s17
 800762a:	f000 fdd0 	bl	80081ce <finitef>
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f af26 	beq.w	8007480 <powf+0xe0>
 8007634:	eeb0 0a48 	vmov.f32	s0, s16
 8007638:	f000 fdc9 	bl	80081ce <finitef>
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f af1f 	beq.w	8007480 <powf+0xe0>
 8007642:	2304      	movs	r3, #4
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <powf+0x2e0>)
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	ee18 0a90 	vmov	r0, s17
 800764e:	2300      	movs	r3, #0
 8007650:	9308      	str	r3, [sp, #32]
 8007652:	f7fb fc61 	bl	8002f18 <__aeabi_f2d>
 8007656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800765a:	ee18 0a10 	vmov	r0, s16
 800765e:	f7fb fc5b 	bl	8002f18 <__aeabi_f2d>
 8007662:	2200      	movs	r2, #0
 8007664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007668:	2300      	movs	r3, #0
 800766a:	e7aa      	b.n	80075c2 <powf+0x222>
 800766c:	4668      	mov	r0, sp
 800766e:	f000 fbf0 	bl	8007e52 <matherr>
 8007672:	2800      	cmp	r0, #0
 8007674:	f47f aef8 	bne.w	8007468 <powf+0xc8>
 8007678:	e7a9      	b.n	80075ce <powf+0x22e>
 800767a:	bf00      	nop
 800767c:	2000084c 	.word	0x2000084c
 8007680:	0804c998 	.word	0x0804c998
 8007684:	3ff00000 	.word	0x3ff00000
 8007688:	fff00000 	.word	0xfff00000
 800768c:	47efffff 	.word	0x47efffff
 8007690:	c7efffff 	.word	0xc7efffff
 8007694:	7ff00000 	.word	0x7ff00000

08007698 <__ieee754_expf>:
 8007698:	ee10 2a10 	vmov	r2, s0
 800769c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80076a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80076a4:	d902      	bls.n	80076ac <__ieee754_expf+0x14>
 80076a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80076aa:	4770      	bx	lr
 80076ac:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80076b0:	d106      	bne.n	80076c0 <__ieee754_expf+0x28>
 80076b2:	eddf 7a51 	vldr	s15, [pc, #324]	; 80077f8 <__ieee754_expf+0x160>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bf18      	it	ne
 80076ba:	eeb0 0a67 	vmovne.f32	s0, s15
 80076be:	4770      	bx	lr
 80076c0:	484e      	ldr	r0, [pc, #312]	; (80077fc <__ieee754_expf+0x164>)
 80076c2:	4282      	cmp	r2, r0
 80076c4:	dd04      	ble.n	80076d0 <__ieee754_expf+0x38>
 80076c6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8007800 <__ieee754_expf+0x168>
 80076ca:	ee20 0a00 	vmul.f32	s0, s0, s0
 80076ce:	4770      	bx	lr
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	da03      	bge.n	80076dc <__ieee754_expf+0x44>
 80076d4:	4a4b      	ldr	r2, [pc, #300]	; (8007804 <__ieee754_expf+0x16c>)
 80076d6:	4291      	cmp	r1, r2
 80076d8:	f200 808a 	bhi.w	80077f0 <__ieee754_expf+0x158>
 80076dc:	4a4a      	ldr	r2, [pc, #296]	; (8007808 <__ieee754_expf+0x170>)
 80076de:	4291      	cmp	r1, r2
 80076e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80076e4:	d954      	bls.n	8007790 <__ieee754_expf+0xf8>
 80076e6:	4a49      	ldr	r2, [pc, #292]	; (800780c <__ieee754_expf+0x174>)
 80076e8:	4291      	cmp	r1, r2
 80076ea:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80076ee:	d836      	bhi.n	800775e <__ieee754_expf+0xc6>
 80076f0:	4947      	ldr	r1, [pc, #284]	; (8007810 <__ieee754_expf+0x178>)
 80076f2:	4411      	add	r1, r2
 80076f4:	ed91 7a00 	vldr	s14, [r1]
 80076f8:	4946      	ldr	r1, [pc, #280]	; (8007814 <__ieee754_expf+0x17c>)
 80076fa:	440a      	add	r2, r1
 80076fc:	edd2 7a00 	vldr	s15, [r2]
 8007700:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007704:	f1c3 0201 	rsb	r2, r3, #1
 8007708:	1ad2      	subs	r2, r2, r3
 800770a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800770e:	ee60 6a00 	vmul.f32	s13, s0, s0
 8007712:	eddf 5a41 	vldr	s11, [pc, #260]	; 8007818 <__ieee754_expf+0x180>
 8007716:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800781c <__ieee754_expf+0x184>
 800771a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800771e:	eddf 5a40 	vldr	s11, [pc, #256]	; 8007820 <__ieee754_expf+0x188>
 8007722:	eee6 5a85 	vfma.f32	s11, s13, s10
 8007726:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8007824 <__ieee754_expf+0x18c>
 800772a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800772e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007828 <__ieee754_expf+0x190>
 8007732:	eee6 5a85 	vfma.f32	s11, s13, s10
 8007736:	eeb0 5a40 	vmov.f32	s10, s0
 800773a:	eea6 5ae5 	vfms.f32	s10, s13, s11
 800773e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8007742:	eef0 6a45 	vmov.f32	s13, s10
 8007746:	ee20 5a05 	vmul.f32	s10, s0, s10
 800774a:	bb92      	cbnz	r2, 80077b2 <__ieee754_expf+0x11a>
 800774c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007750:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007754:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007758:	ee36 0a40 	vsub.f32	s0, s12, s0
 800775c:	4770      	bx	lr
 800775e:	4b33      	ldr	r3, [pc, #204]	; (800782c <__ieee754_expf+0x194>)
 8007760:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007830 <__ieee754_expf+0x198>
 8007764:	4413      	add	r3, r2
 8007766:	edd3 7a00 	vldr	s15, [r3]
 800776a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800776e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007834 <__ieee754_expf+0x19c>
 8007772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007776:	ee17 2a90 	vmov	r2, s15
 800777a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800777e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007782:	eeb0 7a40 	vmov.f32	s14, s0
 8007786:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007838 <__ieee754_expf+0x1a0>
 800778a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800778e:	e7bc      	b.n	800770a <__ieee754_expf+0x72>
 8007790:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8007794:	d20b      	bcs.n	80077ae <__ieee754_expf+0x116>
 8007796:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8007800 <__ieee754_expf+0x168>
 800779a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800779e:	eef4 6ac6 	vcmpe.f32	s13, s12
 80077a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a6:	dd02      	ble.n	80077ae <__ieee754_expf+0x116>
 80077a8:	ee30 0a06 	vadd.f32	s0, s0, s12
 80077ac:	4770      	bx	lr
 80077ae:	2200      	movs	r2, #0
 80077b0:	e7ad      	b.n	800770e <__ieee754_expf+0x76>
 80077b2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80077b6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80077ba:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80077be:	bfb8      	it	lt
 80077c0:	3264      	addlt	r2, #100	; 0x64
 80077c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077c6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80077ca:	ee76 7a40 	vsub.f32	s15, s12, s0
 80077ce:	ee17 3a90 	vmov	r3, s15
 80077d2:	bfab      	itete	ge
 80077d4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80077d8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80077dc:	ee00 3a10 	vmovge	s0, r3
 80077e0:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800783c <__ieee754_expf+0x1a4>
 80077e4:	bfbc      	itt	lt
 80077e6:	ee00 3a10 	vmovlt	s0, r3
 80077ea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80077ee:	4770      	bx	lr
 80077f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80077f8 <__ieee754_expf+0x160>
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	00000000 	.word	0x00000000
 80077fc:	42b17217 	.word	0x42b17217
 8007800:	7149f2ca 	.word	0x7149f2ca
 8007804:	42cff1b5 	.word	0x42cff1b5
 8007808:	3eb17218 	.word	0x3eb17218
 800780c:	3f851591 	.word	0x3f851591
 8007810:	0804c9a8 	.word	0x0804c9a8
 8007814:	0804c9b0 	.word	0x0804c9b0
 8007818:	3331bb4c 	.word	0x3331bb4c
 800781c:	b5ddea0e 	.word	0xb5ddea0e
 8007820:	388ab355 	.word	0x388ab355
 8007824:	bb360b61 	.word	0xbb360b61
 8007828:	3e2aaaab 	.word	0x3e2aaaab
 800782c:	0804c9a0 	.word	0x0804c9a0
 8007830:	3fb8aa3b 	.word	0x3fb8aa3b
 8007834:	3f317180 	.word	0x3f317180
 8007838:	3717f7d1 	.word	0x3717f7d1
 800783c:	0d800000 	.word	0x0d800000

08007840 <__ieee754_powf>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	ee10 5a90 	vmov	r5, s1
 8007848:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800784c:	ed2d 8b02 	vpush	{d8}
 8007850:	eeb0 8a40 	vmov.f32	s16, s0
 8007854:	eef0 8a60 	vmov.f32	s17, s1
 8007858:	f000 8295 	beq.w	8007d86 <__ieee754_powf+0x546>
 800785c:	ee10 8a10 	vmov	r8, s0
 8007860:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007864:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007868:	dc06      	bgt.n	8007878 <__ieee754_powf+0x38>
 800786a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800786e:	dd0a      	ble.n	8007886 <__ieee754_powf+0x46>
 8007870:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007874:	f000 8287 	beq.w	8007d86 <__ieee754_powf+0x546>
 8007878:	ecbd 8b02 	vpop	{d8}
 800787c:	48d9      	ldr	r0, [pc, #868]	; (8007be4 <__ieee754_powf+0x3a4>)
 800787e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	f000 bcaf 	b.w	80081e4 <nanf>
 8007886:	f1b8 0f00 	cmp.w	r8, #0
 800788a:	da1d      	bge.n	80078c8 <__ieee754_powf+0x88>
 800788c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007890:	da2c      	bge.n	80078ec <__ieee754_powf+0xac>
 8007892:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007896:	db30      	blt.n	80078fa <__ieee754_powf+0xba>
 8007898:	15fb      	asrs	r3, r7, #23
 800789a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800789e:	fa47 f603 	asr.w	r6, r7, r3
 80078a2:	fa06 f303 	lsl.w	r3, r6, r3
 80078a6:	429f      	cmp	r7, r3
 80078a8:	d127      	bne.n	80078fa <__ieee754_powf+0xba>
 80078aa:	f006 0601 	and.w	r6, r6, #1
 80078ae:	f1c6 0602 	rsb	r6, r6, #2
 80078b2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80078b6:	d122      	bne.n	80078fe <__ieee754_powf+0xbe>
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	f280 826a 	bge.w	8007d92 <__ieee754_powf+0x552>
 80078be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80078c2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80078c6:	e00d      	b.n	80078e4 <__ieee754_powf+0xa4>
 80078c8:	2600      	movs	r6, #0
 80078ca:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80078ce:	d1f0      	bne.n	80078b2 <__ieee754_powf+0x72>
 80078d0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80078d4:	f000 8257 	beq.w	8007d86 <__ieee754_powf+0x546>
 80078d8:	dd0a      	ble.n	80078f0 <__ieee754_powf+0xb0>
 80078da:	2d00      	cmp	r5, #0
 80078dc:	f280 8256 	bge.w	8007d8c <__ieee754_powf+0x54c>
 80078e0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007be8 <__ieee754_powf+0x3a8>
 80078e4:	ecbd 8b02 	vpop	{d8}
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	2602      	movs	r6, #2
 80078ee:	e7ec      	b.n	80078ca <__ieee754_powf+0x8a>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	daf5      	bge.n	80078e0 <__ieee754_powf+0xa0>
 80078f4:	eeb1 0a68 	vneg.f32	s0, s17
 80078f8:	e7f4      	b.n	80078e4 <__ieee754_powf+0xa4>
 80078fa:	2600      	movs	r6, #0
 80078fc:	e7d9      	b.n	80078b2 <__ieee754_powf+0x72>
 80078fe:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007902:	d102      	bne.n	800790a <__ieee754_powf+0xca>
 8007904:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007908:	e7ec      	b.n	80078e4 <__ieee754_powf+0xa4>
 800790a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800790e:	eeb0 0a48 	vmov.f32	s0, s16
 8007912:	d108      	bne.n	8007926 <__ieee754_powf+0xe6>
 8007914:	f1b8 0f00 	cmp.w	r8, #0
 8007918:	db05      	blt.n	8007926 <__ieee754_powf+0xe6>
 800791a:	ecbd 8b02 	vpop	{d8}
 800791e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007922:	f000 ba4f 	b.w	8007dc4 <__ieee754_sqrtf>
 8007926:	f000 fc4b 	bl	80081c0 <fabsf>
 800792a:	b124      	cbz	r4, 8007936 <__ieee754_powf+0xf6>
 800792c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007930:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007934:	d117      	bne.n	8007966 <__ieee754_powf+0x126>
 8007936:	2d00      	cmp	r5, #0
 8007938:	bfbc      	itt	lt
 800793a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800793e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007942:	f1b8 0f00 	cmp.w	r8, #0
 8007946:	dacd      	bge.n	80078e4 <__ieee754_powf+0xa4>
 8007948:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800794c:	ea54 0306 	orrs.w	r3, r4, r6
 8007950:	d104      	bne.n	800795c <__ieee754_powf+0x11c>
 8007952:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007956:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800795a:	e7c3      	b.n	80078e4 <__ieee754_powf+0xa4>
 800795c:	2e01      	cmp	r6, #1
 800795e:	d1c1      	bne.n	80078e4 <__ieee754_powf+0xa4>
 8007960:	eeb1 0a40 	vneg.f32	s0, s0
 8007964:	e7be      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007966:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800796a:	3801      	subs	r0, #1
 800796c:	ea56 0300 	orrs.w	r3, r6, r0
 8007970:	d104      	bne.n	800797c <__ieee754_powf+0x13c>
 8007972:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007976:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800797a:	e7b3      	b.n	80078e4 <__ieee754_powf+0xa4>
 800797c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007980:	dd6d      	ble.n	8007a5e <__ieee754_powf+0x21e>
 8007982:	4b9a      	ldr	r3, [pc, #616]	; (8007bec <__ieee754_powf+0x3ac>)
 8007984:	429c      	cmp	r4, r3
 8007986:	dc06      	bgt.n	8007996 <__ieee754_powf+0x156>
 8007988:	2d00      	cmp	r5, #0
 800798a:	daa9      	bge.n	80078e0 <__ieee754_powf+0xa0>
 800798c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8007bf0 <__ieee754_powf+0x3b0>
 8007990:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007994:	e7a6      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007996:	4b97      	ldr	r3, [pc, #604]	; (8007bf4 <__ieee754_powf+0x3b4>)
 8007998:	429c      	cmp	r4, r3
 800799a:	dd02      	ble.n	80079a2 <__ieee754_powf+0x162>
 800799c:	2d00      	cmp	r5, #0
 800799e:	dcf5      	bgt.n	800798c <__ieee754_powf+0x14c>
 80079a0:	e79e      	b.n	80078e0 <__ieee754_powf+0xa0>
 80079a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80079a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80079aa:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8007bf8 <__ieee754_powf+0x3b8>
 80079ae:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8007bfc <__ieee754_powf+0x3bc>
 80079b2:	eef1 6a40 	vneg.f32	s13, s0
 80079b6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80079ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80079c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80079c6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80079ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80079ce:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8007c00 <__ieee754_powf+0x3c0>
 80079d2:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80079d6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007c04 <__ieee754_powf+0x3c4>
 80079da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80079de:	eeb0 7a67 	vmov.f32	s14, s15
 80079e2:	eea0 7a06 	vfma.f32	s14, s0, s12
 80079e6:	ee17 3a10 	vmov	r3, s14
 80079ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079ee:	f023 030f 	bic.w	r3, r3, #15
 80079f2:	ee07 3a10 	vmov	s14, r3
 80079f6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80079fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079fe:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007a02:	f025 050f 	bic.w	r5, r5, #15
 8007a06:	ee07 5a10 	vmov	s14, r5
 8007a0a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8007a0e:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8007a12:	ee07 3a10 	vmov	s14, r3
 8007a16:	ee06 5a90 	vmov	s13, r5
 8007a1a:	eee7 7a28 	vfma.f32	s15, s14, s17
 8007a1e:	3e01      	subs	r6, #1
 8007a20:	ea56 0200 	orrs.w	r2, r6, r0
 8007a24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007a28:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007a2c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007a30:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007a34:	ee16 4a90 	vmov	r4, s13
 8007a38:	bf08      	it	eq
 8007a3a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007a44:	f340 8186 	ble.w	8007d54 <__ieee754_powf+0x514>
 8007a48:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007a4c:	f340 80fc 	ble.w	8007c48 <__ieee754_powf+0x408>
 8007a50:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007bf0 <__ieee754_powf+0x3b0>
 8007a54:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007a58:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007a5c:	e742      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007a5e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8007a62:	bfbf      	itttt	lt
 8007a64:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8007c08 <__ieee754_powf+0x3c8>
 8007a68:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007a6c:	f06f 0217 	mvnlt.w	r2, #23
 8007a70:	ee17 4a90 	vmovlt	r4, s15
 8007a74:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007a78:	bfa8      	it	ge
 8007a7a:	2200      	movge	r2, #0
 8007a7c:	3b7f      	subs	r3, #127	; 0x7f
 8007a7e:	4413      	add	r3, r2
 8007a80:	4a62      	ldr	r2, [pc, #392]	; (8007c0c <__ieee754_powf+0x3cc>)
 8007a82:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007a86:	4294      	cmp	r4, r2
 8007a88:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007a8c:	dd06      	ble.n	8007a9c <__ieee754_powf+0x25c>
 8007a8e:	4a60      	ldr	r2, [pc, #384]	; (8007c10 <__ieee754_powf+0x3d0>)
 8007a90:	4294      	cmp	r4, r2
 8007a92:	f340 80a5 	ble.w	8007be0 <__ieee754_powf+0x3a0>
 8007a96:	3301      	adds	r3, #1
 8007a98:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007a9c:	2400      	movs	r4, #0
 8007a9e:	4a5d      	ldr	r2, [pc, #372]	; (8007c14 <__ieee754_powf+0x3d4>)
 8007aa0:	00a7      	lsls	r7, r4, #2
 8007aa2:	443a      	add	r2, r7
 8007aa4:	ee07 1a90 	vmov	s15, r1
 8007aa8:	ed92 7a00 	vldr	s14, [r2]
 8007aac:	4a5a      	ldr	r2, [pc, #360]	; (8007c18 <__ieee754_powf+0x3d8>)
 8007aae:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007ab2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007ab6:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8007aba:	1049      	asrs	r1, r1, #1
 8007abc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007ac0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007ac4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007ac8:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8007acc:	ee06 1a90 	vmov	s13, r1
 8007ad0:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007ad4:	ee14 ea90 	vmov	lr, s9
 8007ad8:	ea02 0e0e 	and.w	lr, r2, lr
 8007adc:	ee05 ea90 	vmov	s11, lr
 8007ae0:	eeb1 4a65 	vneg.f32	s8, s11
 8007ae4:	eea4 6a26 	vfma.f32	s12, s8, s13
 8007ae8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007aec:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8007af0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007af4:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007c1c <__ieee754_powf+0x3dc>
 8007af8:	eea4 6a26 	vfma.f32	s12, s8, s13
 8007afc:	ee66 6a05 	vmul.f32	s13, s12, s10
 8007b00:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8007b04:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8007c20 <__ieee754_powf+0x3e0>
 8007b08:	eee6 7a05 	vfma.f32	s15, s12, s10
 8007b0c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8007c24 <__ieee754_powf+0x3e4>
 8007b10:	eea6 5a27 	vfma.f32	s10, s12, s15
 8007b14:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007bf8 <__ieee754_powf+0x3b8>
 8007b18:	eee6 7a05 	vfma.f32	s15, s12, s10
 8007b1c:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8007c28 <__ieee754_powf+0x3e8>
 8007b20:	eea6 5a27 	vfma.f32	s10, s12, s15
 8007b24:	eddf 7a41 	vldr	s15, [pc, #260]	; 8007c2c <__ieee754_powf+0x3ec>
 8007b28:	eee6 7a05 	vfma.f32	s15, s12, s10
 8007b2c:	ee66 3a06 	vmul.f32	s7, s12, s12
 8007b30:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007b34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b38:	eeb0 6a45 	vmov.f32	s12, s10
 8007b3c:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8007b40:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8007b44:	ee36 6a07 	vadd.f32	s12, s12, s14
 8007b48:	ee16 1a10 	vmov	r1, s12
 8007b4c:	4011      	ands	r1, r2
 8007b4e:	ee06 1a10 	vmov	s12, r1
 8007b52:	ee76 7a45 	vsub.f32	s15, s12, s10
 8007b56:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8007c30 <__ieee754_powf+0x3f0>
 8007b5a:	eee4 7a25 	vfma.f32	s15, s8, s11
 8007b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b62:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8007b66:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b6a:	eeb0 7a67 	vmov.f32	s14, s15
 8007b6e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007b72:	ee17 1a10 	vmov	r1, s14
 8007b76:	4011      	ands	r1, r2
 8007b78:	ee07 1a10 	vmov	s14, r1
 8007b7c:	eea4 7a06 	vfma.f32	s14, s8, s12
 8007b80:	ee05 1a90 	vmov	s11, r1
 8007b84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b88:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007c34 <__ieee754_powf+0x3f4>
 8007b8c:	492a      	ldr	r1, [pc, #168]	; (8007c38 <__ieee754_powf+0x3f8>)
 8007b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b92:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007c3c <__ieee754_powf+0x3fc>
 8007b96:	eee5 7a87 	vfma.f32	s15, s11, s14
 8007b9a:	4439      	add	r1, r7
 8007b9c:	ed91 7a00 	vldr	s14, [r1]
 8007ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eeb0 6a47 	vmov.f32	s12, s14
 8007bac:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <__ieee754_powf+0x400>)
 8007bae:	eea5 6a85 	vfma.f32	s12, s11, s10
 8007bb2:	443b      	add	r3, r7
 8007bb4:	edd3 4a00 	vldr	s9, [r3]
 8007bb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007bbc:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007bc0:	ee76 7a26 	vadd.f32	s15, s12, s13
 8007bc4:	ee17 3a90 	vmov	r3, s15
 8007bc8:	4013      	ands	r3, r2
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007bd2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007bd6:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8007bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bde:	e70e      	b.n	80079fe <__ieee754_powf+0x1be>
 8007be0:	2401      	movs	r4, #1
 8007be2:	e75c      	b.n	8007a9e <__ieee754_powf+0x25e>
 8007be4:	0804c28d 	.word	0x0804c28d
 8007be8:	00000000 	.word	0x00000000
 8007bec:	3f7ffff7 	.word	0x3f7ffff7
 8007bf0:	7149f2ca 	.word	0x7149f2ca
 8007bf4:	3f800007 	.word	0x3f800007
 8007bf8:	3eaaaaab 	.word	0x3eaaaaab
 8007bfc:	3fb8aa00 	.word	0x3fb8aa00
 8007c00:	3fb8aa3b 	.word	0x3fb8aa3b
 8007c04:	36eca570 	.word	0x36eca570
 8007c08:	4b800000 	.word	0x4b800000
 8007c0c:	001cc471 	.word	0x001cc471
 8007c10:	005db3d6 	.word	0x005db3d6
 8007c14:	0804c9b8 	.word	0x0804c9b8
 8007c18:	fffff000 	.word	0xfffff000
 8007c1c:	3e6c3255 	.word	0x3e6c3255
 8007c20:	3e53f142 	.word	0x3e53f142
 8007c24:	3e8ba305 	.word	0x3e8ba305
 8007c28:	3edb6db7 	.word	0x3edb6db7
 8007c2c:	3f19999a 	.word	0x3f19999a
 8007c30:	3f763800 	.word	0x3f763800
 8007c34:	3f76384f 	.word	0x3f76384f
 8007c38:	0804c9c8 	.word	0x0804c9c8
 8007c3c:	369dc3a0 	.word	0x369dc3a0
 8007c40:	0804c9c0 	.word	0x0804c9c0
 8007c44:	3338aa3c 	.word	0x3338aa3c
 8007c48:	f040 8094 	bne.w	8007d74 <__ieee754_powf+0x534>
 8007c4c:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8007c44 <__ieee754_powf+0x404>
 8007c50:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007c54:	ee37 6a86 	vadd.f32	s12, s15, s12
 8007c58:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8007c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c60:	f73f aef6 	bgt.w	8007a50 <__ieee754_powf+0x210>
 8007c64:	15db      	asrs	r3, r3, #23
 8007c66:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007c6a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c6e:	4103      	asrs	r3, r0
 8007c70:	4423      	add	r3, r4
 8007c72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c76:	4948      	ldr	r1, [pc, #288]	; (8007d98 <__ieee754_powf+0x558>)
 8007c78:	3a7f      	subs	r2, #127	; 0x7f
 8007c7a:	4111      	asrs	r1, r2
 8007c7c:	ea23 0101 	bic.w	r1, r3, r1
 8007c80:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007c84:	ee06 1a90 	vmov	s13, r1
 8007c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c8c:	f1c2 0217 	rsb	r2, r2, #23
 8007c90:	4110      	asrs	r0, r2
 8007c92:	2c00      	cmp	r4, #0
 8007c94:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007c98:	bfb8      	it	lt
 8007c9a:	4240      	neglt	r0, r0
 8007c9c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007ca0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8007d9c <__ieee754_powf+0x55c>
 8007ca4:	ee16 3a90 	vmov	r3, s13
 8007ca8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007cac:	f023 030f 	bic.w	r3, r3, #15
 8007cb0:	ee06 3a90 	vmov	s13, r3
 8007cb4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cbc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007da0 <__ieee754_powf+0x560>
 8007cc0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007cc4:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007cc8:	eef0 7a47 	vmov.f32	s15, s14
 8007ccc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007da4 <__ieee754_powf+0x564>
 8007cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8007cd4:	eea6 0a87 	vfma.f32	s0, s13, s14
 8007cd8:	eeb0 6a40 	vmov.f32	s12, s0
 8007cdc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007ce0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ce4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007ce8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007da8 <__ieee754_powf+0x568>
 8007cec:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007dac <__ieee754_powf+0x56c>
 8007cf0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007cf4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007db0 <__ieee754_powf+0x570>
 8007cf8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007cfc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007db4 <__ieee754_powf+0x574>
 8007d00:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007d04:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8007db8 <__ieee754_powf+0x578>
 8007d08:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007d0c:	eeb0 6a40 	vmov.f32	s12, s0
 8007d10:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007d14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007d18:	eeb0 7a46 	vmov.f32	s14, s12
 8007d1c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007d20:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007d24:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007d28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007d34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007d3c:	ee10 3a10 	vmov	r3, s0
 8007d40:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007d44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d48:	da1a      	bge.n	8007d80 <__ieee754_powf+0x540>
 8007d4a:	f000 fa51 	bl	80081f0 <scalbnf>
 8007d4e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007d52:	e5c7      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007d54:	4a19      	ldr	r2, [pc, #100]	; (8007dbc <__ieee754_powf+0x57c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	dd02      	ble.n	8007d60 <__ieee754_powf+0x520>
 8007d5a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007dc0 <__ieee754_powf+0x580>
 8007d5e:	e679      	b.n	8007a54 <__ieee754_powf+0x214>
 8007d60:	d108      	bne.n	8007d74 <__ieee754_powf+0x534>
 8007d62:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007d66:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6e:	f63f af79 	bhi.w	8007c64 <__ieee754_powf+0x424>
 8007d72:	e7f2      	b.n	8007d5a <__ieee754_powf+0x51a>
 8007d74:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007d78:	f73f af74 	bgt.w	8007c64 <__ieee754_powf+0x424>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e78d      	b.n	8007c9c <__ieee754_powf+0x45c>
 8007d80:	ee00 3a10 	vmov	s0, r3
 8007d84:	e7e3      	b.n	8007d4e <__ieee754_powf+0x50e>
 8007d86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007d8a:	e5ab      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007d8c:	eeb0 0a68 	vmov.f32	s0, s17
 8007d90:	e5a8      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007d92:	eeb0 0a48 	vmov.f32	s0, s16
 8007d96:	e5a5      	b.n	80078e4 <__ieee754_powf+0xa4>
 8007d98:	007fffff 	.word	0x007fffff
 8007d9c:	3f317218 	.word	0x3f317218
 8007da0:	35bfbe8c 	.word	0x35bfbe8c
 8007da4:	3f317200 	.word	0x3f317200
 8007da8:	3331bb4c 	.word	0x3331bb4c
 8007dac:	b5ddea0e 	.word	0xb5ddea0e
 8007db0:	388ab355 	.word	0x388ab355
 8007db4:	bb360b61 	.word	0xbb360b61
 8007db8:	3e2aaaab 	.word	0x3e2aaaab
 8007dbc:	43160000 	.word	0x43160000
 8007dc0:	0da24260 	.word	0x0da24260

08007dc4 <__ieee754_sqrtf>:
 8007dc4:	ee10 2a10 	vmov	r2, s0
 8007dc8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007dcc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	d302      	bcc.n	8007dda <__ieee754_sqrtf+0x16>
 8007dd4:	eea0 0a00 	vfma.f32	s0, s0, s0
 8007dd8:	bd70      	pop	{r4, r5, r6, pc}
 8007dda:	b3b1      	cbz	r1, 8007e4a <__ieee754_sqrtf+0x86>
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	da04      	bge.n	8007dea <__ieee754_sqrtf+0x26>
 8007de0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007de4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007dee:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007df2:	d204      	bcs.n	8007dfe <__ieee754_sqrtf+0x3a>
 8007df4:	2100      	movs	r1, #0
 8007df6:	0210      	lsls	r0, r2, #8
 8007df8:	d528      	bpl.n	8007e4c <__ieee754_sqrtf+0x88>
 8007dfa:	3901      	subs	r1, #1
 8007dfc:	1a5b      	subs	r3, r3, r1
 8007dfe:	3b7f      	subs	r3, #127	; 0x7f
 8007e00:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007e04:	07d9      	lsls	r1, r3, #31
 8007e06:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007e0a:	bf48      	it	mi
 8007e0c:	0052      	lslmi	r2, r2, #1
 8007e0e:	1059      	asrs	r1, r3, #1
 8007e10:	2300      	movs	r3, #0
 8007e12:	0052      	lsls	r2, r2, #1
 8007e14:	2419      	movs	r4, #25
 8007e16:	461e      	mov	r6, r3
 8007e18:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007e1c:	1835      	adds	r5, r6, r0
 8007e1e:	4295      	cmp	r5, r2
 8007e20:	bfde      	ittt	le
 8007e22:	182e      	addle	r6, r5, r0
 8007e24:	1b52      	suble	r2, r2, r5
 8007e26:	181b      	addle	r3, r3, r0
 8007e28:	3c01      	subs	r4, #1
 8007e2a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e2e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007e32:	d1f3      	bne.n	8007e1c <__ieee754_sqrtf+0x58>
 8007e34:	b112      	cbz	r2, 8007e3c <__ieee754_sqrtf+0x78>
 8007e36:	3301      	adds	r3, #1
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	105b      	asrs	r3, r3, #1
 8007e3e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8007e42:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8007e46:	ee00 3a10 	vmov	s0, r3
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	3101      	adds	r1, #1
 8007e50:	e7d1      	b.n	8007df6 <__ieee754_sqrtf+0x32>

08007e52 <matherr>:
 8007e52:	2000      	movs	r0, #0
 8007e54:	4770      	bx	lr
	...

08007e58 <rint>:
 8007e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e5a:	ec51 0b10 	vmov	r0, r1, d0
 8007e5e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007e62:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8007e66:	2e13      	cmp	r6, #19
 8007e68:	ee10 7a10 	vmov	r7, s0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4602      	mov	r2, r0
 8007e70:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007e74:	dc58      	bgt.n	8007f28 <rint+0xd0>
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	da2b      	bge.n	8007ed2 <rint+0x7a>
 8007e7a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007e7e:	4302      	orrs	r2, r0
 8007e80:	d023      	beq.n	8007eca <rint+0x72>
 8007e82:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007e86:	4302      	orrs	r2, r0
 8007e88:	4251      	negs	r1, r2
 8007e8a:	4311      	orrs	r1, r2
 8007e8c:	0b09      	lsrs	r1, r1, #12
 8007e8e:	0c5b      	lsrs	r3, r3, #17
 8007e90:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8007e94:	045b      	lsls	r3, r3, #17
 8007e96:	ea41 0703 	orr.w	r7, r1, r3
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <rint+0x108>)
 8007e9c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007ea6:	ee10 0a10 	vmov	r0, s0
 8007eaa:	4632      	mov	r2, r6
 8007eac:	463b      	mov	r3, r7
 8007eae:	f7fa fed5 	bl	8002c5c <__adddf3>
 8007eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	4632      	mov	r2, r6
 8007eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ebe:	f7fa fecb 	bl	8002c58 <__aeabi_dsub>
 8007ec2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ec6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8007eca:	ec41 0b10 	vmov	d0, r0, r1
 8007ece:	b003      	add	sp, #12
 8007ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed2:	4c24      	ldr	r4, [pc, #144]	; (8007f64 <rint+0x10c>)
 8007ed4:	4134      	asrs	r4, r6
 8007ed6:	ea01 0704 	and.w	r7, r1, r4
 8007eda:	4307      	orrs	r7, r0
 8007edc:	d0f5      	beq.n	8007eca <rint+0x72>
 8007ede:	0861      	lsrs	r1, r4, #1
 8007ee0:	ea03 0001 	and.w	r0, r3, r1
 8007ee4:	4302      	orrs	r2, r0
 8007ee6:	d00b      	beq.n	8007f00 <rint+0xa8>
 8007ee8:	ea23 0101 	bic.w	r1, r3, r1
 8007eec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ef0:	2e13      	cmp	r6, #19
 8007ef2:	fa43 f306 	asr.w	r3, r3, r6
 8007ef6:	bf0c      	ite	eq
 8007ef8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8007efc:	2200      	movne	r2, #0
 8007efe:	430b      	orrs	r3, r1
 8007f00:	4619      	mov	r1, r3
 8007f02:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <rint+0x108>)
 8007f04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007f08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	462b      	mov	r3, r5
 8007f10:	4622      	mov	r2, r4
 8007f12:	f7fa fea3 	bl	8002c5c <__adddf3>
 8007f16:	e9cd 0100 	strd	r0, r1, [sp]
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f22:	f7fa fe99 	bl	8002c58 <__aeabi_dsub>
 8007f26:	e7d0      	b.n	8007eca <rint+0x72>
 8007f28:	2e33      	cmp	r6, #51	; 0x33
 8007f2a:	dd08      	ble.n	8007f3e <rint+0xe6>
 8007f2c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f30:	d1cb      	bne.n	8007eca <rint+0x72>
 8007f32:	ee10 2a10 	vmov	r2, s0
 8007f36:	460b      	mov	r3, r1
 8007f38:	f7fa fe90 	bl	8002c5c <__adddf3>
 8007f3c:	e7c5      	b.n	8007eca <rint+0x72>
 8007f3e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8007f42:	f04f 34ff 	mov.w	r4, #4294967295
 8007f46:	40f4      	lsrs	r4, r6
 8007f48:	4220      	tst	r0, r4
 8007f4a:	d0be      	beq.n	8007eca <rint+0x72>
 8007f4c:	0861      	lsrs	r1, r4, #1
 8007f4e:	420f      	tst	r7, r1
 8007f50:	bf1f      	itttt	ne
 8007f52:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8007f56:	ea27 0101 	bicne.w	r1, r7, r1
 8007f5a:	4132      	asrne	r2, r6
 8007f5c:	430a      	orrne	r2, r1
 8007f5e:	e7cf      	b.n	8007f00 <rint+0xa8>
 8007f60:	0804c9d0 	.word	0x0804c9d0
 8007f64:	000fffff 	.word	0x000fffff

08007f68 <expm1f>:
 8007f68:	ee10 2a10 	vmov	r2, s0
 8007f6c:	4985      	ldr	r1, [pc, #532]	; (8008184 <expm1f+0x21c>)
 8007f6e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007f72:	428b      	cmp	r3, r1
 8007f74:	d924      	bls.n	8007fc0 <expm1f+0x58>
 8007f76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007f7a:	d902      	bls.n	8007f82 <expm1f+0x1a>
 8007f7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007f80:	4770      	bx	lr
 8007f82:	d106      	bne.n	8007f92 <expm1f+0x2a>
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007f8a:	bfb8      	it	lt
 8007f8c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8007f90:	4770      	bx	lr
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	db07      	blt.n	8007fa6 <expm1f+0x3e>
 8007f96:	497c      	ldr	r1, [pc, #496]	; (8008188 <expm1f+0x220>)
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	d963      	bls.n	8008064 <expm1f+0xfc>
 8007f9c:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800818c <expm1f+0x224>
 8007fa0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007fa4:	4770      	bx	lr
 8007fa6:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8008190 <expm1f+0x228>
 8007faa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb6:	f140 80dd 	bpl.w	8008174 <expm1f+0x20c>
 8007fba:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007fbe:	4770      	bx	lr
 8007fc0:	4974      	ldr	r1, [pc, #464]	; (8008194 <expm1f+0x22c>)
 8007fc2:	428b      	cmp	r3, r1
 8007fc4:	d96d      	bls.n	80080a2 <expm1f+0x13a>
 8007fc6:	4974      	ldr	r1, [pc, #464]	; (8008198 <expm1f+0x230>)
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	d84b      	bhi.n	8008064 <expm1f+0xfc>
 8007fcc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800819c <expm1f+0x234>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	bfa7      	ittee	ge
 8007fd4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8007fd8:	eddf 7a71 	vldrge	s15, [pc, #452]	; 80081a0 <expm1f+0x238>
 8007fdc:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 80081a4 <expm1f+0x23c>
 8007fe0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8007fe4:	bfac      	ite	ge
 8007fe6:	2301      	movge	r3, #1
 8007fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fec:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007ff0:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ff8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007ffc:	ee20 5a25 	vmul.f32	s10, s0, s11
 8008000:	eddf 6a69 	vldr	s13, [pc, #420]	; 80081a8 <expm1f+0x240>
 8008004:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80081ac <expm1f+0x244>
 8008008:	ee20 7a05 	vmul.f32	s14, s0, s10
 800800c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008010:	eddf 6a67 	vldr	s13, [pc, #412]	; 80081b0 <expm1f+0x248>
 8008014:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008018:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80081b4 <expm1f+0x24c>
 800801c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008020:	eddf 6a65 	vldr	s13, [pc, #404]	; 80081b8 <expm1f+0x250>
 8008024:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008028:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800802c:	eef0 4a46 	vmov.f32	s9, s12
 8008030:	eee7 4a26 	vfma.f32	s9, s14, s13
 8008034:	eef0 6a64 	vmov.f32	s13, s9
 8008038:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800803c:	eee5 4a66 	vfms.f32	s9, s10, s13
 8008040:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8008044:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8008048:	eee0 6a64 	vfms.f32	s13, s0, s9
 800804c:	eef0 4a66 	vmov.f32	s9, s13
 8008050:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8008054:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008058:	bb8b      	cbnz	r3, 80080be <expm1f+0x156>
 800805a:	eef0 7a47 	vmov.f32	s15, s14
 800805e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8008062:	e027      	b.n	80080b4 <expm1f+0x14c>
 8008064:	eddf 7a55 	vldr	s15, [pc, #340]	; 80081bc <expm1f+0x254>
 8008068:	2a00      	cmp	r2, #0
 800806a:	ee20 7a27 	vmul.f32	s14, s0, s15
 800806e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8008072:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008076:	bfb8      	it	lt
 8008078:	eef0 7a66 	vmovlt.f32	s15, s13
 800807c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008080:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800819c <expm1f+0x234>
 8008084:	eddf 6a46 	vldr	s13, [pc, #280]	; 80081a0 <expm1f+0x238>
 8008088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800808c:	ee17 3a90 	vmov	r3, s15
 8008090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008094:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008098:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800809c:	eeb0 7a40 	vmov.f32	s14, s0
 80080a0:	e7a4      	b.n	8007fec <expm1f+0x84>
 80080a2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80080a6:	d208      	bcs.n	80080ba <expm1f+0x152>
 80080a8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800818c <expm1f+0x224>
 80080ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 80080b0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80080b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80080b8:	4770      	bx	lr
 80080ba:	2300      	movs	r3, #0
 80080bc:	e79c      	b.n	8007ff8 <expm1f+0x90>
 80080be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80080c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080cc:	d106      	bne.n	80080dc <expm1f+0x174>
 80080ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 80080d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80080d6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80080da:	4770      	bx	lr
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d118      	bne.n	8008112 <expm1f+0x1aa>
 80080e0:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 80080e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80080e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ec:	bf41      	itttt	mi
 80080ee:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 80080f2:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 80080f6:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 80080fa:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 80080fe:	bf5f      	itttt	pl
 8008100:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8008104:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8008108:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800810c:	eeb0 0a46 	vmovpl.f32	s0, s12
 8008110:	4770      	bx	lr
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	2a39      	cmp	r2, #57	; 0x39
 8008116:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800811a:	d90b      	bls.n	8008134 <expm1f+0x1cc>
 800811c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008120:	ee36 0a40 	vsub.f32	s0, s12, s0
 8008124:	ee10 3a10 	vmov	r3, s0
 8008128:	440b      	add	r3, r1
 800812a:	ee00 3a10 	vmov	s0, r3
 800812e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008132:	4770      	bx	lr
 8008134:	2b16      	cmp	r3, #22
 8008136:	dc11      	bgt.n	800815c <expm1f+0x1f4>
 8008138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800813c:	fa42 f303 	asr.w	r3, r2, r3
 8008140:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8008144:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008150:	ee10 3a10 	vmov	r3, s0
 8008154:	440b      	add	r3, r1
 8008156:	ee00 3a10 	vmov	s0, r3
 800815a:	4770      	bx	lr
 800815c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8008160:	05db      	lsls	r3, r3, #23
 8008162:	ee07 3a10 	vmov	s14, r3
 8008166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800816a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800816e:	ee30 0a06 	vadd.f32	s0, s0, s12
 8008172:	e7ed      	b.n	8008150 <expm1f+0x1e8>
 8008174:	eddf 7a11 	vldr	s15, [pc, #68]	; 80081bc <expm1f+0x254>
 8008178:	ee20 7a27 	vmul.f32	s14, s0, s15
 800817c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008180:	e77c      	b.n	800807c <expm1f+0x114>
 8008182:	bf00      	nop
 8008184:	4195b843 	.word	0x4195b843
 8008188:	42b17217 	.word	0x42b17217
 800818c:	7149f2ca 	.word	0x7149f2ca
 8008190:	0da24260 	.word	0x0da24260
 8008194:	3eb17218 	.word	0x3eb17218
 8008198:	3f851591 	.word	0x3f851591
 800819c:	3f317180 	.word	0x3f317180
 80081a0:	3717f7d1 	.word	0x3717f7d1
 80081a4:	b717f7d1 	.word	0xb717f7d1
 80081a8:	b457edbb 	.word	0xb457edbb
 80081ac:	36867e54 	.word	0x36867e54
 80081b0:	b8a670cd 	.word	0xb8a670cd
 80081b4:	3ad00d01 	.word	0x3ad00d01
 80081b8:	bd088889 	.word	0xbd088889
 80081bc:	3fb8aa3b 	.word	0x3fb8aa3b

080081c0 <fabsf>:
 80081c0:	ee10 3a10 	vmov	r3, s0
 80081c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081c8:	ee00 3a10 	vmov	s0, r3
 80081cc:	4770      	bx	lr

080081ce <finitef>:
 80081ce:	ee10 3a10 	vmov	r3, s0
 80081d2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80081d6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80081da:	bfac      	ite	ge
 80081dc:	2000      	movge	r0, #0
 80081de:	2001      	movlt	r0, #1
 80081e0:	4770      	bx	lr
	...

080081e4 <nanf>:
 80081e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80081ec <nanf+0x8>
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	7fc00000 	.word	0x7fc00000

080081f0 <scalbnf>:
 80081f0:	b508      	push	{r3, lr}
 80081f2:	ee10 2a10 	vmov	r2, s0
 80081f6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80081fa:	ed2d 8b02 	vpush	{d8}
 80081fe:	eef0 0a40 	vmov.f32	s1, s0
 8008202:	d004      	beq.n	800820e <scalbnf+0x1e>
 8008204:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008208:	d306      	bcc.n	8008218 <scalbnf+0x28>
 800820a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800820e:	ecbd 8b02 	vpop	{d8}
 8008212:	eeb0 0a60 	vmov.f32	s0, s1
 8008216:	bd08      	pop	{r3, pc}
 8008218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800821c:	d21c      	bcs.n	8008258 <scalbnf+0x68>
 800821e:	4b1f      	ldr	r3, [pc, #124]	; (800829c <scalbnf+0xac>)
 8008220:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80082a0 <scalbnf+0xb0>
 8008224:	4298      	cmp	r0, r3
 8008226:	ee60 0a27 	vmul.f32	s1, s0, s15
 800822a:	db10      	blt.n	800824e <scalbnf+0x5e>
 800822c:	ee10 2a90 	vmov	r2, s1
 8008230:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008234:	3b19      	subs	r3, #25
 8008236:	4403      	add	r3, r0
 8008238:	2bfe      	cmp	r3, #254	; 0xfe
 800823a:	dd0f      	ble.n	800825c <scalbnf+0x6c>
 800823c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80082a4 <scalbnf+0xb4>
 8008240:	eeb0 0a48 	vmov.f32	s0, s16
 8008244:	f000 f834 	bl	80082b0 <copysignf>
 8008248:	ee60 0a08 	vmul.f32	s1, s0, s16
 800824c:	e7df      	b.n	800820e <scalbnf+0x1e>
 800824e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80082a8 <scalbnf+0xb8>
 8008252:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008256:	e7da      	b.n	800820e <scalbnf+0x1e>
 8008258:	0ddb      	lsrs	r3, r3, #23
 800825a:	e7ec      	b.n	8008236 <scalbnf+0x46>
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd06      	ble.n	800826e <scalbnf+0x7e>
 8008260:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008264:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008268:	ee00 3a90 	vmov	s1, r3
 800826c:	e7cf      	b.n	800820e <scalbnf+0x1e>
 800826e:	f113 0f16 	cmn.w	r3, #22
 8008272:	da06      	bge.n	8008282 <scalbnf+0x92>
 8008274:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008278:	4298      	cmp	r0, r3
 800827a:	dcdf      	bgt.n	800823c <scalbnf+0x4c>
 800827c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80082a8 <scalbnf+0xb8>
 8008280:	e7de      	b.n	8008240 <scalbnf+0x50>
 8008282:	3319      	adds	r3, #25
 8008284:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008288:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800828c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80082ac <scalbnf+0xbc>
 8008290:	ee07 3a10 	vmov	s14, r3
 8008294:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008298:	e7b9      	b.n	800820e <scalbnf+0x1e>
 800829a:	bf00      	nop
 800829c:	ffff3cb0 	.word	0xffff3cb0
 80082a0:	4c000000 	.word	0x4c000000
 80082a4:	7149f2ca 	.word	0x7149f2ca
 80082a8:	0da24260 	.word	0x0da24260
 80082ac:	33000000 	.word	0x33000000

080082b0 <copysignf>:
 80082b0:	ee10 3a10 	vmov	r3, s0
 80082b4:	ee10 2a90 	vmov	r2, s1
 80082b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80082c0:	4313      	orrs	r3, r2
 80082c2:	ee00 3a10 	vmov	s0, r3
 80082c6:	4770      	bx	lr

080082c8 <_init>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	bf00      	nop
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr

080082d4 <_fini>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr
