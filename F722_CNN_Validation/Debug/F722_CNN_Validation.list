
F722_CNN_Validation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a514  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00044a38  0800a6f8  0800a6f8  0001a6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804f130  0804f130  0005f130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0804f138  0804f138  0005f138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0804f13c  0804f13c  0005f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000890  20000000  0804f140  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a558  20000890  0804f9d0  00060890  2**3
                  ALLOC
  8 ._user_heap_stack 00007000  2000ade8  0804f9d0  0006ade8  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  00060890  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c4c2  00000000  00000000  000608c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000042fa  00000000  00000000  0007cd86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000933e  00000000  00000000  00081080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c90  00000000  00000000  0008a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001378  00000000  00000000  0008b050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007268  00000000  00000000  0008c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000061ae  00000000  00000000  00093630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00004253  00000000  00000000  000997de  2**0
                  CONTENTS, READONLY
 18 .iar.rtmodel  00000313  00000000  00000000  0009da31  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 00000028  00000000  00000000  0009dd44  2**2
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  0009dd6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000890 	.word	0x20000890
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6dc 	.word	0x0800a6dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000894 	.word	0x20000894
 800021c:	0800a6dc 	.word	0x0800a6dc

08000220 <ai_inspector_create>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	0004      	movs	r4, r0
 8000224:	b081      	sub	sp, #4
 8000226:	bf08      	it	eq
 8000228:	2000      	moveq	r0, #0
 800022a:	d01c      	beq.n	8000266 <ai_inspector_create+0x46>
 800022c:	480f      	ldr	r0, [pc, #60]	; (800026c <.text_4>)
 800022e:	2200      	movs	r2, #0
 8000230:	2300      	movs	r3, #0
 8000232:	2500      	movs	r5, #0
 8000234:	c02c      	stmia	r0!, {r2, r3, r5}
 8000236:	c02c      	stmia	r0!, {r2, r3, r5}
 8000238:	c02c      	stmia	r0!, {r2, r3, r5}
 800023a:	3824      	subs	r0, #36	; 0x24
 800023c:	2601      	movs	r6, #1
 800023e:	f100 0c18 	add.w	ip, r0, #24
 8000242:	f100 0218 	add.w	r2, r0, #24
 8000246:	7286      	strb	r6, [r0, #10]
 8000248:	8406      	strh	r6, [r0, #32]
 800024a:	f8c0 c018 	str.w	ip, [r0, #24]
 800024e:	61c2      	str	r2, [r0, #28]
 8000250:	b129      	cbz	r1, 800025e <ai_inspector_create+0x3e>
 8000252:	f100 0308 	add.w	r3, r0, #8
 8000256:	e891 10e0 	ldmia.w	r1, {r5, r6, r7, ip}
 800025a:	e883 10e0 	stmia.w	r3, {r5, r6, r7, ip}
 800025e:	f000 fb47 	bl	80008f0 <ai_platform_context_release>
 8000262:	6020      	str	r0, [r4, #0]
 8000264:	2001      	movs	r0, #1
 8000266:	b001      	add	sp, #4
 8000268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800026c <.text_4>:
 800026c:	200008ac 	.word	0x200008ac

08000270 <ai_inspector_destroy>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f000 fae8 	bl	8000846 <ai_platform_context_acquire>
 8000276:	0004      	movs	r4, r0
 8000278:	d101      	bne.n	800027e <ai_inspector_destroy+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd70      	pop	{r4, r5, r6, pc}
 800027e:	69a0      	ldr	r0, [r4, #24]
 8000280:	f1a0 052c 	sub.w	r5, r0, #44	; 0x2c
 8000284:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8000288:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800028a:	f104 0018 	add.w	r0, r4, #24
 800028e:	4282      	cmp	r2, r0
 8000290:	f1a1 062c 	sub.w	r6, r1, #44	; 0x2c
 8000294:	d015      	beq.n	80002c2 <ai_inspector_destroy+0x52>
 8000296:	6828      	ldr	r0, [r5, #0]
 8000298:	f001 f864 	bl	8001364 <ai_network_inspect_destroy>
 800029c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800029e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80002a0:	6048      	str	r0, [r1, #4]
 80002a2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80002a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80002a6:	6002      	str	r2, [r0, #0]
 80002a8:	4628      	mov	r0, r5
 80002aa:	f008 fa1f 	bl	80086ec <free>
 80002ae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80002b0:	4635      	mov	r5, r6
 80002b2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80002b6:	f104 0218 	add.w	r2, r4, #24
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f1a1 062c 	sub.w	r6, r1, #44	; 0x2c
 80002c0:	d1e9      	bne.n	8000296 <ai_inspector_destroy+0x26>
 80002c2:	2001      	movs	r0, #1
 80002c4:	bd70      	pop	{r4, r5, r6, pc}

080002c6 <ai_inspector_bind_network>:
 80002c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c8:	b081      	sub	sp, #4
 80002ca:	460c      	mov	r4, r1
 80002cc:	f000 fabb 	bl	8000846 <ai_platform_context_acquire>
 80002d0:	0005      	movs	r5, r0
 80002d2:	bf18      	it	ne
 80002d4:	2c00      	cmpne	r4, #0
 80002d6:	d033      	beq.n	8000340 <ai_inspector_bind_network+0x7a>
 80002d8:	6820      	ldr	r0, [r4, #0]
 80002da:	b388      	cbz	r0, 8000340 <ai_inspector_bind_network+0x7a>
 80002dc:	2034      	movs	r0, #52	; 0x34
 80002de:	f008 f9fd 	bl	80086dc <malloc>
 80002e2:	0006      	movs	r6, r0
 80002e4:	d02c      	beq.n	8000340 <ai_inspector_bind_network+0x7a>
 80002e6:	8c28      	ldrh	r0, [r5, #32]
 80002e8:	1c41      	adds	r1, r0, #1
 80002ea:	8429      	strh	r1, [r5, #32]
 80002ec:	f105 0118 	add.w	r1, r5, #24
 80002f0:	8530      	strh	r0, [r6, #40]	; 0x28
 80002f2:	e8b4 108d 	ldmia.w	r4!, {r0, r2, r3, r7, ip}
 80002f6:	e8a6 108d 	stmia.w	r6!, {r0, r2, r3, r7, ip}
 80002fa:	e8b4 108d 	ldmia.w	r4!, {r0, r2, r3, r7, ip}
 80002fe:	e8a6 108d 	stmia.w	r6!, {r0, r2, r3, r7, ip}
 8000302:	3e28      	subs	r6, #40	; 0x28
 8000304:	f106 042c 	add.w	r4, r6, #44	; 0x2c
 8000308:	6024      	str	r4, [r4, #0]
 800030a:	6334      	str	r4, [r6, #48]	; 0x30
 800030c:	69a8      	ldr	r0, [r5, #24]
 800030e:	6020      	str	r0, [r4, #0]
 8000310:	6061      	str	r1, [r4, #4]
 8000312:	f105 0108 	add.w	r1, r5, #8
 8000316:	6044      	str	r4, [r0, #4]
 8000318:	61ac      	str	r4, [r5, #24]
 800031a:	6830      	ldr	r0, [r6, #0]
 800031c:	f000 ff48 	bl	80011b0 <ai_network_inspect_init>
 8000320:	b110      	cbz	r0, 8000328 <ai_inspector_bind_network+0x62>
 8000322:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8000324:	b001      	add	sp, #4
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000328:	6821      	ldr	r1, [r4, #0]
 800032a:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800032c:	6048      	str	r0, [r1, #4]
 800032e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000330:	6822      	ldr	r2, [r4, #0]
 8000332:	4630      	mov	r0, r6
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	f008 f9d9 	bl	80086ec <free>
 800033a:	8c28      	ldrh	r0, [r5, #32]
 800033c:	1e41      	subs	r1, r0, #1
 800033e:	8429      	strh	r1, [r5, #32]
 8000340:	2000      	movs	r0, #0
 8000342:	b001      	add	sp, #4
 8000344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000348 <ai_inspector_unbind_network>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	460d      	mov	r5, r1
 800034c:	f000 fa7b 	bl	8000846 <ai_platform_context_acquire>
 8000350:	b380      	cbz	r0, 80003b4 <ai_inspector_unbind_network+0x6c>
 8000352:	0029      	movs	r1, r5
 8000354:	f000 802e 	beq.w	80003b4 <ai_inspector_unbind_network+0x6c>
 8000358:	f850 1f18 	ldr.w	r1, [r0, #24]!
 800035c:	f1a1 042c 	sub.w	r4, r1, #44	; 0x2c
 8000360:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8000364:	4282      	cmp	r2, r0
 8000366:	d025      	beq.n	80003b4 <ai_inspector_unbind_network+0x6c>
 8000368:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800036a:	42a9      	cmp	r1, r5
 800036c:	d024      	beq.n	80003b8 <ai_inspector_unbind_network+0x70>
 800036e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000370:	f1a2 042c 	sub.w	r4, r2, #44	; 0x2c
 8000374:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8000378:	4286      	cmp	r6, r0
 800037a:	d01b      	beq.n	80003b4 <ai_inspector_unbind_network+0x6c>
 800037c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800037e:	42a9      	cmp	r1, r5
 8000380:	d01a      	beq.n	80003b8 <ai_inspector_unbind_network+0x70>
 8000382:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000384:	f1a2 042c 	sub.w	r4, r2, #44	; 0x2c
 8000388:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 800038c:	4286      	cmp	r6, r0
 800038e:	d011      	beq.n	80003b4 <ai_inspector_unbind_network+0x6c>
 8000390:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8000392:	42a9      	cmp	r1, r5
 8000394:	d010      	beq.n	80003b8 <ai_inspector_unbind_network+0x70>
 8000396:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000398:	f1a2 042c 	sub.w	r4, r2, #44	; 0x2c
 800039c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80003a0:	4286      	cmp	r6, r0
 80003a2:	d007      	beq.n	80003b4 <ai_inspector_unbind_network+0x6c>
 80003a4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80003a6:	42a9      	cmp	r1, r5
 80003a8:	bf1c      	itt	ne
 80003aa:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80003ac:	f1a2 042c 	subne.w	r4, r2, #44	; 0x2c
 80003b0:	d1d6      	bne.n	8000360 <ai_inspector_unbind_network+0x18>
 80003b2:	e001      	b.n	80003b8 <ai_inspector_unbind_network+0x70>
 80003b4:	2000      	movs	r0, #0
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	2c00      	cmp	r4, #0
 80003ba:	d0fb      	beq.n	80003b4 <ai_inspector_unbind_network+0x6c>
 80003bc:	6820      	ldr	r0, [r4, #0]
 80003be:	f000 ffd1 	bl	8001364 <ai_network_inspect_destroy>
 80003c2:	2800      	cmp	r0, #0
 80003c4:	d0f7      	beq.n	80003b6 <ai_inspector_unbind_network+0x6e>
 80003c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80003ca:	6048      	str	r0, [r1, #4]
 80003cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80003ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80003d0:	6002      	str	r2, [r0, #0]
 80003d2:	4620      	mov	r0, r4
 80003d4:	f008 f98a 	bl	80086ec <free>
 80003d8:	2001      	movs	r0, #1
 80003da:	bd70      	pop	{r4, r5, r6, pc}

080003dc <ai_inspector_get_report>:
 80003dc:	b530      	push	{r4, r5, lr}
 80003de:	b081      	sub	sp, #4
 80003e0:	460d      	mov	r5, r1
 80003e2:	4614      	mov	r4, r2
 80003e4:	f000 fa2f 	bl	8000846 <ai_platform_context_acquire>
 80003e8:	2800      	cmp	r0, #0
 80003ea:	bf18      	it	ne
 80003ec:	2c00      	cmpne	r4, #0
 80003ee:	d028      	beq.n	8000442 <ai_inspector_get_report+0x66>
 80003f0:	f100 0118 	add.w	r1, r0, #24
 80003f4:	6808      	ldr	r0, [r1, #0]
 80003f6:	382c      	subs	r0, #44	; 0x2c
 80003f8:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80003fc:	428a      	cmp	r2, r1
 80003fe:	d020      	beq.n	8000442 <ai_inspector_get_report+0x66>
 8000400:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000402:	42ab      	cmp	r3, r5
 8000404:	d020      	beq.n	8000448 <ai_inspector_get_report+0x6c>
 8000406:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000408:	382c      	subs	r0, #44	; 0x2c
 800040a:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 800040e:	428a      	cmp	r2, r1
 8000410:	d017      	beq.n	8000442 <ai_inspector_get_report+0x66>
 8000412:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000414:	42ab      	cmp	r3, r5
 8000416:	d017      	beq.n	8000448 <ai_inspector_get_report+0x6c>
 8000418:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800041a:	382c      	subs	r0, #44	; 0x2c
 800041c:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 8000420:	428a      	cmp	r2, r1
 8000422:	d00e      	beq.n	8000442 <ai_inspector_get_report+0x66>
 8000424:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000426:	42ab      	cmp	r3, r5
 8000428:	d00e      	beq.n	8000448 <ai_inspector_get_report+0x6c>
 800042a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800042c:	382c      	subs	r0, #44	; 0x2c
 800042e:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 8000432:	428a      	cmp	r2, r1
 8000434:	d005      	beq.n	8000442 <ai_inspector_get_report+0x66>
 8000436:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000438:	42ab      	cmp	r3, r5
 800043a:	bf18      	it	ne
 800043c:	6ac0      	ldrne	r0, [r0, #44]	; 0x2c
 800043e:	d1da      	bne.n	80003f6 <ai_inspector_get_report+0x1a>
 8000440:	e002      	b.n	8000448 <ai_inspector_get_report+0x6c>
 8000442:	2000      	movs	r0, #0
 8000444:	b001      	add	sp, #4
 8000446:	bd30      	pop	{r4, r5, pc}
 8000448:	2800      	cmp	r0, #0
 800044a:	d0fa      	beq.n	8000442 <ai_inspector_get_report+0x66>
 800044c:	6800      	ldr	r0, [r0, #0]
 800044e:	4621      	mov	r1, r4
 8000450:	b001      	add	sp, #4
 8000452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000456:	f000 bf6d 	b.w	8001334 <ai_network_inspect_get_report>

0800045a <ai_inspector_run>:
 800045a:	b570      	push	{r4, r5, r6, lr}
 800045c:	460e      	mov	r6, r1
 800045e:	4614      	mov	r4, r2
 8000460:	461d      	mov	r5, r3
 8000462:	f000 f9f0 	bl	8000846 <ai_platform_context_acquire>
 8000466:	2800      	cmp	r0, #0
 8000468:	bf18      	it	ne
 800046a:	2c00      	cmpne	r4, #0
 800046c:	d028      	beq.n	80004c0 <ai_inspector_run+0x66>
 800046e:	f100 0118 	add.w	r1, r0, #24
 8000472:	6808      	ldr	r0, [r1, #0]
 8000474:	382c      	subs	r0, #44	; 0x2c
 8000476:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 800047a:	428a      	cmp	r2, r1
 800047c:	d020      	beq.n	80004c0 <ai_inspector_run+0x66>
 800047e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000480:	42b3      	cmp	r3, r6
 8000482:	d01f      	beq.n	80004c4 <ai_inspector_run+0x6a>
 8000484:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000486:	382c      	subs	r0, #44	; 0x2c
 8000488:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 800048c:	428a      	cmp	r2, r1
 800048e:	d017      	beq.n	80004c0 <ai_inspector_run+0x66>
 8000490:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000492:	42b3      	cmp	r3, r6
 8000494:	d016      	beq.n	80004c4 <ai_inspector_run+0x6a>
 8000496:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000498:	382c      	subs	r0, #44	; 0x2c
 800049a:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 800049e:	428a      	cmp	r2, r1
 80004a0:	d00e      	beq.n	80004c0 <ai_inspector_run+0x66>
 80004a2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80004a4:	42b3      	cmp	r3, r6
 80004a6:	d00d      	beq.n	80004c4 <ai_inspector_run+0x6a>
 80004a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80004aa:	382c      	subs	r0, #44	; 0x2c
 80004ac:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80004b0:	428a      	cmp	r2, r1
 80004b2:	d005      	beq.n	80004c0 <ai_inspector_run+0x66>
 80004b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80004b6:	42b3      	cmp	r3, r6
 80004b8:	bf18      	it	ne
 80004ba:	6ac0      	ldrne	r0, [r0, #44]	; 0x2c
 80004bc:	d1da      	bne.n	8000474 <ai_inspector_run+0x1a>
 80004be:	e001      	b.n	80004c4 <ai_inspector_run+0x6a>
 80004c0:	2000      	movs	r0, #0
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0fb      	beq.n	80004c0 <ai_inspector_run+0x66>
 80004c8:	462a      	mov	r2, r5
 80004ca:	4621      	mov	r1, r4
 80004cc:	6800      	ldr	r0, [r0, #0]
 80004ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80004d2:	f000 bb7e 	b.w	8000bd2 <ai_platform_network_process>
	...

080004d8 <ai_array_get_byte_size>:
 80004d8:	b909      	cbnz	r1, 80004de <ai_array_get_byte_size+0x6>
 80004da:	2000      	movs	r0, #0
 80004dc:	4770      	bx	lr
 80004de:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80004e2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80004e6:	18d3      	adds	r3, r2, r3
 80004e8:	0d42      	lsrs	r2, r0, #21
 80004ea:	4359      	muls	r1, r3
 80004ec:	f002 0203 	and.w	r2, r2, #3
 80004f0:	1dc9      	adds	r1, r1, #7
 80004f2:	08c9      	lsrs	r1, r1, #3
 80004f4:	00c9      	lsls	r1, r1, #3
 80004f6:	0c43      	lsrs	r3, r0, #17
 80004f8:	40d1      	lsrs	r1, r2
 80004fa:	f003 030f 	and.w	r3, r3, #15
 80004fe:	2b04      	cmp	r3, #4
 8000500:	d00b      	beq.n	800051a <ai_array_get_byte_size+0x42>
 8000502:	2b08      	cmp	r3, #8
 8000504:	bf01      	itttt	eq
 8000506:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 800050a:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800050e:	1882      	addeq	r2, r0, r2
 8000510:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8000514:	1dc9      	adds	r1, r1, #7
 8000516:	08c8      	lsrs	r0, r1, #3
 8000518:	4770      	bx	lr
 800051a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800051e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8000522:	1882      	adds	r2, r0, r2
 8000524:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000528:	1dc9      	adds	r1, r1, #7
 800052a:	08c8      	lsrs	r0, r1, #3
 800052c:	4770      	bx	lr

0800052e <ai_mem_copy_buffer>:
 800052e:	b510      	push	{r4, lr}
 8000530:	4604      	mov	r4, r0
 8000532:	f008 f8a7 	bl	8008684 <__aeabi_memcpy>
 8000536:	4620      	mov	r0, r4
 8000538:	bd10      	pop	{r4, pc}

0800053a <CRC_Lock>:
 800053a:	f8df 085c 	ldr.w	r0, [pc, #2140]	; 8000d98 <.text_20>
 800053e:	f240 4249 	movw	r2, #1097	; 0x449
 8000542:	6801      	ldr	r1, [r0, #0]
 8000544:	0849      	lsrs	r1, r1, #1
 8000546:	0049      	lsls	r1, r1, #1
 8000548:	6001      	str	r1, [r0, #0]
 800054a:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 8000d9c <.text_21>
 800054e:	6801      	ldr	r1, [r0, #0]
 8000550:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000554:	4291      	cmp	r1, r2
 8000556:	d115      	bne.n	8000584 <CRC_Lock+0x4a>
 8000558:	2001      	movs	r0, #1
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	4310      	orrs	r0, r2
 8000560:	4308      	orrs	r0, r1
 8000562:	d01d      	beq.n	80005a0 <CRC_Lock+0x66>
 8000564:	f8df 1838 	ldr.w	r1, [pc, #2104]	; 8000da0 <.text_22>
 8000568:	2201      	movs	r2, #1
 800056a:	608a      	str	r2, [r1, #8]
 800056c:	6888      	ldr	r0, [r1, #8]
 800056e:	2800      	cmp	r0, #0
 8000570:	d1fc      	bne.n	800056c <CRC_Lock+0x32>
 8000572:	f8df 2830 	ldr.w	r2, [pc, #2096]	; 8000da4 <.text_23>
 8000576:	f8df 3830 	ldr.w	r3, [pc, #2096]	; 8000da8 <.text_24>
 800057a:	600a      	str	r2, [r1, #0]
 800057c:	6809      	ldr	r1, [r1, #0]
 800057e:	4299      	cmp	r1, r3
 8000580:	d026      	beq.n	80005d0 <CRC_Lock+0x96>
 8000582:	e7fe      	b.n	8000582 <CRC_Lock+0x48>
 8000584:	2000      	movs	r0, #0
 8000586:	f240 4c51 	movw	ip, #1105	; 0x451
 800058a:	4561      	cmp	r1, ip
 800058c:	bf08      	it	eq
 800058e:	2201      	moveq	r2, #1
 8000590:	d0e4      	beq.n	800055c <CRC_Lock+0x22>
 8000592:	2200      	movs	r2, #0
 8000594:	f240 4352 	movw	r3, #1106	; 0x452
 8000598:	4299      	cmp	r1, r3
 800059a:	d1df      	bne.n	800055c <CRC_Lock+0x22>
 800059c:	2101      	movs	r1, #1
 800059e:	e7de      	b.n	800055e <CRC_Lock+0x24>
 80005a0:	f8df 0808 	ldr.w	r0, [pc, #2056]	; 8000dac <.text_25>
 80005a4:	6801      	ldr	r1, [r0, #0]
 80005a6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005aa:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80005ae:	d10f      	bne.n	80005d0 <CRC_Lock+0x96>
 80005b0:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000db0 <.text_26>
 80005b4:	2201      	movs	r2, #1
 80005b6:	608a      	str	r2, [r1, #8]
 80005b8:	6888      	ldr	r0, [r1, #8]
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d1fc      	bne.n	80005b8 <CRC_Lock+0x7e>
 80005be:	f8df 27e4 	ldr.w	r2, [pc, #2020]	; 8000da4 <.text_23>
 80005c2:	f8df 37e4 	ldr.w	r3, [pc, #2020]	; 8000da8 <.text_24>
 80005c6:	600a      	str	r2, [r1, #0]
 80005c8:	6809      	ldr	r1, [r1, #0]
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d000      	beq.n	80005d0 <CRC_Lock+0x96>
 80005ce:	e7fe      	b.n	80005ce <CRC_Lock+0x94>
 80005d0:	4770      	bx	lr

080005d2 <ai_platform_runtime_get_revision>:
 80005d2:	f8df 07c4 	ldr.w	r0, [pc, #1988]	; 8000d98 <.text_20>
 80005d6:	f240 4249 	movw	r2, #1097	; 0x449
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	f8df 07b8 	ldr.w	r0, [pc, #1976]	; 8000d9c <.text_21>
 80005e6:	6801      	ldr	r1, [r0, #0]
 80005e8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d115      	bne.n	800061c <ai_platform_runtime_get_revision+0x4a>
 80005f0:	2001      	movs	r0, #1
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	4310      	orrs	r0, r2
 80005f8:	4308      	orrs	r0, r1
 80005fa:	d01d      	beq.n	8000638 <ai_platform_runtime_get_revision+0x66>
 80005fc:	f8df 17a0 	ldr.w	r1, [pc, #1952]	; 8000da0 <.text_22>
 8000600:	2201      	movs	r2, #1
 8000602:	608a      	str	r2, [r1, #8]
 8000604:	6888      	ldr	r0, [r1, #8]
 8000606:	2800      	cmp	r0, #0
 8000608:	d1fc      	bne.n	8000604 <ai_platform_runtime_get_revision+0x32>
 800060a:	f8df 2798 	ldr.w	r2, [pc, #1944]	; 8000da4 <.text_23>
 800060e:	f8df 3798 	ldr.w	r3, [pc, #1944]	; 8000da8 <.text_24>
 8000612:	600a      	str	r2, [r1, #0]
 8000614:	6809      	ldr	r1, [r1, #0]
 8000616:	4299      	cmp	r1, r3
 8000618:	d026      	beq.n	8000668 <ai_platform_runtime_get_revision+0x96>
 800061a:	e7fe      	b.n	800061a <ai_platform_runtime_get_revision+0x48>
 800061c:	2000      	movs	r0, #0
 800061e:	f240 4c51 	movw	ip, #1105	; 0x451
 8000622:	4561      	cmp	r1, ip
 8000624:	bf08      	it	eq
 8000626:	2201      	moveq	r2, #1
 8000628:	d0e4      	beq.n	80005f4 <ai_platform_runtime_get_revision+0x22>
 800062a:	2200      	movs	r2, #0
 800062c:	f240 4352 	movw	r3, #1106	; 0x452
 8000630:	4299      	cmp	r1, r3
 8000632:	d1df      	bne.n	80005f4 <ai_platform_runtime_get_revision+0x22>
 8000634:	2101      	movs	r1, #1
 8000636:	e7de      	b.n	80005f6 <ai_platform_runtime_get_revision+0x24>
 8000638:	f8df 0770 	ldr.w	r0, [pc, #1904]	; 8000dac <.text_25>
 800063c:	6801      	ldr	r1, [r0, #0]
 800063e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000642:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000646:	d10f      	bne.n	8000668 <ai_platform_runtime_get_revision+0x96>
 8000648:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000db0 <.text_26>
 800064c:	2201      	movs	r2, #1
 800064e:	608a      	str	r2, [r1, #8]
 8000650:	6888      	ldr	r0, [r1, #8]
 8000652:	2800      	cmp	r0, #0
 8000654:	d1fc      	bne.n	8000650 <ai_platform_runtime_get_revision+0x7e>
 8000656:	f8df 274c 	ldr.w	r2, [pc, #1868]	; 8000da4 <.text_23>
 800065a:	f8df 374c 	ldr.w	r3, [pc, #1868]	; 8000da8 <.text_24>
 800065e:	600a      	str	r2, [r1, #0]
 8000660:	6809      	ldr	r1, [r1, #0]
 8000662:	4299      	cmp	r1, r3
 8000664:	d000      	beq.n	8000668 <ai_platform_runtime_get_revision+0x96>
 8000666:	e7fe      	b.n	8000666 <ai_platform_runtime_get_revision+0x94>
 8000668:	a0a3      	add	r0, pc, #652	; (adr r0, 80008f8 <.text_11>)
 800066a:	4770      	bx	lr

0800066c <ai_platform_runtime_get_version>:
 800066c:	f8df 0728 	ldr.w	r0, [pc, #1832]	; 8000d98 <.text_20>
 8000670:	f240 4249 	movw	r2, #1097	; 0x449
 8000674:	6801      	ldr	r1, [r0, #0]
 8000676:	0849      	lsrs	r1, r1, #1
 8000678:	0049      	lsls	r1, r1, #1
 800067a:	6001      	str	r1, [r0, #0]
 800067c:	f8df 071c 	ldr.w	r0, [pc, #1820]	; 8000d9c <.text_21>
 8000680:	6801      	ldr	r1, [r0, #0]
 8000682:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000686:	4291      	cmp	r1, r2
 8000688:	d115      	bne.n	80006b6 <ai_platform_runtime_get_version+0x4a>
 800068a:	2001      	movs	r0, #1
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	4310      	orrs	r0, r2
 8000692:	4308      	orrs	r0, r1
 8000694:	d01d      	beq.n	80006d2 <ai_platform_runtime_get_version+0x66>
 8000696:	f8df 1708 	ldr.w	r1, [pc, #1800]	; 8000da0 <.text_22>
 800069a:	2201      	movs	r2, #1
 800069c:	608a      	str	r2, [r1, #8]
 800069e:	6888      	ldr	r0, [r1, #8]
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d1fc      	bne.n	800069e <ai_platform_runtime_get_version+0x32>
 80006a4:	f8df 26fc 	ldr.w	r2, [pc, #1788]	; 8000da4 <.text_23>
 80006a8:	f8df 36fc 	ldr.w	r3, [pc, #1788]	; 8000da8 <.text_24>
 80006ac:	600a      	str	r2, [r1, #0]
 80006ae:	6809      	ldr	r1, [r1, #0]
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d026      	beq.n	8000702 <ai_platform_runtime_get_version+0x96>
 80006b4:	e7fe      	b.n	80006b4 <ai_platform_runtime_get_version+0x48>
 80006b6:	2000      	movs	r0, #0
 80006b8:	f240 4c51 	movw	ip, #1105	; 0x451
 80006bc:	4561      	cmp	r1, ip
 80006be:	bf08      	it	eq
 80006c0:	2201      	moveq	r2, #1
 80006c2:	d0e4      	beq.n	800068e <ai_platform_runtime_get_version+0x22>
 80006c4:	2200      	movs	r2, #0
 80006c6:	f240 4352 	movw	r3, #1106	; 0x452
 80006ca:	4299      	cmp	r1, r3
 80006cc:	d1df      	bne.n	800068e <ai_platform_runtime_get_version+0x22>
 80006ce:	2101      	movs	r1, #1
 80006d0:	e7de      	b.n	8000690 <ai_platform_runtime_get_version+0x24>
 80006d2:	f8df 06d8 	ldr.w	r0, [pc, #1752]	; 8000dac <.text_25>
 80006d6:	6801      	ldr	r1, [r0, #0]
 80006d8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80006dc:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80006e0:	d10f      	bne.n	8000702 <ai_platform_runtime_get_version+0x96>
 80006e2:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000db0 <.text_26>
 80006e6:	2201      	movs	r2, #1
 80006e8:	608a      	str	r2, [r1, #8]
 80006ea:	6888      	ldr	r0, [r1, #8]
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1fc      	bne.n	80006ea <ai_platform_runtime_get_version+0x7e>
 80006f0:	f8df 26b0 	ldr.w	r2, [pc, #1712]	; 8000da4 <.text_23>
 80006f4:	f8df 36b0 	ldr.w	r3, [pc, #1712]	; 8000da8 <.text_24>
 80006f8:	600a      	str	r2, [r1, #0]
 80006fa:	6809      	ldr	r1, [r1, #0]
 80006fc:	4299      	cmp	r1, r3
 80006fe:	d000      	beq.n	8000702 <ai_platform_runtime_get_version+0x96>
 8000700:	e7fe      	b.n	8000700 <ai_platform_runtime_get_version+0x94>
 8000702:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8000706:	6800      	ldr	r0, [r0, #0]
 8000708:	4770      	bx	lr

0800070a <ai_platform_api_get_version>:
 800070a:	f8df 068c 	ldr.w	r0, [pc, #1676]	; 8000d98 <.text_20>
 800070e:	f240 4249 	movw	r2, #1097	; 0x449
 8000712:	6801      	ldr	r1, [r0, #0]
 8000714:	0849      	lsrs	r1, r1, #1
 8000716:	0049      	lsls	r1, r1, #1
 8000718:	6001      	str	r1, [r0, #0]
 800071a:	f8df 0680 	ldr.w	r0, [pc, #1664]	; 8000d9c <.text_21>
 800071e:	6801      	ldr	r1, [r0, #0]
 8000720:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000724:	4291      	cmp	r1, r2
 8000726:	d115      	bne.n	8000754 <ai_platform_api_get_version+0x4a>
 8000728:	2001      	movs	r0, #1
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	4310      	orrs	r0, r2
 8000730:	4308      	orrs	r0, r1
 8000732:	d01d      	beq.n	8000770 <ai_platform_api_get_version+0x66>
 8000734:	f8df 1668 	ldr.w	r1, [pc, #1640]	; 8000da0 <.text_22>
 8000738:	2201      	movs	r2, #1
 800073a:	608a      	str	r2, [r1, #8]
 800073c:	6888      	ldr	r0, [r1, #8]
 800073e:	2800      	cmp	r0, #0
 8000740:	d1fc      	bne.n	800073c <ai_platform_api_get_version+0x32>
 8000742:	f8df 2660 	ldr.w	r2, [pc, #1632]	; 8000da4 <.text_23>
 8000746:	f8df 3660 	ldr.w	r3, [pc, #1632]	; 8000da8 <.text_24>
 800074a:	600a      	str	r2, [r1, #0]
 800074c:	6809      	ldr	r1, [r1, #0]
 800074e:	4299      	cmp	r1, r3
 8000750:	d026      	beq.n	80007a0 <ai_platform_api_get_version+0x96>
 8000752:	e7fe      	b.n	8000752 <ai_platform_api_get_version+0x48>
 8000754:	2000      	movs	r0, #0
 8000756:	f240 4c51 	movw	ip, #1105	; 0x451
 800075a:	4561      	cmp	r1, ip
 800075c:	bf08      	it	eq
 800075e:	2201      	moveq	r2, #1
 8000760:	d0e4      	beq.n	800072c <ai_platform_api_get_version+0x22>
 8000762:	2200      	movs	r2, #0
 8000764:	f240 4352 	movw	r3, #1106	; 0x452
 8000768:	4299      	cmp	r1, r3
 800076a:	d1df      	bne.n	800072c <ai_platform_api_get_version+0x22>
 800076c:	2101      	movs	r1, #1
 800076e:	e7de      	b.n	800072e <ai_platform_api_get_version+0x24>
 8000770:	f8df 0638 	ldr.w	r0, [pc, #1592]	; 8000dac <.text_25>
 8000774:	6801      	ldr	r1, [r0, #0]
 8000776:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800077a:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800077e:	d10f      	bne.n	80007a0 <ai_platform_api_get_version+0x96>
 8000780:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000db0 <.text_26>
 8000784:	2201      	movs	r2, #1
 8000786:	608a      	str	r2, [r1, #8]
 8000788:	6888      	ldr	r0, [r1, #8]
 800078a:	2800      	cmp	r0, #0
 800078c:	d1fc      	bne.n	8000788 <ai_platform_api_get_version+0x7e>
 800078e:	f8df 2614 	ldr.w	r2, [pc, #1556]	; 8000da4 <.text_23>
 8000792:	f8df 3614 	ldr.w	r3, [pc, #1556]	; 8000da8 <.text_24>
 8000796:	600a      	str	r2, [r1, #0]
 8000798:	6809      	ldr	r1, [r1, #0]
 800079a:	4299      	cmp	r1, r3
 800079c:	d000      	beq.n	80007a0 <ai_platform_api_get_version+0x96>
 800079e:	e7fe      	b.n	800079e <ai_platform_api_get_version+0x94>
 80007a0:	f20f 6028 	addw	r0, pc, #1576	; 0x628
 80007a4:	6800      	ldr	r0, [r0, #0]
 80007a6:	4770      	bx	lr

080007a8 <ai_platform_interface_api_get_version>:
 80007a8:	f8df 05ec 	ldr.w	r0, [pc, #1516]	; 8000d98 <.text_20>
 80007ac:	f240 4249 	movw	r2, #1097	; 0x449
 80007b0:	6801      	ldr	r1, [r0, #0]
 80007b2:	0849      	lsrs	r1, r1, #1
 80007b4:	0049      	lsls	r1, r1, #1
 80007b6:	6001      	str	r1, [r0, #0]
 80007b8:	f8df 05e0 	ldr.w	r0, [pc, #1504]	; 8000d9c <.text_21>
 80007bc:	6801      	ldr	r1, [r0, #0]
 80007be:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007c2:	4291      	cmp	r1, r2
 80007c4:	d115      	bne.n	80007f2 <ai_platform_interface_api_get_version+0x4a>
 80007c6:	2001      	movs	r0, #1
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	4310      	orrs	r0, r2
 80007ce:	4308      	orrs	r0, r1
 80007d0:	d01d      	beq.n	800080e <ai_platform_interface_api_get_version+0x66>
 80007d2:	f8df 15cc 	ldr.w	r1, [pc, #1484]	; 8000da0 <.text_22>
 80007d6:	2201      	movs	r2, #1
 80007d8:	608a      	str	r2, [r1, #8]
 80007da:	6888      	ldr	r0, [r1, #8]
 80007dc:	2800      	cmp	r0, #0
 80007de:	d1fc      	bne.n	80007da <ai_platform_interface_api_get_version+0x32>
 80007e0:	f8df 25c0 	ldr.w	r2, [pc, #1472]	; 8000da4 <.text_23>
 80007e4:	f8df 35c0 	ldr.w	r3, [pc, #1472]	; 8000da8 <.text_24>
 80007e8:	600a      	str	r2, [r1, #0]
 80007ea:	6809      	ldr	r1, [r1, #0]
 80007ec:	4299      	cmp	r1, r3
 80007ee:	d026      	beq.n	800083e <ai_platform_interface_api_get_version+0x96>
 80007f0:	e7fe      	b.n	80007f0 <ai_platform_interface_api_get_version+0x48>
 80007f2:	2000      	movs	r0, #0
 80007f4:	f240 4c51 	movw	ip, #1105	; 0x451
 80007f8:	4561      	cmp	r1, ip
 80007fa:	bf08      	it	eq
 80007fc:	2201      	moveq	r2, #1
 80007fe:	d0e4      	beq.n	80007ca <ai_platform_interface_api_get_version+0x22>
 8000800:	2200      	movs	r2, #0
 8000802:	f240 4352 	movw	r3, #1106	; 0x452
 8000806:	4299      	cmp	r1, r3
 8000808:	d1df      	bne.n	80007ca <ai_platform_interface_api_get_version+0x22>
 800080a:	2101      	movs	r1, #1
 800080c:	e7de      	b.n	80007cc <ai_platform_interface_api_get_version+0x24>
 800080e:	f8df 059c 	ldr.w	r0, [pc, #1436]	; 8000dac <.text_25>
 8000812:	6801      	ldr	r1, [r0, #0]
 8000814:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000818:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800081c:	d10f      	bne.n	800083e <ai_platform_interface_api_get_version+0x96>
 800081e:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000db0 <.text_26>
 8000822:	2201      	movs	r2, #1
 8000824:	608a      	str	r2, [r1, #8]
 8000826:	6888      	ldr	r0, [r1, #8]
 8000828:	2800      	cmp	r0, #0
 800082a:	d1fc      	bne.n	8000826 <ai_platform_interface_api_get_version+0x7e>
 800082c:	f8df 2574 	ldr.w	r2, [pc, #1396]	; 8000da4 <.text_23>
 8000830:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 8000da8 <.text_24>
 8000834:	600a      	str	r2, [r1, #0]
 8000836:	6809      	ldr	r1, [r1, #0]
 8000838:	4299      	cmp	r1, r3
 800083a:	d000      	beq.n	800083e <ai_platform_interface_api_get_version+0x96>
 800083c:	e7fe      	b.n	800083c <ai_platform_interface_api_get_version+0x94>
 800083e:	f20f 5090 	addw	r0, pc, #1424	; 0x590
 8000842:	6800      	ldr	r0, [r0, #0]
 8000844:	4770      	bx	lr

08000846 <ai_platform_context_acquire>:
 8000846:	b430      	push	{r4, r5}
 8000848:	b120      	cbz	r0, 8000854 <ai_platform_context_acquire+0xe>
 800084a:	6801      	ldr	r1, [r0, #0]
 800084c:	f8df 2564 	ldr.w	r2, [pc, #1380]	; 8000db4 <.text_27>
 8000850:	4291      	cmp	r1, r2
 8000852:	d000      	beq.n	8000856 <ai_platform_context_acquire+0x10>
 8000854:	2000      	movs	r0, #0
 8000856:	f8df 1540 	ldr.w	r1, [pc, #1344]	; 8000d98 <.text_20>
 800085a:	f240 4449 	movw	r4, #1097	; 0x449
 800085e:	680b      	ldr	r3, [r1, #0]
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	600b      	str	r3, [r1, #0]
 8000866:	f8df 1534 	ldr.w	r1, [pc, #1332]	; 8000d9c <.text_21>
 800086a:	680a      	ldr	r2, [r1, #0]
 800086c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000870:	42a2      	cmp	r2, r4
 8000872:	d115      	bne.n	80008a0 <ai_platform_context_acquire+0x5a>
 8000874:	2101      	movs	r1, #1
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	4319      	orrs	r1, r3
 800087c:	4311      	orrs	r1, r2
 800087e:	d01d      	beq.n	80008bc <ai_platform_context_acquire+0x76>
 8000880:	f8df 251c 	ldr.w	r2, [pc, #1308]	; 8000da0 <.text_22>
 8000884:	2301      	movs	r3, #1
 8000886:	6093      	str	r3, [r2, #8]
 8000888:	6891      	ldr	r1, [r2, #8]
 800088a:	2900      	cmp	r1, #0
 800088c:	d1fc      	bne.n	8000888 <ai_platform_context_acquire+0x42>
 800088e:	f8df 3514 	ldr.w	r3, [pc, #1300]	; 8000da4 <.text_23>
 8000892:	f8df 4514 	ldr.w	r4, [pc, #1300]	; 8000da8 <.text_24>
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	6812      	ldr	r2, [r2, #0]
 800089a:	42a2      	cmp	r2, r4
 800089c:	d026      	beq.n	80008ec <ai_platform_context_acquire+0xa6>
 800089e:	e7fe      	b.n	800089e <ai_platform_context_acquire+0x58>
 80008a0:	2100      	movs	r1, #0
 80008a2:	f240 4551 	movw	r5, #1105	; 0x451
 80008a6:	42aa      	cmp	r2, r5
 80008a8:	bf08      	it	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	d0e4      	beq.n	8000878 <ai_platform_context_acquire+0x32>
 80008ae:	2300      	movs	r3, #0
 80008b0:	f240 4452 	movw	r4, #1106	; 0x452
 80008b4:	42a2      	cmp	r2, r4
 80008b6:	d1df      	bne.n	8000878 <ai_platform_context_acquire+0x32>
 80008b8:	2201      	movs	r2, #1
 80008ba:	e7de      	b.n	800087a <ai_platform_context_acquire+0x34>
 80008bc:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000dac <.text_25>
 80008c0:	680a      	ldr	r2, [r1, #0]
 80008c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80008c6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80008ca:	d10f      	bne.n	80008ec <ai_platform_context_acquire+0xa6>
 80008cc:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000db0 <.text_26>
 80008d0:	2301      	movs	r3, #1
 80008d2:	6093      	str	r3, [r2, #8]
 80008d4:	6891      	ldr	r1, [r2, #8]
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d1fc      	bne.n	80008d4 <ai_platform_context_acquire+0x8e>
 80008da:	f8df 34c8 	ldr.w	r3, [pc, #1224]	; 8000da4 <.text_23>
 80008de:	f8df 44c8 	ldr.w	r4, [pc, #1224]	; 8000da8 <.text_24>
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	42a2      	cmp	r2, r4
 80008e8:	d000      	beq.n	80008ec <ai_platform_context_acquire+0xa6>
 80008ea:	e7fe      	b.n	80008ea <ai_platform_context_acquire+0xa4>
 80008ec:	bc30      	pop	{r4, r5}
 80008ee:	4770      	bx	lr

080008f0 <ai_platform_context_release>:
 80008f0:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 8000db4 <.text_27>
 80008f4:	6001      	str	r1, [r0, #0]
 80008f6:	4770      	bx	lr

080008f8 <.text_11>:
 80008f8:	00000000 	.word	0x00000000

080008fc <ai_copy_buffer_fake_src>:
 80008fc:	4608      	mov	r0, r1
 80008fe:	4770      	bx	lr

08000900 <ai_copy_buffer_fake_dst>:
 8000900:	4770      	bx	lr

08000902 <ai_platform_network_get_error>:
 8000902:	b430      	push	{r4, r5}
 8000904:	b120      	cbz	r0, 8000910 <ai_platform_network_get_error+0xe>
 8000906:	6801      	ldr	r1, [r0, #0]
 8000908:	f8df 24a8 	ldr.w	r2, [pc, #1192]	; 8000db4 <.text_27>
 800090c:	4291      	cmp	r1, r2
 800090e:	d000      	beq.n	8000912 <ai_platform_network_get_error+0x10>
 8000910:	2000      	movs	r0, #0
 8000912:	f8df 1484 	ldr.w	r1, [pc, #1156]	; 8000d98 <.text_20>
 8000916:	f240 4449 	movw	r4, #1097	; 0x449
 800091a:	680b      	ldr	r3, [r1, #0]
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	600b      	str	r3, [r1, #0]
 8000922:	f8df 1478 	ldr.w	r1, [pc, #1144]	; 8000d9c <.text_21>
 8000926:	680a      	ldr	r2, [r1, #0]
 8000928:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800092c:	42a2      	cmp	r2, r4
 800092e:	d115      	bne.n	800095c <ai_platform_network_get_error+0x5a>
 8000930:	2101      	movs	r1, #1
 8000932:	2300      	movs	r3, #0
 8000934:	2200      	movs	r2, #0
 8000936:	4319      	orrs	r1, r3
 8000938:	4311      	orrs	r1, r2
 800093a:	d01d      	beq.n	8000978 <ai_platform_network_get_error+0x76>
 800093c:	f8df 2460 	ldr.w	r2, [pc, #1120]	; 8000da0 <.text_22>
 8000940:	2301      	movs	r3, #1
 8000942:	6093      	str	r3, [r2, #8]
 8000944:	6891      	ldr	r1, [r2, #8]
 8000946:	2900      	cmp	r1, #0
 8000948:	d1fc      	bne.n	8000944 <ai_platform_network_get_error+0x42>
 800094a:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 8000da4 <.text_23>
 800094e:	f8df 4458 	ldr.w	r4, [pc, #1112]	; 8000da8 <.text_24>
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	42a2      	cmp	r2, r4
 8000958:	d026      	beq.n	80009a8 <ai_platform_network_get_error+0xa6>
 800095a:	e7fe      	b.n	800095a <ai_platform_network_get_error+0x58>
 800095c:	2100      	movs	r1, #0
 800095e:	f240 4551 	movw	r5, #1105	; 0x451
 8000962:	42aa      	cmp	r2, r5
 8000964:	bf08      	it	eq
 8000966:	2301      	moveq	r3, #1
 8000968:	d0e4      	beq.n	8000934 <ai_platform_network_get_error+0x32>
 800096a:	2300      	movs	r3, #0
 800096c:	f240 4452 	movw	r4, #1106	; 0x452
 8000970:	42a2      	cmp	r2, r4
 8000972:	d1df      	bne.n	8000934 <ai_platform_network_get_error+0x32>
 8000974:	2201      	movs	r2, #1
 8000976:	e7de      	b.n	8000936 <ai_platform_network_get_error+0x34>
 8000978:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000dac <.text_25>
 800097c:	680a      	ldr	r2, [r1, #0]
 800097e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000982:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000986:	d10f      	bne.n	80009a8 <ai_platform_network_get_error+0xa6>
 8000988:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8000db0 <.text_26>
 800098c:	2301      	movs	r3, #1
 800098e:	6093      	str	r3, [r2, #8]
 8000990:	6891      	ldr	r1, [r2, #8]
 8000992:	2900      	cmp	r1, #0
 8000994:	d1fc      	bne.n	8000990 <ai_platform_network_get_error+0x8e>
 8000996:	f8df 340c 	ldr.w	r3, [pc, #1036]	; 8000da4 <.text_23>
 800099a:	f8df 440c 	ldr.w	r4, [pc, #1036]	; 8000da8 <.text_24>
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	42a2      	cmp	r2, r4
 80009a4:	d000      	beq.n	80009a8 <ai_platform_network_get_error+0xa6>
 80009a6:	e7fe      	b.n	80009a6 <ai_platform_network_get_error+0xa4>
 80009a8:	b920      	cbnz	r0, 80009b4 <ai_platform_network_get_error+0xb2>
 80009aa:	f20f 4038 	addw	r0, pc, #1080	; 0x438
 80009ae:	6800      	ldr	r0, [r0, #0]
 80009b0:	bc30      	pop	{r4, r5}
 80009b2:	4770      	bx	lr
 80009b4:	300c      	adds	r0, #12
 80009b6:	bc30      	pop	{r4, r5}
 80009b8:	f000 ba1c 	b.w	8000df4 <core_get_error>

080009bc <ai_platform_network_set_error>:
 80009bc:	2800      	cmp	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	300c      	addne	r0, #12
 80009c2:	f000 ba1c 	bne.w	8000dfe <core_set_error>
 80009c6:	4770      	bx	lr

080009c8 <ai_platform_network_create>:
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	b081      	sub	sp, #4
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	9d06      	ldr	r5, [sp, #24]
 80009d0:	4604      	mov	r4, r0
 80009d2:	9807      	ldr	r0, [sp, #28]
 80009d4:	4616      	mov	r6, r2
 80009d6:	042d      	lsls	r5, r5, #16
 80009d8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80009dc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80009e0:	f20f 4004 	addw	r0, pc, #1028	; 0x404
 80009e4:	6807      	ldr	r7, [r0, #0]
 80009e6:	f7ff fda8 	bl	800053a <CRC_Lock>
 80009ea:	b924      	cbnz	r4, 80009f6 <ai_platform_network_create+0x2e>
 80009ec:	f20f 30fc 	addw	r0, pc, #1020	; 0x3fc
 80009f0:	b001      	add	sp, #4
 80009f2:	6800      	ldr	r0, [r0, #0]
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	f8df 13bc 	ldr.w	r1, [pc, #956]	; 8000db4 <.text_27>
 80009fa:	6031      	str	r1, [r6, #0]
 80009fc:	6026      	str	r6, [r4, #0]
 80009fe:	f000 f9f7 	bl	8000df0 <core_init>
 8000a02:	b910      	cbnz	r0, 8000a0a <ai_platform_network_create+0x42>
 8000a04:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8000a08:	e00e      	b.n	8000a28 <ai_platform_network_create+0x60>
 8000a0a:	f8df 13ac 	ldr.w	r1, [pc, #940]	; 8000db8 <.text_28>
 8000a0e:	428d      	cmp	r5, r1
 8000a10:	d303      	bcc.n	8000a1a <ai_platform_network_create+0x52>
 8000a12:	f20f 32c4 	addw	r2, pc, #964	; 0x3c4
 8000a16:	6817      	ldr	r7, [r2, #0]
 8000a18:	e007      	b.n	8000a2a <ai_platform_network_create+0x62>
 8000a1a:	f20f 30c0 	addw	r0, pc, #960	; 0x3c0
 8000a1e:	f000 fdc5 	bl	80015ac <ai_check_custom_types>
 8000a22:	b920      	cbnz	r0, 8000a2e <ai_platform_network_create+0x66>
 8000a24:	f20f 30b8 	addw	r0, pc, #952	; 0x3b8
 8000a28:	6807      	ldr	r7, [r0, #0]
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	6021      	str	r1, [r4, #0]
 8000a2e:	4638      	mov	r0, r7
 8000a30:	b001      	add	sp, #4
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a34 <ai_platform_network_destroy>:
 8000a34:	b470      	push	{r4, r5, r6}
 8000a36:	b130      	cbz	r0, 8000a46 <ai_platform_network_destroy+0x12>
 8000a38:	6801      	ldr	r1, [r0, #0]
 8000a3a:	f8df 2378 	ldr.w	r2, [pc, #888]	; 8000db4 <.text_27>
 8000a3e:	4291      	cmp	r1, r2
 8000a40:	bf08      	it	eq
 8000a42:	4602      	moveq	r2, r0
 8000a44:	d000      	beq.n	8000a48 <ai_platform_network_destroy+0x14>
 8000a46:	2200      	movs	r2, #0
 8000a48:	f8df 134c 	ldr.w	r1, [pc, #844]	; 8000d98 <.text_20>
 8000a4c:	f240 4449 	movw	r4, #1097	; 0x449
 8000a50:	680b      	ldr	r3, [r1, #0]
 8000a52:	085b      	lsrs	r3, r3, #1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	600b      	str	r3, [r1, #0]
 8000a58:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000d9c <.text_21>
 8000a5c:	680b      	ldr	r3, [r1, #0]
 8000a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a62:	42a3      	cmp	r3, r4
 8000a64:	d115      	bne.n	8000a92 <ai_platform_network_destroy+0x5e>
 8000a66:	2101      	movs	r1, #1
 8000a68:	2400      	movs	r4, #0
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4321      	orrs	r1, r4
 8000a6e:	4319      	orrs	r1, r3
 8000a70:	d01d      	beq.n	8000aae <ai_platform_network_destroy+0x7a>
 8000a72:	f8df 332c 	ldr.w	r3, [pc, #812]	; 8000da0 <.text_22>
 8000a76:	2401      	movs	r4, #1
 8000a78:	609c      	str	r4, [r3, #8]
 8000a7a:	6899      	ldr	r1, [r3, #8]
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d1fc      	bne.n	8000a7a <ai_platform_network_destroy+0x46>
 8000a80:	f8df 4320 	ldr.w	r4, [pc, #800]	; 8000da4 <.text_23>
 8000a84:	f8df 5320 	ldr.w	r5, [pc, #800]	; 8000da8 <.text_24>
 8000a88:	601c      	str	r4, [r3, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	42ab      	cmp	r3, r5
 8000a8e:	d024      	beq.n	8000ada <ai_platform_network_destroy+0xa6>
 8000a90:	e7fe      	b.n	8000a90 <ai_platform_network_destroy+0x5c>
 8000a92:	2100      	movs	r1, #0
 8000a94:	f240 4651 	movw	r6, #1105	; 0x451
 8000a98:	42b3      	cmp	r3, r6
 8000a9a:	bf08      	it	eq
 8000a9c:	2401      	moveq	r4, #1
 8000a9e:	d0e4      	beq.n	8000a6a <ai_platform_network_destroy+0x36>
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	f240 4552 	movw	r5, #1106	; 0x452
 8000aa6:	42ab      	cmp	r3, r5
 8000aa8:	d1df      	bne.n	8000a6a <ai_platform_network_destroy+0x36>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e7de      	b.n	8000a6c <ai_platform_network_destroy+0x38>
 8000aae:	f8df 12fc 	ldr.w	r1, [pc, #764]	; 8000dac <.text_25>
 8000ab2:	680b      	ldr	r3, [r1, #0]
 8000ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ab8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000abc:	d10d      	bne.n	8000ada <ai_platform_network_destroy+0xa6>
 8000abe:	f8df 32f0 	ldr.w	r3, [pc, #752]	; 8000db0 <.text_26>
 8000ac2:	2401      	movs	r4, #1
 8000ac4:	609c      	str	r4, [r3, #8]
 8000ac6:	6899      	ldr	r1, [r3, #8]
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	d1fc      	bne.n	8000ac6 <ai_platform_network_destroy+0x92>
 8000acc:	4cb5      	ldr	r4, [pc, #724]	; (8000da4 <.text_23>)
 8000ace:	4db6      	ldr	r5, [pc, #728]	; (8000da8 <.text_24>)
 8000ad0:	601c      	str	r4, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	42ab      	cmp	r3, r5
 8000ad6:	d000      	beq.n	8000ada <ai_platform_network_destroy+0xa6>
 8000ad8:	e7fe      	b.n	8000ad8 <ai_platform_network_destroy+0xa4>
 8000ada:	b102      	cbz	r2, 8000ade <ai_platform_network_destroy+0xaa>
 8000adc:	2000      	movs	r0, #0
 8000ade:	bc70      	pop	{r4, r5, r6}
 8000ae0:	4770      	bx	lr

08000ae2 <ai_platform_network_init>:
 8000ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	b118      	cbz	r0, 8000af2 <ai_platform_network_init+0x10>
 8000aea:	6801      	ldr	r1, [r0, #0]
 8000aec:	4bb1      	ldr	r3, [pc, #708]	; (8000db4 <.text_27>)
 8000aee:	4299      	cmp	r1, r3
 8000af0:	d000      	beq.n	8000af4 <ai_platform_network_init+0x12>
 8000af2:	2000      	movs	r0, #0
 8000af4:	49a8      	ldr	r1, [pc, #672]	; (8000d98 <.text_20>)
 8000af6:	f240 4549 	movw	r5, #1097	; 0x449
 8000afa:	680c      	ldr	r4, [r1, #0]
 8000afc:	0864      	lsrs	r4, r4, #1
 8000afe:	0064      	lsls	r4, r4, #1
 8000b00:	600c      	str	r4, [r1, #0]
 8000b02:	49a6      	ldr	r1, [pc, #664]	; (8000d9c <.text_21>)
 8000b04:	680b      	ldr	r3, [r1, #0]
 8000b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b0a:	42ab      	cmp	r3, r5
 8000b0c:	d112      	bne.n	8000b34 <ai_platform_network_init+0x52>
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2400      	movs	r4, #0
 8000b12:	2300      	movs	r3, #0
 8000b14:	4321      	orrs	r1, r4
 8000b16:	4319      	orrs	r1, r3
 8000b18:	d01a      	beq.n	8000b50 <ai_platform_network_init+0x6e>
 8000b1a:	4ba1      	ldr	r3, [pc, #644]	; (8000da0 <.text_22>)
 8000b1c:	2401      	movs	r4, #1
 8000b1e:	609c      	str	r4, [r3, #8]
 8000b20:	6899      	ldr	r1, [r3, #8]
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d1fc      	bne.n	8000b20 <ai_platform_network_init+0x3e>
 8000b26:	4c9f      	ldr	r4, [pc, #636]	; (8000da4 <.text_23>)
 8000b28:	4d9f      	ldr	r5, [pc, #636]	; (8000da8 <.text_24>)
 8000b2a:	601c      	str	r4, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	42ab      	cmp	r3, r5
 8000b30:	d022      	beq.n	8000b78 <ai_platform_network_init+0x96>
 8000b32:	e7fe      	b.n	8000b32 <ai_platform_network_init+0x50>
 8000b34:	2100      	movs	r1, #0
 8000b36:	f240 4651 	movw	r6, #1105	; 0x451
 8000b3a:	42b3      	cmp	r3, r6
 8000b3c:	bf08      	it	eq
 8000b3e:	2401      	moveq	r4, #1
 8000b40:	d0e7      	beq.n	8000b12 <ai_platform_network_init+0x30>
 8000b42:	2400      	movs	r4, #0
 8000b44:	f240 4552 	movw	r5, #1106	; 0x452
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d1e2      	bne.n	8000b12 <ai_platform_network_init+0x30>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e7e1      	b.n	8000b14 <ai_platform_network_init+0x32>
 8000b50:	4996      	ldr	r1, [pc, #600]	; (8000dac <.text_25>)
 8000b52:	680b      	ldr	r3, [r1, #0]
 8000b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b58:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000b5c:	d10c      	bne.n	8000b78 <ai_platform_network_init+0x96>
 8000b5e:	4b94      	ldr	r3, [pc, #592]	; (8000db0 <.text_26>)
 8000b60:	2401      	movs	r4, #1
 8000b62:	609c      	str	r4, [r3, #8]
 8000b64:	6899      	ldr	r1, [r3, #8]
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d1fc      	bne.n	8000b64 <ai_platform_network_init+0x82>
 8000b6a:	4c8e      	ldr	r4, [pc, #568]	; (8000da4 <.text_23>)
 8000b6c:	4d8e      	ldr	r5, [pc, #568]	; (8000da8 <.text_24>)
 8000b6e:	601c      	str	r4, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	42ab      	cmp	r3, r5
 8000b74:	d000      	beq.n	8000b78 <ai_platform_network_init+0x96>
 8000b76:	e7fe      	b.n	8000b76 <ai_platform_network_init+0x94>
 8000b78:	b348      	cbz	r0, 8000bce <ai_platform_network_init+0xec>
 8000b7a:	b90a      	cbnz	r2, 8000b80 <ai_platform_network_init+0x9e>
 8000b7c:	2211      	movs	r2, #17
 8000b7e:	e006      	b.n	8000b8e <ai_platform_network_init+0xac>
 8000b80:	69d1      	ldr	r1, [r2, #28]
 8000b82:	b909      	cbnz	r1, 8000b88 <ai_platform_network_init+0xa6>
 8000b84:	2213      	movs	r2, #19
 8000b86:	e002      	b.n	8000b8e <ai_platform_network_init+0xac>
 8000b88:	68d1      	ldr	r1, [r2, #12]
 8000b8a:	b939      	cbnz	r1, 8000b9c <ai_platform_network_init+0xba>
 8000b8c:	2212      	movs	r2, #18
 8000b8e:	2110      	movs	r1, #16
 8000b90:	300c      	adds	r0, #12
 8000b92:	f000 f934 	bl	8000dfe <core_set_error>
 8000b96:	2000      	movs	r0, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f100 0114 	add.w	r1, r0, #20
 8000ba0:	f100 0724 	add.w	r7, r0, #36	; 0x24
 8000ba4:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 8000ba6:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 8000baa:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 8000bae:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 8000bb2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000bb4:	f04f 0a03 	mov.w	sl, #3
 8000bb8:	f8c0 a008 	str.w	sl, [r0, #8]
 8000bbc:	b13a      	cbz	r2, 8000bce <ai_platform_network_init+0xec>
 8000bbe:	6891      	ldr	r1, [r2, #8]
 8000bc0:	6050      	str	r0, [r2, #4]
 8000bc2:	428a      	cmp	r2, r1
 8000bc4:	bf18      	it	ne
 8000bc6:	2900      	cmpne	r1, #0
 8000bc8:	bf18      	it	ne
 8000bca:	460a      	movne	r2, r1
 8000bcc:	d1f7      	bne.n	8000bbe <ai_platform_network_init+0xdc>
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000bd2 <ai_platform_network_process>:
 8000bd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	b128      	cbz	r0, 8000be6 <ai_platform_network_process+0x14>
 8000bda:	6803      	ldr	r3, [r0, #0]
 8000bdc:	4c75      	ldr	r4, [pc, #468]	; (8000db4 <.text_27>)
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	bf08      	it	eq
 8000be2:	4605      	moveq	r5, r0
 8000be4:	d000      	beq.n	8000be8 <ai_platform_network_process+0x16>
 8000be6:	2500      	movs	r5, #0
 8000be8:	486b      	ldr	r0, [pc, #428]	; (8000d98 <.text_20>)
 8000bea:	f240 4449 	movw	r4, #1097	; 0x449
 8000bee:	6803      	ldr	r3, [r0, #0]
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	6003      	str	r3, [r0, #0]
 8000bf6:	4869      	ldr	r0, [pc, #420]	; (8000d9c <.text_21>)
 8000bf8:	6803      	ldr	r3, [r0, #0]
 8000bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d112      	bne.n	8000c28 <ai_platform_network_process+0x56>
 8000c02:	2001      	movs	r0, #1
 8000c04:	2400      	movs	r4, #0
 8000c06:	2300      	movs	r3, #0
 8000c08:	4320      	orrs	r0, r4
 8000c0a:	4318      	orrs	r0, r3
 8000c0c:	d01a      	beq.n	8000c44 <ai_platform_network_process+0x72>
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <.text_22>)
 8000c10:	2401      	movs	r4, #1
 8000c12:	609c      	str	r4, [r3, #8]
 8000c14:	6898      	ldr	r0, [r3, #8]
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d1fc      	bne.n	8000c14 <ai_platform_network_process+0x42>
 8000c1a:	4c62      	ldr	r4, [pc, #392]	; (8000da4 <.text_23>)
 8000c1c:	4e62      	ldr	r6, [pc, #392]	; (8000da8 <.text_24>)
 8000c1e:	601c      	str	r4, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d022      	beq.n	8000c6c <ai_platform_network_process+0x9a>
 8000c26:	e7fe      	b.n	8000c26 <ai_platform_network_process+0x54>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f240 4751 	movw	r7, #1105	; 0x451
 8000c2e:	42bb      	cmp	r3, r7
 8000c30:	bf08      	it	eq
 8000c32:	2401      	moveq	r4, #1
 8000c34:	d0e7      	beq.n	8000c06 <ai_platform_network_process+0x34>
 8000c36:	2400      	movs	r4, #0
 8000c38:	f240 4652 	movw	r6, #1106	; 0x452
 8000c3c:	42b3      	cmp	r3, r6
 8000c3e:	d1e2      	bne.n	8000c06 <ai_platform_network_process+0x34>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e7e1      	b.n	8000c08 <ai_platform_network_process+0x36>
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <.text_25>)
 8000c46:	6803      	ldr	r3, [r0, #0]
 8000c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c4c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000c50:	d10c      	bne.n	8000c6c <ai_platform_network_process+0x9a>
 8000c52:	4b57      	ldr	r3, [pc, #348]	; (8000db0 <.text_26>)
 8000c54:	2401      	movs	r4, #1
 8000c56:	609c      	str	r4, [r3, #8]
 8000c58:	6898      	ldr	r0, [r3, #8]
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d1fc      	bne.n	8000c58 <ai_platform_network_process+0x86>
 8000c5e:	4c51      	ldr	r4, [pc, #324]	; (8000da4 <.text_23>)
 8000c60:	4e51      	ldr	r6, [pc, #324]	; (8000da8 <.text_24>)
 8000c62:	601c      	str	r4, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	42b3      	cmp	r3, r6
 8000c68:	d000      	beq.n	8000c6c <ai_platform_network_process+0x9a>
 8000c6a:	e7fe      	b.n	8000c6a <ai_platform_network_process+0x98>
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d04b      	beq.n	8000d08 <ai_platform_network_process+0x136>
 8000c70:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8000c74:	f008 0303 	and.w	r3, r8, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d002      	beq.n	8000c82 <ai_platform_network_process+0xb0>
 8000c7c:	2230      	movs	r2, #48	; 0x30
 8000c7e:	2111      	movs	r1, #17
 8000c80:	e03e      	b.n	8000d00 <ai_platform_network_process+0x12e>
 8000c82:	000f      	movs	r7, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	68f8      	ldrne	r0, [r7, #12]
 8000c88:	2800      	cmpne	r0, #0
 8000c8a:	d037      	beq.n	8000cfc <ai_platform_network_process+0x12a>
 8000c8c:	8878      	ldrh	r0, [r7, #2]
 8000c8e:	b908      	cbnz	r0, 8000c94 <ai_platform_network_process+0xc2>
 8000c90:	2221      	movs	r2, #33	; 0x21
 8000c92:	e034      	b.n	8000cfe <ai_platform_network_process+0x12c>
 8000c94:	0014      	movs	r4, r2
 8000c96:	d00b      	beq.n	8000cb0 <ai_platform_network_process+0xde>
 8000c98:	68e1      	ldr	r1, [r4, #12]
 8000c9a:	b361      	cbz	r1, 8000cf6 <ai_platform_network_process+0x124>
 8000c9c:	8861      	ldrh	r1, [r4, #2]
 8000c9e:	b911      	cbnz	r1, 8000ca6 <ai_platform_network_process+0xd4>
 8000ca0:	2221      	movs	r2, #33	; 0x21
 8000ca2:	2113      	movs	r1, #19
 8000ca4:	e02c      	b.n	8000d00 <ai_platform_network_process+0x12e>
 8000ca6:	4288      	cmp	r0, r1
 8000ca8:	d002      	beq.n	8000cb0 <ai_platform_network_process+0xde>
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	2102      	movs	r1, #2
 8000cae:	e027      	b.n	8000d00 <ai_platform_network_process+0x12e>
 8000cb0:	ea5f 50c8 	movs.w	r0, r8, lsl #23
 8000cb4:	ea4f 2858 	mov.w	r8, r8, lsr #9
 8000cb8:	f008 0801 	and.w	r8, r8, #1
 8000cbc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000cbe:	bf4c      	ite	mi
 8000cc0:	2002      	movmi	r0, #2
 8000cc2:	2000      	movpl	r0, #0
 8000cc4:	ea48 0800 	orr.w	r8, r8, r0
 8000cc8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000cca:	680a      	ldr	r2, [r1, #0]
 8000ccc:	6806      	ldr	r6, [r0, #0]
 8000cce:	9200      	str	r2, [sp, #0]
 8000cd0:	6871      	ldr	r1, [r6, #4]
 8000cd2:	6830      	ldr	r0, [r6, #0]
 8000cd4:	f7ff fc00 	bl	80004d8 <ai_array_get_byte_size>
 8000cd8:	9001      	str	r0, [sp, #4]
 8000cda:	9800      	ldr	r0, [sp, #0]
 8000cdc:	6841      	ldr	r1, [r0, #4]
 8000cde:	6800      	ldr	r0, [r0, #0]
 8000ce0:	f7ff fbfa 	bl	80004d8 <ai_array_get_byte_size>
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	68f9      	ldr	r1, [r7, #12]
 8000cea:	bf14      	ite	ne
 8000cec:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 8000cf0:	f04f 0b00 	moveq.w	fp, #0
 8000cf4:	e00c      	b.n	8000d10 <ai_platform_network_process+0x13e>
 8000cf6:	2217      	movs	r2, #23
 8000cf8:	2113      	movs	r1, #19
 8000cfa:	e001      	b.n	8000d00 <ai_platform_network_process+0x12e>
 8000cfc:	2217      	movs	r2, #23
 8000cfe:	2112      	movs	r1, #18
 8000d00:	f105 000c 	add.w	r0, r5, #12
 8000d04:	f000 f87b 	bl	8000dfe <core_set_error>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	b003      	add	sp, #12
 8000d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d10:	f018 0002 	ands.w	r0, r8, #2
 8000d14:	bf14      	ite	ne
 8000d16:	f8df 90a4 	ldrne.w	r9, [pc, #164]	; 8000dbc <.text_29>
 8000d1a:	f8df 90a4 	ldreq.w	r9, [pc, #164]	; 8000dc0 <.text_30>
 8000d1e:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 8000d22:	887b      	ldrh	r3, [r7, #2]
 8000d24:	bf4c      	ite	mi
 8000d26:	f8df a094 	ldrmi.w	sl, [pc, #148]	; 8000dbc <.text_29>
 8000d2a:	f8df a098 	ldrpl.w	sl, [pc, #152]	; 8000dc4 <.text_31>
 8000d2e:	2700      	movs	r7, #0
 8000d30:	822b      	strh	r3, [r5, #16]
 8000d32:	826f      	strh	r7, [r5, #18]
 8000d34:	b908      	cbnz	r0, 8000d3a <ai_platform_network_process+0x168>
 8000d36:	60b1      	str	r1, [r6, #8]
 8000d38:	60f1      	str	r1, [r6, #12]
 8000d3a:	b144      	cbz	r4, 8000d4e <ai_platform_network_process+0x17c>
 8000d3c:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 8000d40:	d405      	bmi.n	8000d4e <ai_platform_network_process+0x17c>
 8000d42:	9b00      	ldr	r3, [sp, #0]
 8000d44:	f8c3 b008 	str.w	fp, [r3, #8]
 8000d48:	9800      	ldr	r0, [sp, #0]
 8000d4a:	f8c0 b00c 	str.w	fp, [r0, #12]
 8000d4e:	8a6b      	ldrh	r3, [r5, #18]
 8000d50:	8a28      	ldrh	r0, [r5, #16]
 8000d52:	4283      	cmp	r3, r0
 8000d54:	d21c      	bcs.n	8000d90 <ai_platform_network_process+0x1be>
 8000d56:	462c      	mov	r4, r5
 8000d58:	4635      	mov	r5, r6
 8000d5a:	9e01      	ldr	r6, [sp, #4]
 8000d5c:	4617      	mov	r7, r2
 8000d5e:	4688      	mov	r8, r1
 8000d60:	68a8      	ldr	r0, [r5, #8]
 8000d62:	4632      	mov	r2, r6
 8000d64:	4641      	mov	r1, r8
 8000d66:	44b0      	add	r8, r6
 8000d68:	47c8      	blx	r9
 8000d6a:	60a8      	str	r0, [r5, #8]
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f000 fc9f 	bl	80016b0 <ai_layers_forward_all>
 8000d72:	9800      	ldr	r0, [sp, #0]
 8000d74:	463a      	mov	r2, r7
 8000d76:	6881      	ldr	r1, [r0, #8]
 8000d78:	4658      	mov	r0, fp
 8000d7a:	47d0      	blx	sl
 8000d7c:	eb00 0b07 	add.w	fp, r0, r7
 8000d80:	8a60      	ldrh	r0, [r4, #18]
 8000d82:	8a21      	ldrh	r1, [r4, #16]
 8000d84:	1c40      	adds	r0, r0, #1
 8000d86:	8260      	strh	r0, [r4, #18]
 8000d88:	b280      	uxth	r0, r0
 8000d8a:	4288      	cmp	r0, r1
 8000d8c:	d3e8      	bcc.n	8000d60 <ai_platform_network_process+0x18e>
 8000d8e:	4625      	mov	r5, r4
 8000d90:	8a68      	ldrh	r0, [r5, #18]
 8000d92:	b003      	add	sp, #12
 8000d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d98 <.text_20>:
 8000d98:	e0002000 	.word	0xe0002000

08000d9c <.text_21>:
 8000d9c:	e0042000 	.word	0xe0042000

08000da0 <.text_22>:
 8000da0:	40023000 	.word	0x40023000

08000da4 <.text_23>:
 8000da4:	f407a5c2 	.word	0xf407a5c2

08000da8 <.text_24>:
 8000da8:	b5e8b5cd 	.word	0xb5e8b5cd

08000dac <.text_25>:
 8000dac:	5c001000 	.word	0x5c001000

08000db0 <.text_26>:
 8000db0:	58024c00 	.word	0x58024c00

08000db4 <.text_27>:
 8000db4:	a1c00100 	.word	0xa1c00100

08000db8 <.text_28>:
 8000db8:	01010001 	.word	0x01010001

08000dbc <.text_29>:
 8000dbc:	0800052f 	.word	0x0800052f

08000dc0 <.text_30>:
 8000dc0:	080008fd 	.word	0x080008fd

08000dc4 <.text_31>:
 8000dc4:	08000901 	.word	0x08000901

08000dc8 <.text_32>:
 8000dc8:	00000303 	.word	0x00000303

08000dcc <.text_33>:
 8000dcc:	00000001 	.word	0x00000001

08000dd0 <.text_34>:
 8000dd0:	00000101 	.word	0x00000101

08000dd4 <.text_35>:
 8000dd4:	00001030 	.word	0x00001030

08000dd8 <.text_36>:
 8000dd8:	00001001 	.word	0x00001001

08000ddc <_platform_network_sanity_check{8}::signatures>:
 8000ddc:	84048403                                ....

08000de0 <.text_38>:
 8000de0:	00001002 	.word	0x00001002

08000de4 <.text_39>:
 8000de4:	00001010 	.word	0x00001010

08000de8 <.text_40>:
 8000de8:	00000000 	.word	0x00000000

08000dec <.text_41>:
 8000dec:	00001010 	.word	0x00001010

08000df0 <core_init>:
 8000df0:	2001      	movs	r0, #1
 8000df2:	4770      	bx	lr

08000df4 <core_get_error>:
 8000df4:	4601      	mov	r1, r0
 8000df6:	2200      	movs	r2, #0
 8000df8:	6808      	ldr	r0, [r1, #0]
 8000dfa:	600a      	str	r2, [r1, #0]
 8000dfc:	4770      	bx	lr

08000dfe <core_set_error>:
 8000dfe:	7803      	ldrb	r3, [r0, #0]
 8000e00:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000e04:	d104      	bne.n	8000e10 <core_set_error+0x12>
 8000e06:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000e0a:	6001      	str	r1, [r0, #0]
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4770      	bx	lr
 8000e10:	2000      	movs	r0, #0
 8000e12:	4770      	bx	lr

08000e14 <_inspect_tensor_list>:
 8000e14:	0002      	movs	r2, r0
 8000e16:	b4f0      	push	{r4, r5, r6, r7}
 8000e18:	bf14      	ite	ne
 8000e1a:	2900      	cmpne	r1, #0
 8000e1c:	2000      	moveq	r0, #0
 8000e1e:	d042      	beq.n	8000ea6 <_inspect_tensor_list+0x92>
 8000e20:	2300      	movs	r3, #0
 8000e22:	600b      	str	r3, [r1, #0]
 8000e24:	608b      	str	r3, [r1, #8]
 8000e26:	6810      	ldr	r0, [r2, #0]
 8000e28:	b100      	cbz	r0, 8000e2c <_inspect_tensor_list+0x18>
 8000e2a:	6800      	ldr	r0, [r0, #0]
 8000e2c:	2404      	movs	r4, #4
 8000e2e:	b3c8      	cbz	r0, 8000ea4 <_inspect_tensor_list+0x90>
 8000e30:	6800      	ldr	r0, [r0, #0]
 8000e32:	b388      	cbz	r0, 8000e98 <_inspect_tensor_list+0x84>
 8000e34:	6805      	ldr	r5, [r0, #0]
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d42a      	bmi.n	8000e90 <_inspect_tensor_list+0x7c>
 8000e3a:	6840      	ldr	r0, [r0, #4]
 8000e3c:	b340      	cbz	r0, 8000e90 <_inspect_tensor_list+0x7c>
 8000e3e:	f3c5 16c6 	ubfx	r6, r5, #7, #7
 8000e42:	f3c5 3782 	ubfx	r7, r5, #14, #3
 8000e46:	19be      	adds	r6, r7, r6
 8000e48:	0c6f      	lsrs	r7, r5, #17
 8000e4a:	4370      	muls	r0, r6
 8000e4c:	f007 070f 	and.w	r7, r7, #15
 8000e50:	1dc0      	adds	r0, r0, #7
 8000e52:	08c0      	lsrs	r0, r0, #3
 8000e54:	0d6e      	lsrs	r6, r5, #21
 8000e56:	00c0      	lsls	r0, r0, #3
 8000e58:	f006 0603 	and.w	r6, r6, #3
 8000e5c:	40f0      	lsrs	r0, r6
 8000e5e:	2f04      	cmp	r7, #4
 8000e60:	d00c      	beq.n	8000e7c <_inspect_tensor_list+0x68>
 8000e62:	2f08      	cmp	r7, #8
 8000e64:	d111      	bne.n	8000e8a <_inspect_tensor_list+0x76>
 8000e66:	f3c5 16c6 	ubfx	r6, r5, #7, #7
 8000e6a:	f3c5 3582 	ubfx	r5, r5, #14, #3
 8000e6e:	19ae      	adds	r6, r5, r6
 8000e70:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8000e74:	1dc0      	adds	r0, r0, #7
 8000e76:	08c0      	lsrs	r0, r0, #3
 8000e78:	e00b      	b.n	8000e92 <_inspect_tensor_list+0x7e>
 8000e7a:	bf00      	nop
 8000e7c:	f3c5 16c6 	ubfx	r6, r5, #7, #7
 8000e80:	f3c5 3582 	ubfx	r5, r5, #14, #3
 8000e84:	19ae      	adds	r6, r5, r6
 8000e86:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8000e8a:	1dc0      	adds	r0, r0, #7
 8000e8c:	08c0      	lsrs	r0, r0, #3
 8000e8e:	e000      	b.n	8000e92 <_inspect_tensor_list+0x7e>
 8000e90:	2000      	movs	r0, #0
 8000e92:	680d      	ldr	r5, [r1, #0]
 8000e94:	1940      	adds	r0, r0, r5
 8000e96:	6008      	str	r0, [r1, #0]
 8000e98:	6810      	ldr	r0, [r2, #0]
 8000e9a:	1c5b      	adds	r3, r3, #1
 8000e9c:	5900      	ldr	r0, [r0, r4]
 8000e9e:	1d24      	adds	r4, r4, #4
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d1c5      	bne.n	8000e30 <_inspect_tensor_list+0x1c>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea8:	4770      	bx	lr

08000eaa <_snapshot_init_report_node>:
 8000eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eae:	69c5      	ldr	r5, [r0, #28]
 8000eb0:	8b03      	ldrh	r3, [r0, #24]
 8000eb2:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 8000eb6:	6a00      	ldr	r0, [r0, #32]
 8000eb8:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8000ebc:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8000ec0:	696c      	ldr	r4, [r5, #20]
 8000ec2:	f8df 8524 	ldr.w	r8, [pc, #1316]	; 80013e8 <.text_11>
 8000ec6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8000eca:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8000ece:	f8dc 0000 	ldr.w	r0, [ip]
 8000ed2:	880f      	ldrh	r7, [r1, #0]
 8000ed4:	f04f 0c00 	mov.w	ip, #0
 8000ed8:	f8d0 e000 	ldr.w	lr, [r0]
 8000edc:	6840      	ldr	r0, [r0, #4]
 8000ede:	f8de 2000 	ldr.w	r2, [lr]
 8000ee2:	6800      	ldr	r0, [r0, #0]
 8000ee4:	8027      	strh	r7, [r4, #0]
 8000ee6:	8849      	ldrh	r1, [r1, #2]
 8000ee8:	f8c4 c004 	str.w	ip, [r4, #4]
 8000eec:	8061      	strh	r1, [r4, #2]
 8000eee:	69f1      	ldr	r1, [r6, #28]
 8000ef0:	69af      	ldr	r7, [r5, #24]
 8000ef2:	f8d6 c028 	ldr.w	ip, [r6, #40]	; 0x28
 8000ef6:	4359      	muls	r1, r3
 8000ef8:	440f      	add	r7, r1
 8000efa:	6237      	str	r7, [r6, #32]
 8000efc:	69ed      	ldr	r5, [r5, #28]
 8000efe:	fb0c fc03 	mul.w	ip, ip, r3
 8000f02:	eb05 010c 	add.w	r1, r5, ip
 8000f06:	62f1      	str	r1, [r6, #44]	; 0x2c
 8000f08:	6816      	ldr	r6, [r2, #0]
 8000f0a:	6835      	ldr	r5, [r6, #0]
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	f025 4e7c 	bic.w	lr, r5, #4227858432	; 0xfc000000
 8000f12:	45c6      	cmp	lr, r8
 8000f14:	d011      	beq.n	8000f3a <_snapshot_init_report_node+0x90>
 8000f16:	f8df 84d4 	ldr.w	r8, [pc, #1236]	; 80013ec <.text_12>
 8000f1a:	45c6      	cmp	lr, r8
 8000f1c:	d00b      	beq.n	8000f36 <_snapshot_init_report_node+0x8c>
 8000f1e:	f8df 84d0 	ldr.w	r8, [pc, #1232]	; 80013f0 <.text_13>
 8000f22:	45c6      	cmp	lr, r8
 8000f24:	d005      	beq.n	8000f32 <_snapshot_init_report_node+0x88>
 8000f26:	f8df 84cc 	ldr.w	r8, [pc, #1228]	; 80013f4 <.text_14>
 8000f2a:	45c6      	cmp	lr, r8
 8000f2c:	bf08      	it	eq
 8000f2e:	2601      	moveq	r6, #1
 8000f30:	e004      	b.n	8000f3c <_snapshot_init_report_node+0x92>
 8000f32:	2632      	movs	r6, #50	; 0x32
 8000f34:	e002      	b.n	8000f3c <_snapshot_init_report_node+0x92>
 8000f36:	2631      	movs	r6, #49	; 0x31
 8000f38:	e000      	b.n	8000f3c <_snapshot_init_report_node+0x92>
 8000f3a:	2610      	movs	r6, #16
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	8163      	strh	r3, [r4, #10]
 8000f40:	bf4c      	ite	mi
 8000f42:	f44f 4c00 	movmi.w	ip, #32768	; 0x8000
 8000f46:	f04f 0c00 	movpl.w	ip, #0
 8000f4a:	006d      	lsls	r5, r5, #1
 8000f4c:	ea4c 0606 	orr.w	r6, ip, r6
 8000f50:	bf4c      	ite	mi
 8000f52:	f44f 4580 	movmi.w	r5, #16384	; 0x4000
 8000f56:	2500      	movpl	r5, #0
 8000f58:	432e      	orrs	r6, r5
 8000f5a:	8126      	strh	r6, [r4, #8]
 8000f5c:	6915      	ldr	r5, [r2, #16]
 8000f5e:	81a5      	strh	r5, [r4, #12]
 8000f60:	68d6      	ldr	r6, [r2, #12]
 8000f62:	81e6      	strh	r6, [r4, #14]
 8000f64:	6892      	ldr	r2, [r2, #8]
 8000f66:	6122      	str	r2, [r4, #16]
 8000f68:	6167      	str	r7, [r4, #20]
 8000f6a:	6805      	ldr	r5, [r0, #0]
 8000f6c:	f8df 7478 	ldr.w	r7, [pc, #1144]	; 80013e8 <.text_11>
 8000f70:	682a      	ldr	r2, [r5, #0]
 8000f72:	2500      	movs	r5, #0
 8000f74:	f022 467c 	bic.w	r6, r2, #4227858432	; 0xfc000000
 8000f78:	42be      	cmp	r6, r7
 8000f7a:	d011      	beq.n	8000fa0 <_snapshot_init_report_node+0xf6>
 8000f7c:	f8df 746c 	ldr.w	r7, [pc, #1132]	; 80013ec <.text_12>
 8000f80:	42be      	cmp	r6, r7
 8000f82:	d00b      	beq.n	8000f9c <_snapshot_init_report_node+0xf2>
 8000f84:	f8df 7468 	ldr.w	r7, [pc, #1128]	; 80013f0 <.text_13>
 8000f88:	42be      	cmp	r6, r7
 8000f8a:	d005      	beq.n	8000f98 <_snapshot_init_report_node+0xee>
 8000f8c:	f8df 7464 	ldr.w	r7, [pc, #1124]	; 80013f4 <.text_14>
 8000f90:	42be      	cmp	r6, r7
 8000f92:	bf08      	it	eq
 8000f94:	2501      	moveq	r5, #1
 8000f96:	e004      	b.n	8000fa2 <_snapshot_init_report_node+0xf8>
 8000f98:	2532      	movs	r5, #50	; 0x32
 8000f9a:	e002      	b.n	8000fa2 <_snapshot_init_report_node+0xf8>
 8000f9c:	2531      	movs	r5, #49	; 0x31
 8000f9e:	e000      	b.n	8000fa2 <_snapshot_init_report_node+0xf8>
 8000fa0:	2510      	movs	r5, #16
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	8363      	strh	r3, [r4, #26]
 8000fa6:	bf4c      	ite	mi
 8000fa8:	f44f 4600 	movmi.w	r6, #32768	; 0x8000
 8000fac:	2600      	movpl	r6, #0
 8000fae:	4335      	orrs	r5, r6
 8000fb0:	0052      	lsls	r2, r2, #1
 8000fb2:	bf4c      	ite	mi
 8000fb4:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
 8000fb8:	2200      	movpl	r2, #0
 8000fba:	4315      	orrs	r5, r2
 8000fbc:	8325      	strh	r5, [r4, #24]
 8000fbe:	6902      	ldr	r2, [r0, #16]
 8000fc0:	83a2      	strh	r2, [r4, #28]
 8000fc2:	68c3      	ldr	r3, [r0, #12]
 8000fc4:	83e3      	strh	r3, [r4, #30]
 8000fc6:	6880      	ldr	r0, [r0, #8]
 8000fc8:	6220      	str	r0, [r4, #32]
 8000fca:	6261      	str	r1, [r4, #36]	; 0x24
 8000fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000fd0 <_snapshot_init_report>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	4605      	mov	r5, r0
 8000fd4:	f8df 2420 	ldr.w	r2, [pc, #1056]	; 80013f8 <.text_15>
 8000fd8:	6928      	ldr	r0, [r5, #16]
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	600b      	str	r3, [r1, #0]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	f101 0428 	add.w	r4, r1, #40	; 0x28
 8000fe4:	1c5b      	adds	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	604e      	str	r6, [r1, #4]
 8000fea:	68eb      	ldr	r3, [r5, #12]
 8000fec:	608b      	str	r3, [r1, #8]
 8000fee:	8aea      	ldrh	r2, [r5, #22]
 8000ff0:	610e      	str	r6, [r1, #16]
 8000ff2:	60ca      	str	r2, [r1, #12]
 8000ff4:	614c      	str	r4, [r1, #20]
 8000ff6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000ff8:	b164      	cbz	r4, 8001014 <_snapshot_init_report+0x44>
 8000ffa:	4632      	mov	r2, r6
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4628      	mov	r0, r5
 8001000:	1c76      	adds	r6, r6, #1
 8001002:	f7ff ff52 	bl	8000eaa <_snapshot_init_report_node>
 8001006:	68a0      	ldr	r0, [r4, #8]
 8001008:	4284      	cmp	r4, r0
 800100a:	bf18      	it	ne
 800100c:	2800      	cmpne	r0, #0
 800100e:	bf18      	it	ne
 8001010:	4604      	movne	r4, r0
 8001012:	d1f2      	bne.n	8000ffa <_snapshot_init_report+0x2a>
 8001014:	2001      	movs	r0, #1
 8001016:	bd70      	pop	{r4, r5, r6, pc}

08001018 <_snapshot_push>:
 8001018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800101c:	b081      	sub	sp, #4
 800101e:	4604      	mov	r4, r0
 8001020:	8ae0      	ldrh	r0, [r4, #22]
 8001022:	4689      	mov	r9, r1
 8001024:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001026:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800102a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800102e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001030:	fb06 8609 	mla	r6, r6, r9, r8
 8001034:	00cf      	lsls	r7, r1, #3
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	b108      	cbz	r0, 800103e <_snapshot_push+0x26>
 800103a:	46b8      	mov	r8, r7
 800103c:	e004      	b.n	8001048 <_snapshot_push+0x30>
 800103e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001040:	19f0      	adds	r0, r6, r7
 8001042:	fb01 0009 	mla	r0, r1, r9, r0
 8001046:	4480      	add	r8, r0
 8001048:	69e0      	ldr	r0, [r4, #28]
 800104a:	b988      	cbnz	r0, 8001070 <_snapshot_push+0x58>
 800104c:	4640      	mov	r0, r8
 800104e:	f007 fb45 	bl	80086dc <malloc>
 8001052:	19c1      	adds	r1, r0, r7
 8001054:	6240      	str	r0, [r0, #36]	; 0x24
 8001056:	6181      	str	r1, [r0, #24]
 8001058:	4431      	add	r1, r6
 800105a:	f8c0 8020 	str.w	r8, [r0, #32]
 800105e:	61c1      	str	r1, [r0, #28]
 8001060:	8b62      	ldrh	r2, [r4, #26]
 8001062:	61e0      	str	r0, [r4, #28]
 8001064:	4601      	mov	r1, r0
 8001066:	f8a4 9018 	strh.w	r9, [r4, #24]
 800106a:	1c52      	adds	r2, r2, #1
 800106c:	8362      	strh	r2, [r4, #26]
 800106e:	e00f      	b.n	8001090 <_snapshot_push+0x78>
 8001070:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001074:	b109      	cbz	r1, 800107a <_snapshot_push+0x62>
 8001076:	4628      	mov	r0, r5
 8001078:	4788      	blx	r1
 800107a:	6a28      	ldr	r0, [r5, #32]
 800107c:	4540      	cmp	r0, r8
 800107e:	d30c      	bcc.n	800109a <_snapshot_push+0x82>
 8001080:	19e8      	adds	r0, r5, r7
 8001082:	1981      	adds	r1, r0, r6
 8001084:	61a8      	str	r0, [r5, #24]
 8001086:	61e9      	str	r1, [r5, #28]
 8001088:	4629      	mov	r1, r5
 800108a:	61e5      	str	r5, [r4, #28]
 800108c:	f8a4 9018 	strh.w	r9, [r4, #24]
 8001090:	4620      	mov	r0, r4
 8001092:	b001      	add	sp, #4
 8001094:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001098:	e79a      	b.n	8000fd0 <_snapshot_init_report>
 800109a:	2000      	movs	r0, #0
 800109c:	b001      	add	sp, #4
 800109e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010a2 <_forward_inspect_validate>:
 80010a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a6:	4605      	mov	r5, r0
 80010a8:	6969      	ldr	r1, [r5, #20]
 80010aa:	6868      	ldr	r0, [r5, #4]
 80010ac:	6809      	ldr	r1, [r1, #0]
 80010ae:	680a      	ldr	r2, [r1, #0]
 80010b0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80010b2:	684b      	ldr	r3, [r1, #4]
 80010b4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010b6:	f8d2 8000 	ldr.w	r8, [r2]
 80010ba:	428d      	cmp	r5, r1
 80010bc:	681e      	ldr	r6, [r3, #0]
 80010be:	bf01      	itttt	eq
 80010c0:	f04f 0c00 	moveq.w	ip, #0
 80010c4:	f8a4 c014 	strheq.w	ip, [r4, #20]
 80010c8:	8b22      	ldrheq	r2, [r4, #24]
 80010ca:	2a00      	cmpeq	r2, #0
 80010cc:	d103      	bne.n	80010d6 <_forward_inspect_validate+0x34>
 80010ce:	8a01      	ldrh	r1, [r0, #16]
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ffa1 	bl	8001018 <_snapshot_push>
 80010d6:	8aa0      	ldrh	r0, [r4, #20]
 80010d8:	6a21      	ldr	r1, [r4, #32]
 80010da:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80010e4:	eb01 1702 	add.w	r7, r1, r2, lsl #4
 80010e8:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	60e9      	str	r1, [r5, #12]
 80010f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010f2:	b19b      	cbz	r3, 800111c <_forward_inspect_validate+0x7a>
 80010f4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80010f8:	f8d8 2000 	ldr.w	r2, [r8]
 80010fc:	00c8      	lsls	r0, r1, #3
 80010fe:	69e1      	ldr	r1, [r4, #28]
 8001100:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8001104:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001108:	2200      	movs	r2, #0
 800110a:	f10c 0e14 	add.w	lr, ip, #20
 800110e:	f84e 8000 	str.w	r8, [lr, r0]
 8001112:	6949      	ldr	r1, [r1, #20]
 8001114:	4401      	add	r1, r0
 8001116:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001118:	4798      	blx	r3
 800111a:	e006      	b.n	800112a <_forward_inspect_validate+0x88>
 800111c:	f8d8 0000 	ldr.w	r0, [r8]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	6881      	ldr	r1, [r0, #8]
 8001124:	6a38      	ldr	r0, [r7, #32]
 8001126:	f007 faad 	bl	8008684 <__aeabi_memcpy>
 800112a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800112e:	f000 fab1 	bl	8001694 <ai_layer_type_is_valid>
 8001132:	b110      	cbz	r0, 800113a <_forward_inspect_validate+0x98>
 8001134:	68e9      	ldr	r1, [r5, #12]
 8001136:	4628      	mov	r0, r5
 8001138:	4788      	blx	r1
 800113a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800113c:	6830      	ldr	r0, [r6, #0]
 800113e:	b183      	cbz	r3, 8001162 <_forward_inspect_validate+0xc0>
 8001140:	8aa1      	ldrh	r1, [r4, #20]
 8001142:	69e6      	ldr	r6, [r4, #28]
 8001144:	6880      	ldr	r0, [r0, #8]
 8001146:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800114a:	00d1      	lsls	r1, r2, #3
 800114c:	6972      	ldr	r2, [r6, #20]
 800114e:	f102 0824 	add.w	r8, r2, #36	; 0x24
 8001152:	2201      	movs	r2, #1
 8001154:	f848 0001 	str.w	r0, [r8, r1]
 8001158:	6970      	ldr	r0, [r6, #20]
 800115a:	4401      	add	r1, r0
 800115c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800115e:	4798      	blx	r3
 8001160:	e004      	b.n	800116c <_forward_inspect_validate+0xca>
 8001162:	6881      	ldr	r1, [r0, #8]
 8001164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001168:	f007 fa8c 	bl	8008684 <__aeabi_memcpy>
 800116c:	6868      	ldr	r0, [r5, #4]
 800116e:	6444      	str	r4, [r0, #68]	; 0x44
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	60e9      	str	r1, [r5, #12]
 8001174:	6a38      	ldr	r0, [r7, #32]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4402      	add	r2, r0
 800117a:	623a      	str	r2, [r7, #32]
 800117c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800117e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001180:	4408      	add	r0, r1
 8001182:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001184:	68a8      	ldr	r0, [r5, #8]
 8001186:	4285      	cmp	r5, r0
 8001188:	bf18      	it	ne
 800118a:	2800      	cmpne	r0, #0
 800118c:	d10b      	bne.n	80011a6 <_forward_inspect_validate+0x104>
 800118e:	8b20      	ldrh	r0, [r4, #24]
 8001190:	68e1      	ldr	r1, [r4, #12]
 8001192:	1e40      	subs	r0, r0, #1
 8001194:	8320      	strh	r0, [r4, #24]
 8001196:	b280      	uxth	r0, r0
 8001198:	1c49      	adds	r1, r1, #1
 800119a:	60e1      	str	r1, [r4, #12]
 800119c:	b918      	cbnz	r0, 80011a6 <_forward_inspect_validate+0x104>
 800119e:	69e2      	ldr	r2, [r4, #28]
 80011a0:	6890      	ldr	r0, [r2, #8]
 80011a2:	1a09      	subs	r1, r1, r0
 80011a4:	6091      	str	r1, [r2, #8]
 80011a6:	8aa1      	ldrh	r1, [r4, #20]
 80011a8:	1c49      	adds	r1, r1, #1
 80011aa:	82a1      	strh	r1, [r4, #20]
 80011ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011b0 <ai_network_inspect_init>:
 80011b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b4:	b085      	sub	sp, #20
 80011b6:	460c      	mov	r4, r1
 80011b8:	f7ff fb45 	bl	8000846 <ai_platform_context_acquire>
 80011bc:	4605      	mov	r5, r0
 80011be:	2700      	movs	r7, #0
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	bf1c      	itt	ne
 80011c4:	6be9      	ldrne	r1, [r5, #60]	; 0x3c
 80011c6:	2900      	cmpne	r1, #0
 80011c8:	f000 8087 	beq.w	80012da <ai_network_inspect_init+0x12a>
 80011cc:	6888      	ldr	r0, [r1, #8]
 80011ce:	1c7f      	adds	r7, r7, #1
 80011d0:	4281      	cmp	r1, r0
 80011d2:	bf1c      	itt	ne
 80011d4:	2800      	cmpne	r0, #0
 80011d6:	4601      	movne	r1, r0
 80011d8:	d1f8      	bne.n	80011cc <ai_network_inspect_init+0x1c>
 80011da:	e07b      	b.n	80012d4 <ai_network_inspect_init+0x124>
 80011dc:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 80011e0:	0100      	lsls	r0, r0, #4
 80011e2:	3050      	adds	r0, #80	; 0x50
 80011e4:	f007 fa7a 	bl	80086dc <malloc>
 80011e8:	a286      	add	r2, pc, #536	; (adr r2, 8001404 <.text_18>)
 80011ea:	4680      	mov	r8, r0
 80011ec:	4669      	mov	r1, sp
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	e892 5208 	ldmia.w	r2, {r3, r9, ip, lr}
 80011f4:	e881 5208 	stmia.w	r1, {r3, r9, ip, lr}
 80011f8:	4880      	ldr	r0, [pc, #512]	; (80013fc <.text_16>)
 80011fa:	f108 0250 	add.w	r2, r8, #80	; 0x50
 80011fe:	f8c8 0000 	str.w	r0, [r8]
 8001202:	466b      	mov	r3, sp
 8001204:	46e9      	mov	r9, sp
 8001206:	bf14      	ite	ne
 8001208:	6860      	ldrne	r0, [r4, #4]
 800120a:	2000      	moveq	r0, #0
 800120c:	2c00      	cmp	r4, #0
 800120e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 8001212:	bf14      	ite	ne
 8001214:	68a0      	ldrne	r0, [r4, #8]
 8001216:	2000      	moveq	r0, #0
 8001218:	2c00      	cmp	r4, #0
 800121a:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 800121e:	bf14      	ite	ne
 8001220:	68e0      	ldrne	r0, [r4, #12]
 8001222:	2000      	moveq	r0, #0
 8001224:	2c00      	cmp	r4, #0
 8001226:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
 800122a:	bf14      	ite	ne
 800122c:	7820      	ldrbne	r0, [r4, #0]
 800122e:	2001      	moveq	r0, #1
 8001230:	f8c8 0008 	str.w	r0, [r8, #8]
 8001234:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8001236:	2100      	movs	r1, #0
 8001238:	f8c8 0004 	str.w	r0, [r8, #4]
 800123c:	f8c8 100c 	str.w	r1, [r8, #12]
 8001240:	f108 0040 	add.w	r0, r8, #64	; 0x40
 8001244:	f8c8 5010 	str.w	r5, [r8, #16]
 8001248:	f8a8 7016 	strh.w	r7, [r8, #22]
 800124c:	f8a8 1014 	strh.w	r1, [r8, #20]
 8001250:	f8a8 1018 	strh.w	r1, [r8, #24]
 8001254:	f8c8 2020 	str.w	r2, [r8, #32]
 8001258:	f108 0230 	add.w	r2, r8, #48	; 0x30
 800125c:	f8a8 101a 	strh.w	r1, [r8, #26]
 8001260:	f8c8 101c 	str.w	r1, [r8, #28]
 8001264:	e893 5090 	ldmia.w	r3, {r4, r7, ip, lr}
 8001268:	e882 5090 	stmia.w	r2, {r4, r7, ip, lr}
 800126c:	e899 0c06 	ldmia.w	r9, {r1, r2, sl, fp}
 8001270:	e880 0c06 	stmia.w	r0, {r1, r2, sl, fp}
 8001274:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8001276:	f04f 0900 	mov.w	r9, #0
 800127a:	f8df a184 	ldr.w	sl, [pc, #388]	; 8001400 <.text_17>
 800127e:	b387      	cbz	r7, 80012e2 <ai_network_inspect_init+0x132>
 8001280:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8001284:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8001288:	f109 0901 	add.w	r9, r9, #1
 800128c:	eb10 1401 	adds.w	r4, r0, r1, lsl #4
 8001290:	f8c4 a008 	str.w	sl, [r4, #8]
 8001294:	d012      	beq.n	80012bc <ai_network_inspect_init+0x10c>
 8001296:	6938      	ldr	r0, [r7, #16]
 8001298:	6020      	str	r0, [r4, #0]
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	6061      	str	r1, [r4, #4]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f8c7 a00c 	str.w	sl, [r7, #12]
 80012a4:	f104 0118 	add.w	r1, r4, #24
 80012a8:	6800      	ldr	r0, [r0, #0]
 80012aa:	f7ff fdb3 	bl	8000e14 <_inspect_tensor_list>
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80012b4:	6802      	ldr	r2, [r0, #0]
 80012b6:	1d10      	adds	r0, r2, #4
 80012b8:	f7ff fdac 	bl	8000e14 <_inspect_tensor_list>
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	4287      	cmp	r7, r0
 80012c0:	bf1c      	itt	ne
 80012c2:	2800      	cmpne	r0, #0
 80012c4:	4607      	movne	r7, r0
 80012c6:	d1db      	bne.n	8001280 <ai_network_inspect_init+0xd0>
 80012c8:	e00b      	b.n	80012e2 <ai_network_inspect_init+0x132>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	bf18      	it	ne
 80012ce:	4601      	movne	r1, r0
 80012d0:	d10e      	bne.n	80012f0 <ai_network_inspect_init+0x140>
 80012d2:	e01e      	b.n	8001312 <ai_network_inspect_init+0x162>
 80012d4:	2f00      	cmp	r7, #0
 80012d6:	f47f af81 	bne.w	80011dc <ai_network_inspect_init+0x2c>
 80012da:	2000      	movs	r0, #0
 80012dc:	b005      	add	sp, #20
 80012de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012e2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80012e4:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
 80012e8:	2200      	movs	r2, #0
 80012ea:	2300      	movs	r3, #0
 80012ec:	2600      	movs	r6, #0
 80012ee:	b181      	cbz	r1, 8001312 <ai_network_inspect_init+0x162>
 80012f0:	f8d8 0020 	ldr.w	r0, [r8, #32]
 80012f4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80012f8:	1c76      	adds	r6, r6, #1
 80012fa:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80012fe:	6283      	str	r3, [r0, #40]	; 0x28
 8001300:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8001304:	61c2      	str	r2, [r0, #28]
 8001306:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001308:	18c3      	adds	r3, r0, r3
 800130a:	6888      	ldr	r0, [r1, #8]
 800130c:	4462      	add	r2, ip
 800130e:	4281      	cmp	r1, r0
 8001310:	d1db      	bne.n	80012ca <ai_network_inspect_init+0x11a>
 8001312:	1cd2      	adds	r2, r2, #3
 8001314:	1cdb      	adds	r3, r3, #3
 8001316:	0892      	lsrs	r2, r2, #2
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
 8001322:	1d29      	adds	r1, r5, #4
 8001324:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8001328:	4628      	mov	r0, r5
 800132a:	b005      	add	sp, #20
 800132c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001330:	f000 b90e 	b.w	8001550 <core_utils_generate_network_signature>

08001334 <ai_network_inspect_get_report>:
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b081      	sub	sp, #4
 8001338:	460c      	mov	r4, r1
 800133a:	f7ff fa84 	bl	8000846 <ai_platform_context_acquire>
 800133e:	2800      	cmp	r0, #0
 8001340:	bf18      	it	ne
 8001342:	2c00      	cmpne	r4, #0
 8001344:	d002      	beq.n	800134c <ai_network_inspect_get_report+0x18>
 8001346:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001348:	69c9      	ldr	r1, [r1, #28]
 800134a:	b911      	cbnz	r1, 8001352 <ai_network_inspect_get_report+0x1e>
 800134c:	2000      	movs	r0, #0
 800134e:	b001      	add	sp, #4
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	e891 10ec 	ldmia.w	r1, {r2, r3, r5, r6, r7, ip}
 8001356:	e884 10ec 	stmia.w	r4, {r2, r3, r5, r6, r7, ip}
 800135a:	6840      	ldr	r0, [r0, #4]
 800135c:	6060      	str	r0, [r4, #4]
 800135e:	2001      	movs	r0, #1
 8001360:	b001      	add	sp, #4
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001364 <ai_network_inspect_destroy>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	f7ff fa6e 	bl	8000846 <ai_platform_context_acquire>
 800136a:	4601      	mov	r1, r0
 800136c:	2300      	movs	r3, #0
 800136e:	2900      	cmp	r1, #0
 8001370:	bf1c      	itt	ne
 8001372:	6c4c      	ldrne	r4, [r1, #68]	; 0x44
 8001374:	2c00      	cmpne	r4, #0
 8001376:	d003      	beq.n	8001380 <ai_network_inspect_destroy+0x1c>
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	4a20      	ldr	r2, [pc, #128]	; (80013fc <.text_16>)
 800137c:	4290      	cmp	r0, r2
 800137e:	d001      	beq.n	8001384 <ai_network_inspect_destroy+0x20>
 8001380:	2000      	movs	r0, #0
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001386:	b182      	cbz	r2, 80013aa <ai_network_inspect_destroy+0x46>
 8001388:	6a20      	ldr	r0, [r4, #32]
 800138a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800138e:	1c5b      	adds	r3, r3, #1
 8001390:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001394:	b118      	cbz	r0, 800139e <ai_network_inspect_destroy+0x3a>
 8001396:	6806      	ldr	r6, [r0, #0]
 8001398:	6116      	str	r6, [r2, #16]
 800139a:	6840      	ldr	r0, [r0, #4]
 800139c:	60d0      	str	r0, [r2, #12]
 800139e:	6890      	ldr	r0, [r2, #8]
 80013a0:	4282      	cmp	r2, r0
 80013a2:	bf1c      	itt	ne
 80013a4:	2800      	cmpne	r0, #0
 80013a6:	4602      	movne	r2, r0
 80013a8:	d1ee      	bne.n	8001388 <ai_network_inspect_destroy+0x24>
 80013aa:	6862      	ldr	r2, [r4, #4]
 80013ac:	644a      	str	r2, [r1, #68]	; 0x44
 80013ae:	69e0      	ldr	r0, [r4, #28]
 80013b0:	b1a0      	cbz	r0, 80013dc <ai_network_inspect_destroy+0x78>
 80013b2:	69e0      	ldr	r0, [r4, #28]
 80013b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80013b6:	4285      	cmp	r5, r0
 80013b8:	bf19      	ittee	ne
 80013ba:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 80013bc:	6241      	strne	r1, [r0, #36]	; 0x24
 80013be:	2000      	moveq	r0, #0
 80013c0:	61e0      	streq	r0, [r4, #28]
 80013c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013c4:	b109      	cbz	r1, 80013ca <ai_network_inspect_destroy+0x66>
 80013c6:	4628      	mov	r0, r5
 80013c8:	4788      	blx	r1
 80013ca:	4628      	mov	r0, r5
 80013cc:	f007 f98e 	bl	80086ec <free>
 80013d0:	8b61      	ldrh	r1, [r4, #26]
 80013d2:	69e0      	ldr	r0, [r4, #28]
 80013d4:	1e4a      	subs	r2, r1, #1
 80013d6:	8362      	strh	r2, [r4, #26]
 80013d8:	2800      	cmp	r0, #0
 80013da:	d1ea      	bne.n	80013b2 <ai_network_inspect_destroy+0x4e>
 80013dc:	4620      	mov	r0, r4
 80013de:	f007 f985 	bl	80086ec <free>
 80013e2:	2001      	movs	r0, #1
 80013e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080013e8 <.text_11>:
 80013e8:	02020400 	.word	0x02020400

080013ec <.text_12>:
 80013ec:	02840407 	.word	0x02840407

080013f0 <.text_13>:
 80013f0:	0284080f 	.word	0x0284080f

080013f4 <.text_14>:
 80013f4:	03801000 	.word	0x03801000

080013f8 <.text_15>:
 80013f8:	20000000 	.word	0x20000000

080013fc <.text_16>:
 80013fc:	a1c00101 	.word	0xa1c00101

08001400 <.text_17>:
 8001400:	080010a3 	.word	0x080010a3

08001404 <.text_18>:
 8001404:	00010010 	.word	0x00010010
 8001408:	00010001 	.word	0x00010001
	...

08001414 <_compute_fletcher32>:
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	0849      	lsrs	r1, r1, #1
 800141a:	2400      	movs	r4, #0
 800141c:	2300      	movs	r3, #0
 800141e:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001422:	4602      	mov	r2, r0
 8001424:	d329      	bcc.n	800147a <_compute_fletcher32+0x66>
 8001426:	202d      	movs	r0, #45	; 0x2d
 8001428:	f832 5b02 	ldrh.w	r5, [r2], #2
 800142c:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001430:	1964      	adds	r4, r4, r5
 8001432:	18e3      	adds	r3, r4, r3
 8001434:	f832 7b02 	ldrh.w	r7, [r2], #2
 8001438:	19a4      	adds	r4, r4, r6
 800143a:	18e3      	adds	r3, r4, r3
 800143c:	f832 cb02 	ldrh.w	ip, [r2], #2
 8001440:	19e4      	adds	r4, r4, r7
 8001442:	18e3      	adds	r3, r4, r3
 8001444:	f832 eb02 	ldrh.w	lr, [r2], #2
 8001448:	4464      	add	r4, ip
 800144a:	18e3      	adds	r3, r4, r3
 800144c:	f832 8b02 	ldrh.w	r8, [r2], #2
 8001450:	4474      	add	r4, lr
 8001452:	18e3      	adds	r3, r4, r3
 8001454:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001458:	4444      	add	r4, r8
 800145a:	18e3      	adds	r3, r4, r3
 800145c:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001460:	1964      	adds	r4, r4, r5
 8001462:	18e3      	adds	r3, r4, r3
 8001464:	19a4      	adds	r4, r4, r6
 8001466:	18e3      	adds	r3, r4, r3
 8001468:	1e40      	subs	r0, r0, #1
 800146a:	d1dd      	bne.n	8001428 <_compute_fletcher32+0x14>
 800146c:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 8001470:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001474:	b2a4      	uxth	r4, r4
 8001476:	b29b      	uxth	r3, r3
 8001478:	d2d5      	bcs.n	8001426 <_compute_fletcher32+0x12>
 800147a:	b1e9      	cbz	r1, 80014b8 <_compute_fletcher32+0xa4>
 800147c:	f011 0003 	ands.w	r0, r1, #3
 8001480:	f000 8006 	beq.w	8001490 <_compute_fletcher32+0x7c>
 8001484:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001488:	1964      	adds	r4, r4, r5
 800148a:	18e3      	adds	r3, r4, r3
 800148c:	1e40      	subs	r0, r0, #1
 800148e:	d1f9      	bne.n	8001484 <_compute_fletcher32+0x70>
 8001490:	0889      	lsrs	r1, r1, #2
 8001492:	d011      	beq.n	80014b8 <_compute_fletcher32+0xa4>
 8001494:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001498:	f832 5b02 	ldrh.w	r5, [r2], #2
 800149c:	1820      	adds	r0, r4, r0
 800149e:	18c3      	adds	r3, r0, r3
 80014a0:	f832 4b02 	ldrh.w	r4, [r2], #2
 80014a4:	1940      	adds	r0, r0, r5
 80014a6:	18c3      	adds	r3, r0, r3
 80014a8:	f832 5b02 	ldrh.w	r5, [r2], #2
 80014ac:	1900      	adds	r0, r0, r4
 80014ae:	18c3      	adds	r3, r0, r3
 80014b0:	1944      	adds	r4, r0, r5
 80014b2:	18e3      	adds	r3, r4, r3
 80014b4:	1e49      	subs	r1, r1, #1
 80014b6:	d1ed      	bne.n	8001494 <_compute_fletcher32+0x80>
 80014b8:	eac4 4003 	pkhbt	r0, r4, r3, lsl #16
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014c0 <_serialize_signature_buffer>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	460c      	mov	r4, r1
 80014c4:	b081      	sub	sp, #4
 80014c6:	2100      	movs	r1, #0
 80014c8:	9100      	str	r1, [sp, #0]
 80014ca:	b10c      	cbz	r4, 80014d0 <_serialize_signature_buffer+0x10>
 80014cc:	6801      	ldr	r1, [r0, #0]
 80014ce:	6021      	str	r1, [r4, #0]
 80014d0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80014d2:	1d21      	adds	r1, r4, #4
 80014d4:	b3a6      	cbz	r6, 8001540 <_serialize_signature_buffer+0x80>
 80014d6:	e017      	b.n	8001508 <_serialize_signature_buffer+0x48>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	1d0f      	adds	r7, r1, #4
 80014dc:	2210      	movs	r2, #16
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	6008      	str	r0, [r1, #0]
 80014e2:	1d29      	adds	r1, r5, #4
 80014e4:	4638      	mov	r0, r7
 80014e6:	3710      	adds	r7, #16
 80014e8:	f007 f8cc 	bl	8008684 <__aeabi_memcpy>
 80014ec:	2210      	movs	r2, #16
 80014ee:	f105 0114 	add.w	r1, r5, #20
 80014f2:	4638      	mov	r0, r7
 80014f4:	f007 f8c6 	bl	8008684 <__aeabi_memcpy>
 80014f8:	f107 0110 	add.w	r1, r7, #16
 80014fc:	68b0      	ldr	r0, [r6, #8]
 80014fe:	4286      	cmp	r6, r0
 8001500:	bf18      	it	ne
 8001502:	2800      	cmpne	r0, #0
 8001504:	d01c      	beq.n	8001540 <_serialize_signature_buffer+0x80>
 8001506:	4606      	mov	r6, r0
 8001508:	6970      	ldr	r0, [r6, #20]
 800150a:	6802      	ldr	r2, [r0, #0]
 800150c:	9800      	ldr	r0, [sp, #0]
 800150e:	6853      	ldr	r3, [r2, #4]
 8001510:	681d      	ldr	r5, [r3, #0]
 8001512:	1c40      	adds	r0, r0, #1
 8001514:	9000      	str	r0, [sp, #0]
 8001516:	b90c      	cbnz	r4, 800151c <_serialize_signature_buffer+0x5c>
 8001518:	1c88      	adds	r0, r1, #2
 800151a:	e009      	b.n	8001530 <_serialize_signature_buffer+0x70>
 800151c:	7830      	ldrb	r0, [r6, #0]
 800151e:	7008      	strb	r0, [r1, #0]
 8001520:	7870      	ldrb	r0, [r6, #1]
 8001522:	7048      	strb	r0, [r1, #1]
 8001524:	1c88      	adds	r0, r1, #2
 8001526:	1cb1      	adds	r1, r6, #2
 8001528:	780a      	ldrb	r2, [r1, #0]
 800152a:	7002      	strb	r2, [r0, #0]
 800152c:	784a      	ldrb	r2, [r1, #1]
 800152e:	7042      	strb	r2, [r0, #1]
 8001530:	1c81      	adds	r1, r0, #2
 8001532:	2d00      	cmp	r5, #0
 8001534:	d0e2      	beq.n	80014fc <_serialize_signature_buffer+0x3c>
 8001536:	2c00      	cmp	r4, #0
 8001538:	d1ce      	bne.n	80014d8 <_serialize_signature_buffer+0x18>
 800153a:	f101 0714 	add.w	r7, r1, #20
 800153e:	e7db      	b.n	80014f8 <_serialize_signature_buffer+0x38>
 8001540:	b10c      	cbz	r4, 8001546 <_serialize_signature_buffer+0x86>
 8001542:	9a00      	ldr	r2, [sp, #0]
 8001544:	600a      	str	r2, [r1, #0]
 8001546:	1d09      	adds	r1, r1, #4
 8001548:	1b08      	subs	r0, r1, r4
 800154a:	b001      	add	sp, #4
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800154e <core_utils_compute_crc32>:
 800154e:	e761      	b.n	8001414 <_compute_fletcher32>

08001550 <core_utils_generate_network_signature>:
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	0006      	movs	r6, r0
 8001554:	460d      	mov	r5, r1
 8001556:	b081      	sub	sp, #4
 8001558:	bf18      	it	ne
 800155a:	2d00      	cmpne	r5, #0
 800155c:	d00a      	beq.n	8001574 <core_utils_generate_network_signature+0x24>
 800155e:	2100      	movs	r1, #0
 8001560:	f7ff ffae 	bl	80014c0 <_serialize_signature_buffer>
 8001564:	4607      	mov	r7, r0
 8001566:	2000      	movs	r0, #0
 8001568:	6028      	str	r0, [r5, #0]
 800156a:	4638      	mov	r0, r7
 800156c:	f007 f8b6 	bl	80086dc <malloc>
 8001570:	0004      	movs	r4, r0
 8001572:	d102      	bne.n	800157a <core_utils_generate_network_signature+0x2a>
 8001574:	2000      	movs	r0, #0
 8001576:	b001      	add	sp, #4
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157a:	4621      	mov	r1, r4
 800157c:	4630      	mov	r0, r6
 800157e:	f7ff ff9f 	bl	80014c0 <_serialize_signature_buffer>
 8001582:	4639      	mov	r1, r7
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff ff45 	bl	8001414 <_compute_fletcher32>
 800158a:	6028      	str	r0, [r5, #0]
 800158c:	4620      	mov	r0, r4
 800158e:	f007 f8ad 	bl	80086ec <free>
 8001592:	2001      	movs	r0, #1
 8001594:	b001      	add	sp, #4
 8001596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001598 <ai_layers_forward_layer>:
 8001598:	b510      	push	{r4, lr}
 800159a:	4604      	mov	r4, r0
 800159c:	68e1      	ldr	r1, [r4, #12]
 800159e:	4788      	blx	r1
 80015a0:	68a0      	ldr	r0, [r4, #8]
 80015a2:	42a0      	cmp	r0, r4
 80015a4:	bf08      	it	eq
 80015a6:	2000      	moveq	r0, #0
 80015a8:	bd10      	pop	{r4, pc}
	...

080015ac <ai_check_custom_types>:
 80015ac:	b500      	push	{lr}
 80015ae:	b081      	sub	sp, #4
 80015b0:	b160      	cbz	r0, 80015cc <ai_check_custom_types+0x20>
 80015b2:	7801      	ldrb	r1, [r0, #0]
 80015b4:	2903      	cmp	r1, #3
 80015b6:	d109      	bne.n	80015cc <ai_check_custom_types+0x20>
 80015b8:	f05f 0204 	movs.w	r2, #4
 80015bc:	a163      	add	r1, pc, #396	; (adr r1, 800174c <ai_check_custom_types::ref_signatures>)
 80015be:	f007 f89d 	bl	80086fc <memcmp>
 80015c2:	1e40      	subs	r0, r0, #1
 80015c4:	4180      	sbcs	r0, r0
 80015c6:	0fc0      	lsrs	r0, r0, #31
 80015c8:	b001      	add	sp, #4
 80015ca:	bd00      	pop	{pc}
 80015cc:	2000      	movs	r0, #0
 80015ce:	b001      	add	sp, #4
 80015d0:	bd00      	pop	{pc}
	...

080015d4 <ai_layer_type_name>:
 80015d4:	f242 7211 	movw	r2, #10001	; 0x2711
 80015d8:	1a81      	subs	r1, r0, r2
 80015da:	2901      	cmp	r1, #1
 80015dc:	bf84      	itt	hi
 80015de:	1ec9      	subhi	r1, r1, #3
 80015e0:	290d      	cmphi	r1, #13
 80015e2:	d901      	bls.n	80015e8 <ai_layer_type_name+0x14>
 80015e4:	390f      	subs	r1, #15
 80015e6:	d145      	bne.n	8001674 <ai_layer_type_name+0xa0>
 80015e8:	1a80      	subs	r0, r0, r2
 80015ea:	d021      	beq.n	8001630 <ai_layer_type_name+0x5c>
 80015ec:	1e40      	subs	r0, r0, #1
 80015ee:	d021      	beq.n	8001634 <ai_layer_type_name+0x60>
 80015f0:	1e80      	subs	r0, r0, #2
 80015f2:	d021      	beq.n	8001638 <ai_layer_type_name+0x64>
 80015f4:	1e40      	subs	r0, r0, #1
 80015f6:	d021      	beq.n	800163c <ai_layer_type_name+0x68>
 80015f8:	1e40      	subs	r0, r0, #1
 80015fa:	d021      	beq.n	8001640 <ai_layer_type_name+0x6c>
 80015fc:	1e40      	subs	r0, r0, #1
 80015fe:	d021      	beq.n	8001644 <ai_layer_type_name+0x70>
 8001600:	1e40      	subs	r0, r0, #1
 8001602:	d021      	beq.n	8001648 <ai_layer_type_name+0x74>
 8001604:	1e40      	subs	r0, r0, #1
 8001606:	d021      	beq.n	800164c <ai_layer_type_name+0x78>
 8001608:	1e40      	subs	r0, r0, #1
 800160a:	d021      	beq.n	8001650 <ai_layer_type_name+0x7c>
 800160c:	1e40      	subs	r0, r0, #1
 800160e:	d021      	beq.n	8001654 <ai_layer_type_name+0x80>
 8001610:	1e40      	subs	r0, r0, #1
 8001612:	d021      	beq.n	8001658 <ai_layer_type_name+0x84>
 8001614:	1e40      	subs	r0, r0, #1
 8001616:	d021      	beq.n	800165c <ai_layer_type_name+0x88>
 8001618:	1e40      	subs	r0, r0, #1
 800161a:	d021      	beq.n	8001660 <ai_layer_type_name+0x8c>
 800161c:	1e40      	subs	r0, r0, #1
 800161e:	d021      	beq.n	8001664 <ai_layer_type_name+0x90>
 8001620:	1e40      	subs	r0, r0, #1
 8001622:	d021      	beq.n	8001668 <ai_layer_type_name+0x94>
 8001624:	1e40      	subs	r0, r0, #1
 8001626:	d021      	beq.n	800166c <ai_layer_type_name+0x98>
 8001628:	1e80      	subs	r0, r0, #2
 800162a:	d021      	beq.n	8001670 <ai_layer_type_name+0x9c>
 800162c:	a012      	add	r0, pc, #72	; (adr r0, 8001678 <.text_5>)
 800162e:	4770      	bx	lr
 8001630:	a012      	add	r0, pc, #72	; (adr r0, 800167c <.text_6>)
 8001632:	4770      	bx	lr
 8001634:	a012      	add	r0, pc, #72	; (adr r0, 8001680 <.text_7>)
 8001636:	4770      	bx	lr
 8001638:	a027      	add	r0, pc, #156	; (adr r0, 80016d8 <.text_14>)
 800163a:	4770      	bx	lr
 800163c:	a028      	add	r0, pc, #160	; (adr r0, 80016e0 <.text_15>)
 800163e:	4770      	bx	lr
 8001640:	a010      	add	r0, pc, #64	; (adr r0, 8001684 <.text_8>)
 8001642:	4770      	bx	lr
 8001644:	a010      	add	r0, pc, #64	; (adr r0, 8001688 <.text_9>)
 8001646:	4770      	bx	lr
 8001648:	a027      	add	r0, pc, #156	; (adr r0, 80016e8 <.text_16>)
 800164a:	4770      	bx	lr
 800164c:	a00f      	add	r0, pc, #60	; (adr r0, 800168c <.text_10>)
 800164e:	4770      	bx	lr
 8001650:	a027      	add	r0, pc, #156	; (adr r0, 80016f0 <.text_17>)
 8001652:	4770      	bx	lr
 8001654:	a028      	add	r0, pc, #160	; (adr r0, 80016f8 <.text_18>)
 8001656:	4770      	bx	lr
 8001658:	a02c      	add	r0, pc, #176	; (adr r0, 800170c <.text_19>)
 800165a:	4770      	bx	lr
 800165c:	a02d      	add	r0, pc, #180	; (adr r0, 8001714 <.text_20>)
 800165e:	4770      	bx	lr
 8001660:	a00b      	add	r0, pc, #44	; (adr r0, 8001690 <.text_11>)
 8001662:	4770      	bx	lr
 8001664:	a02d      	add	r0, pc, #180	; (adr r0, 800171c <.text_21>)
 8001666:	4770      	bx	lr
 8001668:	a02e      	add	r0, pc, #184	; (adr r0, 8001724 <.text_22>)
 800166a:	4770      	bx	lr
 800166c:	a030      	add	r0, pc, #192	; (adr r0, 8001730 <.text_23>)
 800166e:	4770      	bx	lr
 8001670:	a034      	add	r0, pc, #208	; (adr r0, 8001744 <.text_24>)
 8001672:	4770      	bx	lr
 8001674:	a000      	add	r0, pc, #0	; (adr r0, 8001678 <.text_5>)
 8001676:	4770      	bx	lr

08001678 <.text_5>:
 8001678:	00000000 	.word	0x00000000

0800167c <.text_6>:
 800167c:	00444441 	.word	0x00444441

08001680 <.text_7>:
 8001680:	00004e42 	.word	0x00004e42

08001684 <.text_8>:
 8001684:	00555247 	.word	0x00555247

08001688 <.text_9>:
 8001688:	004e524c 	.word	0x004e524c

0800168c <.text_10>:
 800168c:	00004c4e 	.word	0x00004c4e

08001690 <.text_11>:
 8001690:	00004d53 	.word	0x00004d53

08001694 <ai_layer_type_is_valid>:
 8001694:	f242 7111 	movw	r1, #10001	; 0x2711
 8001698:	1a40      	subs	r0, r0, r1
 800169a:	2801      	cmp	r0, #1
 800169c:	bf84      	itt	hi
 800169e:	1ec0      	subhi	r0, r0, #3
 80016a0:	280d      	cmphi	r0, #13
 80016a2:	d901      	bls.n	80016a8 <ai_layer_type_is_valid+0x14>
 80016a4:	380f      	subs	r0, #15
 80016a6:	d101      	bne.n	80016ac <ai_layer_type_is_valid+0x18>
 80016a8:	2001      	movs	r0, #1
 80016aa:	4770      	bx	lr
 80016ac:	2000      	movs	r0, #0
 80016ae:	4770      	bx	lr

080016b0 <ai_layers_forward_all>:
 80016b0:	b530      	push	{r4, r5, lr}
 80016b2:	b081      	sub	sp, #4
 80016b4:	4604      	mov	r4, r0
 80016b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80016b8:	b158      	cbz	r0, 80016d2 <ai_layers_forward_all+0x22>
 80016ba:	6420      	str	r0, [r4, #64]	; 0x40
 80016bc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80016be:	68e9      	ldr	r1, [r5, #12]
 80016c0:	4628      	mov	r0, r5
 80016c2:	4788      	blx	r1
 80016c4:	68a8      	ldr	r0, [r5, #8]
 80016c6:	42a8      	cmp	r0, r5
 80016c8:	bf08      	it	eq
 80016ca:	2000      	moveq	r0, #0
 80016cc:	2800      	cmp	r0, #0
 80016ce:	6420      	str	r0, [r4, #64]	; 0x40
 80016d0:	d1f4      	bne.n	80016bc <ai_layers_forward_all+0xc>
 80016d2:	b001      	add	sp, #4
 80016d4:	bd30      	pop	{r4, r5, pc}
	...

080016d8 <.text_14>:
 80016d8:	564e4f43 	.word	0x564e4f43
 80016dc:	00004432 	.word	0x00004432

080016e0 <.text_15>:
 80016e0:	534e4544 	.word	0x534e4544
 80016e4:	00000045 	.word	0x00000045

080016e8 <.text_16>:
 80016e8:	4d54534c 	.word	0x4d54534c
 80016ec:	00000000 	.word	0x00000000

080016f0 <.text_17>:
 80016f0:	4d524f4e 	.word	0x4d524f4e
 80016f4:	00000000 	.word	0x00000000

080016f8 <.text_18>:
 80016f8:	4954504f 	.word	0x4954504f
 80016fc:	455a494d 	.word	0x455a494d
 8001700:	4f435f44 	.word	0x4f435f44
 8001704:	4432564e 	.word	0x4432564e
 8001708:	00000000 	.word	0x00000000

0800170c <.text_19>:
 800170c:	4d524550 	.word	0x4d524550
 8001710:	00455455 	.word	0x00455455

08001714 <.text_20>:
 8001714:	4c4f4f50 	.word	0x4c4f4f50
 8001718:	00000000 	.word	0x00000000

0800171c <.text_21>:
 800171c:	494c5053 	.word	0x494c5053
 8001720:	00000054 	.word	0x00000054

08001724 <.text_22>:
 8001724:	454d4954 	.word	0x454d4954
 8001728:	4c45445f 	.word	0x4c45445f
 800172c:	00005941 	.word	0x00005941

08001730 <.text_23>:
 8001730:	454d4954 	.word	0x454d4954
 8001734:	5349445f 	.word	0x5349445f
 8001738:	42495254 	.word	0x42495254
 800173c:	44455455 	.word	0x44455455
 8001740:	00000000 	.word	0x00000000

08001744 <.text_24>:
 8001744:	434e4f43 	.word	0x434e4f43
 8001748:	00005441 	.word	0x00005441

0800174c <ai_check_custom_types::ref_signatures>:
 800174c:	84048403                                ....

08001750 <ai_conv2d_kernel_simple_f32>:
 8001750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001754:	b081      	sub	sp, #4
 8001756:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001758:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800175a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800175c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800175e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8001762:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8001766:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800176a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800176e:	1b37      	subs	r7, r6, r4
 8001770:	4288      	cmp	r0, r1
 8001772:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001776:	fb07 f709 	mul.w	r7, r7, r9
 800177a:	9700      	str	r7, [sp, #0]
 800177c:	eba5 0a04 	sub.w	sl, r5, r4
 8001780:	fb05 f50c 	mul.w	r5, r5, ip
 8001784:	ebab 0b0e 	sub.w	fp, fp, lr
 8001788:	fb06 f709 	mul.w	r7, r6, r9
 800178c:	fb06 860c 	mla	r6, r6, ip, r8
 8001790:	bf0c      	ite	eq
 8001792:	ed9f 0a82 	vldreq	s0, [pc, #520]	; 800199c <.text_4>
 8001796:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 800179a:	fb09 fa0a 	mul.w	sl, r9, sl
 800179e:	fb06 f609 	mul.w	r6, r6, r9
 80017a2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80017a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80017a8:	fb04 f409 	mul.w	r4, r4, r9
 80017ac:	fb09 f905 	mul.w	r9, r9, r5
 80017b0:	2e00      	cmp	r6, #0
 80017b2:	fb0b fb07 	mul.w	fp, fp, r7
 80017b6:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 80017ba:	d04d      	beq.n	8001858 <ai_conv2d_kernel_simple_f32+0x108>
 80017bc:	460d      	mov	r5, r1
 80017be:	4619      	mov	r1, r3
 80017c0:	4632      	mov	r2, r6
 80017c2:	4603      	mov	r3, r0
 80017c4:	f1be 0f01 	cmp.w	lr, #1
 80017c8:	edd3 0a00 	vldr	s1, [r3]
 80017cc:	ee60 0a80 	vmul.f32	s1, s1, s0
 80017d0:	464e      	mov	r6, r9
 80017d2:	db39      	blt.n	8001848 <ai_conv2d_kernel_simple_f32+0xf8>
 80017d4:	4670      	mov	r0, lr
 80017d6:	f8dd c000 	ldr.w	ip, [sp]
 80017da:	2c01      	cmp	r4, #1
 80017dc:	db2c      	blt.n	8001838 <ai_conv2d_kernel_simple_f32+0xe8>
 80017de:	f014 0803 	ands.w	r8, r4, #3
 80017e2:	d00a      	beq.n	80017fa <ai_conv2d_kernel_simple_f32+0xaa>
 80017e4:	ed91 1a00 	vldr	s2, [r1]
 80017e8:	1d09      	adds	r1, r1, #4
 80017ea:	edd6 1a00 	vldr	s3, [r6]
 80017ee:	1d36      	adds	r6, r6, #4
 80017f0:	f1b8 0801 	subs.w	r8, r8, #1
 80017f4:	ee41 0a21 	vmla.f32	s1, s2, s3
 80017f8:	d1f4      	bne.n	80017e4 <ai_conv2d_kernel_simple_f32+0x94>
 80017fa:	08a7      	lsrs	r7, r4, #2
 80017fc:	f000 801c 	beq.w	8001838 <ai_conv2d_kernel_simple_f32+0xe8>
 8001800:	ed91 2a00 	vldr	s4, [r1]
 8001804:	ed96 1a00 	vldr	s2, [r6]
 8001808:	edd1 1a01 	vldr	s3, [r1, #4]
 800180c:	edd6 2a01 	vldr	s5, [r6, #4]
 8001810:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001814:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001818:	ed91 2a02 	vldr	s4, [r1, #8]
 800181c:	ed96 1a02 	vldr	s2, [r6, #8]
 8001820:	edd1 1a03 	vldr	s3, [r1, #12]
 8001824:	3110      	adds	r1, #16
 8001826:	edd6 2a03 	vldr	s5, [r6, #12]
 800182a:	3610      	adds	r6, #16
 800182c:	1e7f      	subs	r7, r7, #1
 800182e:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001832:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001836:	d1e3      	bne.n	8001800 <ai_conv2d_kernel_simple_f32+0xb0>
 8001838:	1e40      	subs	r0, r0, #1
 800183a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 800183e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8001842:	d1ca      	bne.n	80017da <ai_conv2d_kernel_simple_f32+0x8a>
 8001844:	f8cd c000 	str.w	ip, [sp]
 8001848:	edc5 0a00 	vstr	s1, [r5]
 800184c:	1d2d      	adds	r5, r5, #4
 800184e:	1d1b      	adds	r3, r3, #4
 8001850:	1e52      	subs	r2, r2, #1
 8001852:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8001856:	d1b5      	bne.n	80017c4 <ai_conv2d_kernel_simple_f32+0x74>
 8001858:	b001      	add	sp, #4
 800185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001860 <ai_conv2d_kernel_depthwise_f32>:
 8001860:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	4611      	mov	r1, r2
 8001868:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800186a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800186e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001870:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8001872:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001874:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001876:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800187a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800187e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001880:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8001884:	1b00      	subs	r0, r0, r4
 8001886:	eba5 0e0c 	sub.w	lr, r5, ip
 800188a:	fb09 bb07 	mla	fp, r9, r7, fp
 800188e:	eba9 080c 	sub.w	r8, r9, ip
 8001892:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8001896:	9b04      	ldr	r3, [sp, #16]
 8001898:	fbb6 f6fa 	udiv	r6, r6, sl
 800189c:	fb0a fe0e 	mul.w	lr, sl, lr
 80018a0:	429a      	cmp	r2, r3
 80018a2:	fb00 f009 	mul.w	r0, r0, r9
 80018a6:	bf0c      	ite	eq
 80018a8:	ed9f 0a3c 	vldreq	s0, [pc, #240]	; 800199c <.text_4>
 80018ac:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80018b0:	437d      	muls	r5, r7
 80018b2:	fb0a f505 	mul.w	r5, sl, r5
 80018b6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80018ba:	2500      	movs	r5, #0
 80018bc:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 80018c0:	9700      	str	r7, [sp, #0]
 80018c2:	42b9      	cmp	r1, r7
 80018c4:	d266      	bcs.n	8001994 <ai_conv2d_kernel_depthwise_f32+0x134>
 80018c6:	920e      	str	r2, [sp, #56]	; 0x38
 80018c8:	9603      	str	r6, [sp, #12]
 80018ca:	9a03      	ldr	r2, [sp, #12]
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d05d      	beq.n	800198c <ai_conv2d_kernel_depthwise_f32+0x12c>
 80018d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018d2:	9f04      	ldr	r7, [sp, #16]
 80018d4:	9002      	str	r0, [sp, #8]
 80018d6:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 80018da:	4613      	mov	r3, r2
 80018dc:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 80018e0:	9101      	str	r1, [sp, #4]
 80018e2:	2c01      	cmp	r4, #1
 80018e4:	edd6 0a00 	vldr	s1, [r6]
 80018e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80018ec:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80018f0:	db40      	blt.n	8001974 <ai_conv2d_kernel_depthwise_f32+0x114>
 80018f2:	4622      	mov	r2, r4
 80018f4:	f1bc 0f01 	cmp.w	ip, #1
 80018f8:	db36      	blt.n	8001968 <ai_conv2d_kernel_depthwise_f32+0x108>
 80018fa:	f01c 0103 	ands.w	r1, ip, #3
 80018fe:	d00b      	beq.n	8001918 <ai_conv2d_kernel_depthwise_f32+0xb8>
 8001900:	1e49      	subs	r1, r1, #1
 8001902:	ed9b 1a00 	vldr	s2, [fp]
 8001906:	edd9 1a00 	vldr	s3, [r9]
 800190a:	f10b 0b04 	add.w	fp, fp, #4
 800190e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001912:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8001916:	d1f3      	bne.n	8001900 <ai_conv2d_kernel_depthwise_f32+0xa0>
 8001918:	ea5f 009c 	movs.w	r0, ip, lsr #2
 800191c:	f000 8024 	beq.w	8001968 <ai_conv2d_kernel_depthwise_f32+0x108>
 8001920:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8001924:	ed9b 1a00 	vldr	s2, [fp]
 8001928:	edd9 1a00 	vldr	s3, [r9]
 800192c:	1e40      	subs	r0, r0, #1
 800192e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001932:	eddb 1a01 	vldr	s3, [fp, #4]
 8001936:	ed91 1a00 	vldr	s2, [r1]
 800193a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800193e:	ee41 0a81 	vmla.f32	s1, s3, s2
 8001942:	ed9b 1a02 	vldr	s2, [fp, #8]
 8001946:	edd1 1a00 	vldr	s3, [r1]
 800194a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800194e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001952:	eddb 1a03 	vldr	s3, [fp, #12]
 8001956:	f10b 0b10 	add.w	fp, fp, #16
 800195a:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 800195e:	ed91 1a00 	vldr	s2, [r1]
 8001962:	ee41 0a81 	vmla.f32	s1, s3, s2
 8001966:	d1db      	bne.n	8001920 <ai_conv2d_kernel_depthwise_f32+0xc0>
 8001968:	1e52      	subs	r2, r2, #1
 800196a:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 800196e:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8001972:	d1bf      	bne.n	80018f4 <ai_conv2d_kernel_depthwise_f32+0x94>
 8001974:	1c6d      	adds	r5, r5, #1
 8001976:	9802      	ldr	r0, [sp, #8]
 8001978:	edc7 0a00 	vstr	s1, [r7]
 800197c:	1d3f      	adds	r7, r7, #4
 800197e:	1d36      	adds	r6, r6, #4
 8001980:	1e5b      	subs	r3, r3, #1
 8001982:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8001986:	d1ac      	bne.n	80018e2 <ai_conv2d_kernel_depthwise_f32+0x82>
 8001988:	9802      	ldr	r0, [sp, #8]
 800198a:	9901      	ldr	r1, [sp, #4]
 800198c:	9a00      	ldr	r2, [sp, #0]
 800198e:	1d09      	adds	r1, r1, #4
 8001990:	4291      	cmp	r1, r2
 8001992:	d39a      	bcc.n	80018ca <ai_conv2d_kernel_depthwise_f32+0x6a>
 8001994:	b005      	add	sp, #20
 8001996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800199c <.text_4>:
 800199c:	00000000 	.word	0x00000000

080019a0 <ai_conv2d_kernel_group_f32>:
 80019a0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	4692      	mov	sl, r2
 80019a8:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80019ac:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80019b0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80019b2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80019b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80019b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80019b8:	ebae 0e0c 	sub.w	lr, lr, ip
 80019bc:	461e      	mov	r6, r3
 80019be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80019c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80019c2:	fbb1 f9f2 	udiv	r9, r1, r2
 80019c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80019c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80019cc:	fbb7 f3f2 	udiv	r3, r7, r2
 80019d0:	fb04 fb03 	mul.w	fp, r4, r3
 80019d4:	eba7 0903 	sub.w	r9, r7, r3
 80019d8:	1a09      	subs	r1, r1, r0
 80019da:	eba4 0800 	sub.w	r8, r4, r0
 80019de:	4379      	muls	r1, r7
 80019e0:	fb0e fe0b 	mul.w	lr, lr, fp
 80019e4:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 80019e8:	fb08 f803 	mul.w	r8, r8, r3
 80019ec:	fb04 b405 	mla	r4, r4, r5, fp
 80019f0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80019f4:	435c      	muls	r4, r3
 80019f6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80019fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80019fc:	455e      	cmp	r6, fp
 80019fe:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8001a02:	fb0b f505 	mul.w	r5, fp, r5
 8001a06:	bf0c      	ite	eq
 8001a08:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8001b00 <.text_6>
 8001a0c:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001a10:	436f      	muls	r7, r5
 8001a12:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8001a16:	f04f 0a00 	mov.w	sl, #0
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d06d      	beq.n	8001afa <ai_conv2d_kernel_group_f32+0x15a>
 8001a1e:	9200      	str	r2, [sp, #0]
 8001a20:	9a03      	ldr	r2, [sp, #12]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d063      	beq.n	8001aee <ai_conv2d_kernel_group_f32+0x14e>
 8001a26:	9a04      	ldr	r2, [sp, #16]
 8001a28:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001a2a:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8001a2e:	eb02 078a 	add.w	r7, r2, sl, lsl #2
 8001a32:	9a03      	ldr	r2, [sp, #12]
 8001a34:	f8cd e008 	str.w	lr, [sp, #8]
 8001a38:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8001a3c:	f8cd 5004 	str.w	r5, [sp, #4]
 8001a40:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8001a44:	edd6 0a00 	vldr	s1, [r6]
 8001a48:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a4c:	9d01      	ldr	r5, [sp, #4]
 8001a4e:	f1be 0f01 	cmp.w	lr, #1
 8001a52:	db3b      	blt.n	8001acc <ai_conv2d_kernel_group_f32+0x12c>
 8001a54:	2801      	cmp	r0, #1
 8001a56:	db32      	blt.n	8001abe <ai_conv2d_kernel_group_f32+0x11e>
 8001a58:	ea4f 0c00 	mov.w	ip, r0
 8001a5c:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8001a60:	455d      	cmp	r5, fp
 8001a62:	d227      	bcs.n	8001ab4 <ai_conv2d_kernel_group_f32+0x114>
 8001a64:	ed94 1a00 	vldr	s2, [r4]
 8001a68:	1d24      	adds	r4, r4, #4
 8001a6a:	edd5 1a00 	vldr	s3, [r5]
 8001a6e:	1d2d      	adds	r5, r5, #4
 8001a70:	455d      	cmp	r5, fp
 8001a72:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001a76:	d21d      	bcs.n	8001ab4 <ai_conv2d_kernel_group_f32+0x114>
 8001a78:	ed94 2a00 	vldr	s4, [r4]
 8001a7c:	1d24      	adds	r4, r4, #4
 8001a7e:	ed95 1a00 	vldr	s2, [r5]
 8001a82:	1d2d      	adds	r5, r5, #4
 8001a84:	455d      	cmp	r5, fp
 8001a86:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001a8a:	d213      	bcs.n	8001ab4 <ai_conv2d_kernel_group_f32+0x114>
 8001a8c:	edd4 1a00 	vldr	s3, [r4]
 8001a90:	1d24      	adds	r4, r4, #4
 8001a92:	ed95 2a00 	vldr	s4, [r5]
 8001a96:	1d2d      	adds	r5, r5, #4
 8001a98:	455d      	cmp	r5, fp
 8001a9a:	ee41 0a82 	vmla.f32	s1, s3, s4
 8001a9e:	d209      	bcs.n	8001ab4 <ai_conv2d_kernel_group_f32+0x114>
 8001aa0:	ed94 1a00 	vldr	s2, [r4]
 8001aa4:	1d24      	adds	r4, r4, #4
 8001aa6:	edd5 1a00 	vldr	s3, [r5]
 8001aaa:	1d2d      	adds	r5, r5, #4
 8001aac:	455d      	cmp	r5, fp
 8001aae:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ab2:	d3d7      	bcc.n	8001a64 <ai_conv2d_kernel_group_f32+0xc4>
 8001ab4:	f1bc 0c01 	subs.w	ip, ip, #1
 8001ab8:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001abc:	d1ce      	bne.n	8001a5c <ai_conv2d_kernel_group_f32+0xbc>
 8001abe:	f1be 0e01 	subs.w	lr, lr, #1
 8001ac2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8001ac6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8001aca:	d1c3      	bne.n	8001a54 <ai_conv2d_kernel_group_f32+0xb4>
 8001acc:	1d36      	adds	r6, r6, #4
 8001ace:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001ad2:	edc7 0a00 	vstr	s1, [r7]
 8001ad6:	1d3f      	adds	r7, r7, #4
 8001ad8:	1e52      	subs	r2, r2, #1
 8001ada:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8001ade:	f10a 0a01 	add.w	sl, sl, #1
 8001ae2:	d1ad      	bne.n	8001a40 <ai_conv2d_kernel_group_f32+0xa0>
 8001ae4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8001ae8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8001aec:	9d01      	ldr	r5, [sp, #4]
 8001aee:	9f00      	ldr	r7, [sp, #0]
 8001af0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001af4:	1e7f      	subs	r7, r7, #1
 8001af6:	9700      	str	r7, [sp, #0]
 8001af8:	d192      	bne.n	8001a20 <ai_conv2d_kernel_group_f32+0x80>
 8001afa:	b005      	add	sp, #20
 8001afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b00 <.text_6>:
 8001b00:	00000000 	.word	0x00000000

08001b04 <ai_conv2d_kernel_f32>:
 8001b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b08:	b08d      	sub	sp, #52	; 0x34
 8001b0a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8001b0c:	b904      	cbnz	r4, 8001b10 <ai_conv2d_kernel_f32+0xc>
 8001b0e:	460c      	mov	r4, r1
 8001b10:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b12:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8001b14:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8001b18:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8001b1c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8001b1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001b20:	1bbf      	subs	r7, r7, r6
 8001b22:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001b24:	f1b8 0f01 	cmp.w	r8, #1
 8001b28:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8001b2c:	ebae 0e05 	sub.w	lr, lr, r5
 8001b30:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8001b34:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8001b38:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8001b3c:	d114      	bne.n	8001b68 <ai_conv2d_kernel_f32+0x64>
 8001b3e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8001b42:	9508      	str	r5, [sp, #32]
 8001b44:	9707      	str	r7, [sp, #28]
 8001b46:	9001      	str	r0, [sp, #4]
 8001b48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001b4a:	9606      	str	r6, [sp, #24]
 8001b4c:	f8cd b014 	str.w	fp, [sp, #20]
 8001b50:	f8cd a010 	str.w	sl, [sp, #16]
 8001b54:	f8cd 900c 	str.w	r9, [sp, #12]
 8001b58:	f8cd c008 	str.w	ip, [sp, #8]
 8001b5c:	9400      	str	r4, [sp, #0]
 8001b5e:	f7ff fdf7 	bl	8001750 <ai_conv2d_kernel_simple_f32>
 8001b62:	b00d      	add	sp, #52	; 0x34
 8001b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b68:	4580      	cmp	r8, r0
 8001b6a:	d114      	bne.n	8001b96 <ai_conv2d_kernel_f32+0x92>
 8001b6c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8001b70:	9508      	str	r5, [sp, #32]
 8001b72:	9707      	str	r7, [sp, #28]
 8001b74:	9001      	str	r0, [sp, #4]
 8001b76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001b78:	9606      	str	r6, [sp, #24]
 8001b7a:	f8cd b014 	str.w	fp, [sp, #20]
 8001b7e:	f8cd a010 	str.w	sl, [sp, #16]
 8001b82:	f8cd 900c 	str.w	r9, [sp, #12]
 8001b86:	f8cd c008 	str.w	ip, [sp, #8]
 8001b8a:	9400      	str	r4, [sp, #0]
 8001b8c:	f7ff fe68 	bl	8001860 <ai_conv2d_kernel_depthwise_f32>
 8001b90:	b00d      	add	sp, #52	; 0x34
 8001b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b96:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001b9a:	9509      	str	r5, [sp, #36]	; 0x24
 8001b9c:	9708      	str	r7, [sp, #32]
 8001b9e:	9001      	str	r0, [sp, #4]
 8001ba0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001ba2:	9607      	str	r6, [sp, #28]
 8001ba4:	f8cd 8018 	str.w	r8, [sp, #24]
 8001ba8:	f8cd b014 	str.w	fp, [sp, #20]
 8001bac:	f8cd a010 	str.w	sl, [sp, #16]
 8001bb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8001bb4:	f8cd c008 	str.w	ip, [sp, #8]
 8001bb8:	9400      	str	r4, [sp, #0]
 8001bba:	f7ff fef1 	bl	80019a0 <ai_conv2d_kernel_group_f32>
 8001bbe:	b00d      	add	sp, #52	; 0x34
 8001bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bc4 <func_dummy>:
 8001bc4:	4770      	bx	lr
	...

08001bc8 <ai_dict8_dot_array_f32>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	4604      	mov	r4, r0
 8001bcc:	9805      	ldr	r0, [sp, #20]
 8001bce:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8001bd2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8001f38 <.text_11>
 8001bd6:	3d20      	subs	r5, #32
 8001bd8:	2808      	cmp	r0, #8
 8001bda:	d22e      	bcs.n	8001c3a <ai_dict8_dot_array_f32+0x72>
 8001bdc:	3520      	adds	r5, #32
 8001bde:	42ab      	cmp	r3, r5
 8001be0:	d224      	bcs.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001be2:	7808      	ldrb	r0, [r1, #0]
 8001be4:	ed93 1a00 	vldr	s2, [r3]
 8001be8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001bec:	1d18      	adds	r0, r3, #4
 8001bee:	42a8      	cmp	r0, r5
 8001bf0:	edd6 0a00 	vldr	s1, [r6]
 8001bf4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001bf8:	d218      	bcs.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001bfa:	784b      	ldrb	r3, [r1, #1]
 8001bfc:	ed90 1a00 	vldr	s2, [r0]
 8001c00:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001c04:	1d00      	adds	r0, r0, #4
 8001c06:	42a8      	cmp	r0, r5
 8001c08:	edd6 0a00 	vldr	s1, [r6]
 8001c0c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c10:	d20c      	bcs.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001c12:	788b      	ldrb	r3, [r1, #2]
 8001c14:	1cc9      	adds	r1, r1, #3
 8001c16:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001c1a:	1d03      	adds	r3, r0, #4
 8001c1c:	42ab      	cmp	r3, r5
 8001c1e:	ed90 1a00 	vldr	s2, [r0]
 8001c22:	edd6 0a00 	vldr	s1, [r6]
 8001c26:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c2a:	d3da      	bcc.n	8001be2 <ai_dict8_dot_array_f32+0x1a>
 8001c2c:	edd4 1a00 	vldr	s3, [r4]
 8001c30:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001c34:	ed84 0a00 	vstr	s0, [r4]
 8001c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3a:	f001 0003 	and.w	r0, r1, #3
 8001c3e:	2803      	cmp	r0, #3
 8001c40:	d8f4      	bhi.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001c42:	e8df f000 	tbb	[pc, r0]
 8001c46:	3503      	.short	0x3503
 8001c48:	4b40      	.short	0x4b40
 8001c4a:	e7ef      	b.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001c4c:	429d      	cmp	r5, r3
 8001c4e:	f080 80d4 	bcs.w	8001dfa <ai_dict8_dot_array_f32+0x232>
 8001c52:	3520      	adds	r5, #32
 8001c54:	42ab      	cmp	r3, r5
 8001c56:	d2e9      	bcs.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001c58:	780e      	ldrb	r6, [r1, #0]
 8001c5a:	1d18      	adds	r0, r3, #4
 8001c5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8001c60:	42a8      	cmp	r0, r5
 8001c62:	ed93 1a00 	vldr	s2, [r3]
 8001c66:	edd7 0a00 	vldr	s1, [r7]
 8001c6a:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c6e:	d2dd      	bcs.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001c70:	784b      	ldrb	r3, [r1, #1]
 8001c72:	ed90 1a00 	vldr	s2, [r0]
 8001c76:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001c7a:	1d00      	adds	r0, r0, #4
 8001c7c:	42a8      	cmp	r0, r5
 8001c7e:	edd6 0a00 	vldr	s1, [r6]
 8001c82:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c86:	d2d1      	bcs.n	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001c88:	788b      	ldrb	r3, [r1, #2]
 8001c8a:	1cc9      	adds	r1, r1, #3
 8001c8c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001c90:	1d03      	adds	r3, r0, #4
 8001c92:	42ab      	cmp	r3, r5
 8001c94:	ed90 1a00 	vldr	s2, [r0]
 8001c98:	edd6 0a00 	vldr	s1, [r6]
 8001c9c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001ca0:	d3da      	bcc.n	8001c58 <ai_dict8_dot_array_f32+0x90>
 8001ca2:	edd4 1a00 	vldr	s3, [r4]
 8001ca6:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001caa:	ed84 0a00 	vstr	s0, [r4]
 8001cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb0:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001cb4:	ed93 1a00 	vldr	s2, [r3]
 8001cb8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001cbc:	1d1b      	adds	r3, r3, #4
 8001cbe:	edd6 0a00 	vldr	s1, [r6]
 8001cc2:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001cc6:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001cca:	ed93 1a00 	vldr	s2, [r3]
 8001cce:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001cd2:	1d1b      	adds	r3, r3, #4
 8001cd4:	edd6 0a00 	vldr	s1, [r6]
 8001cd8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001cdc:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001ce0:	ed93 1a00 	vldr	s2, [r3]
 8001ce4:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001ce8:	1d1b      	adds	r3, r3, #4
 8001cea:	429d      	cmp	r5, r3
 8001cec:	edd6 0a00 	vldr	s1, [r6]
 8001cf0:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001cf4:	d34f      	bcc.n	8001d96 <ai_dict8_dot_array_f32+0x1ce>
 8001cf6:	78cf      	ldrb	r7, [r1, #3]
 8001cf8:	f891 e000 	ldrb.w	lr, [r1]
 8001cfc:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001d00:	788f      	ldrb	r7, [r1, #2]
 8001d02:	f103 0010 	add.w	r0, r3, #16
 8001d06:	ed93 4a00 	vldr	s8, [r3]
 8001d0a:	ed93 3a01 	vldr	s6, [r3, #4]
 8001d0e:	ed93 2a02 	vldr	s4, [r3, #8]
 8001d12:	eddc 0a00 	vldr	s1, [ip]
 8001d16:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001d1a:	784f      	ldrb	r7, [r1, #1]
 8001d1c:	ed93 1a03 	vldr	s2, [r3, #12]
 8001d20:	790b      	ldrb	r3, [r1, #4]
 8001d22:	eddc 1a00 	vldr	s3, [ip]
 8001d26:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001d2a:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001d2e:	edd7 3a00 	vldr	s7, [r7]
 8001d32:	794f      	ldrb	r7, [r1, #5]
 8001d34:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001d38:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001d3c:	eddc 2a00 	vldr	s5, [ip]
 8001d40:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001d44:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001d48:	798b      	ldrb	r3, [r1, #6]
 8001d4a:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001d4e:	79cf      	ldrb	r7, [r1, #7]
 8001d50:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001d54:	3108      	adds	r1, #8
 8001d56:	eddc 0a00 	vldr	s1, [ip]
 8001d5a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001d5e:	ed9e 1a00 	vldr	s2, [lr]
 8001d62:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001d66:	ed90 4a00 	vldr	s8, [r0]
 8001d6a:	f100 0310 	add.w	r3, r0, #16
 8001d6e:	edd0 3a01 	vldr	s7, [r0, #4]
 8001d72:	429d      	cmp	r5, r3
 8001d74:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001d78:	eddc 1a00 	vldr	s3, [ip]
 8001d7c:	ed90 3a02 	vldr	s6, [r0, #8]
 8001d80:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001d84:	ed9e 2a00 	vldr	s4, [lr]
 8001d88:	edd0 2a03 	vldr	s5, [r0, #12]
 8001d8c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001d90:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001d94:	d2af      	bcs.n	8001cf6 <ai_dict8_dot_array_f32+0x12e>
 8001d96:	3520      	adds	r5, #32
 8001d98:	42ab      	cmp	r3, r5
 8001d9a:	f4bf af47 	bcs.w	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001d9e:	7808      	ldrb	r0, [r1, #0]
 8001da0:	ed93 1a00 	vldr	s2, [r3]
 8001da4:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001da8:	1d18      	adds	r0, r3, #4
 8001daa:	42a8      	cmp	r0, r5
 8001dac:	edd6 0a00 	vldr	s1, [r6]
 8001db0:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001db4:	f4bf af3a 	bcs.w	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001db8:	784b      	ldrb	r3, [r1, #1]
 8001dba:	ed90 1a00 	vldr	s2, [r0]
 8001dbe:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001dc2:	1d00      	adds	r0, r0, #4
 8001dc4:	42a8      	cmp	r0, r5
 8001dc6:	edd6 0a00 	vldr	s1, [r6]
 8001dca:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001dce:	f4bf af2d 	bcs.w	8001c2c <ai_dict8_dot_array_f32+0x64>
 8001dd2:	788b      	ldrb	r3, [r1, #2]
 8001dd4:	1cc9      	adds	r1, r1, #3
 8001dd6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001dda:	1d03      	adds	r3, r0, #4
 8001ddc:	42ab      	cmp	r3, r5
 8001dde:	ed90 1a00 	vldr	s2, [r0]
 8001de2:	edd6 0a00 	vldr	s1, [r6]
 8001de6:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001dea:	d3d8      	bcc.n	8001d9e <ai_dict8_dot_array_f32+0x1d6>
 8001dec:	edd4 1a00 	vldr	s3, [r4]
 8001df0:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001df4:	ed84 0a00 	vstr	s0, [r4]
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	78cf      	ldrb	r7, [r1, #3]
 8001dfc:	f891 e000 	ldrb.w	lr, [r1]
 8001e00:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001e04:	788f      	ldrb	r7, [r1, #2]
 8001e06:	f103 0010 	add.w	r0, r3, #16
 8001e0a:	ed93 4a00 	vldr	s8, [r3]
 8001e0e:	ed93 3a01 	vldr	s6, [r3, #4]
 8001e12:	ed93 2a02 	vldr	s4, [r3, #8]
 8001e16:	eddc 0a00 	vldr	s1, [ip]
 8001e1a:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001e1e:	784f      	ldrb	r7, [r1, #1]
 8001e20:	ed93 1a03 	vldr	s2, [r3, #12]
 8001e24:	790b      	ldrb	r3, [r1, #4]
 8001e26:	eddc 1a00 	vldr	s3, [ip]
 8001e2a:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001e2e:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001e32:	edd7 3a00 	vldr	s7, [r7]
 8001e36:	794f      	ldrb	r7, [r1, #5]
 8001e38:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001e3c:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001e40:	eddc 2a00 	vldr	s5, [ip]
 8001e44:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001e48:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001e4c:	798b      	ldrb	r3, [r1, #6]
 8001e4e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001e52:	79cf      	ldrb	r7, [r1, #7]
 8001e54:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001e58:	3108      	adds	r1, #8
 8001e5a:	eddc 0a00 	vldr	s1, [ip]
 8001e5e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001e62:	ed9e 1a00 	vldr	s2, [lr]
 8001e66:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001e6a:	ed90 4a00 	vldr	s8, [r0]
 8001e6e:	f100 0310 	add.w	r3, r0, #16
 8001e72:	edd0 3a01 	vldr	s7, [r0, #4]
 8001e76:	429d      	cmp	r5, r3
 8001e78:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001e7c:	eddc 1a00 	vldr	s3, [ip]
 8001e80:	ed90 3a02 	vldr	s6, [r0, #8]
 8001e84:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001e88:	ed9e 2a00 	vldr	s4, [lr]
 8001e8c:	edd0 2a03 	vldr	s5, [r0, #12]
 8001e90:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001e94:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001e98:	d2af      	bcs.n	8001dfa <ai_dict8_dot_array_f32+0x232>
 8001e9a:	e6da      	b.n	8001c52 <ai_dict8_dot_array_f32+0x8a>

08001e9c <ai_dict4_dot_array_f32>:
 8001e9c:	b4f0      	push	{r4, r5, r6, r7}
 8001e9e:	9c04      	ldr	r4, [sp, #16]
 8001ea0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001f38 <.text_11>
 8001ea4:	0865      	lsrs	r5, r4, #1
 8001ea6:	006d      	lsls	r5, r5, #1
 8001ea8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001eac:	42ab      	cmp	r3, r5
 8001eae:	d22f      	bcs.n	8001f10 <ai_dict4_dot_array_f32+0x74>
 8001eb0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001eb4:	ed93 2a00 	vldr	s4, [r3]
 8001eb8:	ed93 1a01 	vldr	s2, [r3, #4]
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	f006 070f 	and.w	r7, r6, #15
 8001ec2:	0936      	lsrs	r6, r6, #4
 8001ec4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001ec8:	42ab      	cmp	r3, r5
 8001eca:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001ece:	edd6 1a00 	vldr	s3, [r6]
 8001ed2:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001ed6:	eddc 0a00 	vldr	s1, [ip]
 8001eda:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001ede:	d217      	bcs.n	8001f10 <ai_dict4_dot_array_f32+0x74>
 8001ee0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001ee4:	ed93 2a00 	vldr	s4, [r3]
 8001ee8:	ed93 1a01 	vldr	s2, [r3, #4]
 8001eec:	3308      	adds	r3, #8
 8001eee:	f006 070f 	and.w	r7, r6, #15
 8001ef2:	0936      	lsrs	r6, r6, #4
 8001ef4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001ef8:	42ab      	cmp	r3, r5
 8001efa:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001efe:	edd6 1a00 	vldr	s3, [r6]
 8001f02:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001f06:	eddc 0a00 	vldr	s1, [ip]
 8001f0a:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001f0e:	d3cf      	bcc.n	8001eb0 <ai_dict4_dot_array_f32+0x14>
 8001f10:	07e4      	lsls	r4, r4, #31
 8001f12:	d509      	bpl.n	8001f28 <ai_dict4_dot_array_f32+0x8c>
 8001f14:	7809      	ldrb	r1, [r1, #0]
 8001f16:	ed93 1a00 	vldr	s2, [r3]
 8001f1a:	0909      	lsrs	r1, r1, #4
 8001f1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001f20:	edd2 0a00 	vldr	s1, [r2]
 8001f24:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001f28:	edd0 1a00 	vldr	s3, [r0]
 8001f2c:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001f30:	ed80 0a00 	vstr	s0, [r0]
 8001f34:	bcf0      	pop	{r4, r5, r6, r7}
 8001f36:	4770      	bx	lr

08001f38 <.text_11>:
 8001f38:	00000000 	.word	0x00000000

08001f3c <forward_conv2d>:
 8001f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f40:	b09b      	sub	sp, #108	; 0x6c
 8001f42:	4605      	mov	r5, r0
 8001f44:	6968      	ldr	r0, [r5, #20]
 8001f46:	6800      	ldr	r0, [r0, #0]
 8001f48:	6801      	ldr	r1, [r0, #0]
 8001f4a:	6842      	ldr	r2, [r0, #4]
 8001f4c:	6880      	ldr	r0, [r0, #8]
 8001f4e:	680f      	ldr	r7, [r1, #0]
 8001f50:	f8d2 a000 	ldr.w	sl, [r2]
 8001f54:	f8d0 e000 	ldr.w	lr, [r0]
 8001f58:	6840      	ldr	r0, [r0, #4]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	920d      	str	r2, [sp, #52]	; 0x34
 8001f5e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001f62:	2800      	cmp	r0, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	8c2b      	ldrh	r3, [r5, #32]
 8001f68:	f8da 1010 	ldr.w	r1, [sl, #16]
 8001f6c:	f8da 900c 	ldr.w	r9, [sl, #12]
 8001f70:	693e      	ldr	r6, [r7, #16]
 8001f72:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001f76:	930c      	str	r3, [sp, #48]	; 0x30
 8001f78:	8cac      	ldrh	r4, [r5, #36]	; 0x24
 8001f7a:	940f      	str	r4, [sp, #60]	; 0x3c
 8001f7c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8001f7e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001f80:	f8de b00c 	ldr.w	fp, [lr, #12]
 8001f84:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8001f88:	f8de 3008 	ldr.w	r3, [lr, #8]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	683f      	ldr	r7, [r7, #0]
 8001f90:	f8de e000 	ldr.w	lr, [lr]
 8001f94:	69ab      	ldr	r3, [r5, #24]
 8001f96:	b2a4      	uxth	r4, r4
 8001f98:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001f9c:	bf1a      	itte	ne
 8001f9e:	6800      	ldrne	r0, [r0, #0]
 8001fa0:	6887      	ldrne	r7, [r0, #8]
 8001fa2:	2700      	moveq	r7, #0
 8001fa4:	f8da 0000 	ldr.w	r0, [sl]
 8001fa8:	f8de e008 	ldr.w	lr, [lr, #8]
 8001fac:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001fb0:	69e8      	ldr	r0, [r5, #28]
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	4605      	movne	r5, r0
 8001fb8:	f8df 576c 	ldreq.w	r5, [pc, #1900]	; 8002728 <.text_17>
 8001fbc:	4264      	negs	r4, r4
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8001fc2:	d06f      	beq.n	80020a4 <forward_conv2d+0x168>
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8001fca:	9219      	str	r2, [sp, #100]	; 0x64
 8001fcc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8001fd0:	9615      	str	r6, [sp, #84]	; 0x54
 8001fd2:	9110      	str	r1, [sp, #64]	; 0x40
 8001fd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001fd6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001fda:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8001fdc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8001fe0:	4240      	negs	r0, r0
 8001fe2:	bfd8      	it	le
 8001fe4:	2000      	movle	r0, #0
 8001fe6:	1a89      	subs	r1, r1, r2
 8001fe8:	4559      	cmp	r1, fp
 8001fea:	fb08 9202 	mla	r2, r8, r2, r9
 8001fee:	bf28      	it	cs
 8001ff0:	4659      	movcs	r1, fp
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d04e      	beq.n	8002094 <forward_conv2d+0x158>
 8001ff6:	9402      	str	r4, [sp, #8]
 8001ff8:	9c01      	ldr	r4, [sp, #4]
 8001ffa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8001ffe:	9e00      	ldr	r6, [sp, #0]
 8002000:	9314      	str	r3, [sp, #80]	; 0x50
 8002002:	4693      	mov	fp, r2
 8002004:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8002008:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800200c:	9711      	str	r7, [sp, #68]	; 0x44
 800200e:	9018      	str	r0, [sp, #96]	; 0x60
 8002010:	9117      	str	r1, [sp, #92]	; 0x5c
 8002012:	9f02      	ldr	r7, [sp, #8]
 8002014:	f1d9 0000 	rsbs	r0, r9, #0
 8002018:	eba8 0109 	sub.w	r1, r8, r9
 800201c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8002020:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002022:	f8cd c000 	str.w	ip, [sp]
 8002026:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800202a:	bfd8      	it	le
 800202c:	2000      	movle	r0, #0
 800202e:	42b1      	cmp	r1, r6
 8002030:	9009      	str	r0, [sp, #36]	; 0x24
 8002032:	9207      	str	r2, [sp, #28]
 8002034:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002036:	9306      	str	r3, [sp, #24]
 8002038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800203a:	bf28      	it	cs
 800203c:	4631      	movcs	r1, r6
 800203e:	910a      	str	r1, [sp, #40]	; 0x28
 8002040:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002042:	9108      	str	r1, [sp, #32]
 8002044:	4458      	add	r0, fp
 8002046:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800204a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800204c:	9201      	str	r2, [sp, #4]
 800204e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002050:	fb0c f000 	mul.w	r0, ip, r0
 8002054:	9105      	str	r1, [sp, #20]
 8002056:	eb0e 0280 	add.w	r2, lr, r0, lsl #2
 800205a:	9604      	str	r6, [sp, #16]
 800205c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002060:	4651      	mov	r1, sl
 8002062:	9402      	str	r4, [sp, #8]
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fd4d 	bl	8001b04 <ai_conv2d_kernel_f32>
 800206a:	4622      	mov	r2, r4
 800206c:	4651      	mov	r1, sl
 800206e:	4650      	mov	r0, sl
 8002070:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8002074:	47a8      	blx	r5
 8002076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002078:	1e7f      	subs	r7, r7, #1
 800207a:	4489      	add	r9, r1
 800207c:	448b      	add	fp, r1
 800207e:	d1c9      	bne.n	8002014 <forward_conv2d+0xd8>
 8002080:	9401      	str	r4, [sp, #4]
 8002082:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8002086:	9600      	str	r6, [sp, #0]
 8002088:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800208a:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800208e:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 8002092:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8002094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002098:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800209a:	1851      	adds	r1, r2, r1
 800209c:	910b      	str	r1, [sp, #44]	; 0x2c
 800209e:	1e64      	subs	r4, r4, #1
 80020a0:	9410      	str	r4, [sp, #64]	; 0x40
 80020a2:	d197      	bne.n	8001fd4 <forward_conv2d+0x98>
 80020a4:	b01b      	add	sp, #108	; 0x6c
 80020a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020ac <forward_conv2d_nl_pool>:
 80020ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b0:	b0b5      	sub	sp, #212	; 0xd4
 80020b2:	4602      	mov	r2, r0
 80020b4:	6950      	ldr	r0, [r2, #20]
 80020b6:	6800      	ldr	r0, [r0, #0]
 80020b8:	6801      	ldr	r1, [r0, #0]
 80020ba:	6843      	ldr	r3, [r0, #4]
 80020bc:	6880      	ldr	r0, [r0, #8]
 80020be:	f8d1 b000 	ldr.w	fp, [r1]
 80020c2:	a92d      	add	r1, sp, #180	; 0xb4
 80020c4:	681f      	ldr	r7, [r3, #0]
 80020c6:	f8d0 a000 	ldr.w	sl, [r0]
 80020ca:	6843      	ldr	r3, [r0, #4]
 80020cc:	f10b 0414 	add.w	r4, fp, #20
 80020d0:	e894 5060 	ldmia.w	r4, {r5, r6, ip, lr}
 80020d4:	e881 5060 	stmia.w	r1, {r5, r6, ip, lr}
 80020d8:	f8db 8008 	ldr.w	r8, [fp, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f8cd 800c 	str.w	r8, [sp, #12]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	9102      	str	r1, [sp, #8]
 80020e6:	6938      	ldr	r0, [r7, #16]
 80020e8:	68fc      	ldr	r4, [r7, #12]
 80020ea:	941c      	str	r4, [sp, #112]	; 0x70
 80020ec:	f8db 5010 	ldr.w	r5, [fp, #16]
 80020f0:	950d      	str	r5, [sp, #52]	; 0x34
 80020f2:	f8db 400c 	ldr.w	r4, [fp, #12]
 80020f6:	9401      	str	r4, [sp, #4]
 80020f8:	8c15      	ldrh	r5, [r2, #32]
 80020fa:	9512      	str	r5, [sp, #72]	; 0x48
 80020fc:	8c94      	ldrh	r4, [r2, #36]	; 0x24
 80020fe:	9411      	str	r4, [sp, #68]	; 0x44
 8002100:	8d15      	ldrh	r5, [r2, #40]	; 0x28
 8002102:	9510      	str	r5, [sp, #64]	; 0x40
 8002104:	8d94      	ldrh	r4, [r2, #44]	; 0x2c
 8002106:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800210a:	f8d2 e034 	ldr.w	lr, [r2, #52]	; 0x34
 800210e:	6995      	ldr	r5, [r2, #24]
 8002110:	950c      	str	r5, [sp, #48]	; 0x30
 8002112:	f8da 6008 	ldr.w	r6, [sl, #8]
 8002116:	9600      	str	r6, [sp, #0]
 8002118:	f8da 100c 	ldr.w	r1, [sl, #12]
 800211c:	f8d2 9038 	ldr.w	r9, [r2, #56]	; 0x38
 8002120:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8002124:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002126:	961b      	str	r6, [sp, #108]	; 0x6c
 8002128:	f8d2 9040 	ldr.w	r9, [r2, #64]	; 0x40
 800212c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8002130:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8002132:	961e      	str	r6, [sp, #120]	; 0x78
 8002134:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8002138:	6c95      	ldr	r5, [r2, #72]	; 0x48
 800213a:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 800213c:	fb0c fc00 	mul.w	ip, ip, r0
 8002140:	f8cd c010 	str.w	ip, [sp, #16]
 8002144:	f8d7 901c 	ldr.w	r9, [r7, #28]
 8002148:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800214c:	f8db b000 	ldr.w	fp, [fp]
 8002150:	f8db c008 	ldr.w	ip, [fp, #8]
 8002154:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 8002158:	f8da a000 	ldr.w	sl, [sl]
 800215c:	f8da b008 	ldr.w	fp, [sl, #8]
 8002160:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002164:	bf1a      	itte	ne
 8002166:	681b      	ldrne	r3, [r3, #0]
 8002168:	f8d3 b008 	ldrne.w	fp, [r3, #8]
 800216c:	f04f 0b00 	moveq.w	fp, #0
 8002170:	69d3      	ldr	r3, [r2, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf12      	itee	ne
 8002176:	930e      	strne	r3, [sp, #56]	; 0x38
 8002178:	f8df 95ac 	ldreq.w	r9, [pc, #1452]	; 8002728 <.text_17>
 800217c:	f8cd 9038 	streq.w	r9, [sp, #56]	; 0x38
 8002180:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002182:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002186:	9217      	str	r2, [sp, #92]	; 0x5c
 8002188:	9b00      	ldr	r3, [sp, #0]
 800218a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800218c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8002190:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002194:	4276      	negs	r6, r6
 8002196:	eba9 0903 	sub.w	r9, r9, r3
 800219a:	4491      	add	r9, r2
 800219c:	fa19 f288 	uxtah	r2, r9, r8
 80021a0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80021a4:	f8d7 9000 	ldr.w	r9, [r7]
 80021a8:	fbb2 f3fc 	udiv	r3, r2, ip
 80021ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80021ae:	1c5b      	adds	r3, r3, #1
 80021b0:	eba8 0801 	sub.w	r8, r8, r1
 80021b4:	44a0      	add	r8, r4
 80021b6:	fa18 fe8e 	uxtah	lr, r8, lr
 80021ba:	2800      	cmp	r0, #0
 80021bc:	fbbe fcf2 	udiv	ip, lr, r2
 80021c0:	f8d9 e008 	ldr.w	lr, [r9, #8]
 80021c4:	f10c 0c01 	add.w	ip, ip, #1
 80021c8:	44f2      	add	sl, lr
 80021ca:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 80021ce:	f000 8125 	beq.w	800241c <forward_conv2d_nl_pool+0x370>
 80021d2:	426d      	negs	r5, r5
 80021d4:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 80021d8:	9534      	str	r5, [sp, #208]	; 0xd0
 80021da:	9615      	str	r6, [sp, #84]	; 0x54
 80021dc:	9025      	str	r0, [sp, #148]	; 0x94
 80021de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80021e0:	982b      	ldr	r0, [sp, #172]	; 0xac
 80021e2:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 80021e4:	2d00      	cmp	r5, #0
 80021e6:	462a      	mov	r2, r5
 80021e8:	bfcc      	ite	gt
 80021ea:	46a9      	movgt	r9, r5
 80021ec:	f04f 0900 	movle.w	r9, #0
 80021f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80021f2:	18aa      	adds	r2, r5, r2
 80021f4:	4290      	cmp	r0, r2
 80021f6:	bf32      	itee	cc
 80021f8:	4684      	movcc	ip, r0
 80021fa:	f8dd c054 	ldrcs.w	ip, [sp, #84]	; 0x54
 80021fe:	44ac      	addcs	ip, r5
 8002200:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002202:	2800      	cmp	r0, #0
 8002204:	f000 8101 	beq.w	800240a <forward_conv2d_nl_pool+0x35e>
 8002208:	eba9 0a0c 	sub.w	sl, r9, ip
 800220c:	942c      	str	r4, [sp, #176]	; 0xb0
 800220e:	f8cd a0cc 	str.w	sl, [sp, #204]	; 0xcc
 8002212:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002214:	9326      	str	r3, [sp, #152]	; 0x98
 8002216:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 800221a:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800221e:	9714      	str	r7, [sp, #80]	; 0x50
 8002220:	9023      	str	r0, [sp, #140]	; 0x8c
 8002222:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8002224:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002226:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8002228:	f8dd a0cc 	ldr.w	sl, [sp, #204]	; 0xcc
 800222c:	46f0      	mov	r8, lr
 800222e:	f04f 0900 	mov.w	r9, #0
 8002232:	2c00      	cmp	r4, #0
 8002234:	4623      	mov	r3, r4
 8002236:	bfcc      	ite	gt
 8002238:	4626      	movgt	r6, r4
 800223a:	2600      	movle	r6, #0
 800223c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800223e:	18e3      	adds	r3, r4, r3
 8002240:	4298      	cmp	r0, r3
 8002242:	bf32      	itee	cc
 8002244:	4603      	movcc	r3, r0
 8002246:	9b14      	ldrcs	r3, [sp, #80]	; 0x50
 8002248:	18e3      	addcs	r3, r4, r3
 800224a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800224c:	1af4      	subs	r4, r6, r3
 800224e:	fb04 fa0a 	mul.w	sl, r4, sl
 8002252:	42a8      	cmp	r0, r5
 8002254:	f280 80cb 	bge.w	80023ee <forward_conv2d_nl_pool+0x342>
 8002258:	fb02 f700 	mul.w	r7, r2, r0
 800225c:	4628      	mov	r0, r5
 800225e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8002260:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8002262:	1b3c      	subs	r4, r7, r4
 8002264:	9211      	str	r2, [sp, #68]	; 0x44
 8002266:	9622      	str	r6, [sp, #136]	; 0x88
 8002268:	1b45      	subs	r5, r0, r5
 800226a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800226c:	9328      	str	r3, [sp, #160]	; 0xa0
 800226e:	9413      	str	r4, [sp, #76]	; 0x4c
 8002270:	9520      	str	r5, [sp, #128]	; 0x80
 8002272:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002276:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8002278:	4252      	negs	r2, r2
 800227a:	bfd8      	it	le
 800227c:	2200      	movle	r2, #0
 800227e:	1b1b      	subs	r3, r3, r4
 8002280:	428b      	cmp	r3, r1
 8002282:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002284:	bf3a      	itte	cc
 8002286:	9e0d      	ldrcc	r6, [sp, #52]	; 0x34
 8002288:	1b35      	subcc	r5, r6, r4
 800228a:	460d      	movcs	r5, r1
 800228c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800228e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8002290:	4344      	muls	r4, r0
 8002292:	1ae3      	subs	r3, r4, r3
 8002294:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8002296:	42a6      	cmp	r6, r4
 8002298:	f280 809e 	bge.w	80023d8 <forward_conv2d_nl_pool+0x32c>
 800229c:	1aad      	subs	r5, r5, r2
 800229e:	eba4 0c06 	sub.w	ip, r4, r6
 80022a2:	9532      	str	r5, [sp, #200]	; 0xc8
 80022a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80022a6:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 80022a8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80022ac:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 80022b0:	9c03      	ldr	r4, [sp, #12]
 80022b2:	9012      	str	r0, [sp, #72]	; 0x48
 80022b4:	9f00      	ldr	r7, [sp, #0]
 80022b6:	4375      	muls	r5, r6
 80022b8:	9e01      	ldr	r6, [sp, #4]
 80022ba:	9531      	str	r5, [sp, #196]	; 0xc4
 80022bc:	9d02      	ldr	r5, [sp, #8]
 80022be:	911d      	str	r1, [sp, #116]	; 0x74
 80022c0:	469a      	mov	sl, r3
 80022c2:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 80022c6:	46e3      	mov	fp, ip
 80022c8:	921f      	str	r2, [sp, #124]	; 0x7c
 80022ca:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80022cc:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 80022d0:	f1da 0100 	rsbs	r1, sl, #0
 80022d4:	eba6 000a 	sub.w	r0, r6, sl
 80022d8:	bfd8      	it	le
 80022da:	2100      	movle	r1, #0
 80022dc:	eb01 0c0a 	add.w	ip, r1, sl
 80022e0:	42b8      	cmp	r0, r7
 80022e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80022e4:	fb0e 220c 	mla	r2, lr, ip, r2
 80022e8:	4402      	add	r2, r0
 80022ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80022ec:	bf34      	ite	cc
 80022ee:	eba6 030a 	subcc.w	r3, r6, sl
 80022f2:	463b      	movcs	r3, r7
 80022f4:	b900      	cbnz	r0, 80022f8 <forward_conv2d_nl_pool+0x24c>
 80022f6:	4640      	mov	r0, r8
 80022f8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80022fc:	1a5b      	subs	r3, r3, r1
 80022fe:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 8002302:	f1be 0f01 	cmp.w	lr, #1
 8002306:	d116      	bne.n	8002336 <forward_conv2d_nl_pool+0x28a>
 8002308:	9309      	str	r3, [sp, #36]	; 0x24
 800230a:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 800230e:	f8cd c01c 	str.w	ip, [sp, #28]
 8002312:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 8002316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002318:	9108      	str	r1, [sp, #32]
 800231a:	9000      	str	r0, [sp, #0]
 800231c:	4641      	mov	r1, r8
 800231e:	f8cd c018 	str.w	ip, [sp, #24]
 8002322:	2000      	movs	r0, #0
 8002324:	f8cd e014 	str.w	lr, [sp, #20]
 8002328:	9704      	str	r7, [sp, #16]
 800232a:	9603      	str	r6, [sp, #12]
 800232c:	9502      	str	r5, [sp, #8]
 800232e:	9401      	str	r4, [sp, #4]
 8002330:	f7ff fa0e 	bl	8001750 <ai_conv2d_kernel_simple_f32>
 8002334:	e02a      	b.n	800238c <forward_conv2d_nl_pool+0x2e0>
 8002336:	45a6      	cmp	lr, r4
 8002338:	d112      	bne.n	8002360 <forward_conv2d_nl_pool+0x2b4>
 800233a:	9309      	str	r3, [sp, #36]	; 0x24
 800233c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800233e:	9108      	str	r1, [sp, #32]
 8002340:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002346:	9106      	str	r1, [sp, #24]
 8002348:	4641      	mov	r1, r8
 800234a:	9000      	str	r0, [sp, #0]
 800234c:	2000      	movs	r0, #0
 800234e:	f8cd c01c 	str.w	ip, [sp, #28]
 8002352:	9704      	str	r7, [sp, #16]
 8002354:	9603      	str	r6, [sp, #12]
 8002356:	9502      	str	r5, [sp, #8]
 8002358:	9401      	str	r4, [sp, #4]
 800235a:	f7ff fa81 	bl	8001860 <ai_conv2d_kernel_depthwise_f32>
 800235e:	e015      	b.n	800238c <forward_conv2d_nl_pool+0x2e0>
 8002360:	930a      	str	r3, [sp, #40]	; 0x28
 8002362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002364:	9109      	str	r1, [sp, #36]	; 0x24
 8002366:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002368:	9306      	str	r3, [sp, #24]
 800236a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800236c:	f8cd c020 	str.w	ip, [sp, #32]
 8002370:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8002374:	9107      	str	r1, [sp, #28]
 8002376:	4641      	mov	r1, r8
 8002378:	9000      	str	r0, [sp, #0]
 800237a:	2000      	movs	r0, #0
 800237c:	f8cd c014 	str.w	ip, [sp, #20]
 8002380:	9704      	str	r7, [sp, #16]
 8002382:	9603      	str	r6, [sp, #12]
 8002384:	9502      	str	r5, [sp, #8]
 8002386:	9401      	str	r4, [sp, #4]
 8002388:	f7ff fb0a 	bl	80019a0 <ai_conv2d_kernel_group_f32>
 800238c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800238e:	462a      	mov	r2, r5
 8002390:	4641      	mov	r1, r8
 8002392:	4640      	mov	r0, r8
 8002394:	f109 0901 	add.w	r9, r9, #1
 8002398:	4798      	blx	r3
 800239a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800239c:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80023a0:	462b      	mov	r3, r5
 80023a2:	462a      	mov	r2, r5
 80023a4:	4641      	mov	r1, r8
 80023a6:	4548      	cmp	r0, r9
 80023a8:	bf18      	it	ne
 80023aa:	2000      	movne	r0, #0
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80023b0:	47e0      	blx	ip
 80023b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80023b4:	f1bb 0b01 	subs.w	fp, fp, #1
 80023b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80023bc:	448a      	add	sl, r1
 80023be:	d184      	bne.n	80022ca <forward_conv2d_nl_pool+0x21e>
 80023c0:	9403      	str	r4, [sp, #12]
 80023c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80023c4:	9502      	str	r5, [sp, #8]
 80023c6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80023c8:	9601      	str	r6, [sp, #4]
 80023ca:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80023ce:	9700      	str	r7, [sp, #0]
 80023d0:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 80023d4:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80023d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80023da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80023dc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80023de:	18e3      	adds	r3, r4, r3
 80023e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80023e2:	1e6d      	subs	r5, r5, #1
 80023e4:	9520      	str	r5, [sp, #128]	; 0x80
 80023e6:	f47f af44 	bne.w	8002272 <forward_conv2d_nl_pool+0x1c6>
 80023ea:	9012      	str	r0, [sp, #72]	; 0x48
 80023ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80023ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80023f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80023f2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80023f4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80023f6:	1818      	adds	r0, r3, r0
 80023f8:	9014      	str	r0, [sp, #80]	; 0x50
 80023fa:	1e6d      	subs	r5, r5, #1
 80023fc:	44a6      	add	lr, r4
 80023fe:	9523      	str	r5, [sp, #140]	; 0x8c
 8002400:	f47f af0f 	bne.w	8002222 <forward_conv2d_nl_pool+0x176>
 8002404:	9211      	str	r2, [sp, #68]	; 0x44
 8002406:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8002408:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800240a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800240c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800240e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8002410:	18aa      	adds	r2, r5, r2
 8002412:	9215      	str	r2, [sp, #84]	; 0x54
 8002414:	1e76      	subs	r6, r6, #1
 8002416:	9625      	str	r6, [sp, #148]	; 0x94
 8002418:	f47f aee1 	bne.w	80021de <forward_conv2d_nl_pool+0x132>
 800241c:	b035      	add	sp, #212	; 0xd4
 800241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002424 <forward_dense>:
 8002424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002428:	b089      	sub	sp, #36	; 0x24
 800242a:	6940      	ldr	r0, [r0, #20]
 800242c:	f04f 0e00 	mov.w	lr, #0
 8002430:	6800      	ldr	r0, [r0, #0]
 8002432:	6801      	ldr	r1, [r0, #0]
 8002434:	6842      	ldr	r2, [r0, #4]
 8002436:	6880      	ldr	r0, [r0, #8]
 8002438:	6805      	ldr	r5, [r0, #0]
 800243a:	680e      	ldr	r6, [r1, #0]
 800243c:	6844      	ldr	r4, [r0, #4]
 800243e:	6817      	ldr	r7, [r2, #0]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	4350      	muls	r0, r2
 800244c:	682a      	ldr	r2, [r5, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 8002454:	f00a 0a03 	and.w	sl, sl, #3
 8002458:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800245c:	0c5b      	lsrs	r3, r3, #17
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	fa29 f90a 	lsr.w	r9, r9, sl
 8002466:	2b04      	cmp	r3, #4
 8002468:	f8cd 9004 	str.w	r9, [sp, #4]
 800246c:	6836      	ldr	r6, [r6, #0]
 800246e:	bf14      	ite	ne
 8002470:	2b08      	cmpne	r3, #8
 8002472:	f8d2 e00c 	ldreq.w	lr, [r2, #12]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	2800      	cmp	r0, #0
 800247a:	69ab      	ldr	r3, [r5, #24]
 800247c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8002480:	68b2      	ldr	r2, [r6, #8]
 8002482:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8002486:	d067      	beq.n	8002558 <forward_dense+0x134>
 8002488:	9507      	str	r5, [sp, #28]
 800248a:	9405      	str	r4, [sp, #20]
 800248c:	9106      	str	r1, [sp, #24]
 800248e:	f8cd e010 	str.w	lr, [sp, #16]
 8002492:	9600      	str	r6, [sp, #0]
 8002494:	9003      	str	r0, [sp, #12]
 8002496:	9807      	ldr	r0, [sp, #28]
 8002498:	9905      	ldr	r1, [sp, #20]
 800249a:	6804      	ldr	r4, [r0, #0]
 800249c:	68a0      	ldr	r0, [r4, #8]
 800249e:	b109      	cbz	r1, 80024a4 <forward_dense+0x80>
 80024a0:	680d      	ldr	r5, [r1, #0]
 80024a2:	68a9      	ldr	r1, [r5, #8]
 80024a4:	9c04      	ldr	r4, [sp, #16]
 80024a6:	b994      	cbnz	r4, 80024ce <forward_dense+0xaa>
 80024a8:	9e00      	ldr	r6, [sp, #0]
 80024aa:	45b1      	cmp	r9, r6
 80024ac:	d249      	bcs.n	8002542 <forward_dense+0x11e>
 80024ae:	46b2      	mov	sl, r6
 80024b0:	4646      	mov	r6, r8
 80024b2:	464f      	mov	r7, r9
 80024b4:	461c      	mov	r4, r3
 80024b6:	4615      	mov	r5, r2
 80024b8:	4681      	mov	r9, r0
 80024ba:	4688      	mov	r8, r1
 80024bc:	f1b8 0f00 	cmp.w	r8, #0
 80024c0:	bf19      	ittee	ne
 80024c2:	f858 0b04 	ldrne.w	r0, [r8], #4
 80024c6:	9002      	strne	r0, [sp, #8]
 80024c8:	2200      	moveq	r2, #0
 80024ca:	9202      	streq	r2, [sp, #8]
 80024cc:	e029      	b.n	8002522 <forward_dense+0xfe>
 80024ce:	9c00      	ldr	r4, [sp, #0]
 80024d0:	45a1      	cmp	r9, r4
 80024d2:	d236      	bcs.n	8002542 <forward_dense+0x11e>
 80024d4:	9c04      	ldr	r4, [sp, #16]
 80024d6:	461d      	mov	r5, r3
 80024d8:	4616      	mov	r6, r2
 80024da:	4682      	mov	sl, r0
 80024dc:	468b      	mov	fp, r1
 80024de:	9f00      	ldr	r7, [sp, #0]
 80024e0:	f1bb 0f00 	cmp.w	fp, #0
 80024e4:	4633      	mov	r3, r6
 80024e6:	a802      	add	r0, sp, #8
 80024e8:	bf19      	ittee	ne
 80024ea:	f85b 1b04 	ldrne.w	r1, [fp], #4
 80024ee:	9102      	strne	r1, [sp, #8]
 80024f0:	2200      	moveq	r2, #0
 80024f2:	9202      	streq	r2, [sp, #8]
 80024f4:	9901      	ldr	r1, [sp, #4]
 80024f6:	f8cd 8000 	str.w	r8, [sp]
 80024fa:	4622      	mov	r2, r4
 80024fc:	2904      	cmp	r1, #4
 80024fe:	4651      	mov	r1, sl
 8002500:	d102      	bne.n	8002508 <forward_dense+0xe4>
 8002502:	f7ff fccb 	bl	8001e9c <ai_dict4_dot_array_f32>
 8002506:	e001      	b.n	800250c <forward_dense+0xe8>
 8002508:	f7ff fb5e 	bl	8001bc8 <ai_dict8_dot_array_f32>
 800250c:	9a02      	ldr	r2, [sp, #8]
 800250e:	44aa      	add	sl, r5
 8002510:	f849 2b04 	str.w	r2, [r9], #4
 8002514:	45b9      	cmp	r9, r7
 8002516:	d3e3      	bcc.n	80024e0 <forward_dense+0xbc>
 8002518:	9404      	str	r4, [sp, #16]
 800251a:	462b      	mov	r3, r5
 800251c:	4632      	mov	r2, r6
 800251e:	9700      	str	r7, [sp, #0]
 8002520:	e00f      	b.n	8002542 <forward_dense+0x11e>
 8002522:	4633      	mov	r3, r6
 8002524:	462a      	mov	r2, r5
 8002526:	4649      	mov	r1, r9
 8002528:	a802      	add	r0, sp, #8
 800252a:	f000 ff8f 	bl	800344c <ai_math_dot_array>
 800252e:	9802      	ldr	r0, [sp, #8]
 8002530:	44a1      	add	r9, r4
 8002532:	f847 0b04 	str.w	r0, [r7], #4
 8002536:	4557      	cmp	r7, sl
 8002538:	d3c0      	bcc.n	80024bc <forward_dense+0x98>
 800253a:	46b0      	mov	r8, r6
 800253c:	4623      	mov	r3, r4
 800253e:	46b9      	mov	r9, r7
 8002540:	462a      	mov	r2, r5
 8002542:	9900      	ldr	r1, [sp, #0]
 8002544:	9c06      	ldr	r4, [sp, #24]
 8002546:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 800254a:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 800254e:	9903      	ldr	r1, [sp, #12]
 8002550:	9500      	str	r5, [sp, #0]
 8002552:	1e49      	subs	r1, r1, #1
 8002554:	9103      	str	r1, [sp, #12]
 8002556:	d19e      	bne.n	8002496 <forward_dense+0x72>
 8002558:	b009      	add	sp, #36	; 0x24
 800255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002560 <arm_mat_gemm_f32>:
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b08a      	sub	sp, #40	; 0x28
 8002566:	469a      	mov	sl, r3
 8002568:	4615      	mov	r5, r2
 800256a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800256c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8002570:	686c      	ldr	r4, [r5, #4]
 8002572:	9400      	str	r4, [sp, #0]
 8002574:	468b      	mov	fp, r1
 8002576:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800257a:	f8cd e008 	str.w	lr, [sp, #8]
 800257e:	8804      	ldrh	r4, [r0, #0]
 8002580:	f8bb 1000 	ldrh.w	r1, [fp]
 8002584:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002588:	8840      	ldrh	r0, [r0, #2]
 800258a:	f8b5 e000 	ldrh.w	lr, [r5]
 800258e:	886f      	ldrh	r7, [r5, #2]
 8002590:	2500      	movs	r5, #0
 8002592:	f8b3 9000 	ldrh.w	r9, [r3]
 8002596:	885e      	ldrh	r6, [r3, #2]
 8002598:	fa4f f38a 	sxtb.w	r3, sl
 800259c:	f8db b004 	ldr.w	fp, [fp, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f8cd b014 	str.w	fp, [sp, #20]
 80025a6:	f8cd b010 	str.w	fp, [sp, #16]
 80025aa:	bf0c      	ite	eq
 80025ac:	46a0      	moveq	r8, r4
 80025ae:	4680      	movne	r8, r0
 80025b0:	2f01      	cmp	r7, #1
 80025b2:	bf0c      	ite	eq
 80025b4:	2300      	moveq	r3, #0
 80025b6:	2304      	movne	r3, #4
 80025b8:	f1be 0f01 	cmp.w	lr, #1
 80025bc:	d104      	bne.n	80025c8 <arm_mat_gemm_f32+0x68>
 80025be:	2f01      	cmp	r7, #1
 80025c0:	d007      	beq.n	80025d2 <arm_mat_gemm_f32+0x72>
 80025c2:	f1c6 0e00 	rsb	lr, r6, #0
 80025c6:	e005      	b.n	80025d4 <arm_mat_gemm_f32+0x74>
 80025c8:	2f01      	cmp	r7, #1
 80025ca:	bf08      	it	eq
 80025cc:	f04f 0e01 	moveq.w	lr, #1
 80025d0:	d000      	beq.n	80025d4 <arm_mat_gemm_f32+0x74>
 80025d2:	46ae      	mov	lr, r5
 80025d4:	fa4f fb8a 	sxtb.w	fp, sl
 80025d8:	fa0f fe8e 	sxth.w	lr, lr
 80025dc:	f1bb 0f00 	cmp.w	fp, #0
 80025e0:	f8cd e004 	str.w	lr, [sp, #4]
 80025e4:	bf0c      	ite	eq
 80025e6:	46a3      	moveq	fp, r4
 80025e8:	4683      	movne	fp, r0
 80025ea:	45cb      	cmp	fp, r9
 80025ec:	d116      	bne.n	800261c <arm_mat_gemm_f32+0xbc>
 80025ee:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 80025f2:	f1be 0f00 	cmp.w	lr, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	4691      	moveq	r9, r2
 80025fa:	4689      	movne	r9, r1
 80025fc:	45b1      	cmp	r9, r6
 80025fe:	d10d      	bne.n	800261c <arm_mat_gemm_f32+0xbc>
 8002600:	fa4f fb8a 	sxtb.w	fp, sl
 8002604:	f1bb 0f00 	cmp.w	fp, #0
 8002608:	bf0c      	ite	eq
 800260a:	4683      	moveq	fp, r0
 800260c:	46a3      	movne	fp, r4
 800260e:	f1be 0f00 	cmp.w	lr, #0
 8002612:	bf0c      	ite	eq
 8002614:	460e      	moveq	r6, r1
 8002616:	4616      	movne	r6, r2
 8002618:	45b3      	cmp	fp, r6
 800261a:	d070      	beq.n	80026fe <arm_mat_gemm_f32+0x19e>
 800261c:	f06f 0002 	mvn.w	r0, #2
 8002620:	b00a      	add	sp, #40	; 0x28
 8002622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002626:	9d05      	ldr	r5, [sp, #20]
 8002628:	0097      	lsls	r7, r2, #2
 800262a:	9708      	str	r7, [sp, #32]
 800262c:	0086      	lsls	r6, r0, #2
 800262e:	9607      	str	r6, [sp, #28]
 8002630:	f8cd c018 	str.w	ip, [sp, #24]
 8002634:	f8dd c010 	ldr.w	ip, [sp, #16]
 8002638:	f8ad 4002 	strh.w	r4, [sp, #2]
 800263c:	ea4f 0408 	mov.w	r4, r8
 8002640:	fa4f f68a 	sxtb.w	r6, sl
 8002644:	2e00      	cmp	r6, #0
 8002646:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8002724 <.text_16>
 800264a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800264e:	bf0c      	ite	eq
 8002650:	4606      	moveq	r6, r0
 8002652:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 8002656:	b1b6      	cbz	r6, 8002686 <arm_mat_gemm_f32+0x126>
 8002658:	fa4f f78a 	sxtb.w	r7, sl
 800265c:	2f00      	cmp	r7, #0
 800265e:	edd8 1a00 	vldr	s3, [r8]
 8002662:	ed95 2a00 	vldr	s4, [r5]
 8002666:	bf0c      	ite	eq
 8002668:	2704      	moveq	r7, #4
 800266a:	9f07      	ldrne	r7, [sp, #28]
 800266c:	f1be 0f00 	cmp.w	lr, #0
 8002670:	44b8      	add	r8, r7
 8002672:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002676:	bf0c      	ite	eq
 8002678:	9f08      	ldreq	r7, [sp, #32]
 800267a:	2704      	movne	r7, #4
 800267c:	19ed      	adds	r5, r5, r7
 800267e:	1e76      	subs	r6, r6, #1
 8002680:	b2b7      	uxth	r7, r6
 8002682:	2f00      	cmp	r7, #0
 8002684:	d1e8      	bne.n	8002658 <arm_mat_gemm_f32+0xf8>
 8002686:	1e64      	subs	r4, r4, #1
 8002688:	b2a4      	uxth	r4, r4
 800268a:	f1be 0f00 	cmp.w	lr, #0
 800268e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002692:	eddb 1a00 	vldr	s3, [fp]
 8002696:	449b      	add	fp, r3
 8002698:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800269c:	ed89 1a00 	vstr	s2, [r9]
 80026a0:	f109 0904 	add.w	r9, r9, #4
 80026a4:	bf0e      	itee	eq
 80026a6:	1b15      	subeq	r5, r2, r4
 80026a8:	1b0d      	subne	r5, r1, r4
 80026aa:	4355      	mulne	r5, r2
 80026ac:	2c00      	cmp	r4, #0
 80026ae:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 80026b2:	d1c5      	bne.n	8002640 <arm_mat_gemm_f32+0xe0>
 80026b4:	f8cd c010 	str.w	ip, [sp, #16]
 80026b8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80026bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80026be:	fa4f fc8a 	sxtb.w	ip, sl
 80026c2:	f1bc 0f00 	cmp.w	ip, #0
 80026c6:	9d06      	ldr	r5, [sp, #24]
 80026c8:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 80026cc:	44b1      	add	r9, r6
 80026ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80026d2:	f8bd 9000 	ldrh.w	r9, [sp]
 80026d6:	bf0c      	ite	eq
 80026d8:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 80026dc:	f04f 0c04 	movne.w	ip, #4
 80026e0:	44ac      	add	ip, r5
 80026e2:	9d01      	ldr	r5, [sp, #4]
 80026e4:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80026e8:	f1a9 0601 	sub.w	r6, r9, #1
 80026ec:	f8ad 6000 	strh.w	r6, [sp]
 80026f0:	f8bd 5000 	ldrh.w	r5, [sp]
 80026f4:	b955      	cbnz	r5, 800270c <arm_mat_gemm_f32+0x1ac>
 80026f6:	2000      	movs	r0, #0
 80026f8:	b00a      	add	sp, #40	; 0x28
 80026fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fe:	f8dd b000 	ldr.w	fp, [sp]
 8002702:	9503      	str	r5, [sp, #12]
 8002704:	f8ad 8000 	strh.w	r8, [sp]
 8002708:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800270c:	f1be 0f00 	cmp.w	lr, #0
 8002710:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002714:	ae03      	add	r6, sp, #12
 8002716:	8835      	ldrh	r5, [r6, #0]
 8002718:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 800271c:	bf0c      	ite	eq
 800271e:	4690      	moveq	r8, r2
 8002720:	4688      	movne	r8, r1
 8002722:	e780      	b.n	8002626 <arm_mat_gemm_f32+0xc6>

08002724 <.text_16>:
 8002724:	00000000 	.word	0x00000000

08002728 <.text_17>:
 8002728:	08001bc5 	.word	0x08001bc5

0800272c <forward_gemm>:
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b08b      	sub	sp, #44	; 0x2c
 8002730:	6941      	ldr	r1, [r0, #20]
 8002732:	6809      	ldr	r1, [r1, #0]
 8002734:	680a      	ldr	r2, [r1, #0]
 8002736:	6849      	ldr	r1, [r1, #4]
 8002738:	6809      	ldr	r1, [r1, #0]
 800273a:	6815      	ldr	r5, [r2, #0]
 800273c:	6854      	ldr	r4, [r2, #4]
 800273e:	6893      	ldr	r3, [r2, #8]
 8002740:	680a      	ldr	r2, [r1, #0]
 8002742:	68cf      	ldr	r7, [r1, #12]
 8002744:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8002748:	a904      	add	r1, sp, #16
 800274a:	6896      	ldr	r6, [r2, #8]
 800274c:	f8ad e020 	strh.w	lr, [sp, #32]
 8002750:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8002754:	9609      	str	r6, [sp, #36]	; 0x24
 8002756:	682e      	ldr	r6, [r5, #0]
 8002758:	68ef      	ldr	r7, [r5, #12]
 800275a:	692d      	ldr	r5, [r5, #16]
 800275c:	68b6      	ldr	r6, [r6, #8]
 800275e:	f8ad 5018 	strh.w	r5, [sp, #24]
 8002762:	f8ad 701a 	strh.w	r7, [sp, #26]
 8002766:	9607      	str	r6, [sp, #28]
 8002768:	6825      	ldr	r5, [r4, #0]
 800276a:	68e6      	ldr	r6, [r4, #12]
 800276c:	6924      	ldr	r4, [r4, #16]
 800276e:	68ad      	ldr	r5, [r5, #8]
 8002770:	f8ad 4010 	strh.w	r4, [sp, #16]
 8002774:	f8ad 6012 	strh.w	r6, [sp, #18]
 8002778:	9505      	str	r5, [sp, #20]
 800277a:	681c      	ldr	r4, [r3, #0]
 800277c:	68dd      	ldr	r5, [r3, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	68a4      	ldr	r4, [r4, #8]
 8002782:	f8ad 3008 	strh.w	r3, [sp, #8]
 8002786:	9403      	str	r4, [sp, #12]
 8002788:	ac08      	add	r4, sp, #32
 800278a:	f8ad 500a 	strh.w	r5, [sp, #10]
 800278e:	9401      	str	r4, [sp, #4]
 8002790:	f990 2021 	ldrsb.w	r2, [r0, #33]	; 0x21
 8002794:	9200      	str	r2, [sp, #0]
 8002796:	f990 3020 	ldrsb.w	r3, [r0, #32]
 800279a:	edd0 0a07 	vldr	s1, [r0, #28]
 800279e:	aa02      	add	r2, sp, #8
 80027a0:	ed90 0a06 	vldr	s0, [r0, #24]
 80027a4:	a806      	add	r0, sp, #24
 80027a6:	f7ff fedb 	bl	8002560 <arm_mat_gemm_f32>
 80027aa:	b00b      	add	sp, #44	; 0x2c
 80027ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027b0 <nl_func_sm_channel_f32>:
 80027b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b4:	4614      	mov	r4, r2
 80027b6:	460f      	mov	r7, r1
 80027b8:	2c02      	cmp	r4, #2
 80027ba:	4606      	mov	r6, r0
 80027bc:	ed2d 8b02 	vpush	{d8}
 80027c0:	ed97 8a00 	vldr	s16, [r7]
 80027c4:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8002ad4 <.text_11>
 80027c8:	d33d      	bcc.n	8002846 <nl_func_sm_channel_f32+0x96>
 80027ca:	1e61      	subs	r1, r4, #1
 80027cc:	1d3a      	adds	r2, r7, #4
 80027ce:	f011 0003 	ands.w	r0, r1, #3
 80027d2:	d00c      	beq.n	80027ee <nl_func_sm_channel_f32+0x3e>
 80027d4:	ed92 0a00 	vldr	s0, [r2]
 80027d8:	f102 0204 	add.w	r2, r2, #4
 80027dc:	eeb4 0a48 	vcmp.f32	s0, s16
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	bf58      	it	pl
 80027e6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80027ea:	1e40      	subs	r0, r0, #1
 80027ec:	d1f2      	bne.n	80027d4 <nl_func_sm_channel_f32+0x24>
 80027ee:	0889      	lsrs	r1, r1, #2
 80027f0:	f000 802b 	beq.w	800284a <nl_func_sm_channel_f32+0x9a>
 80027f4:	ed92 0a00 	vldr	s0, [r2]
 80027f8:	eeb4 0a48 	vcmp.f32	s0, s16
 80027fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002800:	bf58      	it	pl
 8002802:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002806:	ed92 0a01 	vldr	s0, [r2, #4]
 800280a:	eeb4 0a48 	vcmp.f32	s0, s16
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	bf58      	it	pl
 8002814:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002818:	ed92 0a02 	vldr	s0, [r2, #8]
 800281c:	eeb4 0a48 	vcmp.f32	s0, s16
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	bf58      	it	pl
 8002826:	eeb0 8a40 	vmovpl.f32	s16, s0
 800282a:	ed92 0a03 	vldr	s0, [r2, #12]
 800282e:	f102 0210 	add.w	r2, r2, #16
 8002832:	eeb4 0a48 	vcmp.f32	s0, s16
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	bf58      	it	pl
 800283c:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002840:	1e49      	subs	r1, r1, #1
 8002842:	d1d7      	bne.n	80027f4 <nl_func_sm_channel_f32+0x44>
 8002844:	e001      	b.n	800284a <nl_func_sm_channel_f32+0x9a>
 8002846:	2c00      	cmp	r4, #0
 8002848:	d040      	beq.n	80028cc <nl_func_sm_channel_f32+0x11c>
 800284a:	46b0      	mov	r8, r6
 800284c:	ea4f 0504 	mov.w	r5, r4
 8002850:	ed97 0a00 	vldr	s0, [r7]
 8002854:	1d3f      	adds	r7, r7, #4
 8002856:	ee30 0a48 	vsub.f32	s0, s0, s16
 800285a:	f006 ff31 	bl	80096c0 <expf>
 800285e:	1e6d      	subs	r5, r5, #1
 8002860:	ed88 0a00 	vstr	s0, [r8]
 8002864:	ee78 8a80 	vadd.f32	s17, s17, s0
 8002868:	f108 0804 	add.w	r8, r8, #4
 800286c:	d1f0      	bne.n	8002850 <nl_func_sm_channel_f32+0xa0>
 800286e:	f014 0003 	ands.w	r0, r4, #3
 8002872:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002876:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800287a:	d009      	beq.n	8002890 <nl_func_sm_channel_f32+0xe0>
 800287c:	edd6 0a00 	vldr	s1, [r6]
 8002880:	1e40      	subs	r0, r0, #1
 8002882:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002886:	edc6 0a00 	vstr	s1, [r6]
 800288a:	f106 0604 	add.w	r6, r6, #4
 800288e:	d1f5      	bne.n	800287c <nl_func_sm_channel_f32+0xcc>
 8002890:	08a4      	lsrs	r4, r4, #2
 8002892:	d01b      	beq.n	80028cc <nl_func_sm_channel_f32+0x11c>
 8002894:	edd6 0a00 	vldr	s1, [r6]
 8002898:	1e64      	subs	r4, r4, #1
 800289a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800289e:	edc6 0a00 	vstr	s1, [r6]
 80028a2:	ed96 1a01 	vldr	s2, [r6, #4]
 80028a6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80028aa:	ed86 1a01 	vstr	s2, [r6, #4]
 80028ae:	edd6 0a02 	vldr	s1, [r6, #8]
 80028b2:	ed96 1a03 	vldr	s2, [r6, #12]
 80028b6:	ee60 1a80 	vmul.f32	s3, s1, s0
 80028ba:	ee61 0a00 	vmul.f32	s1, s2, s0
 80028be:	edc6 1a02 	vstr	s3, [r6, #8]
 80028c2:	edc6 0a03 	vstr	s1, [r6, #12]
 80028c6:	f106 0610 	add.w	r6, r6, #16
 80028ca:	d1e3      	bne.n	8002894 <nl_func_sm_channel_f32+0xe4>
 80028cc:	ecbd 8b02 	vpop	{d8}
 80028d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028d4 <nl_func_sm_array_f32>:
 80028d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d8:	460c      	mov	r4, r1
 80028da:	b081      	sub	sp, #4
 80028dc:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80028e0:	4680      	mov	r8, r0
 80028e2:	461d      	mov	r5, r3
 80028e4:	9e08      	ldr	r6, [sp, #32]
 80028e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80028e8:	454c      	cmp	r4, r9
 80028ea:	d20a      	bcs.n	8002902 <nl_func_sm_array_f32+0x2e>
 80028ec:	462a      	mov	r2, r5
 80028ee:	4621      	mov	r1, r4
 80028f0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80028f4:	4640      	mov	r0, r8
 80028f6:	f7ff ff5b 	bl	80027b0 <nl_func_sm_channel_f32>
 80028fa:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 80028fe:	454c      	cmp	r4, r9
 8002900:	d3f4      	bcc.n	80028ec <nl_func_sm_array_f32+0x18>
 8002902:	b001      	add	sp, #4
 8002904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002908 <nl_func_tanh_array_f32>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	460d      	mov	r5, r1
 800290c:	4604      	mov	r4, r0
 800290e:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8002912:	42b5      	cmp	r5, r6
 8002914:	f080 800a 	bcs.w	800292c <nl_func_tanh_array_f32+0x24>
 8002918:	ed95 0a00 	vldr	s0, [r5]
 800291c:	1d2d      	adds	r5, r5, #4
 800291e:	f006 fe7d 	bl	800961c <tanhf>
 8002922:	ed84 0a00 	vstr	s0, [r4]
 8002926:	1d24      	adds	r4, r4, #4
 8002928:	42b5      	cmp	r5, r6
 800292a:	d3f5      	bcc.n	8002918 <nl_func_tanh_array_f32+0x10>
 800292c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002930 <nl_func_sigmoid_array_f32>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	460d      	mov	r5, r1
 8002934:	4604      	mov	r4, r0
 8002936:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 800293a:	42b5      	cmp	r5, r6
 800293c:	f080 8014 	bcs.w	8002968 <nl_func_sigmoid_array_f32+0x38>
 8002940:	ed95 0a00 	vldr	s0, [r5]
 8002944:	1d2d      	adds	r5, r5, #4
 8002946:	eeb1 0a40 	vneg.f32	s0, s0
 800294a:	f006 feb9 	bl	80096c0 <expf>
 800294e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002952:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002956:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800295a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800295e:	ed84 1a00 	vstr	s2, [r4]
 8002962:	1d24      	adds	r4, r4, #4
 8002964:	42b5      	cmp	r5, r6
 8002966:	d3eb      	bcc.n	8002940 <nl_func_sigmoid_array_f32+0x10>
 8002968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800296c <nl_func_sign_array_f32>:
 800296c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002970:	4291      	cmp	r1, r2
 8002972:	d216      	bcs.n	80029a2 <nl_func_sign_array_f32+0x36>
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	ed91 0a00 	vldr	s0, [r1]
 800297c:	4684      	mov	ip, r0
 800297e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002982:	f10c 0004 	add.w	r0, ip, #4
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	bfcc      	ite	gt
 800298c:	ed9f 0abd 	vldrgt	s0, [pc, #756]	; 8002c84 <.text_16>
 8002990:	ee00 3a10 	vmovle	s0, r3
 8002994:	1d09      	adds	r1, r1, #4
 8002996:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800299a:	4291      	cmp	r1, r2
 800299c:	ed8c 0a00 	vstr	s0, [ip]
 80029a0:	d3ea      	bcc.n	8002978 <nl_func_sign_array_f32+0xc>
 80029a2:	4770      	bx	lr

080029a4 <nl_func_clip_array_f32>:
 80029a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80029a8:	4291      	cmp	r1, r2
 80029aa:	d216      	bcs.n	80029da <nl_func_clip_array_f32+0x36>
 80029ac:	4603      	mov	r3, r0
 80029ae:	ed91 1a00 	vldr	s2, [r1]
 80029b2:	1d18      	adds	r0, r3, #4
 80029b4:	eeb4 0a41 	vcmp.f32	s0, s2
 80029b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029bc:	bf58      	it	pl
 80029be:	eeb0 1a40 	vmovpl.f32	s2, s0
 80029c2:	eeb4 1a60 	vcmp.f32	s2, s1
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	bf58      	it	pl
 80029cc:	eeb0 1a60 	vmovpl.f32	s2, s1
 80029d0:	1d09      	adds	r1, r1, #4
 80029d2:	4291      	cmp	r1, r2
 80029d4:	ed83 1a00 	vstr	s2, [r3]
 80029d8:	d3e8      	bcc.n	80029ac <nl_func_clip_array_f32+0x8>
 80029da:	4770      	bx	lr

080029dc <nl_func_relu_array_f32>:
 80029dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80029e0:	4291      	cmp	r1, r2
 80029e2:	d20f      	bcs.n	8002a04 <nl_func_relu_array_f32+0x28>
 80029e4:	4603      	mov	r3, r0
 80029e6:	ed91 0a00 	vldr	s0, [r1]
 80029ea:	1d18      	adds	r0, r3, #4
 80029ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	bfd8      	it	le
 80029f6:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8002ad4 <.text_11>
 80029fa:	1d09      	adds	r1, r1, #4
 80029fc:	4291      	cmp	r1, r2
 80029fe:	ed83 0a00 	vstr	s0, [r3]
 8002a02:	d3ef      	bcc.n	80029e4 <nl_func_relu_array_f32+0x8>
 8002a04:	4770      	bx	lr
	...

08002a08 <nl_func_relu6_array_f32>:
 8002a08:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002a0c:	4291      	cmp	r1, r2
 8002a0e:	d21a      	bcs.n	8002a46 <nl_func_relu6_array_f32+0x3e>
 8002a10:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8002a14:	4603      	mov	r3, r0
 8002a16:	edd1 0a00 	vldr	s1, [r1]
 8002a1a:	1d18      	adds	r0, r3, #4
 8002a1c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	dd08      	ble.n	8002a38 <nl_func_relu6_array_f32+0x30>
 8002a26:	eef4 0a40 	vcmp.f32	s1, s0
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	bf58      	it	pl
 8002a30:	eef0 0a40 	vmovpl.f32	s1, s0
 8002a34:	e002      	b.n	8002a3c <nl_func_relu6_array_f32+0x34>
 8002a36:	bf00      	nop
 8002a38:	eddf 0a26 	vldr	s1, [pc, #152]	; 8002ad4 <.text_11>
 8002a3c:	1d09      	adds	r1, r1, #4
 8002a3e:	4291      	cmp	r1, r2
 8002a40:	edc3 0a00 	vstr	s1, [r3]
 8002a44:	d3e6      	bcc.n	8002a14 <nl_func_relu6_array_f32+0xc>
 8002a46:	4770      	bx	lr

08002a48 <nl_func_selu_array_f32>:
 8002a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	b081      	sub	sp, #4
 8002a4e:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8002a52:	4604      	mov	r4, r0
 8002a54:	ed2d 8b04 	vpush	{d8-d9}
 8002a58:	eef0 8a40 	vmov.f32	s17, s0
 8002a5c:	42b5      	cmp	r5, r6
 8002a5e:	eeb0 8a60 	vmov.f32	s16, s1
 8002a62:	d232      	bcs.n	8002aca <nl_func_selu_array_f32+0x82>
 8002a64:	4627      	mov	r7, r4
 8002a66:	ed95 9a00 	vldr	s18, [r5]
 8002a6a:	1d3c      	adds	r4, r7, #4
 8002a6c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	eeb0 0a49 	vmov.f32	s0, s18
 8002a78:	bf4c      	ite	mi
 8002a7a:	eddf 9a16 	vldrmi	s19, [pc, #88]	; 8002ad4 <.text_11>
 8002a7e:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a82:	f006 fe1d 	bl	80096c0 <expf>
 8002a86:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a8a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a8e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002a92:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	dd05      	ble.n	8002aa8 <nl_func_selu_array_f32+0x60>
 8002a9c:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8002ad4 <.text_11>
 8002aa0:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002aa4:	e00a      	b.n	8002abc <nl_func_selu_array_f32+0x74>
 8002aa6:	bf00      	nop
 8002aa8:	eeb0 0a49 	vmov.f32	s0, s18
 8002aac:	f006 fe08 	bl	80096c0 <expf>
 8002ab0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002ab4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002ab8:	ee40 9a28 	vmla.f32	s19, s0, s17
 8002abc:	1d2d      	adds	r5, r5, #4
 8002abe:	ee28 0a29 	vmul.f32	s0, s16, s19
 8002ac2:	42b5      	cmp	r5, r6
 8002ac4:	ed87 0a00 	vstr	s0, [r7]
 8002ac8:	d3cc      	bcc.n	8002a64 <nl_func_selu_array_f32+0x1c>
 8002aca:	ecbd 8b04 	vpop	{d8-d9}
 8002ace:	b001      	add	sp, #4
 8002ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ad4 <.text_11>:
 8002ad4:	00000000 	.word	0x00000000

08002ad8 <nl_func_prelu_array_f32>:
 8002ad8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002adc:	4299      	cmp	r1, r3
 8002ade:	d220      	bcs.n	8002b22 <nl_func_prelu_array_f32+0x4a>
 8002ae0:	ed91 0a00 	vldr	s0, [r1]
 8002ae4:	4684      	mov	ip, r0
 8002ae6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002aea:	f10c 0004 	add.w	r0, ip, #4
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	ed92 1a00 	vldr	s2, [r2]
 8002af6:	bf4c      	ite	mi
 8002af8:	eddf 0a98 	vldrmi	s1, [pc, #608]	; 8002d5c <.text_19>
 8002afc:	eef0 0a40 	vmovpl.f32	s1, s0
 8002b00:	eeb1 0a40 	vneg.f32	s0, s0
 8002b04:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	bf48      	it	mi
 8002b0e:	ed9f 0a93 	vldrmi	s0, [pc, #588]	; 8002d5c <.text_19>
 8002b12:	1d09      	adds	r1, r1, #4
 8002b14:	1d12      	adds	r2, r2, #4
 8002b16:	4299      	cmp	r1, r3
 8002b18:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002b1c:	edcc 0a00 	vstr	s1, [ip]
 8002b20:	d3de      	bcc.n	8002ae0 <nl_func_prelu_array_f32+0x8>
 8002b22:	4770      	bx	lr

08002b24 <forward_relu>:
 8002b24:	b430      	push	{r4, r5}
 8002b26:	6940      	ldr	r0, [r0, #20]
 8002b28:	6804      	ldr	r4, [r0, #0]
 8002b2a:	6821      	ldr	r1, [r4, #0]
 8002b2c:	680d      	ldr	r5, [r1, #0]
 8002b2e:	686b      	ldr	r3, [r5, #4]
 8002b30:	68aa      	ldr	r2, [r5, #8]
 8002b32:	68e9      	ldr	r1, [r5, #12]
 8002b34:	6928      	ldr	r0, [r5, #16]
 8002b36:	682d      	ldr	r5, [r5, #0]
 8002b38:	4353      	muls	r3, r2
 8002b3a:	434b      	muls	r3, r1
 8002b3c:	6861      	ldr	r1, [r4, #4]
 8002b3e:	4343      	muls	r3, r0
 8002b40:	68a8      	ldr	r0, [r5, #8]
 8002b42:	680a      	ldr	r2, [r1, #0]
 8002b44:	6814      	ldr	r4, [r2, #0]
 8002b46:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8002b4a:	4290      	cmp	r0, r2
 8002b4c:	68a1      	ldr	r1, [r4, #8]
 8002b4e:	d20f      	bcs.n	8002b70 <forward_relu+0x4c>
 8002b50:	460b      	mov	r3, r1
 8002b52:	ed90 0a00 	vldr	s0, [r0]
 8002b56:	1d19      	adds	r1, r3, #4
 8002b58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	bfd8      	it	le
 8002b62:	ed9f 0a7e 	vldrle	s0, [pc, #504]	; 8002d5c <.text_19>
 8002b66:	1d00      	adds	r0, r0, #4
 8002b68:	4290      	cmp	r0, r2
 8002b6a:	ed83 0a00 	vstr	s0, [r3]
 8002b6e:	d3ef      	bcc.n	8002b50 <forward_relu+0x2c>
 8002b70:	bc30      	pop	{r4, r5}
 8002b72:	4770      	bx	lr

08002b74 <forward_relu6>:
 8002b74:	b430      	push	{r4, r5}
 8002b76:	6940      	ldr	r0, [r0, #20]
 8002b78:	6804      	ldr	r4, [r0, #0]
 8002b7a:	6821      	ldr	r1, [r4, #0]
 8002b7c:	680d      	ldr	r5, [r1, #0]
 8002b7e:	686b      	ldr	r3, [r5, #4]
 8002b80:	68aa      	ldr	r2, [r5, #8]
 8002b82:	68e9      	ldr	r1, [r5, #12]
 8002b84:	6928      	ldr	r0, [r5, #16]
 8002b86:	682d      	ldr	r5, [r5, #0]
 8002b88:	4353      	muls	r3, r2
 8002b8a:	434b      	muls	r3, r1
 8002b8c:	6861      	ldr	r1, [r4, #4]
 8002b8e:	4343      	muls	r3, r0
 8002b90:	68a8      	ldr	r0, [r5, #8]
 8002b92:	680a      	ldr	r2, [r1, #0]
 8002b94:	6814      	ldr	r4, [r2, #0]
 8002b96:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8002b9a:	4290      	cmp	r0, r2
 8002b9c:	68a1      	ldr	r1, [r4, #8]
 8002b9e:	d21a      	bcs.n	8002bd6 <forward_relu6+0x62>
 8002ba0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	edd0 0a00 	vldr	s1, [r0]
 8002baa:	1d19      	adds	r1, r3, #4
 8002bac:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	dd08      	ble.n	8002bc8 <forward_relu6+0x54>
 8002bb6:	eef4 0a40 	vcmp.f32	s1, s0
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	bf58      	it	pl
 8002bc0:	eef0 0a40 	vmovpl.f32	s1, s0
 8002bc4:	e002      	b.n	8002bcc <forward_relu6+0x58>
 8002bc6:	bf00      	nop
 8002bc8:	eddf 0a64 	vldr	s1, [pc, #400]	; 8002d5c <.text_19>
 8002bcc:	1d00      	adds	r0, r0, #4
 8002bce:	4290      	cmp	r0, r2
 8002bd0:	edc3 0a00 	vstr	s1, [r3]
 8002bd4:	d3e6      	bcc.n	8002ba4 <forward_relu6+0x30>
 8002bd6:	bc30      	pop	{r4, r5}
 8002bd8:	4770      	bx	lr
	...

08002bdc <forward_selu>:
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	b081      	sub	sp, #4
 8002be0:	ed2d 8b04 	vpush	{d8-d9}
 8002be4:	6941      	ldr	r1, [r0, #20]
 8002be6:	ed90 8a07 	vldr	s16, [r0, #28]
 8002bea:	edd0 8a06 	vldr	s17, [r0, #24]
 8002bee:	680e      	ldr	r6, [r1, #0]
 8002bf0:	6832      	ldr	r2, [r6, #0]
 8002bf2:	6814      	ldr	r4, [r2, #0]
 8002bf4:	6865      	ldr	r5, [r4, #4]
 8002bf6:	68a3      	ldr	r3, [r4, #8]
 8002bf8:	68e2      	ldr	r2, [r4, #12]
 8002bfa:	6921      	ldr	r1, [r4, #16]
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	435d      	muls	r5, r3
 8002c00:	4355      	muls	r5, r2
 8002c02:	6884      	ldr	r4, [r0, #8]
 8002c04:	434d      	muls	r5, r1
 8002c06:	6871      	ldr	r1, [r6, #4]
 8002c08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002c0c:	680a      	ldr	r2, [r1, #0]
 8002c0e:	6810      	ldr	r0, [r2, #0]
 8002c10:	42ac      	cmp	r4, r5
 8002c12:	6886      	ldr	r6, [r0, #8]
 8002c14:	d231      	bcs.n	8002c7a <forward_selu+0x9e>
 8002c16:	4637      	mov	r7, r6
 8002c18:	ed94 9a00 	vldr	s18, [r4]
 8002c1c:	1d3e      	adds	r6, r7, #4
 8002c1e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	eeb0 0a49 	vmov.f32	s0, s18
 8002c2a:	bf4c      	ite	mi
 8002c2c:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002d5c <.text_19>
 8002c30:	eef0 9a49 	vmovpl.f32	s19, s18
 8002c34:	f006 fd44 	bl	80096c0 <expf>
 8002c38:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c3c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c40:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002c44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	dd04      	ble.n	8002c58 <forward_selu+0x7c>
 8002c4e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8002d5c <.text_19>
 8002c52:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002c56:	e009      	b.n	8002c6c <forward_selu+0x90>
 8002c58:	eeb0 0a49 	vmov.f32	s0, s18
 8002c5c:	f006 fd30 	bl	80096c0 <expf>
 8002c60:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c64:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c68:	ee40 9a28 	vmla.f32	s19, s0, s17
 8002c6c:	1d24      	adds	r4, r4, #4
 8002c6e:	ee28 0a29 	vmul.f32	s0, s16, s19
 8002c72:	42ac      	cmp	r4, r5
 8002c74:	ed87 0a00 	vstr	s0, [r7]
 8002c78:	d3cd      	bcc.n	8002c16 <forward_selu+0x3a>
 8002c7a:	ecbd 8b04 	vpop	{d8-d9}
 8002c7e:	b001      	add	sp, #4
 8002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c84 <.text_16>:
 8002c84:	00000001 	.word	0x00000001

08002c88 <forward_prelu>:
 8002c88:	b470      	push	{r4, r5, r6}
 8002c8a:	6941      	ldr	r1, [r0, #20]
 8002c8c:	6980      	ldr	r0, [r0, #24]
 8002c8e:	680d      	ldr	r5, [r1, #0]
 8002c90:	682a      	ldr	r2, [r5, #0]
 8002c92:	6816      	ldr	r6, [r2, #0]
 8002c94:	6874      	ldr	r4, [r6, #4]
 8002c96:	68b3      	ldr	r3, [r6, #8]
 8002c98:	68f2      	ldr	r2, [r6, #12]
 8002c9a:	6931      	ldr	r1, [r6, #16]
 8002c9c:	6836      	ldr	r6, [r6, #0]
 8002c9e:	435c      	muls	r4, r3
 8002ca0:	4354      	muls	r4, r2
 8002ca2:	686a      	ldr	r2, [r5, #4]
 8002ca4:	434c      	muls	r4, r1
 8002ca6:	68b1      	ldr	r1, [r6, #8]
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	681d      	ldr	r5, [r3, #0]
 8002cac:	6803      	ldr	r3, [r0, #0]
 8002cae:	6898      	ldr	r0, [r3, #8]
 8002cb0:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8002cb4:	4299      	cmp	r1, r3
 8002cb6:	68aa      	ldr	r2, [r5, #8]
 8002cb8:	d21f      	bcs.n	8002cfa <forward_prelu+0x72>
 8002cba:	4614      	mov	r4, r2
 8002cbc:	ed91 0a00 	vldr	s0, [r1]
 8002cc0:	1d22      	adds	r2, r4, #4
 8002cc2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	ed90 1a00 	vldr	s2, [r0]
 8002cce:	bf4c      	ite	mi
 8002cd0:	eddf 0a22 	vldrmi	s1, [pc, #136]	; 8002d5c <.text_19>
 8002cd4:	eef0 0a40 	vmovpl.f32	s1, s0
 8002cd8:	eeb1 0a40 	vneg.f32	s0, s0
 8002cdc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	bf48      	it	mi
 8002ce6:	ed9f 0a1d 	vldrmi	s0, [pc, #116]	; 8002d5c <.text_19>
 8002cea:	1d09      	adds	r1, r1, #4
 8002cec:	1d00      	adds	r0, r0, #4
 8002cee:	4299      	cmp	r1, r3
 8002cf0:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002cf4:	edc4 0a00 	vstr	s1, [r4]
 8002cf8:	d3df      	bcc.n	8002cba <forward_prelu+0x32>
 8002cfa:	bc70      	pop	{r4, r5, r6}
 8002cfc:	4770      	bx	lr
	...

08002d00 <forward_sign>:
 8002d00:	b430      	push	{r4, r5}
 8002d02:	6940      	ldr	r0, [r0, #20]
 8002d04:	6804      	ldr	r4, [r0, #0]
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	680d      	ldr	r5, [r1, #0]
 8002d0a:	686b      	ldr	r3, [r5, #4]
 8002d0c:	68aa      	ldr	r2, [r5, #8]
 8002d0e:	68e9      	ldr	r1, [r5, #12]
 8002d10:	6928      	ldr	r0, [r5, #16]
 8002d12:	682d      	ldr	r5, [r5, #0]
 8002d14:	4353      	muls	r3, r2
 8002d16:	434b      	muls	r3, r1
 8002d18:	6861      	ldr	r1, [r4, #4]
 8002d1a:	4343      	muls	r3, r0
 8002d1c:	68a8      	ldr	r0, [r5, #8]
 8002d1e:	680a      	ldr	r2, [r1, #0]
 8002d20:	6814      	ldr	r4, [r2, #0]
 8002d22:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8002d26:	4290      	cmp	r0, r2
 8002d28:	68a1      	ldr	r1, [r4, #8]
 8002d2a:	d215      	bcs.n	8002d58 <forward_sign+0x58>
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	460c      	mov	r4, r1
 8002d32:	ed90 0a00 	vldr	s0, [r0]
 8002d36:	1d21      	adds	r1, r4, #4
 8002d38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	bfcc      	ite	gt
 8002d42:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8002d60 <.text_20>
 8002d46:	ee00 3a10 	vmovle	s0, r3
 8002d4a:	1d00      	adds	r0, r0, #4
 8002d4c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d50:	4290      	cmp	r0, r2
 8002d52:	ed84 0a00 	vstr	s0, [r4]
 8002d56:	d3eb      	bcc.n	8002d30 <forward_sign+0x30>
 8002d58:	bc30      	pop	{r4, r5}
 8002d5a:	4770      	bx	lr

08002d5c <.text_19>:
 8002d5c:	00000000 	.word	0x00000000

08002d60 <.text_20>:
 8002d60:	00000001 	.word	0x00000001

08002d64 <forward_clip>:
 8002d64:	b470      	push	{r4, r5, r6}
 8002d66:	6941      	ldr	r1, [r0, #20]
 8002d68:	ed90 0a07 	vldr	s0, [r0, #28]
 8002d6c:	edd0 0a06 	vldr	s1, [r0, #24]
 8002d70:	680d      	ldr	r5, [r1, #0]
 8002d72:	682a      	ldr	r2, [r5, #0]
 8002d74:	6816      	ldr	r6, [r2, #0]
 8002d76:	6874      	ldr	r4, [r6, #4]
 8002d78:	68b3      	ldr	r3, [r6, #8]
 8002d7a:	68f2      	ldr	r2, [r6, #12]
 8002d7c:	6931      	ldr	r1, [r6, #16]
 8002d7e:	6830      	ldr	r0, [r6, #0]
 8002d80:	435c      	muls	r4, r3
 8002d82:	4354      	muls	r4, r2
 8002d84:	6880      	ldr	r0, [r0, #8]
 8002d86:	434c      	muls	r4, r1
 8002d88:	6869      	ldr	r1, [r5, #4]
 8002d8a:	680a      	ldr	r2, [r1, #0]
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8002d92:	4290      	cmp	r0, r2
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	d216      	bcs.n	8002dc6 <forward_clip+0x62>
 8002d98:	460b      	mov	r3, r1
 8002d9a:	ed90 1a00 	vldr	s2, [r0]
 8002d9e:	1d19      	adds	r1, r3, #4
 8002da0:	eef4 0a41 	vcmp.f32	s1, s2
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	bf58      	it	pl
 8002daa:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002dae:	eeb4 1a40 	vcmp.f32	s2, s0
 8002db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db6:	bf58      	it	pl
 8002db8:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002dbc:	1d00      	adds	r0, r0, #4
 8002dbe:	4290      	cmp	r0, r2
 8002dc0:	ed83 1a00 	vstr	s2, [r3]
 8002dc4:	d3e8      	bcc.n	8002d98 <forward_clip+0x34>
 8002dc6:	bc70      	pop	{r4, r5, r6}
 8002dc8:	4770      	bx	lr
	...

08002dcc <forward_sigmoid>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	6940      	ldr	r0, [r0, #20]
 8002dd0:	6805      	ldr	r5, [r0, #0]
 8002dd2:	6829      	ldr	r1, [r5, #0]
 8002dd4:	680c      	ldr	r4, [r1, #0]
 8002dd6:	6863      	ldr	r3, [r4, #4]
 8002dd8:	68a2      	ldr	r2, [r4, #8]
 8002dda:	68e1      	ldr	r1, [r4, #12]
 8002ddc:	6920      	ldr	r0, [r4, #16]
 8002dde:	6824      	ldr	r4, [r4, #0]
 8002de0:	4353      	muls	r3, r2
 8002de2:	434b      	muls	r3, r1
 8002de4:	6869      	ldr	r1, [r5, #4]
 8002de6:	68a4      	ldr	r4, [r4, #8]
 8002de8:	4343      	muls	r3, r0
 8002dea:	6808      	ldr	r0, [r1, #0]
 8002dec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8002df0:	6802      	ldr	r2, [r0, #0]
 8002df2:	42b4      	cmp	r4, r6
 8002df4:	6895      	ldr	r5, [r2, #8]
 8002df6:	d213      	bcs.n	8002e20 <forward_sigmoid+0x54>
 8002df8:	ed94 0a00 	vldr	s0, [r4]
 8002dfc:	1d24      	adds	r4, r4, #4
 8002dfe:	eeb1 0a40 	vneg.f32	s0, s0
 8002e02:	f006 fc5d 	bl	80096c0 <expf>
 8002e06:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e0a:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e0e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e12:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8002e16:	ed85 1a00 	vstr	s2, [r5]
 8002e1a:	1d2d      	adds	r5, r5, #4
 8002e1c:	42b4      	cmp	r4, r6
 8002e1e:	d3eb      	bcc.n	8002df8 <forward_sigmoid+0x2c>
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e24 <forward_tanh>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	6940      	ldr	r0, [r0, #20]
 8002e28:	6805      	ldr	r5, [r0, #0]
 8002e2a:	6829      	ldr	r1, [r5, #0]
 8002e2c:	680c      	ldr	r4, [r1, #0]
 8002e2e:	6863      	ldr	r3, [r4, #4]
 8002e30:	68a2      	ldr	r2, [r4, #8]
 8002e32:	68e1      	ldr	r1, [r4, #12]
 8002e34:	6920      	ldr	r0, [r4, #16]
 8002e36:	6824      	ldr	r4, [r4, #0]
 8002e38:	4353      	muls	r3, r2
 8002e3a:	434b      	muls	r3, r1
 8002e3c:	6869      	ldr	r1, [r5, #4]
 8002e3e:	68a4      	ldr	r4, [r4, #8]
 8002e40:	4343      	muls	r3, r0
 8002e42:	6808      	ldr	r0, [r1, #0]
 8002e44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8002e48:	6802      	ldr	r2, [r0, #0]
 8002e4a:	42b4      	cmp	r4, r6
 8002e4c:	6895      	ldr	r5, [r2, #8]
 8002e4e:	d209      	bcs.n	8002e64 <forward_tanh+0x40>
 8002e50:	ed94 0a00 	vldr	s0, [r4]
 8002e54:	1d24      	adds	r4, r4, #4
 8002e56:	f006 fbe1 	bl	800961c <tanhf>
 8002e5a:	ed85 0a00 	vstr	s0, [r5]
 8002e5e:	1d2d      	adds	r5, r5, #4
 8002e60:	42b4      	cmp	r4, r6
 8002e62:	d3f5      	bcc.n	8002e50 <forward_tanh+0x2c>
 8002e64:	bd70      	pop	{r4, r5, r6, pc}

08002e66 <forward_sm>:
 8002e66:	b570      	push	{r4, r5, r6, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	6940      	ldr	r0, [r0, #20]
 8002e6c:	6804      	ldr	r4, [r0, #0]
 8002e6e:	6821      	ldr	r1, [r4, #0]
 8002e70:	680d      	ldr	r5, [r1, #0]
 8002e72:	68aa      	ldr	r2, [r5, #8]
 8002e74:	9201      	str	r2, [sp, #4]
 8002e76:	9200      	str	r2, [sp, #0]
 8002e78:	686e      	ldr	r6, [r5, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	68e9      	ldr	r1, [r5, #12]
 8002e7e:	6928      	ldr	r0, [r5, #16]
 8002e80:	6864      	ldr	r4, [r4, #4]
 8002e82:	4372      	muls	r2, r6
 8002e84:	682d      	ldr	r5, [r5, #0]
 8002e86:	434a      	muls	r2, r1
 8002e88:	4342      	muls	r2, r0
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	68a9      	ldr	r1, [r5, #8]
 8002e8e:	6805      	ldr	r5, [r0, #0]
 8002e90:	68a8      	ldr	r0, [r5, #8]
 8002e92:	f7ff fd1f 	bl	80028d4 <nl_func_sm_array_f32>
 8002e96:	b002      	add	sp, #8
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e9c <func_lrn_channel_f32>:
 8002e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea0:	461f      	mov	r7, r3
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	ed2d 8b04 	vpush	{d8-d9}
 8002ea8:	4616      	mov	r6, r2
 8002eaa:	460d      	mov	r5, r1
 8002eac:	00b1      	lsls	r1, r6, #2
 8002eae:	eef0 8a40 	vmov.f32	s17, s0
 8002eb2:	f005 fbe4 	bl	800867e <__aeabi_memclr>
 8002eb6:	2e00      	cmp	r6, #0
 8002eb8:	eeb0 9a60 	vmov.f32	s18, s1
 8002ebc:	eeb0 8a41 	vmov.f32	s16, s2
 8002ec0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002ec4:	dd4f      	ble.n	8002f66 <func_lrn_channel_f32+0xca>
 8002ec6:	f107 0e01 	add.w	lr, r7, #1
 8002eca:	427f      	negs	r7, r7
 8002ecc:	46a9      	mov	r9, r5
 8002ece:	4630      	mov	r0, r6
 8002ed0:	46b4      	mov	ip, r6
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	4671      	mov	r1, lr
 8002ed6:	ed99 0a00 	vldr	s0, [r9]
 8002eda:	45e6      	cmp	lr, ip
 8002edc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002ee0:	bfc8      	it	gt
 8002ee2:	4661      	movgt	r1, ip
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bfcc      	ite	gt
 8002ee8:	461a      	movgt	r2, r3
 8002eea:	2200      	movle	r2, #0
 8002eec:	428a      	cmp	r2, r1
 8002eee:	da33      	bge.n	8002f58 <func_lrn_channel_f32+0xbc>
 8002ef0:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8002ef4:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8002ef8:	1c52      	adds	r2, r2, #1
 8002efa:	428a      	cmp	r2, r1
 8002efc:	edd7 0a00 	vldr	s1, [r7]
 8002f00:	ee70 0a80 	vadd.f32	s1, s1, s0
 8002f04:	edc6 0a00 	vstr	s1, [r6]
 8002f08:	da26      	bge.n	8002f58 <func_lrn_channel_f32+0xbc>
 8002f0a:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 8002f0e:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8002f12:	1c52      	adds	r2, r2, #1
 8002f14:	428a      	cmp	r2, r1
 8002f16:	ed9a 1a00 	vldr	s2, [sl]
 8002f1a:	ee31 1a00 	vadd.f32	s2, s2, s0
 8002f1e:	ed87 1a00 	vstr	s2, [r7]
 8002f22:	da19      	bge.n	8002f58 <func_lrn_channel_f32+0xbc>
 8002f24:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8002f28:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 8002f2c:	1c52      	adds	r2, r2, #1
 8002f2e:	428a      	cmp	r2, r1
 8002f30:	edd6 0a00 	vldr	s1, [r6]
 8002f34:	ee70 0a80 	vadd.f32	s1, s1, s0
 8002f38:	edca 0a00 	vstr	s1, [sl]
 8002f3c:	da0c      	bge.n	8002f58 <func_lrn_channel_f32+0xbc>
 8002f3e:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8002f42:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8002f46:	1c52      	adds	r2, r2, #1
 8002f48:	428a      	cmp	r2, r1
 8002f4a:	ed97 1a00 	vldr	s2, [r7]
 8002f4e:	ee31 1a00 	vadd.f32	s2, s2, s0
 8002f52:	ed86 1a00 	vstr	s2, [r6]
 8002f56:	dbcb      	blt.n	8002ef0 <func_lrn_channel_f32+0x54>
 8002f58:	1c5b      	adds	r3, r3, #1
 8002f5a:	1e40      	subs	r0, r0, #1
 8002f5c:	f109 0904 	add.w	r9, r9, #4
 8002f60:	f10e 0e01 	add.w	lr, lr, #1
 8002f64:	d1b6      	bne.n	8002ed4 <func_lrn_channel_f32+0x38>
 8002f66:	4545      	cmp	r5, r8
 8002f68:	f080 8014 	bcs.w	8002f94 <func_lrn_channel_f32+0xf8>
 8002f6c:	ed94 1a00 	vldr	s2, [r4]
 8002f70:	eeb0 0a68 	vmov.f32	s0, s17
 8002f74:	eef1 0a48 	vneg.f32	s1, s16
 8002f78:	ee09 0a01 	vmla.f32	s0, s18, s2
 8002f7c:	f006 fc1a 	bl	80097b4 <powf>
 8002f80:	edd5 0a00 	vldr	s1, [r5]
 8002f84:	1d2d      	adds	r5, r5, #4
 8002f86:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002f8a:	edc4 0a00 	vstr	s1, [r4]
 8002f8e:	1d24      	adds	r4, r4, #4
 8002f90:	4545      	cmp	r5, r8
 8002f92:	d3eb      	bcc.n	8002f6c <func_lrn_channel_f32+0xd0>
 8002f94:	ecbd 8b04 	vpop	{d8-d9}
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f9c <func_norm_array_f32>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	b081      	sub	sp, #4
 8002fa2:	4614      	mov	r4, r2
 8002fa4:	fb03 f804 	mul.w	r8, r3, r4
 8002fa8:	ed2d 8b04 	vpush	{d8-d9}
 8002fac:	b084      	sub	sp, #16
 8002fae:	eeb0 8a40 	vmov.f32	s16, s0
 8002fb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fb4:	eef0 8a60 	vmov.f32	s17, s1
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d064      	beq.n	8003086 <func_norm_array_f32+0xea>
 8002fbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002fc0:	9102      	str	r1, [sp, #8]
 8002fc2:	ee80 9a08 	vdiv.f32	s18, s0, s16
 8002fc6:	9001      	str	r0, [sp, #4]
 8002fc8:	9200      	str	r2, [sp, #0]
 8002fca:	2600      	movs	r6, #0
 8002fcc:	2c00      	cmp	r4, #0
 8002fce:	d04e      	beq.n	800306e <func_norm_array_f32+0xd2>
 8002fd0:	9d02      	ldr	r5, [sp, #8]
 8002fd2:	9f01      	ldr	r7, [sp, #4]
 8002fd4:	46a9      	mov	r9, r5
 8002fd6:	46cb      	mov	fp, r9
 8002fd8:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8002fdc:	9703      	str	r7, [sp, #12]
 8002fde:	eddf 9a63 	vldr	s19, [pc, #396]	; 800316c <.text_5>
 8002fe2:	45d3      	cmp	fp, sl
 8002fe4:	f080 800c 	bcs.w	8003000 <func_norm_array_f32+0x64>
 8002fe8:	eef0 0a48 	vmov.f32	s1, s16
 8002fec:	ed99 0a00 	vldr	s0, [r9]
 8002ff0:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8002ff4:	f006 fbde 	bl	80097b4 <powf>
 8002ff8:	ee79 9a80 	vadd.f32	s19, s19, s0
 8002ffc:	45d1      	cmp	r9, sl
 8002ffe:	d3f3      	bcc.n	8002fe8 <func_norm_array_f32+0x4c>
 8003000:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8003170 <.text_6>
 8003004:	ee39 1a81 	vadd.f32	s2, s19, s2
 8003008:	eef0 0a49 	vmov.f32	s1, s18
 800300c:	ee88 0a81 	vdiv.f32	s0, s17, s2
 8003010:	f006 fbd0 	bl	80097b4 <powf>
 8003014:	45d3      	cmp	fp, sl
 8003016:	4628      	mov	r0, r5
 8003018:	d224      	bcs.n	8003064 <func_norm_array_f32+0xc8>
 800301a:	9903      	ldr	r1, [sp, #12]
 800301c:	edd0 0a00 	vldr	s1, [r0]
 8003020:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003024:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003028:	edc1 0a00 	vstr	s1, [r1]
 800302c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003030:	4550      	cmp	r0, sl
 8003032:	d217      	bcs.n	8003064 <func_norm_array_f32+0xc8>
 8003034:	ed90 1a00 	vldr	s2, [r0]
 8003038:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800303c:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003040:	ed81 1a00 	vstr	s2, [r1]
 8003044:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003048:	4550      	cmp	r0, sl
 800304a:	d20b      	bcs.n	8003064 <func_norm_array_f32+0xc8>
 800304c:	edd0 0a00 	vldr	s1, [r0]
 8003050:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003054:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003058:	edc1 0a00 	vstr	s1, [r1]
 800305c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003060:	4550      	cmp	r0, sl
 8003062:	d3db      	bcc.n	800301c <func_norm_array_f32+0x80>
 8003064:	1c76      	adds	r6, r6, #1
 8003066:	1d3f      	adds	r7, r7, #4
 8003068:	1d2d      	adds	r5, r5, #4
 800306a:	42a6      	cmp	r6, r4
 800306c:	d3b2      	bcc.n	8002fd4 <func_norm_array_f32+0x38>
 800306e:	9801      	ldr	r0, [sp, #4]
 8003070:	9a02      	ldr	r2, [sp, #8]
 8003072:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 8003076:	9101      	str	r1, [sp, #4]
 8003078:	eb02 0388 	add.w	r3, r2, r8, lsl #2
 800307c:	9900      	ldr	r1, [sp, #0]
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	1e49      	subs	r1, r1, #1
 8003082:	9100      	str	r1, [sp, #0]
 8003084:	d1a1      	bne.n	8002fca <func_norm_array_f32+0x2e>
 8003086:	b004      	add	sp, #16
 8003088:	ecbd 8b04 	vpop	{d8-d9}
 800308c:	b001      	add	sp, #4
 800308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003094 <func_norm_l2_fast_array_f32>:
 8003094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003098:	b081      	sub	sp, #4
 800309a:	4616      	mov	r6, r2
 800309c:	460d      	mov	r5, r1
 800309e:	00b7      	lsls	r7, r6, #2
 80030a0:	ed2d 8b02 	vpush	{d8}
 80030a4:	4604      	mov	r4, r0
 80030a6:	eeb0 8a40 	vmov.f32	s16, s0
 80030aa:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 80030ae:	427f      	negs	r7, r7
 80030b0:	4545      	cmp	r5, r8
 80030b2:	d256      	bcs.n	8003162 <func_norm_l2_fast_array_f32+0xce>
 80030b4:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 80030b8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800316c <.text_5>
 80030bc:	454d      	cmp	r5, r9
 80030be:	d21b      	bcs.n	80030f8 <func_norm_l2_fast_array_f32+0x64>
 80030c0:	edd5 0a00 	vldr	s1, [r5]
 80030c4:	1d2d      	adds	r5, r5, #4
 80030c6:	454d      	cmp	r5, r9
 80030c8:	ee00 0aa0 	vmla.f32	s0, s1, s1
 80030cc:	bf3f      	itttt	cc
 80030ce:	edd5 0a00 	vldrcc	s1, [r5]
 80030d2:	ee00 0aa0 	vmlacc.f32	s0, s1, s1
 80030d6:	1d2d      	addcc	r5, r5, #4
 80030d8:	454d      	cmpcc	r5, r9
 80030da:	d20d      	bcs.n	80030f8 <func_norm_l2_fast_array_f32+0x64>
 80030dc:	edd5 0a00 	vldr	s1, [r5]
 80030e0:	1d2d      	adds	r5, r5, #4
 80030e2:	454d      	cmp	r5, r9
 80030e4:	ee00 0aa0 	vmla.f32	s0, s1, s1
 80030e8:	bf3f      	itttt	cc
 80030ea:	edd5 0a00 	vldrcc	s1, [r5]
 80030ee:	ee00 0aa0 	vmlacc.f32	s0, s1, s1
 80030f2:	1d2d      	addcc	r5, r5, #4
 80030f4:	454d      	cmpcc	r5, r9
 80030f6:	d3e3      	bcc.n	80030c0 <func_norm_l2_fast_array_f32+0x2c>
 80030f8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003170 <.text_6>
 80030fc:	19ed      	adds	r5, r5, r7
 80030fe:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003102:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8003106:	f000 f9b7 	bl	8003478 <ai_math_sqrt>
 800310a:	454d      	cmp	r5, r9
 800310c:	f4bf afd0 	bcs.w	80030b0 <func_norm_l2_fast_array_f32+0x1c>
 8003110:	ed95 1a00 	vldr	s2, [r5]
 8003114:	1d2d      	adds	r5, r5, #4
 8003116:	ee21 1a00 	vmul.f32	s2, s2, s0
 800311a:	ed84 1a00 	vstr	s2, [r4]
 800311e:	1d24      	adds	r4, r4, #4
 8003120:	454d      	cmp	r5, r9
 8003122:	d2c5      	bcs.n	80030b0 <func_norm_l2_fast_array_f32+0x1c>
 8003124:	edd5 0a00 	vldr	s1, [r5]
 8003128:	1d2d      	adds	r5, r5, #4
 800312a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800312e:	edc4 0a00 	vstr	s1, [r4]
 8003132:	1d24      	adds	r4, r4, #4
 8003134:	454d      	cmp	r5, r9
 8003136:	d2bb      	bcs.n	80030b0 <func_norm_l2_fast_array_f32+0x1c>
 8003138:	ed95 1a00 	vldr	s2, [r5]
 800313c:	1d2d      	adds	r5, r5, #4
 800313e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003142:	ed84 1a00 	vstr	s2, [r4]
 8003146:	1d24      	adds	r4, r4, #4
 8003148:	454d      	cmp	r5, r9
 800314a:	d2b1      	bcs.n	80030b0 <func_norm_l2_fast_array_f32+0x1c>
 800314c:	edd5 0a00 	vldr	s1, [r5]
 8003150:	1d2d      	adds	r5, r5, #4
 8003152:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003156:	edc4 0a00 	vstr	s1, [r4]
 800315a:	1d24      	adds	r4, r4, #4
 800315c:	454d      	cmp	r5, r9
 800315e:	d3d7      	bcc.n	8003110 <func_norm_l2_fast_array_f32+0x7c>
 8003160:	e7a6      	b.n	80030b0 <func_norm_l2_fast_array_f32+0x1c>
 8003162:	ecbd 8b02 	vpop	{d8}
 8003166:	b001      	add	sp, #4
 8003168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800316c <.text_5>:
 800316c:	00000000 	.word	0x00000000

08003170 <.text_6>:
 8003170:	34000000 	.word	0x34000000

08003174 <func_lrn_array_f32>:
 8003174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003178:	460d      	mov	r5, r1
 800317a:	4604      	mov	r4, r0
 800317c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8003180:	461e      	mov	r6, r3
 8003182:	ed2d 8b04 	vpush	{d8-d9}
 8003186:	eeb0 8a40 	vmov.f32	s16, s0
 800318a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800318c:	4545      	cmp	r5, r8
 800318e:	eef0 8a60 	vmov.f32	s17, s1
 8003192:	eeb0 9a41 	vmov.f32	s18, s2
 8003196:	d211      	bcs.n	80031bc <func_lrn_array_f32+0x48>
 8003198:	eeb0 1a49 	vmov.f32	s2, s18
 800319c:	4629      	mov	r1, r5
 800319e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80031a2:	4620      	mov	r0, r4
 80031a4:	eef0 0a68 	vmov.f32	s1, s17
 80031a8:	463b      	mov	r3, r7
 80031aa:	eeb0 0a48 	vmov.f32	s0, s16
 80031ae:	4632      	mov	r2, r6
 80031b0:	f7ff fe74 	bl	8002e9c <func_lrn_channel_f32>
 80031b4:	4545      	cmp	r5, r8
 80031b6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80031ba:	d3ed      	bcc.n	8003198 <func_lrn_array_f32+0x24>
 80031bc:	ecbd 8b04 	vpop	{d8-d9}
 80031c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031c4 <forward_bn>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	6940      	ldr	r0, [r0, #20]
 80031ca:	6800      	ldr	r0, [r0, #0]
 80031cc:	6801      	ldr	r1, [r0, #0]
 80031ce:	680d      	ldr	r5, [r1, #0]
 80031d0:	68ac      	ldr	r4, [r5, #8]
 80031d2:	6842      	ldr	r2, [r0, #4]
 80031d4:	6880      	ldr	r0, [r0, #8]
 80031d6:	6869      	ldr	r1, [r5, #4]
 80031d8:	68eb      	ldr	r3, [r5, #12]
 80031da:	6816      	ldr	r6, [r2, #0]
 80031dc:	692a      	ldr	r2, [r5, #16]
 80031de:	6807      	ldr	r7, [r0, #0]
 80031e0:	6840      	ldr	r0, [r0, #4]
 80031e2:	4361      	muls	r1, r4
 80031e4:	682d      	ldr	r5, [r5, #0]
 80031e6:	4359      	muls	r1, r3
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	4351      	muls	r1, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	68ad      	ldr	r5, [r5, #8]
 80031f0:	2800      	cmp	r0, #0
 80031f2:	689e      	ldr	r6, [r3, #8]
 80031f4:	6897      	ldr	r7, [r2, #8]
 80031f6:	d061      	beq.n	80032bc <forward_bn+0xf8>
 80031f8:	6800      	ldr	r0, [r0, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2900      	cmp	r1, #0
 80031fe:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8003202:	d059      	beq.n	80032b8 <forward_bn+0xf4>
 8003204:	ea4f 0901 	mov.w	r9, r1
 8003208:	eb04 0e02 	add.w	lr, r4, r2
 800320c:	4572      	cmp	r2, lr
 800320e:	d250      	bcs.n	80032b2 <forward_bn+0xee>
 8003210:	f014 0303 	ands.w	r3, r4, #3
 8003214:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 8003218:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 800321c:	463a      	mov	r2, r7
 800321e:	46e0      	mov	r8, ip
 8003220:	f000 8012 	beq.w	8003248 <forward_bn+0x84>
 8003224:	ed91 0a00 	vldr	s0, [r1]
 8003228:	1e5b      	subs	r3, r3, #1
 800322a:	edd2 0a00 	vldr	s1, [r2]
 800322e:	1d12      	adds	r2, r2, #4
 8003230:	ed98 1a00 	vldr	s2, [r8]
 8003234:	1d09      	adds	r1, r1, #4
 8003236:	ee00 1a20 	vmla.f32	s2, s0, s1
 800323a:	f108 0804 	add.w	r8, r8, #4
 800323e:	ed80 1a00 	vstr	s2, [r0]
 8003242:	1d00      	adds	r0, r0, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ed      	bne.n	8003224 <forward_bn+0x60>
 8003248:	08a3      	lsrs	r3, r4, #2
 800324a:	d032      	beq.n	80032b2 <forward_bn+0xee>
 800324c:	4682      	mov	sl, r0
 800324e:	4618      	mov	r0, r3
 8003250:	ed91 2a00 	vldr	s4, [r1]
 8003254:	1e40      	subs	r0, r0, #1
 8003256:	ed92 1a00 	vldr	s2, [r2]
 800325a:	ed98 0a00 	vldr	s0, [r8]
 800325e:	ee02 0a01 	vmla.f32	s0, s4, s2
 8003262:	ed8a 0a00 	vstr	s0, [sl]
 8003266:	edd1 2a01 	vldr	s5, [r1, #4]
 800326a:	edd2 1a01 	vldr	s3, [r2, #4]
 800326e:	edd8 0a01 	vldr	s1, [r8, #4]
 8003272:	ee42 0aa1 	vmla.f32	s1, s5, s3
 8003276:	edca 0a01 	vstr	s1, [sl, #4]
 800327a:	ed91 2a02 	vldr	s4, [r1, #8]
 800327e:	ed92 1a02 	vldr	s2, [r2, #8]
 8003282:	ed98 0a02 	vldr	s0, [r8, #8]
 8003286:	ee02 0a01 	vmla.f32	s0, s4, s2
 800328a:	ed8a 0a02 	vstr	s0, [sl, #8]
 800328e:	edd1 1a03 	vldr	s3, [r1, #12]
 8003292:	3110      	adds	r1, #16
 8003294:	edd2 0a03 	vldr	s1, [r2, #12]
 8003298:	3210      	adds	r2, #16
 800329a:	edd8 2a03 	vldr	s5, [r8, #12]
 800329e:	2800      	cmp	r0, #0
 80032a0:	ee41 2aa0 	vmla.f32	s5, s3, s1
 80032a4:	f108 0810 	add.w	r8, r8, #16
 80032a8:	edca 2a03 	vstr	s5, [sl, #12]
 80032ac:	f10a 0a10 	add.w	sl, sl, #16
 80032b0:	d1ce      	bne.n	8003250 <forward_bn+0x8c>
 80032b2:	4672      	mov	r2, lr
 80032b4:	454a      	cmp	r2, r9
 80032b6:	d3a7      	bcc.n	8003208 <forward_bn+0x44>
 80032b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032bc:	2900      	cmp	r1, #0
 80032be:	f04f 0c00 	mov.w	ip, #0
 80032c2:	d0f9      	beq.n	80032b8 <forward_bn+0xf4>
 80032c4:	eb04 020c 	add.w	r2, r4, ip
 80032c8:	4594      	cmp	ip, r2
 80032ca:	4663      	mov	r3, ip
 80032cc:	d24c      	bcs.n	8003368 <forward_bn+0x1a4>
 80032ce:	f014 0003 	ands.w	r0, r4, #3
 80032d2:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
 80032d6:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 80032da:	46b9      	mov	r9, r7
 80032dc:	f000 8011 	beq.w	8003302 <forward_bn+0x13e>
 80032e0:	ed98 0a00 	vldr	s0, [r8]
 80032e4:	1c5b      	adds	r3, r3, #1
 80032e6:	edd9 0a00 	vldr	s1, [r9]
 80032ea:	1e40      	subs	r0, r0, #1
 80032ec:	ee60 0a20 	vmul.f32	s1, s0, s1
 80032f0:	f109 0904 	add.w	r9, r9, #4
 80032f4:	edce 0a00 	vstr	s1, [lr]
 80032f8:	f108 0804 	add.w	r8, r8, #4
 80032fc:	f10e 0e04 	add.w	lr, lr, #4
 8003300:	d1ee      	bne.n	80032e0 <forward_bn+0x11c>
 8003302:	08a0      	lsrs	r0, r4, #2
 8003304:	f000 8030 	beq.w	8003368 <forward_bn+0x1a4>
 8003308:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
 800330c:	eba3 0c0c 	sub.w	ip, r3, ip
 8003310:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8003314:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003318:	ed9e 1a00 	vldr	s2, [lr]
 800331c:	1e40      	subs	r0, r0, #1
 800331e:	ed9c 0a00 	vldr	s0, [ip]
 8003322:	ee21 0a00 	vmul.f32	s0, s2, s0
 8003326:	ed83 0a00 	vstr	s0, [r3]
 800332a:	edde 1a01 	vldr	s3, [lr, #4]
 800332e:	eddc 0a01 	vldr	s1, [ip, #4]
 8003332:	ee61 0aa0 	vmul.f32	s1, s3, s1
 8003336:	edc3 0a01 	vstr	s1, [r3, #4]
 800333a:	ed9e 1a02 	vldr	s2, [lr, #8]
 800333e:	ed9c 0a02 	vldr	s0, [ip, #8]
 8003342:	ee21 0a00 	vmul.f32	s0, s2, s0
 8003346:	ed83 0a02 	vstr	s0, [r3, #8]
 800334a:	edde 0a03 	vldr	s1, [lr, #12]
 800334e:	f10e 0e10 	add.w	lr, lr, #16
 8003352:	eddc 1a03 	vldr	s3, [ip, #12]
 8003356:	f10c 0c10 	add.w	ip, ip, #16
 800335a:	ee60 0aa1 	vmul.f32	s1, s1, s3
 800335e:	edc3 0a03 	vstr	s1, [r3, #12]
 8003362:	3310      	adds	r3, #16
 8003364:	2800      	cmp	r0, #0
 8003366:	d1d7      	bne.n	8003318 <forward_bn+0x154>
 8003368:	4694      	mov	ip, r2
 800336a:	458c      	cmp	ip, r1
 800336c:	d3aa      	bcc.n	80032c4 <forward_bn+0x100>
 800336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003372 <forward_lrn>:
 8003372:	b570      	push	{r4, r5, r6, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	6941      	ldr	r1, [r0, #20]
 8003378:	680c      	ldr	r4, [r1, #0]
 800337a:	6981      	ldr	r1, [r0, #24]
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	6815      	ldr	r5, [r2, #0]
 8003380:	0849      	lsrs	r1, r1, #1
 8003382:	68aa      	ldr	r2, [r5, #8]
 8003384:	9100      	str	r1, [sp, #0]
 8003386:	686e      	ldr	r6, [r5, #4]
 8003388:	6864      	ldr	r4, [r4, #4]
 800338a:	68e9      	ldr	r1, [r5, #12]
 800338c:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 8003390:	4613      	mov	r3, r2
 8003392:	edd0 0a08 	vldr	s1, [r0, #32]
 8003396:	4372      	muls	r2, r6
 8003398:	ed90 0a07 	vldr	s0, [r0, #28]
 800339c:	6826      	ldr	r6, [r4, #0]
 800339e:	6928      	ldr	r0, [r5, #16]
 80033a0:	682d      	ldr	r5, [r5, #0]
 80033a2:	434a      	muls	r2, r1
 80033a4:	68a9      	ldr	r1, [r5, #8]
 80033a6:	6835      	ldr	r5, [r6, #0]
 80033a8:	4342      	muls	r2, r0
 80033aa:	68a8      	ldr	r0, [r5, #8]
 80033ac:	f7ff fee2 	bl	8003174 <func_lrn_array_f32>
 80033b0:	b002      	add	sp, #8
 80033b2:	bd70      	pop	{r4, r5, r6, pc}

080033b4 <forward_norm>:
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b081      	sub	sp, #4
 80033b8:	6941      	ldr	r1, [r0, #20]
 80033ba:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80033be:	6809      	ldr	r1, [r1, #0]
 80033c0:	680a      	ldr	r2, [r1, #0]
 80033c2:	6817      	ldr	r7, [r2, #0]
 80033c4:	684b      	ldr	r3, [r1, #4]
 80033c6:	7e01      	ldrb	r1, [r0, #24]
 80033c8:	f8d3 c000 	ldr.w	ip, [r3]
 80033cc:	1d3a      	adds	r2, r7, #4
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	697c      	ldr	r4, [r7, #20]
 80033d4:	687d      	ldr	r5, [r7, #4]
 80033d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80033da:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80033de:	68fe      	ldr	r6, [r7, #12]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	fb91 f4f4 	sdiv	r4, r1, r4
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	434d      	muls	r5, r1
 80033ea:	f890 1020 	ldrb.w	r1, [r0, #32]
 80033ee:	4375      	muls	r5, r6
 80033f0:	435d      	muls	r5, r3
 80033f2:	fb04 f302 	mul.w	r3, r4, r2
 80033f6:	2900      	cmp	r1, #0
 80033f8:	bf1a      	itte	ne
 80033fa:	ee00 2a10 	vmovne	s0, r2
 80033fe:	eef8 0a40 	vcvtne.f32.u32	s1, s0
 8003402:	eef7 0a00 	vmoveq.f32	s1, #112	; 0x3f800000  1.0
 8003406:	ed90 0a07 	vldr	s0, [r0, #28]
 800340a:	eeb4 0a41 	vcmp.f32	s0, s2
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	fbb5 f3f3 	udiv	r3, r5, r3
 8003416:	bf08      	it	eq
 8003418:	2c01      	cmpeq	r4, #1
 800341a:	d10b      	bne.n	8003434 <forward_norm+0x80>
 800341c:	462b      	mov	r3, r5
 800341e:	683c      	ldr	r4, [r7, #0]
 8003420:	f8dc 5000 	ldr.w	r5, [ip]
 8003424:	eeb0 0a60 	vmov.f32	s0, s1
 8003428:	68a1      	ldr	r1, [r4, #8]
 800342a:	68a8      	ldr	r0, [r5, #8]
 800342c:	b001      	add	sp, #4
 800342e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003432:	e62f      	b.n	8003094 <func_norm_l2_fast_array_f32>
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	6839      	ldr	r1, [r7, #0]
 8003438:	f8dc 0000 	ldr.w	r0, [ip]
 800343c:	4613      	mov	r3, r2
 800343e:	6889      	ldr	r1, [r1, #8]
 8003440:	4622      	mov	r2, r4
 8003442:	6880      	ldr	r0, [r0, #8]
 8003444:	f7ff fdaa 	bl	8002f9c <func_norm_array_f32>
 8003448:	b001      	add	sp, #4
 800344a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800344c <ai_math_dot_array>:
 800344c:	b530      	push	{r4, r5, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	b081      	sub	sp, #4
 8003456:	461a      	mov	r2, r3
 8003458:	2500      	movs	r5, #0
 800345a:	9500      	str	r5, [sp, #0]
 800345c:	466b      	mov	r3, sp
 800345e:	f001 f85b 	bl	8004518 <arm_dot_prod_f32>
 8003462:	ed94 0a00 	vldr	s0, [r4]
 8003466:	eddd 0a00 	vldr	s1, [sp]
 800346a:	ee70 0a20 	vadd.f32	s1, s0, s1
 800346e:	edc4 0a00 	vstr	s1, [r4]
 8003472:	b001      	add	sp, #4
 8003474:	bd30      	pop	{r4, r5, pc}
	...

08003478 <ai_math_sqrt>:
 8003478:	eef0 0a40 	vmov.f32	s1, s0
 800347c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003528 <.text_12>
 8003488:	db01      	blt.n	800348e <ai_math_sqrt+0x16>
 800348a:	eeb1 0ae0 	vsqrt.f32	s0, s1
 800348e:	4770      	bx	lr

08003490 <ai_math_exp>:
 8003490:	f006 b916 	b.w	80096c0 <expf>

08003494 <ai_math_pow>:
 8003494:	f006 b98e 	b.w	80097b4 <powf>

08003498 <ai_math_tanh>:
 8003498:	f006 b8c0 	b.w	800961c <tanhf>

0800349c <ai_math_relu>:
 800349c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	bfd8      	it	le
 80034a6:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 8003528 <.text_12>
 80034aa:	4770      	bx	lr

080034ac <ai_math_prelu>:
 80034ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	bfd8      	it	le
 80034b6:	ee20 0a20 	vmulle.f32	s0, s0, s1
 80034ba:	4770      	bx	lr

080034bc <ai_math_sigmoid>:
 80034bc:	b500      	push	{lr}
 80034be:	b081      	sub	sp, #4
 80034c0:	eeb1 0a40 	vneg.f32	s0, s0
 80034c4:	f006 f8fc 	bl	80096c0 <expf>
 80034c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80034cc:	b001      	add	sp, #4
 80034ce:	ee30 0a20 	vadd.f32	s0, s0, s1
 80034d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80034d6:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80034da:	bd00      	pop	{pc}

080034dc <ai_math_hard_sigmoid>:
 80034dc:	eef0 0a40 	vmov.f32	s1, s0
 80034e0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800352c <.text_13>
 80034e4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80034e8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80034ec:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003530 <.text_14>
 80034f0:	eeb4 0a60 	vcmp.f32	s0, s1
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	da07      	bge.n	800350a <ai_math_hard_sigmoid+0x2e>
 80034fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	d504      	bpl.n	800350e <ai_math_hard_sigmoid+0x32>
 8003504:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003528 <.text_12>
 8003508:	4770      	bx	lr
 800350a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800350e:	4770      	bx	lr

08003510 <ai_math_sign>:
 8003510:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003518:	bfcc      	ite	gt
 800351a:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003534 <.text_15>
 800351e:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003538 <.text_16>
 8003522:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003526:	4770      	bx	lr

08003528 <.text_12>:
 8003528:	00000000 	.word	0x00000000

0800352c <.text_13>:
 800352c:	3e4ccccd 	.word	0x3e4ccccd

08003530 <.text_14>:
 8003530:	3f800001 	.word	0x3f800001

08003534 <.text_15>:
 8003534:	00000001 	.word	0x00000001

08003538 <.text_16>:
 8003538:	ffffffff 	.word	0xffffffff

0800353c <__aeabi_memset>:
 800353c:	b470      	push	{r4, r5, r6}
 800353e:	0784      	lsls	r4, r0, #30
 8003540:	d046      	beq.n	80035d0 <__aeabi_memset+0x94>
 8003542:	1e4c      	subs	r4, r1, #1
 8003544:	2900      	cmp	r1, #0
 8003546:	d041      	beq.n	80035cc <__aeabi_memset+0x90>
 8003548:	b2d5      	uxtb	r5, r2
 800354a:	4603      	mov	r3, r0
 800354c:	e002      	b.n	8003554 <__aeabi_memset+0x18>
 800354e:	1e61      	subs	r1, r4, #1
 8003550:	b3e4      	cbz	r4, 80035cc <__aeabi_memset+0x90>
 8003552:	460c      	mov	r4, r1
 8003554:	f803 5b01 	strb.w	r5, [r3], #1
 8003558:	0799      	lsls	r1, r3, #30
 800355a:	d1f8      	bne.n	800354e <__aeabi_memset+0x12>
 800355c:	2c03      	cmp	r4, #3
 800355e:	d92e      	bls.n	80035be <__aeabi_memset+0x82>
 8003560:	b2d5      	uxtb	r5, r2
 8003562:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003566:	2c0f      	cmp	r4, #15
 8003568:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800356c:	d919      	bls.n	80035a2 <__aeabi_memset+0x66>
 800356e:	4626      	mov	r6, r4
 8003570:	f103 0110 	add.w	r1, r3, #16
 8003574:	3e10      	subs	r6, #16
 8003576:	2e0f      	cmp	r6, #15
 8003578:	f841 5c10 	str.w	r5, [r1, #-16]
 800357c:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003580:	f841 5c08 	str.w	r5, [r1, #-8]
 8003584:	f841 5c04 	str.w	r5, [r1, #-4]
 8003588:	f101 0110 	add.w	r1, r1, #16
 800358c:	d8f2      	bhi.n	8003574 <__aeabi_memset+0x38>
 800358e:	f1a4 0110 	sub.w	r1, r4, #16
 8003592:	f021 010f 	bic.w	r1, r1, #15
 8003596:	f004 040f 	and.w	r4, r4, #15
 800359a:	3110      	adds	r1, #16
 800359c:	2c03      	cmp	r4, #3
 800359e:	440b      	add	r3, r1
 80035a0:	d90d      	bls.n	80035be <__aeabi_memset+0x82>
 80035a2:	461e      	mov	r6, r3
 80035a4:	4621      	mov	r1, r4
 80035a6:	3904      	subs	r1, #4
 80035a8:	2903      	cmp	r1, #3
 80035aa:	f846 5b04 	str.w	r5, [r6], #4
 80035ae:	d8fa      	bhi.n	80035a6 <__aeabi_memset+0x6a>
 80035b0:	1f21      	subs	r1, r4, #4
 80035b2:	f021 0103 	bic.w	r1, r1, #3
 80035b6:	3104      	adds	r1, #4
 80035b8:	440b      	add	r3, r1
 80035ba:	f004 0403 	and.w	r4, r4, #3
 80035be:	b12c      	cbz	r4, 80035cc <__aeabi_memset+0x90>
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	441c      	add	r4, r3
 80035c4:	f803 2b01 	strb.w	r2, [r3], #1
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d1fb      	bne.n	80035c4 <__aeabi_memset+0x88>
 80035cc:	bc70      	pop	{r4, r5, r6}
 80035ce:	4770      	bx	lr
 80035d0:	460c      	mov	r4, r1
 80035d2:	4603      	mov	r3, r0
 80035d4:	e7c2      	b.n	800355c <__aeabi_memset+0x20>

080035d6 <strlen>:
 80035d6:	4603      	mov	r3, r0
 80035d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035dc:	2a00      	cmp	r2, #0
 80035de:	d1fb      	bne.n	80035d8 <strlen+0x2>
 80035e0:	1a18      	subs	r0, r3, r0
 80035e2:	3801      	subs	r0, #1
 80035e4:	4770      	bx	lr
	...

080035f0 <memchr>:
 80035f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80035f4:	2a10      	cmp	r2, #16
 80035f6:	db2b      	blt.n	8003650 <memchr+0x60>
 80035f8:	f010 0f07 	tst.w	r0, #7
 80035fc:	d008      	beq.n	8003610 <memchr+0x20>
 80035fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003602:	3a01      	subs	r2, #1
 8003604:	428b      	cmp	r3, r1
 8003606:	d02d      	beq.n	8003664 <memchr+0x74>
 8003608:	f010 0f07 	tst.w	r0, #7
 800360c:	b342      	cbz	r2, 8003660 <memchr+0x70>
 800360e:	d1f6      	bne.n	80035fe <memchr+0xe>
 8003610:	b4f0      	push	{r4, r5, r6, r7}
 8003612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003616:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800361a:	f022 0407 	bic.w	r4, r2, #7
 800361e:	f07f 0700 	mvns.w	r7, #0
 8003622:	2300      	movs	r3, #0
 8003624:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003628:	3c08      	subs	r4, #8
 800362a:	ea85 0501 	eor.w	r5, r5, r1
 800362e:	ea86 0601 	eor.w	r6, r6, r1
 8003632:	fa85 f547 	uadd8	r5, r5, r7
 8003636:	faa3 f587 	sel	r5, r3, r7
 800363a:	fa86 f647 	uadd8	r6, r6, r7
 800363e:	faa5 f687 	sel	r6, r5, r7
 8003642:	b98e      	cbnz	r6, 8003668 <memchr+0x78>
 8003644:	d1ee      	bne.n	8003624 <memchr+0x34>
 8003646:	bcf0      	pop	{r4, r5, r6, r7}
 8003648:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800364c:	f002 0207 	and.w	r2, r2, #7
 8003650:	b132      	cbz	r2, 8003660 <memchr+0x70>
 8003652:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003656:	3a01      	subs	r2, #1
 8003658:	ea83 0301 	eor.w	r3, r3, r1
 800365c:	b113      	cbz	r3, 8003664 <memchr+0x74>
 800365e:	d1f8      	bne.n	8003652 <memchr+0x62>
 8003660:	2000      	movs	r0, #0
 8003662:	4770      	bx	lr
 8003664:	3801      	subs	r0, #1
 8003666:	4770      	bx	lr
 8003668:	2d00      	cmp	r5, #0
 800366a:	bf06      	itte	eq
 800366c:	4635      	moveq	r5, r6
 800366e:	3803      	subeq	r0, #3
 8003670:	3807      	subne	r0, #7
 8003672:	f015 0f01 	tst.w	r5, #1
 8003676:	d107      	bne.n	8003688 <memchr+0x98>
 8003678:	3001      	adds	r0, #1
 800367a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800367e:	bf02      	ittt	eq
 8003680:	3001      	addeq	r0, #1
 8003682:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003686:	3001      	addeq	r0, #1
 8003688:	bcf0      	pop	{r4, r5, r6, r7}
 800368a:	3801      	subs	r0, #1
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <__aeabi_llsl>:
 8003690:	4091      	lsls	r1, r2
 8003692:	1c03      	adds	r3, r0, #0
 8003694:	4090      	lsls	r0, r2
 8003696:	469c      	mov	ip, r3
 8003698:	3a20      	subs	r2, #32
 800369a:	4093      	lsls	r3, r2
 800369c:	4319      	orrs	r1, r3
 800369e:	4252      	negs	r2, r2
 80036a0:	4663      	mov	r3, ip
 80036a2:	40d3      	lsrs	r3, r2
 80036a4:	4319      	orrs	r1, r3
 80036a6:	4770      	bx	lr

080036a8 <__aeabi_drsub>:
 80036a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80036ac:	e002      	b.n	80036b4 <__adddf3>
 80036ae:	bf00      	nop

080036b0 <__aeabi_dsub>:
 80036b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080036b4 <__adddf3>:
 80036b4:	b530      	push	{r4, r5, lr}
 80036b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80036ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80036be:	ea94 0f05 	teq	r4, r5
 80036c2:	bf08      	it	eq
 80036c4:	ea90 0f02 	teqeq	r0, r2
 80036c8:	bf1f      	itttt	ne
 80036ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80036ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80036d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80036d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80036da:	f000 80e2 	beq.w	80038a2 <__adddf3+0x1ee>
 80036de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80036e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80036e6:	bfb8      	it	lt
 80036e8:	426d      	neglt	r5, r5
 80036ea:	dd0c      	ble.n	8003706 <__adddf3+0x52>
 80036ec:	442c      	add	r4, r5
 80036ee:	ea80 0202 	eor.w	r2, r0, r2
 80036f2:	ea81 0303 	eor.w	r3, r1, r3
 80036f6:	ea82 0000 	eor.w	r0, r2, r0
 80036fa:	ea83 0101 	eor.w	r1, r3, r1
 80036fe:	ea80 0202 	eor.w	r2, r0, r2
 8003702:	ea81 0303 	eor.w	r3, r1, r3
 8003706:	2d36      	cmp	r5, #54	; 0x36
 8003708:	bf88      	it	hi
 800370a:	bd30      	pophi	{r4, r5, pc}
 800370c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003710:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003714:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003718:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800371c:	d002      	beq.n	8003724 <__adddf3+0x70>
 800371e:	4240      	negs	r0, r0
 8003720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003724:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003728:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800372c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003730:	d002      	beq.n	8003738 <__adddf3+0x84>
 8003732:	4252      	negs	r2, r2
 8003734:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003738:	ea94 0f05 	teq	r4, r5
 800373c:	f000 80a7 	beq.w	800388e <__adddf3+0x1da>
 8003740:	f1a4 0401 	sub.w	r4, r4, #1
 8003744:	f1d5 0e20 	rsbs	lr, r5, #32
 8003748:	db0d      	blt.n	8003766 <__adddf3+0xb2>
 800374a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800374e:	fa22 f205 	lsr.w	r2, r2, r5
 8003752:	1880      	adds	r0, r0, r2
 8003754:	f141 0100 	adc.w	r1, r1, #0
 8003758:	fa03 f20e 	lsl.w	r2, r3, lr
 800375c:	1880      	adds	r0, r0, r2
 800375e:	fa43 f305 	asr.w	r3, r3, r5
 8003762:	4159      	adcs	r1, r3
 8003764:	e00e      	b.n	8003784 <__adddf3+0xd0>
 8003766:	f1a5 0520 	sub.w	r5, r5, #32
 800376a:	f10e 0e20 	add.w	lr, lr, #32
 800376e:	2a01      	cmp	r2, #1
 8003770:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003774:	bf28      	it	cs
 8003776:	f04c 0c02 	orrcs.w	ip, ip, #2
 800377a:	fa43 f305 	asr.w	r3, r3, r5
 800377e:	18c0      	adds	r0, r0, r3
 8003780:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003788:	d507      	bpl.n	800379a <__adddf3+0xe6>
 800378a:	f04f 0e00 	mov.w	lr, #0
 800378e:	f1dc 0c00 	rsbs	ip, ip, #0
 8003792:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003796:	eb6e 0101 	sbc.w	r1, lr, r1
 800379a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800379e:	d31b      	bcc.n	80037d8 <__adddf3+0x124>
 80037a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80037a4:	d30c      	bcc.n	80037c0 <__adddf3+0x10c>
 80037a6:	0849      	lsrs	r1, r1, #1
 80037a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80037ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80037b0:	f104 0401 	add.w	r4, r4, #1
 80037b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80037b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80037bc:	f080 809a 	bcs.w	80038f4 <__adddf3+0x240>
 80037c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80037c4:	bf08      	it	eq
 80037c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80037ca:	f150 0000 	adcs.w	r0, r0, #0
 80037ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80037d2:	ea41 0105 	orr.w	r1, r1, r5
 80037d6:	bd30      	pop	{r4, r5, pc}
 80037d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80037dc:	4140      	adcs	r0, r0
 80037de:	eb41 0101 	adc.w	r1, r1, r1
 80037e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80037e6:	f1a4 0401 	sub.w	r4, r4, #1
 80037ea:	d1e9      	bne.n	80037c0 <__adddf3+0x10c>
 80037ec:	f091 0f00 	teq	r1, #0
 80037f0:	bf04      	itt	eq
 80037f2:	4601      	moveq	r1, r0
 80037f4:	2000      	moveq	r0, #0
 80037f6:	fab1 f381 	clz	r3, r1
 80037fa:	bf08      	it	eq
 80037fc:	3320      	addeq	r3, #32
 80037fe:	f1a3 030b 	sub.w	r3, r3, #11
 8003802:	f1b3 0220 	subs.w	r2, r3, #32
 8003806:	da0c      	bge.n	8003822 <__adddf3+0x16e>
 8003808:	320c      	adds	r2, #12
 800380a:	dd08      	ble.n	800381e <__adddf3+0x16a>
 800380c:	f102 0c14 	add.w	ip, r2, #20
 8003810:	f1c2 020c 	rsb	r2, r2, #12
 8003814:	fa01 f00c 	lsl.w	r0, r1, ip
 8003818:	fa21 f102 	lsr.w	r1, r1, r2
 800381c:	e00c      	b.n	8003838 <__adddf3+0x184>
 800381e:	f102 0214 	add.w	r2, r2, #20
 8003822:	bfd8      	it	le
 8003824:	f1c2 0c20 	rsble	ip, r2, #32
 8003828:	fa01 f102 	lsl.w	r1, r1, r2
 800382c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003830:	bfdc      	itt	le
 8003832:	ea41 010c 	orrle.w	r1, r1, ip
 8003836:	4090      	lslle	r0, r2
 8003838:	1ae4      	subs	r4, r4, r3
 800383a:	bfa2      	ittt	ge
 800383c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003840:	4329      	orrge	r1, r5
 8003842:	bd30      	popge	{r4, r5, pc}
 8003844:	ea6f 0404 	mvn.w	r4, r4
 8003848:	3c1f      	subs	r4, #31
 800384a:	da1c      	bge.n	8003886 <__adddf3+0x1d2>
 800384c:	340c      	adds	r4, #12
 800384e:	dc0e      	bgt.n	800386e <__adddf3+0x1ba>
 8003850:	f104 0414 	add.w	r4, r4, #20
 8003854:	f1c4 0220 	rsb	r2, r4, #32
 8003858:	fa20 f004 	lsr.w	r0, r0, r4
 800385c:	fa01 f302 	lsl.w	r3, r1, r2
 8003860:	ea40 0003 	orr.w	r0, r0, r3
 8003864:	fa21 f304 	lsr.w	r3, r1, r4
 8003868:	ea45 0103 	orr.w	r1, r5, r3
 800386c:	bd30      	pop	{r4, r5, pc}
 800386e:	f1c4 040c 	rsb	r4, r4, #12
 8003872:	f1c4 0220 	rsb	r2, r4, #32
 8003876:	fa20 f002 	lsr.w	r0, r0, r2
 800387a:	fa01 f304 	lsl.w	r3, r1, r4
 800387e:	ea40 0003 	orr.w	r0, r0, r3
 8003882:	4629      	mov	r1, r5
 8003884:	bd30      	pop	{r4, r5, pc}
 8003886:	fa21 f004 	lsr.w	r0, r1, r4
 800388a:	4629      	mov	r1, r5
 800388c:	bd30      	pop	{r4, r5, pc}
 800388e:	f094 0f00 	teq	r4, #0
 8003892:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003896:	bf06      	itte	eq
 8003898:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800389c:	3401      	addeq	r4, #1
 800389e:	3d01      	subne	r5, #1
 80038a0:	e74e      	b.n	8003740 <__adddf3+0x8c>
 80038a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80038a6:	bf18      	it	ne
 80038a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80038ac:	d029      	beq.n	8003902 <__adddf3+0x24e>
 80038ae:	ea94 0f05 	teq	r4, r5
 80038b2:	bf08      	it	eq
 80038b4:	ea90 0f02 	teqeq	r0, r2
 80038b8:	d005      	beq.n	80038c6 <__adddf3+0x212>
 80038ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80038be:	bf04      	itt	eq
 80038c0:	4619      	moveq	r1, r3
 80038c2:	4610      	moveq	r0, r2
 80038c4:	bd30      	pop	{r4, r5, pc}
 80038c6:	ea91 0f03 	teq	r1, r3
 80038ca:	bf1e      	ittt	ne
 80038cc:	2100      	movne	r1, #0
 80038ce:	2000      	movne	r0, #0
 80038d0:	bd30      	popne	{r4, r5, pc}
 80038d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80038d6:	d105      	bne.n	80038e4 <__adddf3+0x230>
 80038d8:	0040      	lsls	r0, r0, #1
 80038da:	4149      	adcs	r1, r1
 80038dc:	bf28      	it	cs
 80038de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80038e2:	bd30      	pop	{r4, r5, pc}
 80038e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80038e8:	bf3c      	itt	cc
 80038ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80038ee:	bd30      	popcc	{r4, r5, pc}
 80038f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80038f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80038f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038fc:	f04f 0000 	mov.w	r0, #0
 8003900:	bd30      	pop	{r4, r5, pc}
 8003902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003906:	bf1a      	itte	ne
 8003908:	4619      	movne	r1, r3
 800390a:	4610      	movne	r0, r2
 800390c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003910:	bf1c      	itt	ne
 8003912:	460b      	movne	r3, r1
 8003914:	4602      	movne	r2, r0
 8003916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800391a:	bf06      	itte	eq
 800391c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003920:	ea91 0f03 	teqeq	r1, r3
 8003924:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003928:	bd30      	pop	{r4, r5, pc}
 800392a:	bf00      	nop

0800392c <__aeabi_ui2d>:
 800392c:	f090 0f00 	teq	r0, #0
 8003930:	bf04      	itt	eq
 8003932:	2100      	moveq	r1, #0
 8003934:	4770      	bxeq	lr
 8003936:	b530      	push	{r4, r5, lr}
 8003938:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800393c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003940:	f04f 0500 	mov.w	r5, #0
 8003944:	f04f 0100 	mov.w	r1, #0
 8003948:	e750      	b.n	80037ec <__adddf3+0x138>
 800394a:	bf00      	nop

0800394c <__aeabi_i2d>:
 800394c:	f090 0f00 	teq	r0, #0
 8003950:	bf04      	itt	eq
 8003952:	2100      	moveq	r1, #0
 8003954:	4770      	bxeq	lr
 8003956:	b530      	push	{r4, r5, lr}
 8003958:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800395c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003960:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003964:	bf48      	it	mi
 8003966:	4240      	negmi	r0, r0
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	e73e      	b.n	80037ec <__adddf3+0x138>
 800396e:	bf00      	nop

08003970 <__aeabi_f2d>:
 8003970:	0042      	lsls	r2, r0, #1
 8003972:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003976:	ea4f 0131 	mov.w	r1, r1, rrx
 800397a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800397e:	bf1f      	itttt	ne
 8003980:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003984:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003988:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800398c:	4770      	bxne	lr
 800398e:	f092 0f00 	teq	r2, #0
 8003992:	bf14      	ite	ne
 8003994:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003998:	4770      	bxeq	lr
 800399a:	b530      	push	{r4, r5, lr}
 800399c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80039a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80039a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80039a8:	e720      	b.n	80037ec <__adddf3+0x138>
 80039aa:	bf00      	nop

080039ac <__aeabi_ul2d>:
 80039ac:	ea50 0201 	orrs.w	r2, r0, r1
 80039b0:	bf08      	it	eq
 80039b2:	4770      	bxeq	lr
 80039b4:	b530      	push	{r4, r5, lr}
 80039b6:	f04f 0500 	mov.w	r5, #0
 80039ba:	e00a      	b.n	80039d2 <__aeabi_l2d+0x16>

080039bc <__aeabi_l2d>:
 80039bc:	ea50 0201 	orrs.w	r2, r0, r1
 80039c0:	bf08      	it	eq
 80039c2:	4770      	bxeq	lr
 80039c4:	b530      	push	{r4, r5, lr}
 80039c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80039ca:	d502      	bpl.n	80039d2 <__aeabi_l2d+0x16>
 80039cc:	4240      	negs	r0, r0
 80039ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80039d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80039d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80039da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80039de:	f43f aedc 	beq.w	800379a <__adddf3+0xe6>
 80039e2:	f04f 0203 	mov.w	r2, #3
 80039e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80039ea:	bf18      	it	ne
 80039ec:	3203      	addne	r2, #3
 80039ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80039f2:	bf18      	it	ne
 80039f4:	3203      	addne	r2, #3
 80039f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80039fa:	f1c2 0320 	rsb	r3, r2, #32
 80039fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8003a02:	fa20 f002 	lsr.w	r0, r0, r2
 8003a06:	fa01 fe03 	lsl.w	lr, r1, r3
 8003a0a:	ea40 000e 	orr.w	r0, r0, lr
 8003a0e:	fa21 f102 	lsr.w	r1, r1, r2
 8003a12:	4414      	add	r4, r2
 8003a14:	e6c1      	b.n	800379a <__adddf3+0xe6>
 8003a16:	bf00      	nop

08003a18 <__aeabi_dmul>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003a26:	bf1d      	ittte	ne
 8003a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003a2c:	ea94 0f0c 	teqne	r4, ip
 8003a30:	ea95 0f0c 	teqne	r5, ip
 8003a34:	f000 f8de 	bleq	8003bf4 <__aeabi_dmul+0x1dc>
 8003a38:	442c      	add	r4, r5
 8003a3a:	ea81 0603 	eor.w	r6, r1, r3
 8003a3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003a42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003a46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003a4a:	bf18      	it	ne
 8003a4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a58:	d038      	beq.n	8003acc <__aeabi_dmul+0xb4>
 8003a5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8003a5e:	f04f 0500 	mov.w	r5, #0
 8003a62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003a66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003a6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003a6e:	f04f 0600 	mov.w	r6, #0
 8003a72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003a76:	f09c 0f00 	teq	ip, #0
 8003a7a:	bf18      	it	ne
 8003a7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8003a80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003a84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003a88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003a8c:	d204      	bcs.n	8003a98 <__aeabi_dmul+0x80>
 8003a8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003a92:	416d      	adcs	r5, r5
 8003a94:	eb46 0606 	adc.w	r6, r6, r6
 8003a98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003a9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003aa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003aa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003aa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003aac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003ab0:	bf88      	it	hi
 8003ab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003ab6:	d81e      	bhi.n	8003af6 <__aeabi_dmul+0xde>
 8003ab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003abc:	bf08      	it	eq
 8003abe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003ac2:	f150 0000 	adcs.w	r0, r0, #0
 8003ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003ad0:	ea46 0101 	orr.w	r1, r6, r1
 8003ad4:	ea40 0002 	orr.w	r0, r0, r2
 8003ad8:	ea81 0103 	eor.w	r1, r1, r3
 8003adc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003ae0:	bfc2      	ittt	gt
 8003ae2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003ae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003aea:	bd70      	popgt	{r4, r5, r6, pc}
 8003aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003af0:	f04f 0e00 	mov.w	lr, #0
 8003af4:	3c01      	subs	r4, #1
 8003af6:	f300 80ab 	bgt.w	8003c50 <__aeabi_dmul+0x238>
 8003afa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003afe:	bfde      	ittt	le
 8003b00:	2000      	movle	r0, #0
 8003b02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003b06:	bd70      	pople	{r4, r5, r6, pc}
 8003b08:	f1c4 0400 	rsb	r4, r4, #0
 8003b0c:	3c20      	subs	r4, #32
 8003b0e:	da35      	bge.n	8003b7c <__aeabi_dmul+0x164>
 8003b10:	340c      	adds	r4, #12
 8003b12:	dc1b      	bgt.n	8003b4c <__aeabi_dmul+0x134>
 8003b14:	f104 0414 	add.w	r4, r4, #20
 8003b18:	f1c4 0520 	rsb	r5, r4, #32
 8003b1c:	fa00 f305 	lsl.w	r3, r0, r5
 8003b20:	fa20 f004 	lsr.w	r0, r0, r4
 8003b24:	fa01 f205 	lsl.w	r2, r1, r5
 8003b28:	ea40 0002 	orr.w	r0, r0, r2
 8003b2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003b38:	fa21 f604 	lsr.w	r6, r1, r4
 8003b3c:	eb42 0106 	adc.w	r1, r2, r6
 8003b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b44:	bf08      	it	eq
 8003b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f1c4 040c 	rsb	r4, r4, #12
 8003b50:	f1c4 0520 	rsb	r5, r4, #32
 8003b54:	fa00 f304 	lsl.w	r3, r0, r4
 8003b58:	fa20 f005 	lsr.w	r0, r0, r5
 8003b5c:	fa01 f204 	lsl.w	r2, r1, r4
 8003b60:	ea40 0002 	orr.w	r0, r0, r2
 8003b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003b6c:	f141 0100 	adc.w	r1, r1, #0
 8003b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b74:	bf08      	it	eq
 8003b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f1c4 0520 	rsb	r5, r4, #32
 8003b80:	fa00 f205 	lsl.w	r2, r0, r5
 8003b84:	ea4e 0e02 	orr.w	lr, lr, r2
 8003b88:	fa20 f304 	lsr.w	r3, r0, r4
 8003b8c:	fa01 f205 	lsl.w	r2, r1, r5
 8003b90:	ea43 0302 	orr.w	r3, r3, r2
 8003b94:	fa21 f004 	lsr.w	r0, r1, r4
 8003b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b9c:	fa21 f204 	lsr.w	r2, r1, r4
 8003ba0:	ea20 0002 	bic.w	r0, r0, r2
 8003ba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003ba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003bac:	bf08      	it	eq
 8003bae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	f094 0f00 	teq	r4, #0
 8003bb8:	d10f      	bne.n	8003bda <__aeabi_dmul+0x1c2>
 8003bba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003bbe:	0040      	lsls	r0, r0, #1
 8003bc0:	eb41 0101 	adc.w	r1, r1, r1
 8003bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003bc8:	bf08      	it	eq
 8003bca:	3c01      	subeq	r4, #1
 8003bcc:	d0f7      	beq.n	8003bbe <__aeabi_dmul+0x1a6>
 8003bce:	ea41 0106 	orr.w	r1, r1, r6
 8003bd2:	f095 0f00 	teq	r5, #0
 8003bd6:	bf18      	it	ne
 8003bd8:	4770      	bxne	lr
 8003bda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003bde:	0052      	lsls	r2, r2, #1
 8003be0:	eb43 0303 	adc.w	r3, r3, r3
 8003be4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003be8:	bf08      	it	eq
 8003bea:	3d01      	subeq	r5, #1
 8003bec:	d0f7      	beq.n	8003bde <__aeabi_dmul+0x1c6>
 8003bee:	ea43 0306 	orr.w	r3, r3, r6
 8003bf2:	4770      	bx	lr
 8003bf4:	ea94 0f0c 	teq	r4, ip
 8003bf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003bfc:	bf18      	it	ne
 8003bfe:	ea95 0f0c 	teqne	r5, ip
 8003c02:	d00c      	beq.n	8003c1e <__aeabi_dmul+0x206>
 8003c04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003c08:	bf18      	it	ne
 8003c0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003c0e:	d1d1      	bne.n	8003bb4 <__aeabi_dmul+0x19c>
 8003c10:	ea81 0103 	eor.w	r1, r1, r3
 8003c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003c22:	bf06      	itte	eq
 8003c24:	4610      	moveq	r0, r2
 8003c26:	4619      	moveq	r1, r3
 8003c28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003c2c:	d019      	beq.n	8003c62 <__aeabi_dmul+0x24a>
 8003c2e:	ea94 0f0c 	teq	r4, ip
 8003c32:	d102      	bne.n	8003c3a <__aeabi_dmul+0x222>
 8003c34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003c38:	d113      	bne.n	8003c62 <__aeabi_dmul+0x24a>
 8003c3a:	ea95 0f0c 	teq	r5, ip
 8003c3e:	d105      	bne.n	8003c4c <__aeabi_dmul+0x234>
 8003c40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003c44:	bf1c      	itt	ne
 8003c46:	4610      	movne	r0, r2
 8003c48:	4619      	movne	r1, r3
 8003c4a:	d10a      	bne.n	8003c62 <__aeabi_dmul+0x24a>
 8003c4c:	ea81 0103 	eor.w	r1, r1, r3
 8003c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003c54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003c58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c5c:	f04f 0000 	mov.w	r0, #0
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003c66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}

08003c6c <__aeabi_ddiv>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003c7a:	bf1d      	ittte	ne
 8003c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003c80:	ea94 0f0c 	teqne	r4, ip
 8003c84:	ea95 0f0c 	teqne	r5, ip
 8003c88:	f000 f8a7 	bleq	8003dda <__aeabi_ddiv+0x16e>
 8003c8c:	eba4 0405 	sub.w	r4, r4, r5
 8003c90:	ea81 0e03 	eor.w	lr, r1, r3
 8003c94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003c9c:	f000 8088 	beq.w	8003db0 <__aeabi_ddiv+0x144>
 8003ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003ca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003cac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003cb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003cb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003cb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003cbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003cc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003cc4:	429d      	cmp	r5, r3
 8003cc6:	bf08      	it	eq
 8003cc8:	4296      	cmpeq	r6, r2
 8003cca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003cce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003cd2:	d202      	bcs.n	8003cda <__aeabi_ddiv+0x6e>
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cda:	1ab6      	subs	r6, r6, r2
 8003cdc:	eb65 0503 	sbc.w	r5, r5, r3
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003ce6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003cea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003cee:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cf6:	bf22      	ittt	cs
 8003cf8:	1ab6      	subcs	r6, r6, r2
 8003cfa:	4675      	movcs	r5, lr
 8003cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	ea4f 0232 	mov.w	r2, r2, rrx
 8003d06:	ebb6 0e02 	subs.w	lr, r6, r2
 8003d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003d0e:	bf22      	ittt	cs
 8003d10:	1ab6      	subcs	r6, r6, r2
 8003d12:	4675      	movcs	r5, lr
 8003d14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003d26:	bf22      	ittt	cs
 8003d28:	1ab6      	subcs	r6, r6, r2
 8003d2a:	4675      	movcs	r5, lr
 8003d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	ea4f 0232 	mov.w	r2, r2, rrx
 8003d36:	ebb6 0e02 	subs.w	lr, r6, r2
 8003d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003d3e:	bf22      	ittt	cs
 8003d40:	1ab6      	subcs	r6, r6, r2
 8003d42:	4675      	movcs	r5, lr
 8003d44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003d48:	ea55 0e06 	orrs.w	lr, r5, r6
 8003d4c:	d018      	beq.n	8003d80 <__aeabi_ddiv+0x114>
 8003d4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003d52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003d56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003d5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003d5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003d62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003d66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003d6a:	d1c0      	bne.n	8003cee <__aeabi_ddiv+0x82>
 8003d6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d70:	d10b      	bne.n	8003d8a <__aeabi_ddiv+0x11e>
 8003d72:	ea41 0100 	orr.w	r1, r1, r0
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003d7e:	e7b6      	b.n	8003cee <__aeabi_ddiv+0x82>
 8003d80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d84:	bf04      	itt	eq
 8003d86:	4301      	orreq	r1, r0
 8003d88:	2000      	moveq	r0, #0
 8003d8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003d8e:	bf88      	it	hi
 8003d90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003d94:	f63f aeaf 	bhi.w	8003af6 <__aeabi_dmul+0xde>
 8003d98:	ebb5 0c03 	subs.w	ip, r5, r3
 8003d9c:	bf04      	itt	eq
 8003d9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003da6:	f150 0000 	adcs.w	r0, r0, #0
 8003daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003db4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003db8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003dbc:	bfc2      	ittt	gt
 8003dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003dc6:	bd70      	popgt	{r4, r5, r6, pc}
 8003dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003dcc:	f04f 0e00 	mov.w	lr, #0
 8003dd0:	3c01      	subs	r4, #1
 8003dd2:	e690      	b.n	8003af6 <__aeabi_dmul+0xde>
 8003dd4:	ea45 0e06 	orr.w	lr, r5, r6
 8003dd8:	e68d      	b.n	8003af6 <__aeabi_dmul+0xde>
 8003dda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003dde:	ea94 0f0c 	teq	r4, ip
 8003de2:	bf08      	it	eq
 8003de4:	ea95 0f0c 	teqeq	r5, ip
 8003de8:	f43f af3b 	beq.w	8003c62 <__aeabi_dmul+0x24a>
 8003dec:	ea94 0f0c 	teq	r4, ip
 8003df0:	d10a      	bne.n	8003e08 <__aeabi_ddiv+0x19c>
 8003df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003df6:	f47f af34 	bne.w	8003c62 <__aeabi_dmul+0x24a>
 8003dfa:	ea95 0f0c 	teq	r5, ip
 8003dfe:	f47f af25 	bne.w	8003c4c <__aeabi_dmul+0x234>
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	e72c      	b.n	8003c62 <__aeabi_dmul+0x24a>
 8003e08:	ea95 0f0c 	teq	r5, ip
 8003e0c:	d106      	bne.n	8003e1c <__aeabi_ddiv+0x1b0>
 8003e0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003e12:	f43f aefd 	beq.w	8003c10 <__aeabi_dmul+0x1f8>
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	e722      	b.n	8003c62 <__aeabi_dmul+0x24a>
 8003e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003e20:	bf18      	it	ne
 8003e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003e26:	f47f aec5 	bne.w	8003bb4 <__aeabi_dmul+0x19c>
 8003e2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003e2e:	f47f af0d 	bne.w	8003c4c <__aeabi_dmul+0x234>
 8003e32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003e36:	f47f aeeb 	bne.w	8003c10 <__aeabi_dmul+0x1f8>
 8003e3a:	e712      	b.n	8003c62 <__aeabi_dmul+0x24a>

08003e3c <__gedf2>:
 8003e3c:	f04f 3cff 	mov.w	ip, #4294967295
 8003e40:	e006      	b.n	8003e50 <__cmpdf2+0x4>
 8003e42:	bf00      	nop

08003e44 <__ledf2>:
 8003e44:	f04f 0c01 	mov.w	ip, #1
 8003e48:	e002      	b.n	8003e50 <__cmpdf2+0x4>
 8003e4a:	bf00      	nop

08003e4c <__cmpdf2>:
 8003e4c:	f04f 0c01 	mov.w	ip, #1
 8003e50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003e5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003e60:	bf18      	it	ne
 8003e62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003e66:	d01b      	beq.n	8003ea0 <__cmpdf2+0x54>
 8003e68:	b001      	add	sp, #4
 8003e6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003e6e:	bf0c      	ite	eq
 8003e70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003e74:	ea91 0f03 	teqne	r1, r3
 8003e78:	bf02      	ittt	eq
 8003e7a:	ea90 0f02 	teqeq	r0, r2
 8003e7e:	2000      	moveq	r0, #0
 8003e80:	4770      	bxeq	lr
 8003e82:	f110 0f00 	cmn.w	r0, #0
 8003e86:	ea91 0f03 	teq	r1, r3
 8003e8a:	bf58      	it	pl
 8003e8c:	4299      	cmppl	r1, r3
 8003e8e:	bf08      	it	eq
 8003e90:	4290      	cmpeq	r0, r2
 8003e92:	bf2c      	ite	cs
 8003e94:	17d8      	asrcs	r0, r3, #31
 8003e96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003e9a:	f040 0001 	orr.w	r0, r0, #1
 8003e9e:	4770      	bx	lr
 8003ea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003ea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003ea8:	d102      	bne.n	8003eb0 <__cmpdf2+0x64>
 8003eaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003eae:	d107      	bne.n	8003ec0 <__cmpdf2+0x74>
 8003eb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003eb8:	d1d6      	bne.n	8003e68 <__cmpdf2+0x1c>
 8003eba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003ebe:	d0d3      	beq.n	8003e68 <__cmpdf2+0x1c>
 8003ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop

08003ec8 <__aeabi_cdrcmple>:
 8003ec8:	4684      	mov	ip, r0
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4662      	mov	r2, ip
 8003ece:	468c      	mov	ip, r1
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4663      	mov	r3, ip
 8003ed4:	e000      	b.n	8003ed8 <__aeabi_cdcmpeq>
 8003ed6:	bf00      	nop

08003ed8 <__aeabi_cdcmpeq>:
 8003ed8:	b501      	push	{r0, lr}
 8003eda:	f7ff ffb7 	bl	8003e4c <__cmpdf2>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	bf48      	it	mi
 8003ee2:	f110 0f00 	cmnmi.w	r0, #0
 8003ee6:	bd01      	pop	{r0, pc}

08003ee8 <__aeabi_dcmpeq>:
 8003ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003eec:	f7ff fff4 	bl	8003ed8 <__aeabi_cdcmpeq>
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2001      	moveq	r0, #1
 8003ef4:	2000      	movne	r0, #0
 8003ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8003efa:	bf00      	nop

08003efc <__aeabi_dcmplt>:
 8003efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f00:	f7ff ffea 	bl	8003ed8 <__aeabi_cdcmpeq>
 8003f04:	bf34      	ite	cc
 8003f06:	2001      	movcc	r0, #1
 8003f08:	2000      	movcs	r0, #0
 8003f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f0e:	bf00      	nop

08003f10 <__aeabi_dcmple>:
 8003f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f14:	f7ff ffe0 	bl	8003ed8 <__aeabi_cdcmpeq>
 8003f18:	bf94      	ite	ls
 8003f1a:	2001      	movls	r0, #1
 8003f1c:	2000      	movhi	r0, #0
 8003f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f22:	bf00      	nop

08003f24 <__aeabi_dcmpge>:
 8003f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f28:	f7ff ffce 	bl	8003ec8 <__aeabi_cdrcmple>
 8003f2c:	bf94      	ite	ls
 8003f2e:	2001      	movls	r0, #1
 8003f30:	2000      	movhi	r0, #0
 8003f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f36:	bf00      	nop

08003f38 <__aeabi_dcmpgt>:
 8003f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f3c:	f7ff ffc4 	bl	8003ec8 <__aeabi_cdrcmple>
 8003f40:	bf34      	ite	cc
 8003f42:	2001      	movcc	r0, #1
 8003f44:	2000      	movcs	r0, #0
 8003f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f4a:	bf00      	nop

08003f4c <__aeabi_d2f>:
 8003f4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003f50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003f54:	bf24      	itt	cs
 8003f56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003f5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003f5e:	d90d      	bls.n	8003f7c <__aeabi_d2f+0x30>
 8003f60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003f64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003f68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003f6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003f70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003f74:	bf08      	it	eq
 8003f76:	f020 0001 	biceq.w	r0, r0, #1
 8003f7a:	4770      	bx	lr
 8003f7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003f80:	d121      	bne.n	8003fc6 <__aeabi_d2f+0x7a>
 8003f82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8003f86:	bfbc      	itt	lt
 8003f88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003f8c:	4770      	bxlt	lr
 8003f8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003f96:	f1c2 0218 	rsb	r2, r2, #24
 8003f9a:	f1c2 0c20 	rsb	ip, r2, #32
 8003f9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8003fa2:	fa20 f002 	lsr.w	r0, r0, r2
 8003fa6:	bf18      	it	ne
 8003fa8:	f040 0001 	orrne.w	r0, r0, #1
 8003fac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003fb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8003fb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8003fb8:	ea40 000c 	orr.w	r0, r0, ip
 8003fbc:	fa23 f302 	lsr.w	r3, r3, r2
 8003fc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fc4:	e7cc      	b.n	8003f60 <__aeabi_d2f+0x14>
 8003fc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003fca:	d107      	bne.n	8003fdc <__aeabi_d2f+0x90>
 8003fcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003fd0:	bf1e      	ittt	ne
 8003fd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8003fd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003fda:	4770      	bxne	lr
 8003fdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003fe0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003fe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop

08003fec <__aeabi_frsub>:
 8003fec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8003ff0:	e002      	b.n	8003ff8 <__addsf3>
 8003ff2:	bf00      	nop

08003ff4 <__aeabi_fsub>:
 8003ff4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08003ff8 <__addsf3>:
 8003ff8:	0042      	lsls	r2, r0, #1
 8003ffa:	bf1f      	itttt	ne
 8003ffc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8004000:	ea92 0f03 	teqne	r2, r3
 8004004:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8004008:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800400c:	d06a      	beq.n	80040e4 <__addsf3+0xec>
 800400e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8004012:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8004016:	bfc1      	itttt	gt
 8004018:	18d2      	addgt	r2, r2, r3
 800401a:	4041      	eorgt	r1, r0
 800401c:	4048      	eorgt	r0, r1
 800401e:	4041      	eorgt	r1, r0
 8004020:	bfb8      	it	lt
 8004022:	425b      	neglt	r3, r3
 8004024:	2b19      	cmp	r3, #25
 8004026:	bf88      	it	hi
 8004028:	4770      	bxhi	lr
 800402a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800402e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004032:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004036:	bf18      	it	ne
 8004038:	4240      	negne	r0, r0
 800403a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800403e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004042:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8004046:	bf18      	it	ne
 8004048:	4249      	negne	r1, r1
 800404a:	ea92 0f03 	teq	r2, r3
 800404e:	d03f      	beq.n	80040d0 <__addsf3+0xd8>
 8004050:	f1a2 0201 	sub.w	r2, r2, #1
 8004054:	fa41 fc03 	asr.w	ip, r1, r3
 8004058:	eb10 000c 	adds.w	r0, r0, ip
 800405c:	f1c3 0320 	rsb	r3, r3, #32
 8004060:	fa01 f103 	lsl.w	r1, r1, r3
 8004064:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8004068:	d502      	bpl.n	8004070 <__addsf3+0x78>
 800406a:	4249      	negs	r1, r1
 800406c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004070:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004074:	d313      	bcc.n	800409e <__addsf3+0xa6>
 8004076:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800407a:	d306      	bcc.n	800408a <__addsf3+0x92>
 800407c:	0840      	lsrs	r0, r0, #1
 800407e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004082:	f102 0201 	add.w	r2, r2, #1
 8004086:	2afe      	cmp	r2, #254	; 0xfe
 8004088:	d251      	bcs.n	800412e <__addsf3+0x136>
 800408a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800408e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004092:	bf08      	it	eq
 8004094:	f020 0001 	biceq.w	r0, r0, #1
 8004098:	ea40 0003 	orr.w	r0, r0, r3
 800409c:	4770      	bx	lr
 800409e:	0049      	lsls	r1, r1, #1
 80040a0:	eb40 0000 	adc.w	r0, r0, r0
 80040a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80040a8:	f1a2 0201 	sub.w	r2, r2, #1
 80040ac:	d1ed      	bne.n	800408a <__addsf3+0x92>
 80040ae:	fab0 fc80 	clz	ip, r0
 80040b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80040b6:	ebb2 020c 	subs.w	r2, r2, ip
 80040ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80040be:	bfaa      	itet	ge
 80040c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80040c4:	4252      	neglt	r2, r2
 80040c6:	4318      	orrge	r0, r3
 80040c8:	bfbc      	itt	lt
 80040ca:	40d0      	lsrlt	r0, r2
 80040cc:	4318      	orrlt	r0, r3
 80040ce:	4770      	bx	lr
 80040d0:	f092 0f00 	teq	r2, #0
 80040d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80040d8:	bf06      	itte	eq
 80040da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80040de:	3201      	addeq	r2, #1
 80040e0:	3b01      	subne	r3, #1
 80040e2:	e7b5      	b.n	8004050 <__addsf3+0x58>
 80040e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80040e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80040ec:	bf18      	it	ne
 80040ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80040f2:	d021      	beq.n	8004138 <__addsf3+0x140>
 80040f4:	ea92 0f03 	teq	r2, r3
 80040f8:	d004      	beq.n	8004104 <__addsf3+0x10c>
 80040fa:	f092 0f00 	teq	r2, #0
 80040fe:	bf08      	it	eq
 8004100:	4608      	moveq	r0, r1
 8004102:	4770      	bx	lr
 8004104:	ea90 0f01 	teq	r0, r1
 8004108:	bf1c      	itt	ne
 800410a:	2000      	movne	r0, #0
 800410c:	4770      	bxne	lr
 800410e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8004112:	d104      	bne.n	800411e <__addsf3+0x126>
 8004114:	0040      	lsls	r0, r0, #1
 8004116:	bf28      	it	cs
 8004118:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800411c:	4770      	bx	lr
 800411e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8004122:	bf3c      	itt	cc
 8004124:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8004128:	4770      	bxcc	lr
 800412a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800412e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8004132:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004136:	4770      	bx	lr
 8004138:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800413c:	bf16      	itet	ne
 800413e:	4608      	movne	r0, r1
 8004140:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8004144:	4601      	movne	r1, r0
 8004146:	0242      	lsls	r2, r0, #9
 8004148:	bf06      	itte	eq
 800414a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800414e:	ea90 0f01 	teqeq	r0, r1
 8004152:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8004156:	4770      	bx	lr

08004158 <__aeabi_ui2f>:
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e004      	b.n	8004168 <__aeabi_i2f+0x8>
 800415e:	bf00      	nop

08004160 <__aeabi_i2f>:
 8004160:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8004164:	bf48      	it	mi
 8004166:	4240      	negmi	r0, r0
 8004168:	ea5f 0c00 	movs.w	ip, r0
 800416c:	bf08      	it	eq
 800416e:	4770      	bxeq	lr
 8004170:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8004174:	4601      	mov	r1, r0
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	e01c      	b.n	80041b6 <__aeabi_l2f+0x2a>

0800417c <__aeabi_ul2f>:
 800417c:	ea50 0201 	orrs.w	r2, r0, r1
 8004180:	bf08      	it	eq
 8004182:	4770      	bxeq	lr
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e00a      	b.n	80041a0 <__aeabi_l2f+0x14>
 800418a:	bf00      	nop

0800418c <__aeabi_l2f>:
 800418c:	ea50 0201 	orrs.w	r2, r0, r1
 8004190:	bf08      	it	eq
 8004192:	4770      	bxeq	lr
 8004194:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8004198:	d502      	bpl.n	80041a0 <__aeabi_l2f+0x14>
 800419a:	4240      	negs	r0, r0
 800419c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80041a0:	ea5f 0c01 	movs.w	ip, r1
 80041a4:	bf02      	ittt	eq
 80041a6:	4684      	moveq	ip, r0
 80041a8:	4601      	moveq	r1, r0
 80041aa:	2000      	moveq	r0, #0
 80041ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80041b0:	bf08      	it	eq
 80041b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80041b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80041ba:	fabc f28c 	clz	r2, ip
 80041be:	3a08      	subs	r2, #8
 80041c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80041c4:	db10      	blt.n	80041e8 <__aeabi_l2f+0x5c>
 80041c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80041ca:	4463      	add	r3, ip
 80041cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80041d0:	f1c2 0220 	rsb	r2, r2, #32
 80041d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80041d8:	fa20 f202 	lsr.w	r2, r0, r2
 80041dc:	eb43 0002 	adc.w	r0, r3, r2
 80041e0:	bf08      	it	eq
 80041e2:	f020 0001 	biceq.w	r0, r0, #1
 80041e6:	4770      	bx	lr
 80041e8:	f102 0220 	add.w	r2, r2, #32
 80041ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80041f0:	f1c2 0220 	rsb	r2, r2, #32
 80041f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80041f8:	fa21 f202 	lsr.w	r2, r1, r2
 80041fc:	eb43 0002 	adc.w	r0, r3, r2
 8004200:	bf08      	it	eq
 8004202:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004206:	4770      	bx	lr

08004208 <__aeabi_uldivmod>:
 8004208:	b953      	cbnz	r3, 8004220 <__aeabi_uldivmod+0x18>
 800420a:	b94a      	cbnz	r2, 8004220 <__aeabi_uldivmod+0x18>
 800420c:	2900      	cmp	r1, #0
 800420e:	bf08      	it	eq
 8004210:	2800      	cmpeq	r0, #0
 8004212:	bf1c      	itt	ne
 8004214:	f04f 31ff 	movne.w	r1, #4294967295
 8004218:	f04f 30ff 	movne.w	r0, #4294967295
 800421c:	f000 b97a 	b.w	8004514 <__aeabi_idiv0>
 8004220:	f1ad 0c08 	sub.w	ip, sp, #8
 8004224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004228:	f000 f806 	bl	8004238 <__udivmoddi4>
 800422c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004234:	b004      	add	sp, #16
 8004236:	4770      	bx	lr

08004238 <__udivmoddi4>:
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	468c      	mov	ip, r1
 800423e:	460d      	mov	r5, r1
 8004240:	4604      	mov	r4, r0
 8004242:	9e08      	ldr	r6, [sp, #32]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d151      	bne.n	80042ec <__udivmoddi4+0xb4>
 8004248:	428a      	cmp	r2, r1
 800424a:	4617      	mov	r7, r2
 800424c:	d96d      	bls.n	800432a <__udivmoddi4+0xf2>
 800424e:	fab2 fe82 	clz	lr, r2
 8004252:	f1be 0f00 	cmp.w	lr, #0
 8004256:	d00b      	beq.n	8004270 <__udivmoddi4+0x38>
 8004258:	f1ce 0c20 	rsb	ip, lr, #32
 800425c:	fa01 f50e 	lsl.w	r5, r1, lr
 8004260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004264:	fa02 f70e 	lsl.w	r7, r2, lr
 8004268:	ea4c 0c05 	orr.w	ip, ip, r5
 800426c:	fa00 f40e 	lsl.w	r4, r0, lr
 8004270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8004274:	0c25      	lsrs	r5, r4, #16
 8004276:	fbbc f8fa 	udiv	r8, ip, sl
 800427a:	fa1f f987 	uxth.w	r9, r7
 800427e:	fb0a cc18 	mls	ip, sl, r8, ip
 8004282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8004286:	fb08 f309 	mul.w	r3, r8, r9
 800428a:	42ab      	cmp	r3, r5
 800428c:	d90a      	bls.n	80042a4 <__udivmoddi4+0x6c>
 800428e:	19ed      	adds	r5, r5, r7
 8004290:	f108 32ff 	add.w	r2, r8, #4294967295
 8004294:	f080 8123 	bcs.w	80044de <__udivmoddi4+0x2a6>
 8004298:	42ab      	cmp	r3, r5
 800429a:	f240 8120 	bls.w	80044de <__udivmoddi4+0x2a6>
 800429e:	f1a8 0802 	sub.w	r8, r8, #2
 80042a2:	443d      	add	r5, r7
 80042a4:	1aed      	subs	r5, r5, r3
 80042a6:	b2a4      	uxth	r4, r4
 80042a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80042ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80042b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80042b4:	fb00 f909 	mul.w	r9, r0, r9
 80042b8:	45a1      	cmp	r9, r4
 80042ba:	d909      	bls.n	80042d0 <__udivmoddi4+0x98>
 80042bc:	19e4      	adds	r4, r4, r7
 80042be:	f100 33ff 	add.w	r3, r0, #4294967295
 80042c2:	f080 810a 	bcs.w	80044da <__udivmoddi4+0x2a2>
 80042c6:	45a1      	cmp	r9, r4
 80042c8:	f240 8107 	bls.w	80044da <__udivmoddi4+0x2a2>
 80042cc:	3802      	subs	r0, #2
 80042ce:	443c      	add	r4, r7
 80042d0:	eba4 0409 	sub.w	r4, r4, r9
 80042d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80042d8:	2100      	movs	r1, #0
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d061      	beq.n	80043a2 <__udivmoddi4+0x16a>
 80042de:	fa24 f40e 	lsr.w	r4, r4, lr
 80042e2:	2300      	movs	r3, #0
 80042e4:	6034      	str	r4, [r6, #0]
 80042e6:	6073      	str	r3, [r6, #4]
 80042e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ec:	428b      	cmp	r3, r1
 80042ee:	d907      	bls.n	8004300 <__udivmoddi4+0xc8>
 80042f0:	2e00      	cmp	r6, #0
 80042f2:	d054      	beq.n	800439e <__udivmoddi4+0x166>
 80042f4:	2100      	movs	r1, #0
 80042f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80042fa:	4608      	mov	r0, r1
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	fab3 f183 	clz	r1, r3
 8004304:	2900      	cmp	r1, #0
 8004306:	f040 808e 	bne.w	8004426 <__udivmoddi4+0x1ee>
 800430a:	42ab      	cmp	r3, r5
 800430c:	d302      	bcc.n	8004314 <__udivmoddi4+0xdc>
 800430e:	4282      	cmp	r2, r0
 8004310:	f200 80fa 	bhi.w	8004508 <__udivmoddi4+0x2d0>
 8004314:	1a84      	subs	r4, r0, r2
 8004316:	eb65 0503 	sbc.w	r5, r5, r3
 800431a:	2001      	movs	r0, #1
 800431c:	46ac      	mov	ip, r5
 800431e:	2e00      	cmp	r6, #0
 8004320:	d03f      	beq.n	80043a2 <__udivmoddi4+0x16a>
 8004322:	e886 1010 	stmia.w	r6, {r4, ip}
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	b912      	cbnz	r2, 8004332 <__udivmoddi4+0xfa>
 800432c:	2701      	movs	r7, #1
 800432e:	fbb7 f7f2 	udiv	r7, r7, r2
 8004332:	fab7 fe87 	clz	lr, r7
 8004336:	f1be 0f00 	cmp.w	lr, #0
 800433a:	d134      	bne.n	80043a6 <__udivmoddi4+0x16e>
 800433c:	1beb      	subs	r3, r5, r7
 800433e:	0c3a      	lsrs	r2, r7, #16
 8004340:	fa1f fc87 	uxth.w	ip, r7
 8004344:	2101      	movs	r1, #1
 8004346:	fbb3 f8f2 	udiv	r8, r3, r2
 800434a:	0c25      	lsrs	r5, r4, #16
 800434c:	fb02 3318 	mls	r3, r2, r8, r3
 8004350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8004354:	fb0c f308 	mul.w	r3, ip, r8
 8004358:	42ab      	cmp	r3, r5
 800435a:	d907      	bls.n	800436c <__udivmoddi4+0x134>
 800435c:	19ed      	adds	r5, r5, r7
 800435e:	f108 30ff 	add.w	r0, r8, #4294967295
 8004362:	d202      	bcs.n	800436a <__udivmoddi4+0x132>
 8004364:	42ab      	cmp	r3, r5
 8004366:	f200 80d1 	bhi.w	800450c <__udivmoddi4+0x2d4>
 800436a:	4680      	mov	r8, r0
 800436c:	1aed      	subs	r5, r5, r3
 800436e:	b2a3      	uxth	r3, r4
 8004370:	fbb5 f0f2 	udiv	r0, r5, r2
 8004374:	fb02 5510 	mls	r5, r2, r0, r5
 8004378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800437c:	fb0c fc00 	mul.w	ip, ip, r0
 8004380:	45a4      	cmp	ip, r4
 8004382:	d907      	bls.n	8004394 <__udivmoddi4+0x15c>
 8004384:	19e4      	adds	r4, r4, r7
 8004386:	f100 33ff 	add.w	r3, r0, #4294967295
 800438a:	d202      	bcs.n	8004392 <__udivmoddi4+0x15a>
 800438c:	45a4      	cmp	ip, r4
 800438e:	f200 80b8 	bhi.w	8004502 <__udivmoddi4+0x2ca>
 8004392:	4618      	mov	r0, r3
 8004394:	eba4 040c 	sub.w	r4, r4, ip
 8004398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800439c:	e79d      	b.n	80042da <__udivmoddi4+0xa2>
 800439e:	4631      	mov	r1, r6
 80043a0:	4630      	mov	r0, r6
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	f1ce 0420 	rsb	r4, lr, #32
 80043aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80043ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80043b2:	fa20 f804 	lsr.w	r8, r0, r4
 80043b6:	0c3a      	lsrs	r2, r7, #16
 80043b8:	fa25 f404 	lsr.w	r4, r5, r4
 80043bc:	ea48 0803 	orr.w	r8, r8, r3
 80043c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80043c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80043c8:	fb02 4411 	mls	r4, r2, r1, r4
 80043cc:	fa1f fc87 	uxth.w	ip, r7
 80043d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80043d4:	fb01 f30c 	mul.w	r3, r1, ip
 80043d8:	42ab      	cmp	r3, r5
 80043da:	fa00 f40e 	lsl.w	r4, r0, lr
 80043de:	d909      	bls.n	80043f4 <__udivmoddi4+0x1bc>
 80043e0:	19ed      	adds	r5, r5, r7
 80043e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80043e6:	f080 808a 	bcs.w	80044fe <__udivmoddi4+0x2c6>
 80043ea:	42ab      	cmp	r3, r5
 80043ec:	f240 8087 	bls.w	80044fe <__udivmoddi4+0x2c6>
 80043f0:	3902      	subs	r1, #2
 80043f2:	443d      	add	r5, r7
 80043f4:	1aeb      	subs	r3, r5, r3
 80043f6:	fa1f f588 	uxth.w	r5, r8
 80043fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80043fe:	fb02 3310 	mls	r3, r2, r0, r3
 8004402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8004406:	fb00 f30c 	mul.w	r3, r0, ip
 800440a:	42ab      	cmp	r3, r5
 800440c:	d907      	bls.n	800441e <__udivmoddi4+0x1e6>
 800440e:	19ed      	adds	r5, r5, r7
 8004410:	f100 38ff 	add.w	r8, r0, #4294967295
 8004414:	d26f      	bcs.n	80044f6 <__udivmoddi4+0x2be>
 8004416:	42ab      	cmp	r3, r5
 8004418:	d96d      	bls.n	80044f6 <__udivmoddi4+0x2be>
 800441a:	3802      	subs	r0, #2
 800441c:	443d      	add	r5, r7
 800441e:	1aeb      	subs	r3, r5, r3
 8004420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004424:	e78f      	b.n	8004346 <__udivmoddi4+0x10e>
 8004426:	f1c1 0720 	rsb	r7, r1, #32
 800442a:	fa22 f807 	lsr.w	r8, r2, r7
 800442e:	408b      	lsls	r3, r1
 8004430:	fa05 f401 	lsl.w	r4, r5, r1
 8004434:	ea48 0303 	orr.w	r3, r8, r3
 8004438:	fa20 fe07 	lsr.w	lr, r0, r7
 800443c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8004440:	40fd      	lsrs	r5, r7
 8004442:	ea4e 0e04 	orr.w	lr, lr, r4
 8004446:	fbb5 f9fc 	udiv	r9, r5, ip
 800444a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800444e:	fb0c 5519 	mls	r5, ip, r9, r5
 8004452:	fa1f f883 	uxth.w	r8, r3
 8004456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800445a:	fb09 f408 	mul.w	r4, r9, r8
 800445e:	42ac      	cmp	r4, r5
 8004460:	fa02 f201 	lsl.w	r2, r2, r1
 8004464:	fa00 fa01 	lsl.w	sl, r0, r1
 8004468:	d908      	bls.n	800447c <__udivmoddi4+0x244>
 800446a:	18ed      	adds	r5, r5, r3
 800446c:	f109 30ff 	add.w	r0, r9, #4294967295
 8004470:	d243      	bcs.n	80044fa <__udivmoddi4+0x2c2>
 8004472:	42ac      	cmp	r4, r5
 8004474:	d941      	bls.n	80044fa <__udivmoddi4+0x2c2>
 8004476:	f1a9 0902 	sub.w	r9, r9, #2
 800447a:	441d      	add	r5, r3
 800447c:	1b2d      	subs	r5, r5, r4
 800447e:	fa1f fe8e 	uxth.w	lr, lr
 8004482:	fbb5 f0fc 	udiv	r0, r5, ip
 8004486:	fb0c 5510 	mls	r5, ip, r0, r5
 800448a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800448e:	fb00 f808 	mul.w	r8, r0, r8
 8004492:	45a0      	cmp	r8, r4
 8004494:	d907      	bls.n	80044a6 <__udivmoddi4+0x26e>
 8004496:	18e4      	adds	r4, r4, r3
 8004498:	f100 35ff 	add.w	r5, r0, #4294967295
 800449c:	d229      	bcs.n	80044f2 <__udivmoddi4+0x2ba>
 800449e:	45a0      	cmp	r8, r4
 80044a0:	d927      	bls.n	80044f2 <__udivmoddi4+0x2ba>
 80044a2:	3802      	subs	r0, #2
 80044a4:	441c      	add	r4, r3
 80044a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80044aa:	eba4 0408 	sub.w	r4, r4, r8
 80044ae:	fba0 8902 	umull	r8, r9, r0, r2
 80044b2:	454c      	cmp	r4, r9
 80044b4:	46c6      	mov	lr, r8
 80044b6:	464d      	mov	r5, r9
 80044b8:	d315      	bcc.n	80044e6 <__udivmoddi4+0x2ae>
 80044ba:	d012      	beq.n	80044e2 <__udivmoddi4+0x2aa>
 80044bc:	b156      	cbz	r6, 80044d4 <__udivmoddi4+0x29c>
 80044be:	ebba 030e 	subs.w	r3, sl, lr
 80044c2:	eb64 0405 	sbc.w	r4, r4, r5
 80044c6:	fa04 f707 	lsl.w	r7, r4, r7
 80044ca:	40cb      	lsrs	r3, r1
 80044cc:	431f      	orrs	r7, r3
 80044ce:	40cc      	lsrs	r4, r1
 80044d0:	6037      	str	r7, [r6, #0]
 80044d2:	6074      	str	r4, [r6, #4]
 80044d4:	2100      	movs	r1, #0
 80044d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044da:	4618      	mov	r0, r3
 80044dc:	e6f8      	b.n	80042d0 <__udivmoddi4+0x98>
 80044de:	4690      	mov	r8, r2
 80044e0:	e6e0      	b.n	80042a4 <__udivmoddi4+0x6c>
 80044e2:	45c2      	cmp	sl, r8
 80044e4:	d2ea      	bcs.n	80044bc <__udivmoddi4+0x284>
 80044e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80044ea:	eb69 0503 	sbc.w	r5, r9, r3
 80044ee:	3801      	subs	r0, #1
 80044f0:	e7e4      	b.n	80044bc <__udivmoddi4+0x284>
 80044f2:	4628      	mov	r0, r5
 80044f4:	e7d7      	b.n	80044a6 <__udivmoddi4+0x26e>
 80044f6:	4640      	mov	r0, r8
 80044f8:	e791      	b.n	800441e <__udivmoddi4+0x1e6>
 80044fa:	4681      	mov	r9, r0
 80044fc:	e7be      	b.n	800447c <__udivmoddi4+0x244>
 80044fe:	4601      	mov	r1, r0
 8004500:	e778      	b.n	80043f4 <__udivmoddi4+0x1bc>
 8004502:	3802      	subs	r0, #2
 8004504:	443c      	add	r4, r7
 8004506:	e745      	b.n	8004394 <__udivmoddi4+0x15c>
 8004508:	4608      	mov	r0, r1
 800450a:	e708      	b.n	800431e <__udivmoddi4+0xe6>
 800450c:	f1a8 0802 	sub.w	r8, r8, #2
 8004510:	443d      	add	r5, r7
 8004512:	e72b      	b.n	800436c <__udivmoddi4+0x134>

08004514 <__aeabi_idiv0>:
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop

08004518 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800451a:	0896      	lsrs	r6, r2, #2
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8004520:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004588 <arm_dot_prod_f32+0x70>
  blkCnt = blockSize >> 2U;
 8004524:	4637      	mov	r7, r6
 8004526:	3510      	adds	r5, #16
 8004528:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800452a:	b95f      	cbnz	r7, 8004544 <arm_dot_prod_f32+0x2c>
 800452c:	0134      	lsls	r4, r6, #4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800452e:	f002 0203 	and.w	r2, r2, #3
 8004532:	4421      	add	r1, r4
 8004534:	4420      	add	r0, r4
 8004536:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800453a:	4291      	cmp	r1, r2
 800453c:	d11c      	bne.n	8004578 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 800453e:	edc3 7a00 	vstr	s15, [r3]
 8004542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 8004544:	ed55 6a04 	vldr	s13, [r5, #-16]
    blkCnt--;
 8004548:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 800454a:	ed14 7a04 	vldr	s14, [r4, #-16]
 800454e:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8004552:	ed55 6a03 	vldr	s13, [r5, #-12]
 8004556:	ed14 7a03 	vldr	s14, [r4, #-12]
 800455a:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 800455e:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004562:	ed14 7a02 	vldr	s14, [r4, #-8]
 8004566:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 800456a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800456e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8004572:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004576:	e7d6      	b.n	8004526 <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8004578:	ecf0 6a01 	vldmia	r0!, {s13}
 800457c:	ecb1 7a01 	vldmia	r1!, {s14}
 8004580:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004584:	e7d9      	b.n	800453a <arm_dot_prod_f32+0x22>
 8004586:	bf00      	nop
 8004588:	00000000 	.word	0x00000000

0800458c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800458c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800458e:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <HAL_InitTick+0x3c>)
{
 8004590:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004592:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <HAL_InitTick+0x40>)
 8004594:	7818      	ldrb	r0, [r3, #0]
 8004596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459a:	fbb3 f3f0 	udiv	r3, r3, r0
 800459e:	6810      	ldr	r0, [r2, #0]
 80045a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80045a4:	f000 f8ac 	bl	8004700 <HAL_SYSTICK_Config>
 80045a8:	4604      	mov	r4, r0
 80045aa:	b958      	cbnz	r0, 80045c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ac:	2d0f      	cmp	r5, #15
 80045ae:	d809      	bhi.n	80045c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045b0:	4602      	mov	r2, r0
 80045b2:	4629      	mov	r1, r5
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	f000 f86a 	bl	8004690 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <HAL_InitTick+0x44>)
 80045be:	4620      	mov	r0, r4
 80045c0:	601d      	str	r5, [r3, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80045c4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	20000004 	.word	0x20000004
 80045cc:	20000824 	.word	0x20000824
 80045d0:	20000008 	.word	0x20000008

080045d4 <HAL_Init>:
{
 80045d4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d8:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ea:	f000 f83f 	bl	800466c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7ff ffcc 	bl	800458c <HAL_InitTick>
  HAL_MspInit();
 80045f4:	f003 ff56 	bl	80084a4 <HAL_MspInit>
}
 80045f8:	2000      	movs	r0, #0
 80045fa:	bd08      	pop	{r3, pc}
 80045fc:	40023c00 	.word	0x40023c00

08004600 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004600:	4a03      	ldr	r2, [pc, #12]	; (8004610 <HAL_IncTick+0x10>)
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_IncTick+0x14>)
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	440b      	add	r3, r1
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000ad3c 	.word	0x2000ad3c
 8004614:	20000004 	.word	0x20000004

08004618 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004618:	4b01      	ldr	r3, [pc, #4]	; (8004620 <HAL_GetTick+0x8>)
 800461a:	6818      	ldr	r0, [r3, #0]
}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000ad3c 	.word	0x2000ad3c

08004624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004628:	f7ff fff6 	bl	8004618 <HAL_GetTick>
 800462c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800462e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004630:	bf1e      	ittt	ne
 8004632:	4b04      	ldrne	r3, [pc, #16]	; (8004644 <HAL_Delay+0x20>)
 8004634:	781b      	ldrbne	r3, [r3, #0]
 8004636:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004638:	f7ff ffee 	bl	8004618 <HAL_GetTick>
 800463c:	1b40      	subs	r0, r0, r5
 800463e:	4284      	cmp	r4, r0
 8004640:	d8fa      	bhi.n	8004638 <HAL_Delay+0x14>
  {
  }
}
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000004 	.word	0x20000004

08004648 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F7xx_HAL_VERSION;
}
 8004648:	4800      	ldr	r0, [pc, #0]	; (800464c <HAL_GetHalVersion+0x4>)
 800464a:	4770      	bx	lr
 800464c:	01020700 	.word	0x01020700

08004650 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <HAL_GetREVID+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
}
 8004654:	0c00      	lsrs	r0, r0, #16
 8004656:	4770      	bx	lr
 8004658:	e0042000 	.word	0xe0042000

0800465c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <HAL_GetDEVID+0xc>)
 800465e:	6818      	ldr	r0, [r3, #0]
}
 8004660:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e0042000 	.word	0xe0042000

0800466c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800466e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004670:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004672:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004676:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004686:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004688:	60d3      	str	r3, [r2, #12]
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004690:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004692:	b530      	push	{r4, r5, lr}
 8004694:	68dc      	ldr	r4, [r3, #12]
 8004696:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800469a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800469e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	bf28      	it	cs
 80046a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ac:	bf8c      	ite	hi
 80046ae:	3c03      	subhi	r4, #3
 80046b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80046b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80046bc:	ea01 0103 	and.w	r1, r1, r3
 80046c0:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c4:	fa05 f404 	lsl.w	r4, r5, r4
 80046c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80046cc:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	ea42 0201 	orr.w	r2, r2, r1
 80046d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80046d8:	db07      	blt.n	80046ea <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80046e4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80046e8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ea:	f000 000f 	and.w	r0, r0, #15
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	4b02      	ldr	r3, [pc, #8]	; (80046fc <HAL_NVIC_SetPriority+0x6c>)
 80046f2:	541a      	strb	r2, [r3, r0]
 80046f4:	bd30      	pop	{r4, r5, pc}
 80046f6:	bf00      	nop
 80046f8:	e000ed00 	.word	0xe000ed00
 80046fc:	e000ed14 	.word	0xe000ed14

08004700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004700:	3801      	subs	r0, #1
 8004702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004706:	d20a      	bcs.n	800471e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470a:	21f0      	movs	r1, #240	; 0xf0
 800470c:	4a06      	ldr	r2, [pc, #24]	; (8004728 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004710:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004716:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004718:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800471e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	e000e010 	.word	0xe000e010
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800472c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800472e:	4604      	mov	r4, r0
 8004730:	b908      	cbnz	r0, 8004736 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004732:	2001      	movs	r0, #1
 8004734:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004736:	7f43      	ldrb	r3, [r0, #29]
 8004738:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800473c:	b913      	cbnz	r3, 8004744 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800473e:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004740:	f003 fec8 	bl	80084d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004744:	2302      	movs	r3, #2
 8004746:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004748:	7923      	ldrb	r3, [r4, #4]
 800474a:	b9e3      	cbnz	r3, 8004786 <HAL_CRC_Init+0x5a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	4a13      	ldr	r2, [pc, #76]	; (800479c <HAL_CRC_Init+0x70>)
 8004750:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	f022 0218 	bic.w	r2, r2, #24
 8004758:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800475a:	7962      	ldrb	r2, [r4, #5]
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	b9d2      	cbnz	r2, 8004796 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004764:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 8004766:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	6961      	ldr	r1, [r4, #20]
 800476c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004770:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004772:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004774:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800477c:	430a      	orrs	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004780:	2301      	movs	r3, #1
 8004782:	7763      	strb	r3, [r4, #29]
}
 8004784:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004786:	68e2      	ldr	r2, [r4, #12]
 8004788:	4620      	mov	r0, r4
 800478a:	68a1      	ldr	r1, [r4, #8]
 800478c:	f000 f808 	bl	80047a0 <HAL_CRCEx_Polynomial_Set>
 8004790:	2800      	cmp	r0, #0
 8004792:	d0e2      	beq.n	800475a <HAL_CRC_Init+0x2e>
 8004794:	e7cd      	b.n	8004732 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004796:	6922      	ldr	r2, [r4, #16]
 8004798:	e7e4      	b.n	8004764 <HAL_CRC_Init+0x38>
 800479a:	bf00      	nop
 800479c:	04c11db7 	.word	0x04c11db7

080047a0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80047a0:	231f      	movs	r3, #31
{
 80047a2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047a4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80047a8:	d306      	bcc.n	80047b8 <HAL_CRCEx_Polynomial_Set+0x18>
 80047aa:	fa21 f403 	lsr.w	r4, r1, r3
 80047ae:	07e4      	lsls	r4, r4, #31
 80047b0:	d5f8      	bpl.n	80047a4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80047b2:	2a08      	cmp	r2, #8
 80047b4:	d014      	beq.n	80047e0 <HAL_CRCEx_Polynomial_Set+0x40>
 80047b6:	d809      	bhi.n	80047cc <HAL_CRCEx_Polynomial_Set+0x2c>
 80047b8:	b972      	cbnz	r2, 80047d8 <HAL_CRCEx_Polynomial_Set+0x38>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80047be:	6883      	ldr	r3, [r0, #8]
 80047c0:	f023 0318 	bic.w	r3, r3, #24
 80047c4:	431a      	orrs	r2, r3
 80047c6:	6082      	str	r2, [r0, #8]
 80047c8:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
 80047ca:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 80047cc:	2a10      	cmp	r2, #16
 80047ce:	d005      	beq.n	80047dc <HAL_CRCEx_Polynomial_Set+0x3c>
 80047d0:	2a18      	cmp	r2, #24
 80047d2:	d101      	bne.n	80047d8 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_7B)
 80047d4:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80047d6:	d9f0      	bls.n	80047ba <HAL_CRCEx_Polynomial_Set+0x1a>
  switch (PolyLength)
 80047d8:	2001      	movs	r0, #1
 80047da:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80047dc:	2b07      	cmp	r3, #7
 80047de:	e7fa      	b.n	80047d6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 80047e0:	2b0f      	cmp	r3, #15
 80047e2:	e7f8      	b.n	80047d6 <HAL_CRCEx_Polynomial_Set+0x36>

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e8:	680b      	ldr	r3, [r1, #0]
{
 80047ea:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004998 <HAL_GPIO_Init+0x1b4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047f0:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047f2:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047f4:	4a66      	ldr	r2, [pc, #408]	; (8004990 <HAL_GPIO_Init+0x1ac>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047f6:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800499c <HAL_GPIO_Init+0x1b8>
    ioposition = ((uint32_t)0x01) << position;
 80047fa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fe:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8004800:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004804:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8004808:	45b6      	cmp	lr, r6
 800480a:	f040 80ab 	bne.w	8004964 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800480e:	684c      	ldr	r4, [r1, #4]
 8004810:	f024 0710 	bic.w	r7, r4, #16
 8004814:	2f02      	cmp	r7, #2
 8004816:	d116      	bne.n	8004846 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8004818:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800481c:	f003 0b07 	and.w	fp, r3, #7
 8004820:	f04f 0c0f 	mov.w	ip, #15
 8004824:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004828:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800482c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004830:	fa0c fc0b 	lsl.w	ip, ip, fp
 8004834:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004838:	690d      	ldr	r5, [r1, #16]
 800483a:	fa05 f50b 	lsl.w	r5, r5, fp
 800483e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8004842:	f8ca 5020 	str.w	r5, [sl, #32]
 8004846:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800484a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800484c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004850:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004854:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004858:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800485a:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800485e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004860:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004862:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004866:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800486a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800486e:	d811      	bhi.n	8004894 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8004870:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004872:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8004876:	68cf      	ldr	r7, [r1, #12]
 8004878:	fa07 fc0a 	lsl.w	ip, r7, sl
 800487c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8004880:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004882:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004884:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004888:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800488c:	409f      	lsls	r7, r3
 800488e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004892:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004894:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004896:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004898:	688f      	ldr	r7, [r1, #8]
 800489a:	fa07 f70a 	lsl.w	r7, r7, sl
 800489e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80048a0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048a2:	00e5      	lsls	r5, r4, #3
 80048a4:	d55e      	bpl.n	8004964 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80048aa:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048ae:	f003 0e03 	and.w	lr, r3, #3
 80048b2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80048ba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c2:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80048c6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80048ca:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80048ce:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80048d2:	9503      	str	r5, [sp, #12]
 80048d4:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048d6:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80048da:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048de:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80048e2:	4d2c      	ldr	r5, [pc, #176]	; (8004994 <HAL_GPIO_Init+0x1b0>)
 80048e4:	42a8      	cmp	r0, r5
 80048e6:	d044      	beq.n	8004972 <HAL_GPIO_Init+0x18e>
 80048e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048ec:	42a8      	cmp	r0, r5
 80048ee:	d042      	beq.n	8004976 <HAL_GPIO_Init+0x192>
 80048f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048f4:	42a8      	cmp	r0, r5
 80048f6:	d040      	beq.n	800497a <HAL_GPIO_Init+0x196>
 80048f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048fc:	42a8      	cmp	r0, r5
 80048fe:	d03e      	beq.n	800497e <HAL_GPIO_Init+0x19a>
 8004900:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004904:	42a8      	cmp	r0, r5
 8004906:	d03c      	beq.n	8004982 <HAL_GPIO_Init+0x19e>
 8004908:	4548      	cmp	r0, r9
 800490a:	d03c      	beq.n	8004986 <HAL_GPIO_Init+0x1a2>
 800490c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004910:	42a8      	cmp	r0, r5
 8004912:	d03a      	beq.n	800498a <HAL_GPIO_Init+0x1a6>
 8004914:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004918:	42a8      	cmp	r0, r5
 800491a:	bf14      	ite	ne
 800491c:	2508      	movne	r5, #8
 800491e:	2507      	moveq	r5, #7
 8004920:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004924:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004928:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800492c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800492e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8004932:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004934:	bf0c      	ite	eq
 8004936:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004938:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800493a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800493e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004940:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004942:	bf0c      	ite	eq
 8004944:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004946:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004948:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800494c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800494e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004950:	bf0c      	ite	eq
 8004952:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004954:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004956:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8004958:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800495a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800495c:	bf54      	ite	pl
 800495e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8004960:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8004962:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004964:	3301      	adds	r3, #1
 8004966:	2b10      	cmp	r3, #16
 8004968:	f47f af47 	bne.w	80047fa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800496c:	b005      	add	sp, #20
 800496e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004972:	2500      	movs	r5, #0
 8004974:	e7d4      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 8004976:	2501      	movs	r5, #1
 8004978:	e7d2      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 800497a:	2502      	movs	r5, #2
 800497c:	e7d0      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 800497e:	2503      	movs	r5, #3
 8004980:	e7ce      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 8004982:	2504      	movs	r5, #4
 8004984:	e7cc      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 8004986:	2505      	movs	r5, #5
 8004988:	e7ca      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 800498a:	2506      	movs	r5, #6
 800498c:	e7c8      	b.n	8004920 <HAL_GPIO_Init+0x13c>
 800498e:	bf00      	nop
 8004990:	40013c00 	.word	0x40013c00
 8004994:	40020000 	.word	0x40020000
 8004998:	40023800 	.word	0x40023800
 800499c:	40021400 	.word	0x40021400

080049a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a0:	b10a      	cbz	r2, 80049a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049a2:	6181      	str	r1, [r0, #24]
 80049a4:	4770      	bx	lr
 80049a6:	0409      	lsls	r1, r1, #16
 80049a8:	e7fb      	b.n	80049a2 <HAL_GPIO_WritePin+0x2>
	...

080049ac <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80049ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049b2:	4c19      	ldr	r4, [pc, #100]	; (8004a18 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049cc:	f7ff fe24 	bl	8004618 <HAL_GetTick>
 80049d0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	03da      	lsls	r2, r3, #15
 80049d6:	d50c      	bpl.n	80049f2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049de:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049e0:	f7ff fe1a 	bl	8004618 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049e4:	4c0c      	ldr	r4, [pc, #48]	; (8004a18 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80049e6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049e8:	6863      	ldr	r3, [r4, #4]
 80049ea:	039b      	lsls	r3, r3, #14
 80049ec:	d50a      	bpl.n	8004a04 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80049ee:	2000      	movs	r0, #0
 80049f0:	e006      	b.n	8004a00 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049f2:	f7ff fe11 	bl	8004618 <HAL_GetTick>
 80049f6:	1b40      	subs	r0, r0, r5
 80049f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049fc:	d9e9      	bls.n	80049d2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80049fe:	2003      	movs	r0, #3
}
 8004a00:	b003      	add	sp, #12
 8004a02:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a04:	f7ff fe08 	bl	8004618 <HAL_GetTick>
 8004a08:	1b40      	subs	r0, r0, r5
 8004a0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004a0e:	d9eb      	bls.n	80049e8 <HAL_PWREx_EnableOverDrive+0x3c>
 8004a10:	e7f5      	b.n	80049fe <HAL_PWREx_EnableOverDrive+0x52>
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40007000 	.word	0x40007000

08004a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a20:	4604      	mov	r4, r0
 8004a22:	b918      	cbnz	r0, 8004a2c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8004a26:	b002      	add	sp, #8
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2c:	6803      	ldr	r3, [r0, #0]
 8004a2e:	07d8      	lsls	r0, r3, #31
 8004a30:	d410      	bmi.n	8004a54 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0799      	lsls	r1, r3, #30
 8004a36:	d45e      	bmi.n	8004af6 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	0719      	lsls	r1, r3, #28
 8004a3c:	f100 80a3 	bmi.w	8004b86 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	075a      	lsls	r2, r3, #29
 8004a44:	f100 80c4 	bmi.w	8004bd0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a48:	69a2      	ldr	r2, [r4, #24]
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	f040 812e 	bne.w	8004cac <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8004a50:	2000      	movs	r0, #0
 8004a52:	e7e8      	b.n	8004a26 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a54:	4b93      	ldr	r3, [pc, #588]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	f002 020c 	and.w	r2, r2, #12
 8004a5c:	2a04      	cmp	r2, #4
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	f002 020c 	and.w	r2, r2, #12
 8004a66:	2a08      	cmp	r2, #8
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCC_OscConfig+0x64>
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	025a      	lsls	r2, r3, #9
 8004a6e:	d507      	bpl.n	8004a80 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	4b8c      	ldr	r3, [pc, #560]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	039b      	lsls	r3, r3, #14
 8004a76:	d5dc      	bpl.n	8004a32 <HAL_RCC_OscConfig+0x16>
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1d9      	bne.n	8004a32 <HAL_RCC_OscConfig+0x16>
 8004a7e:	e7d1      	b.n	8004a24 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a80:	6863      	ldr	r3, [r4, #4]
 8004a82:	4d88      	ldr	r5, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d111      	bne.n	8004aae <HAL_RCC_OscConfig+0x92>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a92:	f7ff fdc1 	bl	8004618 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4d83      	ldr	r5, [pc, #524]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8004a98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	039f      	lsls	r7, r3, #14
 8004a9e:	d4c8      	bmi.n	8004a32 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7ff fdba 	bl	8004618 <HAL_GetTick>
 8004aa4:	1b80      	subs	r0, r0, r6
 8004aa6:	2864      	cmp	r0, #100	; 0x64
 8004aa8:	d9f7      	bls.n	8004a9a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8004aaa:	2003      	movs	r0, #3
 8004aac:	e7bb      	b.n	8004a26 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aae:	b99b      	cbnz	r3, 8004ad8 <HAL_RCC_OscConfig+0xbc>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004abe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ac0:	f7ff fdaa 	bl	8004618 <HAL_GetTick>
 8004ac4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	0398      	lsls	r0, r3, #14
 8004aca:	d5b2      	bpl.n	8004a32 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004acc:	f7ff fda4 	bl	8004618 <HAL_GetTick>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	2864      	cmp	r0, #100	; 0x64
 8004ad4:	d9f7      	bls.n	8004ac6 <HAL_RCC_OscConfig+0xaa>
 8004ad6:	e7e8      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	d103      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	e7d0      	b.n	8004a8a <HAL_RCC_OscConfig+0x6e>
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aec:	602b      	str	r3, [r5, #0]
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af4:	e7cc      	b.n	8004a90 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004af6:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	f012 0f0c 	tst.w	r2, #12
 8004afe:	d007      	beq.n	8004b10 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	f002 020c 	and.w	r2, r2, #12
 8004b06:	2a08      	cmp	r2, #8
 8004b08:	d111      	bne.n	8004b2e <HAL_RCC_OscConfig+0x112>
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0259      	lsls	r1, r3, #9
 8004b0e:	d40e      	bmi.n	8004b2e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b10:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	0792      	lsls	r2, r2, #30
 8004b16:	d502      	bpl.n	8004b1e <HAL_RCC_OscConfig+0x102>
 8004b18:	68e2      	ldr	r2, [r4, #12]
 8004b1a:	2a01      	cmp	r2, #1
 8004b1c:	d182      	bne.n	8004a24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6921      	ldr	r1, [r4, #16]
 8004b22:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004b26:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004b2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2c:	e784      	b.n	8004a38 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	4d5c      	ldr	r5, [pc, #368]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004b32:	b1bb      	cbz	r3, 8004b64 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b3c:	f7ff fd6c 	bl	8004618 <HAL_GetTick>
 8004b40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	079f      	lsls	r7, r3, #30
 8004b46:	d507      	bpl.n	8004b58 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	6922      	ldr	r2, [r4, #16]
 8004b4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	e76f      	b.n	8004a38 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b58:	f7ff fd5e 	bl	8004618 <HAL_GetTick>
 8004b5c:	1b80      	subs	r0, r0, r6
 8004b5e:	2802      	cmp	r0, #2
 8004b60:	d9ef      	bls.n	8004b42 <HAL_RCC_OscConfig+0x126>
 8004b62:	e7a2      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b6c:	f7ff fd54 	bl	8004618 <HAL_GetTick>
 8004b70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	0798      	lsls	r0, r3, #30
 8004b76:	f57f af5f 	bpl.w	8004a38 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7a:	f7ff fd4d 	bl	8004618 <HAL_GetTick>
 8004b7e:	1b80      	subs	r0, r0, r6
 8004b80:	2802      	cmp	r0, #2
 8004b82:	d9f6      	bls.n	8004b72 <HAL_RCC_OscConfig+0x156>
 8004b84:	e791      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b86:	6963      	ldr	r3, [r4, #20]
 8004b88:	4d46      	ldr	r5, [pc, #280]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004b8a:	b183      	cbz	r3, 8004bae <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8004b8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004b94:	f7ff fd40 	bl	8004618 <HAL_GetTick>
 8004b98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004b9c:	079b      	lsls	r3, r3, #30
 8004b9e:	f53f af4f 	bmi.w	8004a40 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7ff fd39 	bl	8004618 <HAL_GetTick>
 8004ba6:	1b80      	subs	r0, r0, r6
 8004ba8:	2802      	cmp	r0, #2
 8004baa:	d9f6      	bls.n	8004b9a <HAL_RCC_OscConfig+0x17e>
 8004bac:	e77d      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8004bae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004bb6:	f7ff fd2f 	bl	8004618 <HAL_GetTick>
 8004bba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004bbe:	079f      	lsls	r7, r3, #30
 8004bc0:	f57f af3e 	bpl.w	8004a40 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc4:	f7ff fd28 	bl	8004618 <HAL_GetTick>
 8004bc8:	1b80      	subs	r0, r0, r6
 8004bca:	2802      	cmp	r0, #2
 8004bcc:	d9f6      	bls.n	8004bbc <HAL_RCC_OscConfig+0x1a0>
 8004bce:	e76c      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd4:	00d0      	lsls	r0, r2, #3
 8004bd6:	d427      	bmi.n	8004c28 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8004bda:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bec:	4d2e      	ldr	r5, [pc, #184]	; (8004ca8 <HAL_RCC_OscConfig+0x28c>)
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	05d9      	lsls	r1, r3, #23
 8004bf2:	d51b      	bpl.n	8004c2c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf4:	68a3      	ldr	r3, [r4, #8]
 8004bf6:	4d2b      	ldr	r5, [pc, #172]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d127      	bne.n	8004c4c <HAL_RCC_OscConfig+0x230>
 8004bfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004c08:	f7ff fd06 	bl	8004618 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0c:	4f25      	ldr	r7, [pc, #148]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8004c0e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c12:	079b      	lsls	r3, r3, #30
 8004c14:	d53f      	bpl.n	8004c96 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	f43f af16 	beq.w	8004a48 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_RCC_OscConfig+0x288>)
 8004c1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c24:	6413      	str	r3, [r2, #64]	; 0x40
 8004c26:	e70f      	b.n	8004a48 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8004c28:	2600      	movs	r6, #0
 8004c2a:	e7df      	b.n	8004bec <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004c34:	f7ff fcf0 	bl	8004618 <HAL_GetTick>
 8004c38:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	05da      	lsls	r2, r3, #23
 8004c3e:	d4d9      	bmi.n	8004bf4 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c40:	f7ff fcea 	bl	8004618 <HAL_GetTick>
 8004c44:	1bc0      	subs	r0, r0, r7
 8004c46:	2864      	cmp	r0, #100	; 0x64
 8004c48:	d9f7      	bls.n	8004c3a <HAL_RCC_OscConfig+0x21e>
 8004c4a:	e72e      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4c:	b9ab      	cbnz	r3, 8004c7a <HAL_RCC_OscConfig+0x25e>
 8004c4e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c50:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	672b      	str	r3, [r5, #112]	; 0x70
 8004c5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004c62:	f7ff fcd9 	bl	8004618 <HAL_GetTick>
 8004c66:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c6a:	0798      	lsls	r0, r3, #30
 8004c6c:	d5d3      	bpl.n	8004c16 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7ff fcd3 	bl	8004618 <HAL_GetTick>
 8004c72:	1bc0      	subs	r0, r0, r7
 8004c74:	4540      	cmp	r0, r8
 8004c76:	d9f7      	bls.n	8004c68 <HAL_RCC_OscConfig+0x24c>
 8004c78:	e717      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c7e:	d103      	bne.n	8004c88 <HAL_RCC_OscConfig+0x26c>
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	672b      	str	r3, [r5, #112]	; 0x70
 8004c86:	e7b9      	b.n	8004bfc <HAL_RCC_OscConfig+0x1e0>
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	672b      	str	r3, [r5, #112]	; 0x70
 8004c8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	e7b5      	b.n	8004c02 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7ff fcbf 	bl	8004618 <HAL_GetTick>
 8004c9a:	eba0 0008 	sub.w	r0, r0, r8
 8004c9e:	42a8      	cmp	r0, r5
 8004ca0:	d9b6      	bls.n	8004c10 <HAL_RCC_OscConfig+0x1f4>
 8004ca2:	e702      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cac:	4d24      	ldr	r5, [pc, #144]	; (8004d40 <HAL_RCC_OscConfig+0x324>)
 8004cae:	68ab      	ldr	r3, [r5, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	f43f aeb5 	beq.w	8004a24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8004cba:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cbc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc4:	d12e      	bne.n	8004d24 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8004cc6:	f7ff fca7 	bl	8004618 <HAL_GetTick>
 8004cca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	0199      	lsls	r1, r3, #6
 8004cd0:	d422      	bmi.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd2:	6a22      	ldr	r2, [r4, #32]
 8004cd4:	69e3      	ldr	r3, [r4, #28]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cde:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ce4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ce8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4c15      	ldr	r4, [pc, #84]	; (8004d40 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cec:	0852      	lsrs	r2, r2, #1
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cf4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004cfe:	f7ff fc8b 	bl	8004618 <HAL_GetTick>
 8004d02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	019a      	lsls	r2, r3, #6
 8004d08:	f53f aea2 	bmi.w	8004a50 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7ff fc84 	bl	8004618 <HAL_GetTick>
 8004d10:	1b40      	subs	r0, r0, r5
 8004d12:	2802      	cmp	r0, #2
 8004d14:	d9f6      	bls.n	8004d04 <HAL_RCC_OscConfig+0x2e8>
 8004d16:	e6c8      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7ff fc7e 	bl	8004618 <HAL_GetTick>
 8004d1c:	1b80      	subs	r0, r0, r6
 8004d1e:	2802      	cmp	r0, #2
 8004d20:	d9d4      	bls.n	8004ccc <HAL_RCC_OscConfig+0x2b0>
 8004d22:	e6c2      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8004d24:	f7ff fc78 	bl	8004618 <HAL_GetTick>
 8004d28:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	f57f ae8f 	bpl.w	8004a50 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d32:	f7ff fc71 	bl	8004618 <HAL_GetTick>
 8004d36:	1b00      	subs	r0, r0, r4
 8004d38:	2802      	cmp	r0, #2
 8004d3a:	d9f6      	bls.n	8004d2a <HAL_RCC_OscConfig+0x30e>
 8004d3c:	e6b5      	b.n	8004aaa <HAL_RCC_OscConfig+0x8e>
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800

08004d44 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d44:	4913      	ldr	r1, [pc, #76]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004d46:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d48:	688b      	ldr	r3, [r1, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d003      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x16>
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d56:	4810      	ldr	r0, [pc, #64]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d58:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8004d5a:	4810      	ldr	r0, [pc, #64]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x58>)
 8004d5c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d5e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d60:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d62:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d68:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004d70:	bf1a      	itte	ne
 8004d72:	480a      	ldrne	r0, [pc, #40]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x58>)
 8004d74:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d76:	4808      	ldreq	r0, [pc, #32]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d78:	fba1 0100 	umull	r0, r1, r1, r0
 8004d7c:	f7ff fa44 	bl	8004208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x50>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d88:	3301      	adds	r3, #1
 8004d8a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004d8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d90:	bd08      	pop	{r3, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	017d7840 	.word	0x017d7840

08004da0 <HAL_RCC_ClockConfig>:
{
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004da6:	4604      	mov	r4, r0
 8004da8:	b910      	cbnz	r0, 8004db0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004daa:	2001      	movs	r0, #1
 8004dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db0:	4a46      	ldr	r2, [pc, #280]	; (8004ecc <HAL_RCC_ClockConfig+0x12c>)
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	428b      	cmp	r3, r1
 8004dba:	d328      	bcc.n	8004e0e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dbc:	6821      	ldr	r1, [r4, #0]
 8004dbe:	078f      	lsls	r7, r1, #30
 8004dc0:	d430      	bmi.n	8004e24 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc2:	07c8      	lsls	r0, r1, #31
 8004dc4:	d443      	bmi.n	8004e4e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc6:	4a41      	ldr	r2, [pc, #260]	; (8004ecc <HAL_RCC_ClockConfig+0x12c>)
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	429d      	cmp	r5, r3
 8004dd0:	d367      	bcc.n	8004ea2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	0751      	lsls	r1, r2, #29
 8004dd6:	d470      	bmi.n	8004eba <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	0713      	lsls	r3, r2, #28
 8004dda:	d507      	bpl.n	8004dec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ddc:	4a3c      	ldr	r2, [pc, #240]	; (8004ed0 <HAL_RCC_ClockConfig+0x130>)
 8004dde:	6921      	ldr	r1, [r4, #16]
 8004de0:	6893      	ldr	r3, [r2, #8]
 8004de2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004de6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004dea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dec:	f7ff ffaa 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004df0:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <HAL_RCC_ClockConfig+0x130>)
 8004df2:	4a38      	ldr	r2, [pc, #224]	; (8004ed4 <HAL_RCC_ClockConfig+0x134>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	40d8      	lsrs	r0, r3
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCC_ClockConfig+0x138>)
 8004e00:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7ff fbc2 	bl	800458c <HAL_InitTick>
  return HAL_OK;
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	f023 030f 	bic.w	r3, r3, #15
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	d1c3      	bne.n	8004daa <HAL_RCC_ClockConfig+0xa>
 8004e22:	e7cb      	b.n	8004dbc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	f011 0f04 	tst.w	r1, #4
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <HAL_RCC_ClockConfig+0x130>)
 8004e2a:	d003      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004e32:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	070e      	lsls	r6, r1, #28
 8004e36:	d503      	bpl.n	8004e40 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004e3e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	68a0      	ldr	r0, [r4, #8]
 8004e44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004e48:	4302      	orrs	r2, r0
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	e7b9      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	6861      	ldr	r1, [r4, #4]
 8004e50:	4b1f      	ldr	r3, [pc, #124]	; (8004ed0 <HAL_RCC_ClockConfig+0x130>)
 8004e52:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e54:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e56:	d11c      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e58:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	d0a5      	beq.n	8004daa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e60:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e64:	4e1a      	ldr	r6, [pc, #104]	; (8004ed0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e66:	f022 0203 	bic.w	r2, r2, #3
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004e6e:	f7ff fbd3 	bl	8004618 <HAL_GetTick>
 8004e72:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e74:	68b3      	ldr	r3, [r6, #8]
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e80:	d0a1      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e82:	f7ff fbc9 	bl	8004618 <HAL_GetTick>
 8004e86:	1bc0      	subs	r0, r0, r7
 8004e88:	4540      	cmp	r0, r8
 8004e8a:	d9f3      	bls.n	8004e74 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004e8c:	2003      	movs	r0, #3
}
 8004e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e92:	2902      	cmp	r1, #2
 8004e94:	d102      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004e9a:	e7df      	b.n	8004e5c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9c:	f012 0f02 	tst.w	r2, #2
 8004ea0:	e7dc      	b.n	8004e5c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	f023 030f 	bic.w	r3, r3, #15
 8004ea8:	432b      	orrs	r3, r5
 8004eaa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	429d      	cmp	r5, r3
 8004eb4:	f47f af79 	bne.w	8004daa <HAL_RCC_ClockConfig+0xa>
 8004eb8:	e78b      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eba:	4905      	ldr	r1, [pc, #20]	; (8004ed0 <HAL_RCC_ClockConfig+0x130>)
 8004ebc:	68e0      	ldr	r0, [r4, #12]
 8004ebe:	688b      	ldr	r3, [r1, #8]
 8004ec0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004ec4:	4303      	orrs	r3, r0
 8004ec6:	608b      	str	r3, [r1, #8]
 8004ec8:	e786      	b.n	8004dd8 <HAL_RCC_ClockConfig+0x38>
 8004eca:	bf00      	nop
 8004ecc:	40023c00 	.word	0x40023c00
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	0804f034 	.word	0x0804f034
 8004ed8:	20000824 	.word	0x20000824

08004edc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004edc:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <HAL_RCC_GetHCLKFreq+0x8>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000824 	.word	0x20000824

08004ee8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x14>)
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004ef2:	5cd3      	ldrb	r3, [r2, r3]
 8004ef4:	4a03      	ldr	r2, [pc, #12]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ef6:	6810      	ldr	r0, [r2, #0]
}
 8004ef8:	40d8      	lsrs	r0, r3
 8004efa:	4770      	bx	lr
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0804f044 	.word	0x0804f044
 8004f04:	20000824 	.word	0x20000824

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f08:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8004f0a:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
 8004f14:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004f16:	6810      	ldr	r0, [r2, #0]
}
 8004f18:	40d8      	lsrs	r0, r3
 8004f1a:	4770      	bx	lr
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	0804f044 	.word	0x0804f044
 8004f24:	20000824 	.word	0x20000824

08004f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f2c:	6802      	ldr	r2, [r0, #0]
{
 8004f2e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f30:	f012 0601 	ands.w	r6, r2, #1
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f36:	4bb8      	ldr	r3, [pc, #736]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004f3e:	6099      	str	r1, [r3, #8]
 8004f40:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8004f42:	6899      	ldr	r1, [r3, #8]
 8004f44:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f46:	fab6 f686 	clz	r6, r6
 8004f4a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f4c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f4e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8004f52:	d012      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f54:	49b0      	ldr	r1, [pc, #704]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f56:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004f58:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f5c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8004f64:	bf08      	it	eq
 8004f66:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f68:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f6c:	bf16      	itet	ne
 8004f6e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004f72:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f74:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f7a:	02d7      	lsls	r7, r2, #11
 8004f7c:	d510      	bpl.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7e:	48a6      	ldr	r0, [pc, #664]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f82:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f86:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004f8e:	ea43 0301 	orr.w	r3, r3, r1
 8004f92:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f96:	f000 814c 	beq.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004f9a:	2900      	cmp	r1, #0
 8004f9c:	bf08      	it	eq
 8004f9e:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fa0:	0690      	lsls	r0, r2, #26
 8004fa2:	d531      	bpl.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b9c      	ldr	r3, [pc, #624]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fa6:	4f9d      	ldr	r7, [pc, #628]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7ff fb29 	bl	8004618 <HAL_GetTick>
 8004fc6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	05d9      	lsls	r1, r3, #23
 8004fcc:	f140 8133 	bpl.w	8005236 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd0:	4f91      	ldr	r7, [pc, #580]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fd4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004fd8:	f040 8138 	bne.w	800524c <HAL_RCCEx_PeriphCLKConfig+0x324>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fde:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004fe2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004fe6:	4a8c      	ldr	r2, [pc, #560]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fe8:	f040 8156 	bne.w	8005298 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8004fec:	6891      	ldr	r1, [r2, #8]
 8004fee:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004ff2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004ff6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004ffa:	4301      	orrs	r1, r0
 8004ffc:	6091      	str	r1, [r2, #8]
 8004ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005002:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005004:	430b      	orrs	r3, r1
 8005006:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	06df      	lsls	r7, r3, #27
 800500c:	d50c      	bpl.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800500e:	4a82      	ldr	r2, [pc, #520]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005010:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005014:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005018:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800501c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005020:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005022:	4301      	orrs	r1, r0
 8005024:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005028:	0458      	lsls	r0, r3, #17
 800502a:	d508      	bpl.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800502c:	497a      	ldr	r1, [pc, #488]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800502e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005030:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005034:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005038:	4302      	orrs	r2, r0
 800503a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800503e:	0419      	lsls	r1, r3, #16
 8005040:	d508      	bpl.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005042:	4975      	ldr	r1, [pc, #468]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005044:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005046:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800504a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800504e:	4302      	orrs	r2, r0
 8005050:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005054:	03da      	lsls	r2, r3, #15
 8005056:	d508      	bpl.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005058:	496f      	ldr	r1, [pc, #444]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800505a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800505c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005060:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005064:	4302      	orrs	r2, r0
 8005066:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800506a:	065f      	lsls	r7, r3, #25
 800506c:	d508      	bpl.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800506e:	496a      	ldr	r1, [pc, #424]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005070:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005072:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005076:	f022 0203 	bic.w	r2, r2, #3
 800507a:	4302      	orrs	r2, r0
 800507c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005080:	0618      	lsls	r0, r3, #24
 8005082:	d508      	bpl.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005084:	4964      	ldr	r1, [pc, #400]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005086:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005088:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800508c:	f022 020c 	bic.w	r2, r2, #12
 8005090:	4302      	orrs	r2, r0
 8005092:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005096:	05d9      	lsls	r1, r3, #23
 8005098:	d508      	bpl.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800509a:	495f      	ldr	r1, [pc, #380]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800509c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800509e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050a2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80050a6:	4302      	orrs	r2, r0
 80050a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ac:	059a      	lsls	r2, r3, #22
 80050ae:	d508      	bpl.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050b0:	4959      	ldr	r1, [pc, #356]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80050b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80050bc:	4302      	orrs	r2, r0
 80050be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c2:	055f      	lsls	r7, r3, #21
 80050c4:	d508      	bpl.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050c6:	4954      	ldr	r1, [pc, #336]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80050ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050d2:	4302      	orrs	r2, r0
 80050d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050d8:	0518      	lsls	r0, r3, #20
 80050da:	d508      	bpl.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050dc:	494e      	ldr	r1, [pc, #312]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80050e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050e8:	4302      	orrs	r2, r0
 80050ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050ee:	04d9      	lsls	r1, r3, #19
 80050f0:	d508      	bpl.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050f2:	4949      	ldr	r1, [pc, #292]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80050fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80050fe:	4302      	orrs	r2, r0
 8005100:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005104:	049a      	lsls	r2, r3, #18
 8005106:	d508      	bpl.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005108:	4943      	ldr	r1, [pc, #268]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800510a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005110:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005114:	4302      	orrs	r2, r0
 8005116:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800511a:	029f      	lsls	r7, r3, #10
 800511c:	d50c      	bpl.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800511e:	483e      	ldr	r0, [pc, #248]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005120:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005122:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8005126:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800512a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800512e:	bf08      	it	eq
 8005130:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005132:	430a      	orrs	r2, r1
 8005134:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005138:	0358      	lsls	r0, r3, #13
 800513a:	d508      	bpl.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800513c:	4936      	ldr	r1, [pc, #216]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800513e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005140:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005148:	4302      	orrs	r2, r0
 800514a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800514e:	0219      	lsls	r1, r3, #8
 8005150:	d508      	bpl.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005152:	4931      	ldr	r1, [pc, #196]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005154:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005156:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800515a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800515e:	4302      	orrs	r2, r0
 8005160:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	d508      	bpl.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005168:	492b      	ldr	r1, [pc, #172]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800516a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800516c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005170:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005174:	4302      	orrs	r2, r0
 8005176:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800517a:	2e00      	cmp	r6, #0
 800517c:	f040 8090 	bne.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005184:	f000 808c 	beq.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x378>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005188:	2d01      	cmp	r5, #1
 800518a:	d150      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800518c:	4d22      	ldr	r5, [pc, #136]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005194:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7ff fa3f 	bl	8004618 <HAL_GetTick>
 800519a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	009f      	lsls	r7, r3, #2
 80051a0:	f100 80e1 	bmi.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0x43e>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	0305      	lsls	r5, r0, #12
 80051a8:	d501      	bpl.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ac:	b11b      	cbz	r3, 80051b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80051ae:	02c1      	lsls	r1, r0, #11
 80051b0:	d518      	bpl.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b4:	b9b3      	cbnz	r3, 80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b6:	4918      	ldr	r1, [pc, #96]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80051b8:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80051be:	6925      	ldr	r5, [r4, #16]
 80051c0:	061b      	lsls	r3, r3, #24
 80051c2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80051c6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051d0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80051d4:	6a22      	ldr	r2, [r4, #32]
 80051d6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80051da:	3a01      	subs	r2, #1
 80051dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051e4:	0282      	lsls	r2, r0, #10
 80051e6:	d510      	bpl.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80051e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80051ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ee:	d10c      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051f0:	4909      	ldr	r1, [pc, #36]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80051f2:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80051f8:	6920      	ldr	r0, [r4, #16]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005200:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800520a:	4c03      	ldr	r4, [pc, #12]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	40007000 	.word	0x40007000

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7ff f9fa 	bl	8004618 <HAL_GetTick>
 8005224:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	f140 80a3 	bpl.w	8005374 <HAL_RCCEx_PeriphCLKConfig+0x44c>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800522e:	2000      	movs	r0, #0
 8005230:	e009      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      plli2sused = 1;
 8005232:	2601      	movs	r6, #1
 8005234:	e6b4      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005236:	f7ff f9ef 	bl	8004618 <HAL_GetTick>
 800523a:	eba0 0008 	sub.w	r0, r0, r8
 800523e:	2864      	cmp	r0, #100	; 0x64
 8005240:	f67f aec2 	bls.w	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8005244:	2003      	movs	r0, #3
}
 8005246:	b003      	add	sp, #12
 8005248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800524c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800524e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005252:	4293      	cmp	r3, r2
 8005254:	f43f aec2 	beq.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800525a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800525c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005260:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005264:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005266:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005268:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800526c:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800526e:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005272:	07da      	lsls	r2, r3, #31
 8005274:	f57f aeb2 	bpl.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 8005278:	f7ff f9ce 	bl	8004618 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005280:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005284:	079b      	lsls	r3, r3, #30
 8005286:	f53f aea9 	bmi.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528a:	f7ff f9c5 	bl	8004618 <HAL_GetTick>
 800528e:	eba0 0008 	sub.w	r0, r0, r8
 8005292:	4548      	cmp	r0, r9
 8005294:	d9f5      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005296:	e7d5      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	6891      	ldr	r1, [r2, #8]
 800529a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800529e:	e6ad      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 80052a0:	4e38      	ldr	r6, [pc, #224]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80052a2:	6833      	ldr	r3, [r6, #0]
 80052a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052a8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80052aa:	f7ff f9b5 	bl	8004618 <HAL_GetTick>
 80052ae:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	d451      	bmi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x432>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	07d7      	lsls	r7, r2, #31
 80052ba:	d50d      	bpl.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80052bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052be:	b95b      	cbnz	r3, 80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c0:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052c2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c6:	6860      	ldr	r0, [r4, #4]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80052ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80052d2:	430b      	orrs	r3, r1
 80052d4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052d8:	0310      	lsls	r0, r2, #12
 80052da:	d503      	bpl.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80052dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e2:	d005      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80052e4:	02d1      	lsls	r1, r2, #11
 80052e6:	d519      	bpl.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ee:	d115      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052f0:	4924      	ldr	r1, [pc, #144]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80052f2:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052f4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80052f8:	6866      	ldr	r6, [r4, #4]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005300:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005304:	4303      	orrs	r3, r0
 8005306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800530a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800530e:	69e3      	ldr	r3, [r4, #28]
 8005310:	f020 001f 	bic.w	r0, r0, #31
 8005314:	3b01      	subs	r3, #1
 8005316:	4303      	orrs	r3, r0
 8005318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800531c:	0192      	lsls	r2, r2, #6
 800531e:	d50a      	bpl.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005320:	68e3      	ldr	r3, [r4, #12]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	061b      	lsls	r3, r3, #24
 8005326:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800532a:	68a2      	ldr	r2, [r4, #8]
 800532c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005332:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005336:	4e13      	ldr	r6, [pc, #76]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800533e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005340:	f7ff f96a 	bl	8004618 <HAL_GetTick>
 8005344:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	f53f af1d 	bmi.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800534e:	f7ff f963 	bl	8004618 <HAL_GetTick>
 8005352:	1bc0      	subs	r0, r0, r7
 8005354:	2864      	cmp	r0, #100	; 0x64
 8005356:	d9f6      	bls.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8005358:	e774      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800535a:	f7ff f95d 	bl	8004618 <HAL_GetTick>
 800535e:	1bc0      	subs	r0, r0, r7
 8005360:	2864      	cmp	r0, #100	; 0x64
 8005362:	d9a5      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005364:	e76e      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005366:	f7ff f957 	bl	8004618 <HAL_GetTick>
 800536a:	1b80      	subs	r0, r0, r6
 800536c:	2864      	cmp	r0, #100	; 0x64
 800536e:	f67f af15 	bls.w	800519c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005372:	e767      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005374:	f7ff f950 	bl	8004618 <HAL_GetTick>
 8005378:	1b40      	subs	r0, r0, r5
 800537a:	2864      	cmp	r0, #100	; 0x64
 800537c:	f67f af53 	bls.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005380:	e760      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800

08005388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005388:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800538a:	69c2      	ldr	r2, [r0, #28]
{
 800538c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800538e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	6881      	ldr	r1, [r0, #8]
 8005392:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005394:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005396:	4301      	orrs	r1, r0
 8005398:	6960      	ldr	r0, [r4, #20]
 800539a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800539c:	4890      	ldr	r0, [pc, #576]	; (80055e0 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800539e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a0:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80053a2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a4:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80053b0:	4301      	orrs	r1, r0
 80053b2:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b6:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80053b8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ba:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80053be:	4301      	orrs	r1, r0
 80053c0:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c2:	4988      	ldr	r1, [pc, #544]	; (80055e4 <UART_SetConfig+0x25c>)
 80053c4:	428b      	cmp	r3, r1
 80053c6:	d117      	bne.n	80053f8 <UART_SetConfig+0x70>
 80053c8:	4b87      	ldr	r3, [pc, #540]	; (80055e8 <UART_SetConfig+0x260>)
 80053ca:	4988      	ldr	r1, [pc, #544]	; (80055ec <UART_SetConfig+0x264>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	d129      	bne.n	8005430 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80053dc:	2b08      	cmp	r3, #8
 80053de:	f200 809d 	bhi.w	800551c <UART_SetConfig+0x194>
 80053e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80053e6:	008c      	.short	0x008c
 80053e8:	00ee00e8 	.word	0x00ee00e8
 80053ec:	00fa009b 	.word	0x00fa009b
 80053f0:	009b009b 	.word	0x009b009b
 80053f4:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f8:	497d      	ldr	r1, [pc, #500]	; (80055f0 <UART_SetConfig+0x268>)
 80053fa:	428b      	cmp	r3, r1
 80053fc:	d106      	bne.n	800540c <UART_SetConfig+0x84>
 80053fe:	4b7a      	ldr	r3, [pc, #488]	; (80055e8 <UART_SetConfig+0x260>)
 8005400:	497c      	ldr	r1, [pc, #496]	; (80055f4 <UART_SetConfig+0x26c>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	e7e3      	b.n	80053d4 <UART_SetConfig+0x4c>
 800540c:	497a      	ldr	r1, [pc, #488]	; (80055f8 <UART_SetConfig+0x270>)
 800540e:	428b      	cmp	r3, r1
 8005410:	d11d      	bne.n	800544e <UART_SetConfig+0xc6>
 8005412:	4b75      	ldr	r3, [pc, #468]	; (80055e8 <UART_SetConfig+0x260>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800541c:	2b10      	cmp	r3, #16
 800541e:	f000 80d9 	beq.w	80055d4 <UART_SetConfig+0x24c>
 8005422:	d80e      	bhi.n	8005442 <UART_SetConfig+0xba>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d067      	beq.n	80054f8 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005428:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800542c:	d076      	beq.n	800551c <UART_SetConfig+0x194>
 800542e:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005430:	2b08      	cmp	r3, #8
 8005432:	d873      	bhi.n	800551c <UART_SetConfig+0x194>
 8005434:	e8df f003 	tbb	[pc, r3]
 8005438:	72a29f99 	.word	0x72a29f99
 800543c:	727272b4 	.word	0x727272b4
 8005440:	b7          	.byte	0xb7
 8005441:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005442:	2b20      	cmp	r3, #32
 8005444:	f000 80ba 	beq.w	80055bc <UART_SetConfig+0x234>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d03f      	beq.n	80054cc <UART_SetConfig+0x144>
 800544c:	e7ec      	b.n	8005428 <UART_SetConfig+0xa0>
 800544e:	496b      	ldr	r1, [pc, #428]	; (80055fc <UART_SetConfig+0x274>)
 8005450:	428b      	cmp	r3, r1
 8005452:	d10d      	bne.n	8005470 <UART_SetConfig+0xe8>
 8005454:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <UART_SetConfig+0x260>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	f000 80b8 	beq.w	80055d4 <UART_SetConfig+0x24c>
 8005464:	d9de      	bls.n	8005424 <UART_SetConfig+0x9c>
 8005466:	2b80      	cmp	r3, #128	; 0x80
 8005468:	f000 80a8 	beq.w	80055bc <UART_SetConfig+0x234>
 800546c:	2bc0      	cmp	r3, #192	; 0xc0
 800546e:	e7ec      	b.n	800544a <UART_SetConfig+0xc2>
 8005470:	4963      	ldr	r1, [pc, #396]	; (8005600 <UART_SetConfig+0x278>)
 8005472:	428b      	cmp	r3, r1
 8005474:	d110      	bne.n	8005498 <UART_SetConfig+0x110>
 8005476:	4b5c      	ldr	r3, [pc, #368]	; (80055e8 <UART_SetConfig+0x260>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	f000 80a6 	beq.w	80055d4 <UART_SetConfig+0x24c>
 8005488:	d9cc      	bls.n	8005424 <UART_SetConfig+0x9c>
 800548a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548e:	f000 8095 	beq.w	80055bc <UART_SetConfig+0x234>
 8005492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005496:	e7d8      	b.n	800544a <UART_SetConfig+0xc2>
 8005498:	495a      	ldr	r1, [pc, #360]	; (8005604 <UART_SetConfig+0x27c>)
 800549a:	428b      	cmp	r3, r1
 800549c:	d11e      	bne.n	80054dc <UART_SetConfig+0x154>
 800549e:	4b52      	ldr	r3, [pc, #328]	; (80055e8 <UART_SetConfig+0x260>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	f000 8092 	beq.w	80055d4 <UART_SetConfig+0x24c>
 80054b0:	d806      	bhi.n	80054c0 <UART_SetConfig+0x138>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d07c      	beq.n	80055b0 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80054ba:	d12f      	bne.n	800551c <UART_SetConfig+0x194>
 80054bc:	2310      	movs	r3, #16
 80054be:	e78d      	b.n	80053dc <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c4:	d07a      	beq.n	80055bc <UART_SetConfig+0x234>
 80054c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ca:	d1f4      	bne.n	80054b6 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80054d0:	d169      	bne.n	80055a6 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	0858      	lsrs	r0, r3, #1
 80054d6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80054da:	e078      	b.n	80055ce <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054dc:	494a      	ldr	r1, [pc, #296]	; (8005608 <UART_SetConfig+0x280>)
 80054de:	428b      	cmp	r3, r1
 80054e0:	d124      	bne.n	800552c <UART_SetConfig+0x1a4>
 80054e2:	4b41      	ldr	r3, [pc, #260]	; (80055e8 <UART_SetConfig+0x260>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d070      	beq.n	80055d4 <UART_SetConfig+0x24c>
 80054f2:	d815      	bhi.n	8005520 <UART_SetConfig+0x198>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1de      	bne.n	80054b6 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80054fc:	d135      	bne.n	800556a <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80054fe:	f7ff fcf3 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	0853      	lsrs	r3, r2, #1
 8005506:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800550a:	fbb0 f0f2 	udiv	r0, r0, r2
 800550e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005514:	f1a0 0210 	sub.w	r2, r0, #16
 8005518:	429a      	cmp	r2, r3
 800551a:	d91a      	bls.n	8005552 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 800551c:	2001      	movs	r0, #1
 800551e:	e020      	b.n	8005562 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005524:	d04a      	beq.n	80055bc <UART_SetConfig+0x234>
 8005526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800552a:	e7ce      	b.n	80054ca <UART_SetConfig+0x142>
 800552c:	4937      	ldr	r1, [pc, #220]	; (800560c <UART_SetConfig+0x284>)
 800552e:	428b      	cmp	r3, r1
 8005530:	d1f4      	bne.n	800551c <UART_SetConfig+0x194>
 8005532:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <UART_SetConfig+0x260>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800553c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005540:	d048      	beq.n	80055d4 <UART_SetConfig+0x24c>
 8005542:	f67f af6f 	bls.w	8005424 <UART_SetConfig+0x9c>
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d037      	beq.n	80055bc <UART_SetConfig+0x234>
 800554c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005550:	e77b      	b.n	800544a <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005552:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005556:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	4318      	orrs	r0, r3
 800555e:	60d0      	str	r0, [r2, #12]
 8005560:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005566:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005568:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800556a:	f7ff fcbd 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005574:	e008      	b.n	8005588 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005576:	f7ff fcc7 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 800557a:	e7f8      	b.n	800556e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800557c:	6863      	ldr	r3, [r4, #4]
 800557e:	0858      	lsrs	r0, r3, #1
 8005580:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8005584:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005588:	fbb0 f0f3 	udiv	r0, r0, r3
 800558c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800558e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005592:	f1a0 0210 	sub.w	r2, r0, #16
 8005596:	429a      	cmp	r2, r3
 8005598:	d8c0      	bhi.n	800551c <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	60d8      	str	r0, [r3, #12]
 800559e:	e7df      	b.n	8005560 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80055a0:	f7ff fbd0 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 80055a4:	e7e3      	b.n	800556e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80055a6:	6863      	ldr	r3, [r4, #4]
 80055a8:	0858      	lsrs	r0, r3, #1
 80055aa:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80055ae:	e7eb      	b.n	8005588 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80055b4:	d1df      	bne.n	8005576 <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80055b6:	f7ff fca7 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 80055ba:	e7a2      	b.n	8005502 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80055c0:	d1dc      	bne.n	800557c <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80055c2:	6863      	ldr	r3, [r4, #4]
 80055c4:	0858      	lsrs	r0, r3, #1
 80055c6:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 80055ca:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80055ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80055d2:	e79c      	b.n	800550e <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80055d8:	d1e2      	bne.n	80055a0 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80055da:	f7ff fbb3 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 80055de:	e790      	b.n	8005502 <UART_SetConfig+0x17a>
 80055e0:	efff69f3 	.word	0xefff69f3
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40023800 	.word	0x40023800
 80055ec:	0800a728 	.word	0x0800a728
 80055f0:	40004400 	.word	0x40004400
 80055f4:	0800a72c 	.word	0x0800a72c
 80055f8:	40004800 	.word	0x40004800
 80055fc:	40004c00 	.word	0x40004c00
 8005600:	40005000 	.word	0x40005000
 8005604:	40011400 	.word	0x40011400
 8005608:	40007800 	.word	0x40007800
 800560c:	40007c00 	.word	0x40007c00

08005610 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005610:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005612:	07da      	lsls	r2, r3, #31
{
 8005614:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005616:	d506      	bpl.n	8005626 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005618:	6801      	ldr	r1, [r0, #0]
 800561a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800561c:	684a      	ldr	r2, [r1, #4]
 800561e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005622:	4322      	orrs	r2, r4
 8005624:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005626:	079c      	lsls	r4, r3, #30
 8005628:	d506      	bpl.n	8005638 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800562a:	6801      	ldr	r1, [r0, #0]
 800562c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800562e:	684a      	ldr	r2, [r1, #4]
 8005630:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005634:	4322      	orrs	r2, r4
 8005636:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005638:	0759      	lsls	r1, r3, #29
 800563a:	d506      	bpl.n	800564a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800563c:	6801      	ldr	r1, [r0, #0]
 800563e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005640:	684a      	ldr	r2, [r1, #4]
 8005642:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005646:	4322      	orrs	r2, r4
 8005648:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800564a:	071a      	lsls	r2, r3, #28
 800564c:	d506      	bpl.n	800565c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564e:	6801      	ldr	r1, [r0, #0]
 8005650:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005652:	684a      	ldr	r2, [r1, #4]
 8005654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005658:	4322      	orrs	r2, r4
 800565a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800565c:	06dc      	lsls	r4, r3, #27
 800565e:	d506      	bpl.n	800566e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005660:	6801      	ldr	r1, [r0, #0]
 8005662:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005664:	688a      	ldr	r2, [r1, #8]
 8005666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800566a:	4322      	orrs	r2, r4
 800566c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800566e:	0699      	lsls	r1, r3, #26
 8005670:	d506      	bpl.n	8005680 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005672:	6801      	ldr	r1, [r0, #0]
 8005674:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005676:	688a      	ldr	r2, [r1, #8]
 8005678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567c:	4322      	orrs	r2, r4
 800567e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005680:	065a      	lsls	r2, r3, #25
 8005682:	d510      	bpl.n	80056a6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005684:	6801      	ldr	r1, [r0, #0]
 8005686:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005688:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800568e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005692:	ea42 0204 	orr.w	r2, r2, r4
 8005696:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005698:	d105      	bne.n	80056a6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800569a:	684a      	ldr	r2, [r1, #4]
 800569c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800569e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80056a2:	4322      	orrs	r2, r4
 80056a4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	d506      	bpl.n	80056b8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056aa:	6802      	ldr	r2, [r0, #0]
 80056ac:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80056ae:	6853      	ldr	r3, [r2, #4]
 80056b0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6053      	str	r3, [r2, #4]
 80056b8:	bd10      	pop	{r4, pc}

080056ba <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	9d06      	ldr	r5, [sp, #24]
 80056c0:	4604      	mov	r4, r0
 80056c2:	460f      	mov	r7, r1
 80056c4:	4616      	mov	r6, r2
 80056c6:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	6821      	ldr	r1, [r4, #0]
 80056ca:	69ca      	ldr	r2, [r1, #28]
 80056cc:	ea37 0302 	bics.w	r3, r7, r2
 80056d0:	bf0c      	ite	eq
 80056d2:	2201      	moveq	r2, #1
 80056d4:	2200      	movne	r2, #0
 80056d6:	42b2      	cmp	r2, r6
 80056d8:	d002      	beq.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80056da:	2000      	movs	r0, #0
}
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	1c6b      	adds	r3, r5, #1
 80056e2:	d0f2      	beq.n	80056ca <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e4:	f7fe ff98 	bl	8004618 <HAL_GetTick>
 80056e8:	eba0 0008 	sub.w	r0, r0, r8
 80056ec:	4285      	cmp	r5, r0
 80056ee:	d301      	bcc.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x3a>
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	d1e9      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f4:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80056f6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005708:	2320      	movs	r3, #32
 800570a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800570c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800570e:	2300      	movs	r3, #0
 8005710:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005718 <HAL_UART_Transmit>:
{
 8005718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800571c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800571e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005720:	4604      	mov	r4, r0
 8005722:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005724:	2b20      	cmp	r3, #32
{
 8005726:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005728:	d14b      	bne.n	80057c2 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 800572a:	2900      	cmp	r1, #0
 800572c:	d047      	beq.n	80057be <HAL_UART_Transmit+0xa6>
 800572e:	2a00      	cmp	r2, #0
 8005730:	d045      	beq.n	80057be <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005732:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005736:	2b01      	cmp	r3, #1
 8005738:	d043      	beq.n	80057c2 <HAL_UART_Transmit+0xaa>
 800573a:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800573e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005742:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005746:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005748:	f7fe ff66 	bl	8004618 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800574e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8005750:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8005758:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575c:	d103      	bne.n	8005766 <HAL_UART_Transmit+0x4e>
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	b90b      	cbnz	r3, 8005766 <HAL_UART_Transmit+0x4e>
 8005762:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005764:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005766:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576a:	463b      	mov	r3, r7
 800576c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005770:	b292      	uxth	r2, r2
 8005772:	b94a      	cbnz	r2, 8005788 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005774:	2140      	movs	r1, #64	; 0x40
 8005776:	4620      	mov	r0, r4
 8005778:	f7ff ff9f 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 800577c:	b950      	cbnz	r0, 8005794 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800577e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8005780:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8005784:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8005786:	e006      	b.n	8005796 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005788:	2200      	movs	r2, #0
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	4620      	mov	r0, r4
 800578e:	f7ff ff94 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8005792:	b118      	cbz	r0, 800579c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005794:	2003      	movs	r0, #3
}
 8005796:	b003      	add	sp, #12
 8005798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800579c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800579e:	b95e      	cbnz	r6, 80057b8 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80057aa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80057b6:	e7d6      	b.n	8005766 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80057bc:	e7f4      	b.n	80057a8 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80057be:	2001      	movs	r0, #1
 80057c0:	e7e9      	b.n	8005796 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 80057c2:	2002      	movs	r0, #2
 80057c4:	e7e7      	b.n	8005796 <HAL_UART_Transmit+0x7e>

080057c6 <HAL_UART_Receive>:
{
 80057c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057ca:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80057cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80057ce:	4604      	mov	r4, r0
 80057d0:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d2:	2b20      	cmp	r3, #32
{
 80057d4:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d6:	d163      	bne.n	80058a0 <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 80057d8:	2900      	cmp	r1, #0
 80057da:	d05f      	beq.n	800589c <HAL_UART_Receive+0xd6>
 80057dc:	2a00      	cmp	r2, #0
 80057de:	d05d      	beq.n	800589c <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 80057e0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d05b      	beq.n	80058a0 <HAL_UART_Receive+0xda>
 80057e8:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80057ec:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f4:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80057f6:	f7fe ff0f 	bl	8004618 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80057fa:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80057fc:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80057fe:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8005806:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800580a:	d11b      	bne.n	8005844 <HAL_UART_Receive+0x7e>
 800580c:	6922      	ldr	r2, [r4, #16]
 800580e:	b9ba      	cbnz	r2, 8005840 <HAL_UART_Receive+0x7a>
 8005810:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005814:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 800581c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	d121      	bne.n	8005866 <HAL_UART_Receive+0xa0>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	b9fb      	cbnz	r3, 8005866 <HAL_UART_Receive+0xa0>
 8005826:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8005828:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 800582a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800582e:	b280      	uxth	r0, r0
 8005830:	b9d8      	cbnz	r0, 800586a <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 8005832:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8005834:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 8005838:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8005840:	22ff      	movs	r2, #255	; 0xff
 8005842:	e7e7      	b.n	8005814 <HAL_UART_Receive+0x4e>
 8005844:	b923      	cbnz	r3, 8005850 <HAL_UART_Receive+0x8a>
 8005846:	6922      	ldr	r2, [r4, #16]
 8005848:	2a00      	cmp	r2, #0
 800584a:	d0f9      	beq.n	8005840 <HAL_UART_Receive+0x7a>
 800584c:	227f      	movs	r2, #127	; 0x7f
 800584e:	e7e1      	b.n	8005814 <HAL_UART_Receive+0x4e>
 8005850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005854:	d104      	bne.n	8005860 <HAL_UART_Receive+0x9a>
 8005856:	6922      	ldr	r2, [r4, #16]
 8005858:	2a00      	cmp	r2, #0
 800585a:	d0f7      	beq.n	800584c <HAL_UART_Receive+0x86>
 800585c:	223f      	movs	r2, #63	; 0x3f
 800585e:	e7d9      	b.n	8005814 <HAL_UART_Receive+0x4e>
 8005860:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8005864:	e7d8      	b.n	8005818 <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 8005866:	2600      	movs	r6, #0
 8005868:	e7df      	b.n	800582a <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800586a:	f8cd 9000 	str.w	r9, [sp]
 800586e:	4643      	mov	r3, r8
 8005870:	2200      	movs	r2, #0
 8005872:	2120      	movs	r1, #32
 8005874:	4620      	mov	r0, r4
 8005876:	f7ff ff20 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 800587a:	b998      	cbnz	r0, 80058a4 <HAL_UART_Receive+0xde>
 800587c:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8005882:	b945      	cbnz	r5, 8005896 <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005884:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8005888:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800588c:	3b01      	subs	r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8005894:	e7c9      	b.n	800582a <HAL_UART_Receive+0x64>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005896:	f805 3b01 	strb.w	r3, [r5], #1
 800589a:	e7f5      	b.n	8005888 <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 800589c:	2001      	movs	r0, #1
 800589e:	e7cc      	b.n	800583a <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80058a0:	2002      	movs	r0, #2
 80058a2:	e7ca      	b.n	800583a <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80058a4:	2003      	movs	r0, #3
 80058a6:	e7c8      	b.n	800583a <HAL_UART_Receive+0x74>

080058a8 <UART_CheckIdleState>:
{
 80058a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058aa:	2500      	movs	r5, #0
{
 80058ac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80058b0:	f7fe feb2 	bl	8004618 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b4:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80058b6:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	0712      	lsls	r2, r2, #28
 80058bc:	d407      	bmi.n	80058ce <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 80058be:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80058c0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80058c2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80058c4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80058c8:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80058ca:	b003      	add	sp, #12
 80058cc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ce:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80058d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058d6:	4620      	mov	r0, r4
 80058d8:	9200      	str	r2, [sp, #0]
 80058da:	462a      	mov	r2, r5
 80058dc:	f7ff feed 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0ec      	beq.n	80058be <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80058e4:	2003      	movs	r0, #3
 80058e6:	e7f0      	b.n	80058ca <UART_CheckIdleState+0x22>

080058e8 <HAL_UART_Init>:
{
 80058e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80058ea:	4604      	mov	r4, r0
 80058ec:	b340      	cbz	r0, 8005940 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80058ee:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80058f0:	b91b      	cbnz	r3, 80058fa <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80058f2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80058f6:	f002 fe03 	bl	8008500 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80058fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058fe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005902:	6813      	ldr	r3, [r2, #0]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800590a:	f7ff fd3d 	bl	8005388 <UART_SetConfig>
 800590e:	2801      	cmp	r0, #1
 8005910:	d016      	beq.n	8005940 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005914:	b113      	cbz	r3, 800591c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005916:	4620      	mov	r0, r4
 8005918:	f7ff fe7a 	bl	8005610 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800591e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800592e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
}
 8005936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800593a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800593c:	f7ff bfb4 	b.w	80058a8 <UART_CheckIdleState>
}
 8005940:	2001      	movs	r0, #1
 8005942:	bd10      	pop	{r4, pc}

08005944 <ai_cnn_data_weights_get>:
    0x64, 0xbc, 0x2b, 0x16, 0xd2, 0xbc, 0x5e, 0xec, 0x04,
    0x3d, 0xcb, 0xd7, 0x92, 0xbc, 0x31, 0x7d, 0x77, 0x3b
  };

  return AI_HANDLE_PTR(s_cnn_weights);
}
 8005944:	4800      	ldr	r0, [pc, #0]	; (8005948 <ai_cnn_data_weights_get+0x4>)
 8005946:	4770      	bx	lr
 8005948:	0800a73c 	.word	0x0800a73c

0800594c <ai_cnn_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_cnn_get_info(
  ai_handle network, ai_network_report* report)
{
 800594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	460f      	mov	r7, r1
 8005952:	b0a0      	sub	sp, #128	; 0x80
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005954:	f7fa ff77 	bl	8000846 <ai_platform_context_acquire>
 8005958:	4604      	mov	r4, r0

  if ( report && net_ctx )
 800595a:	2f00      	cmp	r7, #0
 800595c:	d06d      	beq.n	8005a3a <ai_cnn_get_info+0xee>
 800595e:	2800      	cmp	r0, #0
 8005960:	d06d      	beq.n	8005a3e <ai_cnn_get_info+0xf2>
      .model_signature   = AI_CNN_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005962:	f7fa fe36 	bl	80005d2 <ai_platform_runtime_get_revision>
 8005966:	4680      	mov	r8, r0
    ai_network_report r = {
 8005968:	f7fa fe80 	bl	800066c <ai_platform_runtime_get_version>
 800596c:	9006      	str	r0, [sp, #24]
 800596e:	f7fa fecc 	bl	800070a <ai_platform_api_get_version>
 8005972:	900a      	str	r0, [sp, #40]	; 0x28
 8005974:	f7fa ff18 	bl	80007a8 <ai_platform_interface_api_get_version>
 8005978:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800597c:	ae16      	add	r6, sp, #88	; 0x58
 800597e:	900b      	str	r0, [sp, #44]	; 0x2c
      .weights           = net_ctx->params,
      .n_nodes           = 0,
      .signature         = net_ctx->signature,
    };

    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005980:	2500      	movs	r5, #0
    ai_network_report r = {
 8005982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005984:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8005988:	f104 0314 	add.w	r3, r4, #20
 800598c:	ae1a      	add	r6, sp, #104	; 0x68
 800598e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005990:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      .signature         = net_ctx->signature,
 8005994:	6861      	ldr	r1, [r4, #4]
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005996:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005998:	2a00      	cmp	r2, #0
 800599a:	d147      	bne.n	8005a2c <ai_cnn_get_info+0xe0>
    {
      r.n_nodes++;
    }

    *report = r;
 800599c:	4b28      	ldr	r3, [pc, #160]	; (8005a40 <ai_cnn_get_info+0xf4>)
 800599e:	4829      	ldr	r0, [pc, #164]	; (8005a44 <ai_cnn_get_info+0xf8>)
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <ai_cnn_get_info+0xfc>)
 80059a4:	900c      	str	r0, [sp, #48]	; 0x30
 80059a6:	2031      	movs	r0, #49	; 0x31
 80059a8:	9302      	str	r3, [sp, #8]
 80059aa:	4b28      	ldr	r3, [pc, #160]	; (8005a4c <ai_cnn_get_info+0x100>)
 80059ac:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80059b0:	200a      	movs	r0, #10
 80059b2:	9303      	str	r3, [sp, #12]
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <ai_cnn_get_info+0x104>)
 80059b6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <ai_cnn_get_info+0x108>)
 80059be:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80059c2:	9307      	str	r3, [sp, #28]
 80059c4:	2303      	movs	r3, #3
 80059c6:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80059ca:	f88d 3020 	strb.w	r3, [sp, #32]
 80059ce:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80059d2:	2301      	movs	r3, #1
 80059d4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 80059d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80059dc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80059e0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80059e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80059e8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80059ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80059f0:	9310      	str	r3, [sp, #64]	; 0x40
 80059f2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80059f6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80059fa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80059fe:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8005a02:	230c      	movs	r3, #12
 8005a04:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8005a08:	4638      	mov	r0, r7
 8005a0a:	9211      	str	r2, [sp, #68]	; 0x44
 8005a0c:	9215      	str	r2, [sp, #84]	; 0x54
 8005a0e:	227c      	movs	r2, #124	; 0x7c
 8005a10:	911f      	str	r1, [sp, #124]	; 0x7c
 8005a12:	a901      	add	r1, sp, #4
 8005a14:	f8cd 8014 	str.w	r8, [sp, #20]
 8005a18:	9314      	str	r3, [sp, #80]	; 0x50
 8005a1a:	951e      	str	r5, [sp, #120]	; 0x78
 8005a1c:	f002 fe7d 	bl	800871a <memcpy>

    return ( r.n_nodes>0 ) ? true : false;
 8005a20:	1c28      	adds	r0, r5, #0
 8005a22:	bf18      	it	ne
 8005a24:	2001      	movne	r0, #1
  }
  
  return false;
}
 8005a26:	b020      	add	sp, #128	; 0x80
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8005a2c:	6893      	ldr	r3, [r2, #8]
 8005a2e:	3501      	adds	r5, #1
 8005a30:	429a      	cmp	r2, r3
 8005a32:	bf14      	ite	ne
 8005a34:	461a      	movne	r2, r3
 8005a36:	2200      	moveq	r2, #0
 8005a38:	e7ae      	b.n	8005998 <ai_cnn_get_info+0x4c>
  return false;
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	e7f3      	b.n	8005a26 <ai_cnn_get_info+0xda>
 8005a3e:	e7f2      	b.n	8005a26 <ai_cnn_get_info+0xda>
 8005a40:	0804e2e4 	.word	0x0804e2e4
 8005a44:	002692ce 	.word	0x002692ce
 8005a48:	0804e2e8 	.word	0x0804e2e8
 8005a4c:	0804e309 	.word	0x0804e309
 8005a50:	0804e322 	.word	0x0804e322
 8005a54:	0804e337 	.word	0x0804e337

08005a58 <ai_cnn_get_error>:

AI_API_ENTRY
ai_error ai_cnn_get_error(ai_handle network)
{
 8005a58:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8005a5a:	f7fa ff52 	bl	8000902 <ai_platform_network_get_error>
}
 8005a5e:	bd08      	pop	{r3, pc}

08005a60 <ai_cnn_create>:

AI_API_ENTRY
ai_error ai_cnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
  return ai_platform_network_create(
 8005a60:	2300      	movs	r3, #0
{
 8005a62:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	2301      	movs	r3, #1
 8005a68:	4a03      	ldr	r2, [pc, #12]	; (8005a78 <ai_cnn_create+0x18>)
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f7fa ffac 	bl	80009c8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005a70:	b003      	add	sp, #12
 8005a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a76:	bf00      	nop
 8005a78:	20000768 	.word	0x20000768

08005a7c <ai_cnn_destroy>:

AI_API_ENTRY
ai_handle ai_cnn_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005a7c:	f7fa bfda 	b.w	8000a34 <ai_platform_network_destroy>

08005a80 <ai_cnn_init>:
}

AI_API_ENTRY
ai_bool ai_cnn_init(
  ai_handle network, const ai_network_params* params)
{
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005a84:	f7fb f82d 	bl	8000ae2 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f000 80b8 	beq.w	8005bfe <ai_cnn_init+0x17e>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a8e:	4a5c      	ldr	r2, [pc, #368]	; (8005c00 <ai_cnn_init+0x180>)
 8005a90:	68e3      	ldr	r3, [r4, #12]
 8005a92:	6811      	ldr	r1, [r2, #0]
  conv2d_1_weights_array.data = weights + 0;
 8005a94:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a96:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  conv2d_1_weights_array.data_start = weights + 0;
 8005a9a:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a9c:	6011      	str	r1, [r2, #0]
  conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a9e:	4a59      	ldr	r2, [pc, #356]	; (8005c04 <ai_cnn_init+0x184>)
 8005aa0:	6811      	ldr	r1, [r2, #0]
 8005aa2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005aa6:	6011      	str	r1, [r2, #0]
  conv2d_1_bias_array.data = weights + 4480;
 8005aa8:	f503 518c 	add.w	r1, r3, #4480	; 0x1180
 8005aac:	6091      	str	r1, [r2, #8]
  conv2d_1_bias_array.data_start = weights + 4480;
 8005aae:	60d1      	str	r1, [r2, #12]
  batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 8005ab0:	4a55      	ldr	r2, [pc, #340]	; (8005c08 <ai_cnn_init+0x188>)
 8005ab2:	6811      	ldr	r1, [r2, #0]
 8005ab4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005ab8:	6011      	str	r1, [r2, #0]
  batch_normalization_1_scale_array.data = weights + 4592;
 8005aba:	f503 518f 	add.w	r1, r3, #4576	; 0x11e0
 8005abe:	3110      	adds	r1, #16
 8005ac0:	6091      	str	r1, [r2, #8]
  batch_normalization_1_scale_array.data_start = weights + 4592;
 8005ac2:	60d1      	str	r1, [r2, #12]
  batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ac4:	4a51      	ldr	r2, [pc, #324]	; (8005c0c <ai_cnn_init+0x18c>)
 8005ac6:	6811      	ldr	r1, [r2, #0]
 8005ac8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005acc:	6011      	str	r1, [r2, #0]
  batch_normalization_1_bias_array.data = weights + 4704;
 8005ace:	f503 5193 	add.w	r1, r3, #4704	; 0x1260
 8005ad2:	6091      	str	r1, [r2, #8]
  batch_normalization_1_bias_array.data_start = weights + 4704;
 8005ad4:	60d1      	str	r1, [r2, #12]
  conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ad6:	4a4e      	ldr	r2, [pc, #312]	; (8005c10 <ai_cnn_init+0x190>)
 8005ad8:	6811      	ldr	r1, [r2, #0]
 8005ada:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005ade:	6011      	str	r1, [r2, #0]
  conv2d_2_weights_array.data = weights + 4816;
 8005ae0:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
 8005ae4:	3110      	adds	r1, #16
 8005ae6:	6091      	str	r1, [r2, #8]
  conv2d_2_weights_array.data_start = weights + 4816;
 8005ae8:	60d1      	str	r1, [r2, #12]
  conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aea:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <ai_cnn_init+0x194>)
 8005aec:	6811      	ldr	r1, [r2, #0]
 8005aee:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005af2:	6011      	str	r1, [r2, #0]
  conv2d_2_bias_array.data = weights + 139216;
 8005af4:	f503 3107 	add.w	r1, r3, #138240	; 0x21c00
 8005af8:	f501 7174 	add.w	r1, r1, #976	; 0x3d0
 8005afc:	6091      	str	r1, [r2, #8]
  conv2d_2_bias_array.data_start = weights + 139216;
 8005afe:	60d1      	str	r1, [r2, #12]
  batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 8005b00:	4945      	ldr	r1, [pc, #276]	; (8005c18 <ai_cnn_init+0x198>)
 8005b02:	680a      	ldr	r2, [r1, #0]
 8005b04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b08:	600a      	str	r2, [r1, #0]
  batch_normalization_2_scale_array.data = weights + 139336;
 8005b0a:	f503 3208 	add.w	r2, r3, #139264	; 0x22000
 8005b0e:	f102 0548 	add.w	r5, r2, #72	; 0x48
 8005b12:	608d      	str	r5, [r1, #8]
  batch_normalization_2_scale_array.data_start = weights + 139336;
 8005b14:	60cd      	str	r5, [r1, #12]
  batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b16:	4941      	ldr	r1, [pc, #260]	; (8005c1c <ai_cnn_init+0x19c>)
 8005b18:	680d      	ldr	r5, [r1, #0]
 8005b1a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8005b1e:	600d      	str	r5, [r1, #0]
  batch_normalization_2_bias_array.data = weights + 139456;
 8005b20:	f102 05c0 	add.w	r5, r2, #192	; 0xc0
  dense_1_weights_array.data = weights + 139576;
 8005b24:	f502 729c 	add.w	r2, r2, #312	; 0x138
  batch_normalization_2_bias_array.data = weights + 139456;
 8005b28:	608d      	str	r5, [r1, #8]
  batch_normalization_2_bias_array.data_start = weights + 139456;
 8005b2a:	60cd      	str	r5, [r1, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b2c:	493c      	ldr	r1, [pc, #240]	; (8005c20 <ai_cnn_init+0x1a0>)
 8005b2e:	680d      	ldr	r5, [r1, #0]
  dense_1_weights_array.data = weights + 139576;
 8005b30:	608a      	str	r2, [r1, #8]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b32:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  dense_1_weights_array.data_start = weights + 139576;
 8005b36:	60ca      	str	r2, [r1, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b38:	600d      	str	r5, [r1, #0]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b3a:	493a      	ldr	r1, [pc, #232]	; (8005c24 <ai_cnn_init+0x1a4>)
 8005b3c:	680a      	ldr	r2, [r1, #0]
 8005b3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b42:	600a      	str	r2, [r1, #0]
  dense_1_bias_array.data = weights + 262456;
 8005b44:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 8005b48:	f502 759c 	add.w	r5, r2, #312	; 0x138
  dense_2_weights_array.data = weights + 262520;
 8005b4c:	f502 72bc 	add.w	r2, r2, #376	; 0x178
  dense_1_bias_array.data = weights + 262456;
 8005b50:	608d      	str	r5, [r1, #8]
  dense_1_bias_array.data_start = weights + 262456;
 8005b52:	60cd      	str	r5, [r1, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b54:	4934      	ldr	r1, [pc, #208]	; (8005c28 <ai_cnn_init+0x1a8>)
 8005b56:	680d      	ldr	r5, [r1, #0]
  dense_2_weights_array.data = weights + 262520;
 8005b58:	608a      	str	r2, [r1, #8]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b5a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  dense_2_weights_array.data_start = weights + 262520;
 8005b5e:	60ca      	str	r2, [r1, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b60:	600d      	str	r5, [r1, #0]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b62:	4932      	ldr	r1, [pc, #200]	; (8005c2c <ai_cnn_init+0x1ac>)
 8005b64:	680a      	ldr	r2, [r1, #0]
 8005b66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b6a:	600a      	str	r2, [r1, #0]
  dense_2_bias_array.data = weights + 270712;
 8005b6c:	f503 2284 	add.w	r2, r3, #270336	; 0x42000
  dense_3_bias_array.data = weights + 277368;
 8005b70:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
  dense_2_bias_array.data = weights + 270712;
 8005b74:	f502 75bc 	add.w	r5, r2, #376	; 0x178
  dense_3_weights_array.data = weights + 271224;
 8005b78:	f502 725e 	add.w	r2, r2, #888	; 0x378
  dense_3_bias_array.data = weights + 277368;
 8005b7c:	f503 735e 	add.w	r3, r3, #888	; 0x378
  dense_2_bias_array.data = weights + 270712;
 8005b80:	608d      	str	r5, [r1, #8]
  dense_2_bias_array.data_start = weights + 270712;
 8005b82:	60cd      	str	r5, [r1, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b84:	492a      	ldr	r1, [pc, #168]	; (8005c30 <ai_cnn_init+0x1b0>)
 8005b86:	680d      	ldr	r5, [r1, #0]
  dense_3_weights_array.data = weights + 271224;
 8005b88:	608a      	str	r2, [r1, #8]
  dense_3_weights_array.data_start = weights + 271224;
 8005b8a:	60ca      	str	r2, [r1, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b8c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b90:	4a28      	ldr	r2, [pc, #160]	; (8005c34 <ai_cnn_init+0x1b4>)
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b92:	600d      	str	r5, [r1, #0]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b94:	6811      	ldr	r1, [r2, #0]
  dense_3_bias_array.data = weights + 277368;
 8005b96:	6093      	str	r3, [r2, #8]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b98:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  dense_3_bias_array.data_start = weights + 277368;
 8005b9c:	60d3      	str	r3, [r2, #12]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005b9e:	69e3      	ldr	r3, [r4, #28]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba0:	6011      	str	r1, [r2, #0]
    input_0_output_array.data = NULL;
 8005ba2:	2100      	movs	r1, #0
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005ba4:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005ba6:	3303      	adds	r3, #3
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005bac:	f023 0303 	bic.w	r3, r3, #3
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8005bb0:	6082      	str	r2, [r0, #8]

  ai_bool ok = true;
  ok &= cnn_configure_weights(net_ctx, &params->params);
  ok &= cnn_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8005bb2:	2001      	movs	r0, #1
    input_0_output_array.data = NULL;
 8005bb4:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <ai_cnn_init+0x1b8>)
 8005bb6:	6091      	str	r1, [r2, #8]
  input_0_output_array.data_start = NULL;
 8005bb8:	60d1      	str	r1, [r2, #12]
  conv2d_1_output_array.data = activations + 0;
 8005bba:	4a20      	ldr	r2, [pc, #128]	; (8005c3c <ai_cnn_init+0x1bc>)
  conv2d_2_output_array.data = activations + 31360;
 8005bbc:	4920      	ldr	r1, [pc, #128]	; (8005c40 <ai_cnn_init+0x1c0>)
  conv2d_1_output_array.data = activations + 0;
 8005bbe:	6093      	str	r3, [r2, #8]
  conv2d_1_output_array.data_start = activations + 0;
 8005bc0:	60d3      	str	r3, [r2, #12]
  batch_normalization_1_output_array.data = activations + 0;
 8005bc2:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <ai_cnn_init+0x1c4>)
 8005bc4:	6093      	str	r3, [r2, #8]
  batch_normalization_1_output_array.data_start = activations + 0;
 8005bc6:	60d3      	str	r3, [r2, #12]
  conv2d_2_output_array.data = activations + 31360;
 8005bc8:	f503 42f5 	add.w	r2, r3, #31360	; 0x7a80
 8005bcc:	608a      	str	r2, [r1, #8]
  conv2d_2_output_array.data_start = activations + 31360;
 8005bce:	60ca      	str	r2, [r1, #12]
  batch_normalization_2_output_in_array.data = activations + 31360;
 8005bd0:	491d      	ldr	r1, [pc, #116]	; (8005c48 <ai_cnn_init+0x1c8>)
 8005bd2:	608a      	str	r2, [r1, #8]
  batch_normalization_2_output_in_array.data_start = activations + 31360;
 8005bd4:	60ca      	str	r2, [r1, #12]
  batch_normalization_2_output_out_array.data = activations + 31360;
 8005bd6:	491d      	ldr	r1, [pc, #116]	; (8005c4c <ai_cnn_init+0x1cc>)
 8005bd8:	608a      	str	r2, [r1, #8]
  batch_normalization_2_output_out_array.data_start = activations + 31360;
 8005bda:	60ca      	str	r2, [r1, #12]
  dense_1_output_array.data = activations + 0;
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <ai_cnn_init+0x1d0>)
  dense_2_output_array.data = activations + 64;
 8005bde:	491d      	ldr	r1, [pc, #116]	; (8005c54 <ai_cnn_init+0x1d4>)
  dense_1_output_array.data = activations + 0;
 8005be0:	6093      	str	r3, [r2, #8]
  dense_1_output_array.data_start = activations + 0;
 8005be2:	60d3      	str	r3, [r2, #12]
  dense_2_output_array.data = activations + 64;
 8005be4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005be8:	608a      	str	r2, [r1, #8]
  dense_2_output_array.data_start = activations + 64;
 8005bea:	60ca      	str	r2, [r1, #12]
  dense_2_nl_output_array.data = activations + 64;
 8005bec:	491a      	ldr	r1, [pc, #104]	; (8005c58 <ai_cnn_init+0x1d8>)
 8005bee:	608a      	str	r2, [r1, #8]
  dense_2_nl_output_array.data_start = activations + 64;
 8005bf0:	60ca      	str	r2, [r1, #12]
  dense_3_output_array.data = activations + 0;
 8005bf2:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <ai_cnn_init+0x1dc>)
 8005bf4:	6093      	str	r3, [r2, #8]
  dense_3_output_array.data_start = activations + 0;
 8005bf6:	60d3      	str	r3, [r2, #12]
  dense_3_nl_output_array.data = activations + 0;
 8005bf8:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <ai_cnn_init+0x1e0>)
 8005bfa:	6093      	str	r3, [r2, #8]
  dense_3_nl_output_array.data_start = activations + 0;
 8005bfc:	60d3      	str	r3, [r2, #12]
}
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	200003d8 	.word	0x200003d8
 8005c04:	20000340 	.word	0x20000340
 8005c08:	20000224 	.word	0x20000224
 8005c0c:	200001a4 	.word	0x200001a4
 8005c10:	200004a4 	.word	0x200004a4
 8005c14:	2000040c 	.word	0x2000040c
 8005c18:	2000030c 	.word	0x2000030c
 8005c1c:	20000258 	.word	0x20000258
 8005c20:	20000558 	.word	0x20000558
 8005c24:	200004d8 	.word	0x200004d8
 8005c28:	20000658 	.word	0x20000658
 8005c2c:	2000058c 	.word	0x2000058c
 8005c30:	20000758 	.word	0x20000758
 8005c34:	2000068c 	.word	0x2000068c
 8005c38:	200007d4 	.word	0x200007d4
 8005c3c:	200003a4 	.word	0x200003a4
 8005c40:	20000470 	.word	0x20000470
 8005c44:	200001f0 	.word	0x200001f0
 8005c48:	200002a4 	.word	0x200002a4
 8005c4c:	200002d8 	.word	0x200002d8
 8005c50:	20000524 	.word	0x20000524
 8005c54:	20000624 	.word	0x20000624
 8005c58:	200005f0 	.word	0x200005f0
 8005c5c:	20000724 	.word	0x20000724
 8005c60:	200006f0 	.word	0x200006f0

08005c64 <ai_cnn_run>:

AI_API_ENTRY
ai_i32 ai_cnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005c64:	f7fa bfb5 	b.w	8000bd2 <ai_platform_network_process>

08005c68 <ai_cnn_forward>:
}

AI_API_ENTRY
ai_i32 ai_cnn_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f7fa bfb2 	b.w	8000bd2 <ai_platform_network_process>

08005c6e <init_aibuffer_msg>:
}


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferMsg *msg)
{
    if ((!aibuffer) || (!msg))
 8005c6e:	b160      	cbz	r0, 8005c8a <init_aibuffer_msg+0x1c>
 8005c70:	b159      	cbz	r1, 8005c8a <init_aibuffer_msg+0x1c>
        return;

    msg->format = (EnumFormat)aibuffer->format;
 8005c72:	8803      	ldrh	r3, [r0, #0]
 8005c74:	700b      	strb	r3, [r1, #0]
    msg->channels = aibuffer->channels;
 8005c76:	6883      	ldr	r3, [r0, #8]
 8005c78:	610b      	str	r3, [r1, #16]
    msg->height = aibuffer->height;
 8005c7a:	8883      	ldrh	r3, [r0, #4]
 8005c7c:	608b      	str	r3, [r1, #8]
    msg->width = aibuffer->width;
 8005c7e:	88c3      	ldrh	r3, [r0, #6]
 8005c80:	60cb      	str	r3, [r1, #12]
    msg->n_batches = aibuffer->n_batches;
 8005c82:	8843      	ldrh	r3, [r0, #2]
 8005c84:	604b      	str	r3, [r1, #4]
    msg->datas.funcs.encode = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	614b      	str	r3, [r1, #20]
 8005c8a:	4770      	bx	lr

08005c8c <aiPbBuffer_read_cb>:
{
 8005c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    struct aiPbMgrBuffer *buffer = (struct aiPbMgrBuffer *)*arg;
 8005c8e:	6816      	ldr	r6, [r2, #0]
{
 8005c90:	4607      	mov	r7, r0
    if (buffer) {
 8005c92:	b936      	cbnz	r6, 8005ca2 <aiPbBuffer_read_cb+0x16>
    ai_float *pw = NULL;
 8005c94:	2500      	movs	r5, #0
    int maxr = 0;
 8005c96:	462c      	mov	r4, r5
    while (stream->bytes_left)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	b963      	cbnz	r3, 8005cb6 <aiPbBuffer_read_cb+0x2a>
    return true;
 8005c9c:	2001      	movs	r0, #1
}
 8005c9e:	b003      	add	sp, #12
 8005ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        buffer->n_ops = 0;
 8005ca2:	2300      	movs	r3, #0
        if (buffer->n_max && buffer->buffer) {
 8005ca4:	6874      	ldr	r4, [r6, #4]
        buffer->n_ops = 0;
 8005ca6:	60b3      	str	r3, [r6, #8]
        if (buffer->n_max && buffer->buffer) {
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	d0f3      	beq.n	8005c94 <aiPbBuffer_read_cb+0x8>
 8005cac:	6835      	ldr	r5, [r6, #0]
            maxr = buffer->n_max;
 8005cae:	429d      	cmp	r5, r3
 8005cb0:	bf08      	it	eq
 8005cb2:	461c      	moveq	r4, r3
 8005cb4:	e7f0      	b.n	8005c98 <aiPbBuffer_read_cb+0xc>
        if (!pb_decode_fixed32(stream, &value))
 8005cb6:	a901      	add	r1, sp, #4
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f001 fe23 	bl	8007904 <pb_decode_fixed32>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0ed      	beq.n	8005c9e <aiPbBuffer_read_cb+0x12>
        if (maxr > 0) {
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	dde8      	ble.n	8005c98 <aiPbBuffer_read_cb+0xc>
            *pw++ = (ai_float)value;
 8005cc6:	9b01      	ldr	r3, [sp, #4]
            maxr--;
 8005cc8:	3c01      	subs	r4, #1
            *pw++ = (ai_float)value;
 8005cca:	3504      	adds	r5, #4
 8005ccc:	f845 3c04 	str.w	r3, [r5, #-4]
            buffer->n_ops++;
 8005cd0:	68b3      	ldr	r3, [r6, #8]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60b3      	str	r3, [r6, #8]
 8005cd6:	e7df      	b.n	8005c98 <aiPbBuffer_read_cb+0xc>

08005cd8 <aiPbBuffer_write_cb>:
{
 8005cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    struct aiPbMgrBuffer *buffer = (struct aiPbMgrBuffer *)*arg;
 8005cdc:	6814      	ldr	r4, [r2, #0]
{
 8005cde:	4680      	mov	r8, r0
 8005ce0:	4689      	mov	r9, r1
    if (buffer) {
 8005ce2:	b91c      	cbnz	r4, 8005cec <aiPbBuffer_write_cb+0x14>
    return true;
 8005ce4:	2001      	movs	r0, #1
}
 8005ce6:	b003      	add	sp, #12
 8005ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (buffer->n_max && buffer->buffer) {
 8005cec:	6866      	ldr	r6, [r4, #4]
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	d0f8      	beq.n	8005ce4 <aiPbBuffer_write_cb+0xc>
 8005cf2:	6827      	ldr	r7, [r4, #0]
 8005cf4:	2f00      	cmp	r7, #0
 8005cf6:	d0f5      	beq.n	8005ce4 <aiPbBuffer_write_cb+0xc>
            if (buffer->n_ops)
 8005cf8:	68a3      	ldr	r3, [r4, #8]
 8005cfa:	b113      	cbz	r3, 8005d02 <aiPbBuffer_write_cb+0x2a>
                maxw = (buffer->n_ops < buffer->n_max)?buffer->n_ops:buffer->n_max;
 8005cfc:	429e      	cmp	r6, r3
 8005cfe:	bf28      	it	cs
 8005d00:	461e      	movcs	r6, r3
            buffer->n_ops = 0;
 8005d02:	2500      	movs	r5, #0
 8005d04:	60a5      	str	r5, [r4, #8]
    for (int i = 0; i < maxw; i++) {
 8005d06:	42ae      	cmp	r6, r5
 8005d08:	ddec      	ble.n	8005ce4 <aiPbBuffer_write_cb+0xc>
        if (!pb_encode_tag_for_field(stream, field))
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f001 ff6b 	bl	8007be8 <pb_encode_tag_for_field>
 8005d12:	b908      	cbnz	r0, 8005d18 <aiPbBuffer_write_cb+0x40>
            return false;
 8005d14:	2000      	movs	r0, #0
 8005d16:	e7e6      	b.n	8005ce6 <aiPbBuffer_write_cb+0xe>
        value = *pr++;
 8005d18:	f857 3b04 	ldr.w	r3, [r7], #4
        if (!pb_encode_fixed32(stream, &value))
 8005d1c:	a901      	add	r1, sp, #4
 8005d1e:	4640      	mov	r0, r8
        value = *pr++;
 8005d20:	9301      	str	r3, [sp, #4]
        if (!pb_encode_fixed32(stream, &value))
 8005d22:	f001 ff1b 	bl	8007b5c <pb_encode_fixed32>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d0f4      	beq.n	8005d14 <aiPbBuffer_write_cb+0x3c>
        buffer->n_ops++;
 8005d2a:	68a3      	ldr	r3, [r4, #8]
    for (int i = 0; i < maxw; i++) {
 8005d2c:	3501      	adds	r5, #1
        buffer->n_ops++;
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	e7e8      	b.n	8005d06 <aiPbBuffer_write_cb+0x2e>

08005d34 <nn_shape_w_cb.constprop.0>:
}

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
 8005d34:	b530      	push	{r4, r5, lr}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	4604      	mov	r4, r0
 8005d3a:	4615      	mov	r5, r2
        const ai_buffer *aibuffer, int maxw)
{
    aiBufferMsg msg;

    for (int i = 0; i < maxw; i++) {
        if (!pb_encode_tag_for_field(stream, field))
 8005d3c:	f001 ff54 	bl	8007be8 <pb_encode_tag_for_field>
 8005d40:	b140      	cbz	r0, 8005d54 <nn_shape_w_cb.constprop.0+0x20>
            return false;

        init_aibuffer_msg(&aibuffer[i], &msg);
 8005d42:	a901      	add	r1, sp, #4
 8005d44:	4628      	mov	r0, r5
 8005d46:	f7ff ff92 	bl	8005c6e <init_aibuffer_msg>

        if (!pb_encode_submessage(stream, aiBufferMsg_fields, &msg))
 8005d4a:	aa01      	add	r2, sp, #4
 8005d4c:	4902      	ldr	r1, [pc, #8]	; (8005d58 <nn_shape_w_cb.constprop.0+0x24>)
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f002 f8ee 	bl	8007f30 <pb_encode_submessage>
            return false;
    }
    return true;
}
 8005d54:	b009      	add	sp, #36	; 0x24
 8005d56:	bd30      	pop	{r4, r5, pc}
 8005d58:	0804ec15 	.word	0x0804ec15

08005d5c <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
    ai_network_report *report = (ai_network_report *)*arg;
 8005d5c:	6812      	ldr	r2, [r2, #0]

    if (!report)
 8005d5e:	b112      	cbz	r2, 8005d66 <nn_inputs_w_cb+0xa>
        return true;

    return nn_shape_w_cb(stream, field, &report->inputs, 1);
 8005d60:	3234      	adds	r2, #52	; 0x34
 8005d62:	f7ff bfe7 	b.w	8005d34 <nn_shape_w_cb.constprop.0>
}
 8005d66:	2001      	movs	r0, #1
 8005d68:	4770      	bx	lr

08005d6a <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
    ai_network_report *report = (ai_network_report *)*arg;
 8005d6a:	6812      	ldr	r2, [r2, #0]

    if (!report)
 8005d6c:	b112      	cbz	r2, 8005d74 <nn_outputs_w_cb+0xa>
        return true;

    return nn_shape_w_cb(stream, field, &report->outputs, 1);
 8005d6e:	3244      	adds	r2, #68	; 0x44
 8005d70:	f7ff bfe0 	b.w	8005d34 <nn_shape_w_cb.constprop.0>
}
 8005d74:	2001      	movs	r0, #1
 8005d76:	4770      	bx	lr

08005d78 <aiPbMgrInit>:
{
 8005d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7a:	b08b      	sub	sp, #44	; 0x2c
    pbContextMgr.input = pb_istream_from_uart(0);
 8005d7c:	2100      	movs	r1, #0
{
 8005d7e:	4607      	mov	r7, r0
    pbContextMgr.input = pb_istream_from_uart(0);
 8005d80:	4c13      	ldr	r4, [pc, #76]	; (8005dd0 <aiPbMgrInit+0x58>)
 8005d82:	ad06      	add	r5, sp, #24
    pbContextMgr.output = pb_ostream_to_uart(0);
 8005d84:	f104 0610 	add.w	r6, r4, #16
    pbContextMgr.input = pb_istream_from_uart(0);
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 fd27 	bl	80067dc <pb_istream_from_uart>
 8005d8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 8005d92:	466d      	mov	r5, sp
    pbContextMgr.input = pb_istream_from_uart(0);
 8005d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4668      	mov	r0, sp
 8005d9c:	f000 fd0c 	bl	80067b8 <pb_ostream_to_uart>
 8005da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005da2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	6033      	str	r3, [r6, #0]
    pbContextMgr.n_func = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = NULL;
 8005dac:	6263      	str	r3, [r4, #36]	; 0x24
    if (funcs) {
 8005dae:	b967      	cbnz	r7, 8005dca <aiPbMgrInit+0x52>
}
 8005db0:	b00b      	add	sp, #44	; 0x2c
 8005db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cfunc++;
 8005db4:	320c      	adds	r2, #12
 8005db6:	2101      	movs	r1, #1
 8005db8:	462b      	mov	r3, r5
        while (cfunc->process) {
 8005dba:	6850      	ldr	r0, [r2, #4]
 8005dbc:	1c5d      	adds	r5, r3, #1
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d1f8      	bne.n	8005db4 <aiPbMgrInit+0x3c>
 8005dc2:	b101      	cbz	r1, 8005dc6 <aiPbMgrInit+0x4e>
 8005dc4:	62a3      	str	r3, [r4, #40]	; 0x28
        pbContextMgr.funcs = funcs;
 8005dc6:	6267      	str	r7, [r4, #36]	; 0x24
}
 8005dc8:	e7f2      	b.n	8005db0 <aiPbMgrInit+0x38>
 8005dca:	463a      	mov	r2, r7
 8005dcc:	4619      	mov	r1, r3
 8005dce:	e7f4      	b.n	8005dba <aiPbMgrInit+0x42>
 8005dd0:	200008fc 	.word	0x200008fc

08005dd4 <aiPbMgrSendResp>:
{
 8005dd4:	b508      	push	{r3, lr}
    resp->reqid = req->reqid;
 8005dd6:	6803      	ldr	r3, [r0, #0]
    resp->state = state;
 8005dd8:	710a      	strb	r2, [r1, #4]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8005dda:	460a      	mov	r2, r1
    resp->reqid = req->reqid;
 8005ddc:	600b      	str	r3, [r1, #0]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8005dde:	4804      	ldr	r0, [pc, #16]	; (8005df0 <aiPbMgrSendResp+0x1c>)
 8005de0:	4904      	ldr	r1, [pc, #16]	; (8005df4 <aiPbMgrSendResp+0x20>)
 8005de2:	f002 f821 	bl	8007e28 <pb_encode>
}
 8005de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ioFlushWrite();
 8005dea:	f000 bccb 	b.w	8006784 <ioFlushWrite>
 8005dee:	bf00      	nop
 8005df0:	2000090c 	.word	0x2000090c
 8005df4:	0804eedd 	.word	0x0804eedd

08005df8 <aiPbMgrWaitAndProcess>:
{
 8005df8:	b570      	push	{r4, r5, r6, lr}
    if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 8005dfa:	4d16      	ldr	r5, [pc, #88]	; (8005e54 <aiPbMgrWaitAndProcess+0x5c>)
    ioFlushRead();
 8005dfc:	f000 fcd0 	bl	80067a0 <ioFlushRead>
    if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 8005e00:	4c15      	ldr	r4, [pc, #84]	; (8005e58 <aiPbMgrWaitAndProcess+0x60>)
 8005e02:	462a      	mov	r2, r5
 8005e04:	4915      	ldr	r1, [pc, #84]	; (8005e5c <aiPbMgrWaitAndProcess+0x64>)
 8005e06:	4620      	mov	r0, r4
 8005e08:	f001 fd12 	bl	8007830 <pb_decode_delimited>
 8005e0c:	b1e0      	cbz	r0, 8005e48 <aiPbMgrWaitAndProcess+0x50>
        ioFlushRead();
 8005e0e:	f000 fcc7 	bl	80067a0 <ioFlushRead>
            if (cfunc->cmd == req.cmd) {
 8005e12:	7928      	ldrb	r0, [r5, #4]
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8005e14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e16:	2500      	movs	r5, #0
 8005e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1a:	428d      	cmp	r5, r1
 8005e1c:	d009      	beq.n	8005e32 <aiPbMgrWaitAndProcess+0x3a>
            cfunc = &pbContextMgr.funcs[idx];
 8005e1e:	461a      	mov	r2, r3
            if (cfunc->cmd == req.cmd) {
 8005e20:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8005e24:	4286      	cmp	r6, r0
 8005e26:	d113      	bne.n	8005e50 <aiPbMgrWaitAndProcess+0x58>
                cfunc->process(&req, &resp, cfunc->param);
 8005e28:	6853      	ldr	r3, [r2, #4]
 8005e2a:	490d      	ldr	r1, [pc, #52]	; (8005e60 <aiPbMgrWaitAndProcess+0x68>)
 8005e2c:	6892      	ldr	r2, [r2, #8]
 8005e2e:	4809      	ldr	r0, [pc, #36]	; (8005e54 <aiPbMgrWaitAndProcess+0x5c>)
 8005e30:	4798      	blx	r3
        if (idx == pbContextMgr.n_func) {
 8005e32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e34:	429d      	cmp	r5, r3
 8005e36:	d107      	bne.n	8005e48 <aiPbMgrWaitAndProcess+0x50>
    resp->which_payload = respMsg_ack_tag;
 8005e38:	4909      	ldr	r1, [pc, #36]	; (8005e60 <aiPbMgrWaitAndProcess+0x68>)
 8005e3a:	230c      	movs	r3, #12
    resp->payload.ack.param = param;
 8005e3c:	2204      	movs	r2, #4
    aiPbMgrSendResp(req, resp, state);
 8005e3e:	4805      	ldr	r0, [pc, #20]	; (8005e54 <aiPbMgrWaitAndProcess+0x5c>)
    resp->which_payload = respMsg_ack_tag;
 8005e40:	80cb      	strh	r3, [r1, #6]
    resp->payload.ack.param = param;
 8005e42:	608a      	str	r2, [r1, #8]
    aiPbMgrSendResp(req, resp, state);
 8005e44:	f7ff ffc6 	bl	8005dd4 <aiPbMgrSendResp>
    ioFlushRead();
 8005e48:	f000 fcaa 	bl	80067a0 <ioFlushRead>
}
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8005e50:	3501      	adds	r5, #1
 8005e52:	e7e2      	b.n	8005e1a <aiPbMgrWaitAndProcess+0x22>
 8005e54:	20000928 	.word	0x20000928
 8005e58:	200008fc 	.word	0x200008fc
 8005e5c:	0804ee92 	.word	0x0804ee92
 8005e60:	20000974 	.word	0x20000974

08005e64 <aiPbMgrSendAck>:
{
 8005e64:	b430      	push	{r4, r5}
    resp->which_payload = respMsg_ack_tag;
 8005e66:	250c      	movs	r5, #12
    resp->payload.ack.param = param;
 8005e68:	608b      	str	r3, [r1, #8]
    resp->which_payload = respMsg_ack_tag;
 8005e6a:	80cd      	strh	r5, [r1, #6]
}
 8005e6c:	bc30      	pop	{r4, r5}
    aiPbMgrSendResp(req, resp, state);
 8005e6e:	f7ff bfb1 	b.w	8005dd4 <aiPbMgrSendResp>
	...

08005e74 <aiPbMgrWaitAck>:
{
 8005e74:	b513      	push	{r0, r1, r4, lr}
    ackMsg ack = ackMsg_init_default;
 8005e76:	2300      	movs	r3, #0
 8005e78:	aa02      	add	r2, sp, #8
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8005e7a:	4906      	ldr	r1, [pc, #24]	; (8005e94 <aiPbMgrWaitAck+0x20>)
    ackMsg ack = ackMsg_init_default;
 8005e7c:	f842 3d04 	str.w	r3, [r2, #-4]!
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8005e80:	4805      	ldr	r0, [pc, #20]	; (8005e98 <aiPbMgrWaitAck+0x24>)
 8005e82:	f001 fcd5 	bl	8007830 <pb_decode_delimited>
 8005e86:	4604      	mov	r4, r0
    ioFlushRead();
 8005e88:	f000 fc8a 	bl	80067a0 <ioFlushRead>
}
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	b002      	add	sp, #8
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	bf00      	nop
 8005e94:	0804ebf7 	.word	0x0804ebf7
 8005e98:	200008fc 	.word	0x200008fc

08005e9c <aiPbAiBufferSize>:
    if (!buffer)
 8005e9c:	b130      	cbz	r0, 8005eac <aiPbAiBufferSize+0x10>
                * buffer->width * buffer->n_batches;
 8005e9e:	88c3      	ldrh	r3, [r0, #6]
        return buffer->channels * buffer->height
 8005ea0:	8882      	ldrh	r2, [r0, #4]
                * buffer->width * buffer->n_batches;
 8005ea2:	435a      	muls	r2, r3
 8005ea4:	6883      	ldr	r3, [r0, #8]
 8005ea6:	8840      	ldrh	r0, [r0, #2]
 8005ea8:	4353      	muls	r3, r2
 8005eaa:	4358      	muls	r0, r3
}
 8005eac:	4770      	bx	lr
	...

08005eb0 <aiPbMgrReceiveAiBuffer>:
{
 8005eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb4:	4690      	mov	r8, r2
 8005eb6:	b08c      	sub	sp, #48	; 0x30
    hdlb.n_ops = 0;
 8005eb8:	2200      	movs	r2, #0
{
 8005eba:	4607      	mov	r7, r0
 8005ebc:	460d      	mov	r5, r1
 8005ebe:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
    hdlb.n_ops = 0;
 8005ec2:	9203      	str	r2, [sp, #12]
    if (!buffer || buffer->format != AI_BUFFER_FORMAT_FLOAT ||
 8005ec4:	461c      	mov	r4, r3
 8005ec6:	b123      	cbz	r3, 8005ed2 <aiPbMgrReceiveAiBuffer+0x22>
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <aiPbMgrReceiveAiBuffer+0x22>
            !buffer->data) {
 8005ece:	68e3      	ldr	r3, [r4, #12]
    if (!buffer || buffer->format != AI_BUFFER_FORMAT_FLOAT ||
 8005ed0:	b9db      	cbnz	r3, 8005f0a <aiPbMgrReceiveAiBuffer+0x5a>
        hdlb.n_max  = 0;
 8005ed2:	9202      	str	r2, [sp, #8]
        hdlb.buffer = NULL;
 8005ed4:	9201      	str	r2, [sp, #4]
    aibuffer.datas.funcs.decode = &aiPbBuffer_read_cb;
 8005ed6:	4b31      	ldr	r3, [pc, #196]	; (8005f9c <aiPbMgrReceiveAiBuffer+0xec>)
    hdlb.msg = &aibuffer;
 8005ed8:	aa05      	add	r2, sp, #20
    pb_decode_delimited(&pbContextMgr.input, aiBufferMsg_fields, &aibuffer);
 8005eda:	4931      	ldr	r1, [pc, #196]	; (8005fa0 <aiPbMgrReceiveAiBuffer+0xf0>)
    aibuffer.datas.funcs.decode = &aiPbBuffer_read_cb;
 8005edc:	930a      	str	r3, [sp, #40]	; 0x28
    aibuffer.datas.arg = &hdlb;
 8005ede:	ab01      	add	r3, sp, #4
    pb_decode_delimited(&pbContextMgr.input, aiBufferMsg_fields, &aibuffer);
 8005ee0:	4830      	ldr	r0, [pc, #192]	; (8005fa4 <aiPbMgrReceiveAiBuffer+0xf4>)
    hdlb.msg = &aibuffer;
 8005ee2:	9204      	str	r2, [sp, #16]
    aibuffer.datas.arg = &hdlb;
 8005ee4:	930b      	str	r3, [sp, #44]	; 0x2c
    pb_decode_delimited(&pbContextMgr.input, aiBufferMsg_fields, &aibuffer);
 8005ee6:	f001 fca3 	bl	8007830 <pb_decode_delimited>
    ioFlushRead();
 8005eea:	f000 fc59 	bl	80067a0 <ioFlushRead>
    if (!buffer) {
 8005eee:	b994      	cbnz	r4, 8005f16 <aiPbMgrReceiveAiBuffer+0x66>
    resp->which_payload = respMsg_ack_tag;
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	80eb      	strh	r3, [r5, #6]
    resp->payload.ack.param = param;
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	60ab      	str	r3, [r5, #8]
    aiPbMgrSendResp(req, resp, state);
 8005ef8:	4642      	mov	r2, r8
 8005efa:	4629      	mov	r1, r5
 8005efc:	4638      	mov	r0, r7
            res = true;
 8005efe:	2601      	movs	r6, #1
    aiPbMgrSendResp(req, resp, state);
 8005f00:	f7ff ff68 	bl	8005dd4 <aiPbMgrSendResp>
            aiPbMgrWaitAck();
 8005f04:	f7ff ffb6 	bl	8005e74 <aiPbMgrWaitAck>
 8005f08:	e024      	b.n	8005f54 <aiPbMgrReceiveAiBuffer+0xa4>
        hdlb.n_max = aiPbAiBufferSize(buffer);
 8005f0a:	4620      	mov	r0, r4
        hdlb.buffer = (ai_float *)buffer->data;
 8005f0c:	9301      	str	r3, [sp, #4]
        hdlb.n_max = aiPbAiBufferSize(buffer);
 8005f0e:	f7ff ffc5 	bl	8005e9c <aiPbAiBufferSize>
 8005f12:	9002      	str	r0, [sp, #8]
 8005f14:	e7df      	b.n	8005ed6 <aiPbMgrReceiveAiBuffer+0x26>
 8005f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
        if (check == true) {
 8005f18:	b35e      	cbz	r6, 8005f72 <aiPbMgrReceiveAiBuffer+0xc2>
            if ((aibuffer.channels != buffer->channels) ||
 8005f1a:	68a3      	ldr	r3, [r4, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d10f      	bne.n	8005f40 <aiPbMgrReceiveAiBuffer+0x90>
                    (aibuffer.height != buffer->height) ||
 8005f20:	88a3      	ldrh	r3, [r4, #4]
            if ((aibuffer.channels != buffer->channels) ||
 8005f22:	9a07      	ldr	r2, [sp, #28]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d10b      	bne.n	8005f40 <aiPbMgrReceiveAiBuffer+0x90>
                    (aibuffer.width != buffer->width) ||
 8005f28:	88e3      	ldrh	r3, [r4, #6]
                    (aibuffer.height != buffer->height) ||
 8005f2a:	9a08      	ldr	r2, [sp, #32]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d107      	bne.n	8005f40 <aiPbMgrReceiveAiBuffer+0x90>
                    (aibuffer.n_batches != buffer->n_batches) ||
 8005f30:	8863      	ldrh	r3, [r4, #2]
                    (aibuffer.width != buffer->width) ||
 8005f32:	9a06      	ldr	r2, [sp, #24]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d103      	bne.n	8005f40 <aiPbMgrReceiveAiBuffer+0x90>
                    (hdlb.n_ops != hdlb.n_max)) {
 8005f38:	9b03      	ldr	r3, [sp, #12]
                    (aibuffer.n_batches != buffer->n_batches) ||
 8005f3a:	9a02      	ldr	r2, [sp, #8]
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00d      	beq.n	8005f5c <aiPbMgrReceiveAiBuffer+0xac>
    resp->which_payload = respMsg_ack_tag;
 8005f40:	230c      	movs	r3, #12
                res = false;
 8005f42:	2600      	movs	r6, #0
    aiPbMgrSendResp(req, resp, state);
 8005f44:	2204      	movs	r2, #4
 8005f46:	4629      	mov	r1, r5
    resp->which_payload = respMsg_ack_tag;
 8005f48:	80eb      	strh	r3, [r5, #6]
    resp->payload.ack.param = param;
 8005f4a:	2301      	movs	r3, #1
    aiPbMgrSendResp(req, resp, state);
 8005f4c:	4638      	mov	r0, r7
    resp->payload.ack.param = param;
 8005f4e:	60ab      	str	r3, [r5, #8]
    aiPbMgrSendResp(req, resp, state);
 8005f50:	f7ff ff40 	bl	8005dd4 <aiPbMgrSendResp>
}
 8005f54:	4630      	mov	r0, r6
 8005f56:	b00c      	add	sp, #48	; 0x30
 8005f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    resp->which_payload = respMsg_ack_tag;
 8005f5c:	220c      	movs	r2, #12
    resp->payload.ack.param = param;
 8005f5e:	60ab      	str	r3, [r5, #8]
    aiPbMgrSendResp(req, resp, state);
 8005f60:	4629      	mov	r1, r5
 8005f62:	4638      	mov	r0, r7
    resp->which_payload = respMsg_ack_tag;
 8005f64:	80ea      	strh	r2, [r5, #6]
    aiPbMgrSendResp(req, resp, state);
 8005f66:	4642      	mov	r2, r8
 8005f68:	f7ff ff34 	bl	8005dd4 <aiPbMgrSendResp>
                aiPbMgrWaitAck();
 8005f6c:	f7ff ff82 	bl	8005e74 <aiPbMgrWaitAck>
 8005f70:	e7f0      	b.n	8005f54 <aiPbMgrReceiveAiBuffer+0xa4>
        return buffer->channels * buffer->height
 8005f72:	f8dd e01c 	ldr.w	lr, [sp, #28]
                * buffer->width * buffer->n_batches;
 8005f76:	9e08      	ldr	r6, [sp, #32]
        return buffer->channels * buffer->height
 8005f78:	fb0e f302 	mul.w	r3, lr, r2
                * buffer->width * buffer->n_batches;
 8005f7c:	9806      	ldr	r0, [sp, #24]
            if ((hdlb.n_ops >= aiPbAiBufferMsgSize(&aibuffer))) {
 8005f7e:	9903      	ldr	r1, [sp, #12]
                * buffer->width * buffer->n_batches;
 8005f80:	4373      	muls	r3, r6
 8005f82:	4343      	muls	r3, r0
            if ((hdlb.n_ops >= aiPbAiBufferMsgSize(&aibuffer))) {
 8005f84:	4299      	cmp	r1, r3
    resp->which_payload = respMsg_ack_tag;
 8005f86:	f04f 030c 	mov.w	r3, #12
                buffer->channels = aibuffer.channels;
 8005f8a:	bf21      	itttt	cs
 8005f8c:	60a2      	strcs	r2, [r4, #8]
                buffer->height = aibuffer.height;
 8005f8e:	f8a4 e004 	strhcs.w	lr, [r4, #4]
                buffer->width = aibuffer.width;
 8005f92:	80e6      	strhcs	r6, [r4, #6]
                buffer->n_batches = aibuffer.n_batches;
 8005f94:	8060      	strhcs	r0, [r4, #2]
    resp->which_payload = respMsg_ack_tag;
 8005f96:	80eb      	strh	r3, [r5, #6]
    resp->payload.ack.param = param;
 8005f98:	60a9      	str	r1, [r5, #8]
 8005f9a:	e7ad      	b.n	8005ef8 <aiPbMgrReceiveAiBuffer+0x48>
 8005f9c:	08005c8d 	.word	0x08005c8d
 8005fa0:	0804ec15 	.word	0x0804ec15
 8005fa4:	200008fc 	.word	0x200008fc

08005fa8 <aiPbMgrSendAiBuffer>:
{
 8005fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005faa:	4615      	mov	r5, r2
    hdlb.n_ops = 0;
 8005fac:	2400      	movs	r4, #0
{
 8005fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    hdlb.n_ops = 0;
 8005fb0:	9402      	str	r4, [sp, #8]
    if (!buffer || buffer->format != AI_BUFFER_FORMAT_FLOAT ||
 8005fb2:	b122      	cbz	r2, 8005fbe <aiPbMgrSendAiBuffer+0x16>
 8005fb4:	8816      	ldrh	r6, [r2, #0]
 8005fb6:	2e01      	cmp	r6, #1
 8005fb8:	d101      	bne.n	8005fbe <aiPbMgrSendAiBuffer+0x16>
            !buffer->data) {
 8005fba:	68d6      	ldr	r6, [r2, #12]
    if (!buffer || buffer->format != AI_BUFFER_FORMAT_FLOAT ||
 8005fbc:	bb36      	cbnz	r6, 800600c <aiPbMgrSendAiBuffer+0x64>
        hdlb.n_max  = 0;
 8005fbe:	9401      	str	r4, [sp, #4]
        hdlb.buffer = NULL;
 8005fc0:	9400      	str	r4, [sp, #0]
    if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 8005fc2:	2b00      	cmp	r3, #0
    resp->payload.layer.buffer.datas.arg = &hdlb;
 8005fc4:	f8c1 d02c 	str.w	sp, [r1, #44]	; 0x2c
    resp->payload.layer.duration = dur_ms;
 8005fc8:	ed81 0a04 	vstr	s0, [r1, #16]
        hdlb.n_max  = 0;
 8005fcc:	bfbe      	ittt	lt
 8005fce:	2400      	movlt	r4, #0
        type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 8005fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
        hdlb.n_max  = 0;
 8005fd4:	9401      	strlt	r4, [sp, #4]
    resp->which_payload = respMsg_layer_tag;
 8005fd6:	240e      	movs	r4, #14
    resp->payload.layer.type = type;
 8005fd8:	608b      	str	r3, [r1, #8]
    resp->which_payload = respMsg_layer_tag;
 8005fda:	80cc      	strh	r4, [r1, #6]
    resp->payload.layer.id = id;
 8005fdc:	9b08      	ldr	r3, [sp, #32]
    resp->payload.layer.buffer.datas.funcs.encode = &aiPbBuffer_write_cb;
 8005fde:	4c11      	ldr	r4, [pc, #68]	; (8006024 <aiPbMgrSendAiBuffer+0x7c>)
    resp->payload.layer.id = id;
 8005fe0:	60cb      	str	r3, [r1, #12]
    resp->payload.layer.buffer.datas.funcs.encode = &aiPbBuffer_write_cb;
 8005fe2:	628c      	str	r4, [r1, #40]	; 0x28
    if (buffer) {
 8005fe4:	b14a      	cbz	r2, 8005ffa <aiPbMgrSendAiBuffer+0x52>
        resp->payload.layer.buffer.channels = buffer->channels;
 8005fe6:	6893      	ldr	r3, [r2, #8]
 8005fe8:	624b      	str	r3, [r1, #36]	; 0x24
        resp->payload.layer.buffer.format = EnumFormat_F_FLOAT;
 8005fea:	2301      	movs	r3, #1
 8005fec:	750b      	strb	r3, [r1, #20]
        resp->payload.layer.buffer.height = buffer->height;
 8005fee:	8893      	ldrh	r3, [r2, #4]
 8005ff0:	61cb      	str	r3, [r1, #28]
        resp->payload.layer.buffer.width = buffer->width;
 8005ff2:	88d3      	ldrh	r3, [r2, #6]
 8005ff4:	620b      	str	r3, [r1, #32]
        resp->payload.layer.buffer.n_batches = buffer->n_batches;
 8005ff6:	8853      	ldrh	r3, [r2, #2]
 8005ff8:	618b      	str	r3, [r1, #24]
    aiPbMgrSendResp(req, resp, state);
 8005ffa:	462a      	mov	r2, r5
 8005ffc:	f7ff feea 	bl	8005dd4 <aiPbMgrSendResp>
    if (state == EnumState_S_PROCESSING)
 8006000:	2d02      	cmp	r5, #2
 8006002:	d10d      	bne.n	8006020 <aiPbMgrSendAiBuffer+0x78>
        return aiPbMgrWaitAck();
 8006004:	f7ff ff36 	bl	8005e74 <aiPbMgrWaitAck>
}
 8006008:	b004      	add	sp, #16
 800600a:	bd70      	pop	{r4, r5, r6, pc}
        hdlb.n_max = buffer->channels * buffer->height
 800600c:	8894      	ldrh	r4, [r2, #4]
        hdlb.buffer = (ai_float *)buffer->data;
 800600e:	9600      	str	r6, [sp, #0]
                * buffer->width * buffer->n_batches;
 8006010:	88d6      	ldrh	r6, [r2, #6]
 8006012:	4366      	muls	r6, r4
 8006014:	6894      	ldr	r4, [r2, #8]
 8006016:	4366      	muls	r6, r4
 8006018:	8854      	ldrh	r4, [r2, #2]
 800601a:	4374      	muls	r4, r6
        hdlb.n_max = buffer->channels * buffer->height
 800601c:	9401      	str	r4, [sp, #4]
 800601e:	e7d0      	b.n	8005fc2 <aiPbMgrSendAiBuffer+0x1a>
        return true;
 8006020:	2001      	movs	r0, #1
 8006022:	e7f1      	b.n	8006008 <aiPbMgrSendAiBuffer+0x60>
 8006024:	08005cd9 	.word	0x08005cd9

08006028 <aiPbCmdSync>:
    resp->which_payload = respMsg_sync_tag;
 8006028:	230a      	movs	r3, #10
 800602a:	80cb      	strh	r3, [r1, #6]
    resp->payload.sync.version =
 800602c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006030:	608b      	str	r3, [r1, #8]
    if (param)
 8006032:	b112      	cbz	r2, 800603a <aiPbCmdSync+0x12>
        resp->payload.sync.capability |= (uint32_t)param;
 8006034:	68cb      	ldr	r3, [r1, #12]
 8006036:	431a      	orrs	r2, r3
 8006038:	60ca      	str	r2, [r1, #12]
    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800603a:	2200      	movs	r2, #0
 800603c:	f7ff beca 	b.w	8005dd4 <aiPbMgrSendResp>

08006040 <aiPbCmdSysInfo>:
{
 8006040:	b538      	push	{r3, r4, r5, lr}
    resp->which_payload = respMsg_sinfo_tag;
 8006042:	230b      	movs	r3, #11
{
 8006044:	460c      	mov	r4, r1
 8006046:	4605      	mov	r5, r0
    resp->which_payload = respMsg_sinfo_tag;
 8006048:	80cb      	strh	r3, [r1, #6]
    resp->payload.sinfo.devid = HAL_GetDEVID();
 800604a:	f7fe fb07 	bl	800465c <HAL_GetDEVID>
 800604e:	60a0      	str	r0, [r4, #8]
    resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 8006050:	f7fe fe78 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8006054:	60e0      	str	r0, [r4, #12]
    resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 8006056:	f7fe ff41 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 800605a:	6120      	str	r0, [r4, #16]
    resp->payload.sinfo.cache = getFlashCacheConf();
 800605c:	f000 f994 	bl	8006388 <getFlashCacheConf>
    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8006060:	4621      	mov	r1, r4
    resp->payload.sinfo.cache = getFlashCacheConf();
 8006062:	6160      	str	r0, [r4, #20]
    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8006064:	2200      	movs	r2, #0
 8006066:	4628      	mov	r0, r5
}
 8006068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800606c:	f7ff beb2 	b.w	8005dd4 <aiPbMgrSendResp>

08006070 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8006070:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char undef[] = "UNDEFINED";
 8006072:	4d12      	ldr	r5, [pc, #72]	; (80060bc <aiPbStrCopy+0x4c>)
{
 8006074:	b085      	sub	sp, #20
 8006076:	4606      	mov	r6, r0
 8006078:	460c      	mov	r4, r1
    const char undef[] = "UNDEFINED";
 800607a:	6828      	ldr	r0, [r5, #0]
 800607c:	ab01      	add	r3, sp, #4
 800607e:	6869      	ldr	r1, [r5, #4]
{
 8006080:	4617      	mov	r7, r2
    const char undef[] = "UNDEFINED";
 8006082:	892a      	ldrh	r2, [r5, #8]
 8006084:	c303      	stmia	r3!, {r0, r1}
    int l = strlen(src);
 8006086:	4630      	mov	r0, r6
    const char undef[] = "UNDEFINED";
 8006088:	801a      	strh	r2, [r3, #0]
    int l = strlen(src);
 800608a:	f7fd faa4 	bl	80035d6 <strlen>

    if (l > max)
 800608e:	42b8      	cmp	r0, r7
 8006090:	d900      	bls.n	8006094 <aiPbStrCopy+0x24>
        l = max-1;
 8006092:	1e78      	subs	r0, r7, #1

    if (!dst)
 8006094:	b184      	cbz	r4, 80060b8 <aiPbStrCopy+0x48>
        return;

    if (src && l)
 8006096:	b138      	cbz	r0, 80060a8 <aiPbStrCopy+0x38>
        memcpy(dst, src, l+1);
 8006098:	1c42      	adds	r2, r0, #1
 800609a:	4631      	mov	r1, r6
 800609c:	4620      	mov	r0, r4
    else
        memcpy(dst, undef, strlen(undef)+1);
}
 800609e:	b005      	add	sp, #20
 80060a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        memcpy(dst, src, l+1);
 80060a4:	f002 bb39 	b.w	800871a <memcpy>
        memcpy(dst, undef, strlen(undef)+1);
 80060a8:	a801      	add	r0, sp, #4
 80060aa:	f7fd fa94 	bl	80035d6 <strlen>
 80060ae:	a901      	add	r1, sp, #4
 80060b0:	1c42      	adds	r2, r0, #1
 80060b2:	4620      	mov	r0, r4
 80060b4:	f002 fb31 	bl	800871a <memcpy>
}
 80060b8:	b005      	add	sp, #20
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060bc:	0804e364 	.word	0x0804e364

080060c0 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
    if (!ver)
 80060c0:	b148      	cbz	r0, 80060d6 <aiPbVersionToUint32+0x16>
        return 0;

    return ver->major << 24 | ver->minor << 16
 80060c2:	7843      	ldrb	r3, [r0, #1]
 80060c4:	7802      	ldrb	r2, [r0, #0]
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            | ver->micro << 8 | ver->reserved;
 80060cc:	78c2      	ldrb	r2, [r0, #3]
 80060ce:	7880      	ldrb	r0, [r0, #2]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80060d6:	4770      	bx	lr

080060d8 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
        EnumState state, const ai_network_report *nn)
{
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	461d      	mov	r5, r3
    resp->which_payload = respMsg_ninfo_tag;
 80060dc:	2314      	movs	r3, #20
{
 80060de:	460c      	mov	r4, r1
 80060e0:	4606      	mov	r6, r0
    resp->which_payload = respMsg_ninfo_tag;
 80060e2:	80cb      	strh	r3, [r1, #6]
{
 80060e4:	4617      	mov	r7, r2

    aiPbStrCopy(nn->model_name,
 80060e6:	6828      	ldr	r0, [r5, #0]
 80060e8:	2240      	movs	r2, #64	; 0x40
 80060ea:	3108      	adds	r1, #8
 80060ec:	f7ff ffc0 	bl	8006070 <aiPbStrCopy>
            &resp->payload.ninfo.model_name[0],
            sizeof(resp->payload.ninfo.model_name));
    aiPbStrCopy(nn->model_signature,
 80060f0:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80060f4:	6868      	ldr	r0, [r5, #4]
 80060f6:	2240      	movs	r2, #64	; 0x40
 80060f8:	f7ff ffba 	bl	8006070 <aiPbStrCopy>
            &resp->payload.ninfo.model_signature[0],
            sizeof(resp->payload.ninfo.model_signature));
    aiPbStrCopy(nn->model_datetime,
 80060fc:	f104 0188 	add.w	r1, r4, #136	; 0x88
 8006100:	68a8      	ldr	r0, [r5, #8]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	f7ff ffb4 	bl	8006070 <aiPbStrCopy>
            &resp->payload.ninfo.model_datetime[0],
            sizeof(resp->payload.ninfo.model_datetime));
    aiPbStrCopy(nn->compile_datetime,
 8006108:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800610c:	68e8      	ldr	r0, [r5, #12]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	f7ff ffae 	bl	8006070 <aiPbStrCopy>
            &resp->payload.ninfo.compile_datetime[0],
            sizeof(resp->payload.ninfo.compile_datetime));
    aiPbStrCopy(nn->runtime_revision,
 8006114:	f504 7184 	add.w	r1, r4, #264	; 0x108
 8006118:	6928      	ldr	r0, [r5, #16]
 800611a:	2240      	movs	r2, #64	; 0x40
 800611c:	f7ff ffa8 	bl	8006070 <aiPbStrCopy>
            &resp->payload.ninfo.runtime_revision[0],
            sizeof(resp->payload.ninfo.runtime_revision));
    aiPbStrCopy(nn->tool_revision,
 8006120:	2240      	movs	r2, #64	; 0x40
 8006122:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 8006126:	69a8      	ldr	r0, [r5, #24]
 8006128:	f7ff ffa2 	bl	8006070 <aiPbStrCopy>
            &resp->payload.ninfo.tool_revision[0],
            sizeof(resp->payload.ninfo.tool_revision));

    resp->payload.ninfo.n_inputs = nn->n_inputs;
 800612c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    resp->payload.ninfo.n_nodes = nn->n_nodes;
    resp->payload.ninfo.n_macc = nn->n_macc;

    resp->payload.ninfo.signature = nn->signature;
    resp->payload.ninfo.api_version =
            aiPbVersionToUint32(&nn->api_version);
 800612e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    resp->payload.ninfo.n_inputs = nn->n_inputs;
 8006132:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    resp->payload.ninfo.n_outputs = nn->n_outputs;
 8006136:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8006138:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    resp->payload.ninfo.n_nodes = nn->n_nodes;
 800613c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800613e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    resp->payload.ninfo.n_macc = nn->n_macc;
 8006142:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006144:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
    resp->payload.ninfo.signature = nn->signature;
 8006148:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800614a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
            aiPbVersionToUint32(&nn->api_version);
 800614e:	f7ff ffb7 	bl	80060c0 <aiPbVersionToUint32>
    resp->payload.ninfo.api_version =
 8006152:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
    resp->payload.ninfo.interface_api_version =
            aiPbVersionToUint32(&nn->interface_api_version);
 8006156:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800615a:	f7ff ffb1 	bl	80060c0 <aiPbVersionToUint32>
    resp->payload.ninfo.interface_api_version =
 800615e:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
    resp->payload.ninfo.runtime_version =
            aiPbVersionToUint32(&nn->runtime_version);
 8006162:	f105 0014 	add.w	r0, r5, #20
 8006166:	f7ff ffab 	bl	80060c0 <aiPbVersionToUint32>
    resp->payload.ninfo.runtime_version =
 800616a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    resp->payload.ninfo.tool_version =
            aiPbVersionToUint32(&nn->tool_version);
 800616e:	f105 001c 	add.w	r0, r5, #28
 8006172:	f7ff ffa5 	bl	80060c0 <aiPbVersionToUint32>
    resp->payload.ninfo.tool_version =
 8006176:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    resp->payload.ninfo.tool_api_version =
            aiPbVersionToUint32(&nn->tool_api_version);
 800617a:	f105 0020 	add.w	r0, r5, #32
 800617e:	f7ff ff9f 	bl	80060c0 <aiPbVersionToUint32>

    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 8006182:	f504 71de 	add.w	r1, r4, #444	; 0x1bc
    resp->payload.ninfo.tool_api_version =
 8006186:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 800618a:	f105 0054 	add.w	r0, r5, #84	; 0x54
 800618e:	f7ff fd6e 	bl	8005c6e <init_aibuffer_msg>
    init_aibuffer_msg(&nn->weights, &resp->payload.ninfo.weights);
 8006192:	f504 71ec 	add.w	r1, r4, #472	; 0x1d8
 8006196:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800619a:	f7ff fd68 	bl	8005c6e <init_aibuffer_msg>

    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <aiPbMgrSendNNInfo+0xe8>)
    resp->payload.ninfo.inputs.arg = (void *)nn;
 80061a0:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0

    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
    resp->payload.ninfo.outputs.arg = (void *)nn;

    aiPbMgrSendResp(req, resp, state);
 80061a4:	463a      	mov	r2, r7
    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 80061a6:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    aiPbMgrSendResp(req, resp, state);
 80061aa:	4621      	mov	r1, r4
    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <aiPbMgrSendNNInfo+0xec>)
    aiPbMgrSendResp(req, resp, state);
 80061ae:	4630      	mov	r0, r6
    resp->payload.ninfo.outputs.arg = (void *)nn;
 80061b0:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 80061b4:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 80061b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    aiPbMgrSendResp(req, resp, state);
 80061bc:	f7ff be0a 	b.w	8005dd4 <aiPbMgrSendResp>
 80061c0:	08005d5d 	.word	0x08005d5d
 80061c4:	08005d6b 	.word	0x08005d6b

080061c8 <write_packet>:
static struct o_packet {
    uint8_t pw;
    uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 80061c8:	b508      	push	{r3, lr}
    HAL_StatusTypeDef status;

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)&o_packet,
 80061ca:	2221      	movs	r2, #33	; 0x21
 80061cc:	f04f 33ff 	mov.w	r3, #4294967295
 80061d0:	4903      	ldr	r1, [pc, #12]	; (80061e0 <write_packet+0x18>)
 80061d2:	4804      	ldr	r0, [pc, #16]	; (80061e4 <write_packet+0x1c>)
 80061d4:	f7ff faa0 	bl	8005718 <HAL_UART_Transmit>
            _PACKET_PAYLOAD_IN_SIZE + 1,
            HAL_MAX_DELAY);

    return (status == HAL_OK ? (_PACKET_PAYLOAD_IN_SIZE + 1) : 0);
}
 80061d8:	fab0 f080 	clz	r0, r0
 80061dc:	0940      	lsrs	r0, r0, #5
 80061de:	bd08      	pop	{r3, pc}
 80061e0:	20000b98 	.word	0x20000b98
 80061e4:	2000ad64 	.word	0x2000ad64

080061e8 <write_callback>:
    o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
        size_t count)
{
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool res = true;
 80061ea:	2001      	movs	r0, #1
{
 80061ec:	4614      	mov	r4, r2
    uint8_t *pr = (uint8_t *)buf;
 80061ee:	460e      	mov	r6, r1
    while (count) {
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <write_callback+0x38>)
            pr++;
            count--;
        }
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
                res = write_packet();
                o_packet.pw = 0;
 80061f2:	2700      	movs	r7, #0
    while (count) {
 80061f4:	b93c      	cbnz	r4, 8006206 <write_callback+0x1e>
        }
    }
    return res;
}
 80061f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            o_packet.payload[o_packet.pw] = *pr;
 80061f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80061fc:	18ea      	adds	r2, r5, r3
            count--;
 80061fe:	3c01      	subs	r4, #1
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8006200:	3301      	adds	r3, #1
            o_packet.payload[o_packet.pw] = *pr;
 8006202:	7051      	strb	r1, [r2, #1]
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8006204:	702b      	strb	r3, [r5, #0]
 8006206:	782b      	ldrb	r3, [r5, #0]
 8006208:	2b1f      	cmp	r3, #31
 800620a:	d802      	bhi.n	8006212 <write_callback+0x2a>
 800620c:	2c00      	cmp	r4, #0
 800620e:	d1f3      	bne.n	80061f8 <write_callback+0x10>
 8006210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8006212:	2b20      	cmp	r3, #32
 8006214:	d1ee      	bne.n	80061f4 <write_callback+0xc>
                res = write_packet();
 8006216:	f7ff ffd7 	bl	80061c8 <write_packet>
                o_packet.pw = 0;
 800621a:	702f      	strb	r7, [r5, #0]
 800621c:	e7ea      	b.n	80061f4 <write_callback+0xc>
 800621e:	bf00      	nop
 8006220:	20000b98 	.word	0x20000b98

08006224 <read_packet>:
    uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 8006224:	b508      	push	{r3, lr}
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)&i_packet,
 8006226:	2221      	movs	r2, #33	; 0x21
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	4905      	ldr	r1, [pc, #20]	; (8006244 <read_packet+0x20>)
 800622e:	4806      	ldr	r0, [pc, #24]	; (8006248 <read_packet+0x24>)
 8006230:	f7ff fac9 	bl	80057c6 <HAL_UART_Receive>
            _PACKET_PAYLOAD_OUT_SIZE + 1,
            HAL_MAX_DELAY);

    i_ridx = 0;
 8006234:	2200      	movs	r2, #0
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <read_packet+0x28>)

    return (status == HAL_OK ? (_PACKET_PAYLOAD_OUT_SIZE + 1) : 0);
}
 8006238:	fab0 f080 	clz	r0, r0
    i_ridx = 0;
 800623c:	601a      	str	r2, [r3, #0]
}
 800623e:	0940      	lsrs	r0, r0, #5
 8006240:	bd08      	pop	{r3, pc}
 8006242:	bf00      	nop
 8006244:	20000b6c 	.word	0x20000b6c
 8006248:	2000ad64 	.word	0x2000ad64
 800624c:	20000b90 	.word	0x20000b90

08006250 <read_callback>:
    i_packet.pr = 0xFF;
    i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8006250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006254:	460c      	mov	r4, r1
    bool res = true;
    uint8_t *pw = (uint8_t *)buf;

    if (count == 0)
 8006256:	4616      	mov	r6, r2
 8006258:	b1ea      	cbz	r2, 8006296 <read_callback+0x46>
        return true;

    if (i_packet.pr == 0xFF)
 800625a:	4d1c      	ldr	r5, [pc, #112]	; (80062cc <read_callback+0x7c>)
 800625c:	782b      	ldrb	r3, [r5, #0]
 800625e:	2bff      	cmp	r3, #255	; 0xff
 8006260:	d102      	bne.n	8006268 <read_callback+0x18>
        res = read_packet();
 8006262:	f7ff ffdf 	bl	8006224 <read_packet>

    if (res == false)
 8006266:	b1b8      	cbz	r0, 8006298 <read_callback+0x48>
 8006268:	4f19      	ldr	r7, [pc, #100]	; (80062d0 <read_callback+0x80>)
 800626a:	46b8      	mov	r8, r7
 800626c:	e028      	b.n	80062c0 <read_callback+0x70>
        return res;

    while (count) {
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
            *pw = i_packet.payload[i_ridx];
 800626e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
            pw++;
            count--;
 8006272:	3e01      	subs	r6, #1
            *pw = i_packet.payload[i_ridx];
 8006274:	f804 2b01 	strb.w	r2, [r4], #1
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8006278:	782a      	ldrb	r2, [r5, #0]
 800627a:	3a01      	subs	r2, #1
 800627c:	702a      	strb	r2, [r5, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	f895 e000 	ldrb.w	lr, [r5]
 8006284:	18e1      	adds	r1, r4, r3
 8006286:	f1be 0f00 	cmp.w	lr, #0
 800628a:	d008      	beq.n	800629e <read_callback+0x4e>
 800628c:	2e00      	cmp	r6, #0
 800628e:	d1ee      	bne.n	800626e <read_callback+0x1e>
 8006290:	b10a      	cbz	r2, 8006296 <read_callback+0x46>
 8006292:	f8c8 1000 	str.w	r1, [r8]
        return true;
 8006296:	2001      	movs	r0, #1
            read_packet();
        }
    }

    return res;
}
 8006298:	b002      	add	sp, #8
 800629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800629e:	b10a      	cbz	r2, 80062a4 <read_callback+0x54>
 80062a0:	f8c8 1000 	str.w	r1, [r8]
        if (count && i_packet.pr == 0) {
 80062a4:	2e00      	cmp	r6, #0
 80062a6:	d0f6      	beq.n	8006296 <read_callback+0x46>
            uint8_t sync = 0xAA;
 80062a8:	a902      	add	r1, sp, #8
 80062aa:	23aa      	movs	r3, #170	; 0xaa
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 80062ac:	2201      	movs	r2, #1
 80062ae:	4809      	ldr	r0, [pc, #36]	; (80062d4 <read_callback+0x84>)
            uint8_t sync = 0xAA;
 80062b0:	f801 3d01 	strb.w	r3, [r1, #-1]!
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	f7ff fa2e 	bl	8005718 <HAL_UART_Transmit>
            read_packet();
 80062bc:	f7ff ffb2 	bl	8006224 <read_packet>
 80062c0:	683b      	ldr	r3, [r7, #0]
{
 80062c2:	2200      	movs	r2, #0
 80062c4:	18e8      	adds	r0, r5, r3
 80062c6:	1b1b      	subs	r3, r3, r4
 80062c8:	e7da      	b.n	8006280 <read_callback+0x30>
 80062ca:	bf00      	nop
 80062cc:	20000b6c 	.word	0x20000b6c
 80062d0:	20000b90 	.word	0x20000b90
 80062d4:	2000ad64 	.word	0x2000ad64

080062d8 <crcIpInit>:
{
 80062d8:	b513      	push	{r0, r1, r4, lr}
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 80062da:	4c09      	ldr	r4, [pc, #36]	; (8006300 <crcIpInit+0x28>)
 80062dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062de:	04db      	lsls	r3, r3, #19
 80062e0:	d402      	bmi.n	80062e8 <crcIpInit+0x10>
        printf("W: CRC IP clock is NOT enabled\r\n");
 80062e2:	4808      	ldr	r0, [pc, #32]	; (8006304 <crcIpInit+0x2c>)
 80062e4:	f002 fb4c 	bl	8008980 <puts>
    __HAL_RCC_CRC_CLK_ENABLE();
 80062e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062ee:	6323      	str	r3, [r4, #48]	; 0x30
 80062f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	9b01      	ldr	r3, [sp, #4]
}
 80062fa:	b002      	add	sp, #8
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	0804e621 	.word	0x0804e621

08006308 <dwtIpInit>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <dwtIpInit+0x24>)
 800630a:	68d3      	ldr	r3, [r2, #12]
 800630c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006310:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8006312:	4a07      	ldr	r2, [pc, #28]	; (8006330 <dwtIpInit+0x28>)
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <dwtIpInit+0x2c>)
 8006316:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
    DWT->CYCCNT = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4770      	bx	lr
 800632c:	e000edf0 	.word	0xe000edf0
 8006330:	e0001000 	.word	0xe0001000
 8006334:	c5acce55 	.word	0xc5acce55

08006338 <dwtReset>:
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006338:	2200      	movs	r2, #0
 800633a:	4b01      	ldr	r3, [pc, #4]	; (8006340 <dwtReset+0x8>)
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	4770      	bx	lr
 8006340:	e0001000 	.word	0xe0001000

08006344 <dwtGetCycles>:
    return DWT->CYCCNT;
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <dwtGetCycles+0x8>)
 8006346:	6858      	ldr	r0, [r3, #4]
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	e0001000 	.word	0xe0001000

08006350 <dwtCyclesToFloatMs>:
{
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4604      	mov	r4, r0
 8006354:	460d      	mov	r5, r1
 8006356:	ed2d 8b02 	vpush	{d8}
    return HAL_RCC_GetHCLKFreq();
 800635a:	f7fe fdbf 	bl	8004edc <HAL_RCC_GetHCLKFreq>
    res = ((float)clks * (float)1000.0) / fcpu;
 800635e:	4629      	mov	r1, r5
    return HAL_RCC_GetHCLKFreq();
 8006360:	ee08 0a10 	vmov	s16, r0
    res = ((float)clks * (float)1000.0) / fcpu;
 8006364:	4620      	mov	r0, r4
 8006366:	f7fd ff09 	bl	800417c <__aeabi_ul2f>
 800636a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006384 <dwtCyclesToFloatMs+0x34>
 800636e:	ee07 0a90 	vmov	s15, r0
    float fcpu = (float)systemCoreClock();
 8006372:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    res = ((float)clks * (float)1000.0) / fcpu;
 8006376:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 800637a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800637e:	ecbd 8b02 	vpop	{d8}
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	447a0000 	.word	0x447a0000

08006388 <getFlashCacheConf>:
}
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <getFlashCacheConf+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000b94 	.word	0x20000b94

08006394 <logDeviceConf>:
    uint32_t acr = FLASH->ACR ;
 8006394:	4b57      	ldr	r3, [pc, #348]	; (80064f4 <logDeviceConf+0x160>)
{
 8006396:	b573      	push	{r0, r1, r4, r5, r6, lr}
    printf("STM32 Runtime configuration...\r\n");
 8006398:	4857      	ldr	r0, [pc, #348]	; (80064f8 <logDeviceConf+0x164>)
    uint32_t acr = FLASH->ACR ;
 800639a:	681d      	ldr	r5, [r3, #0]
    printf("STM32 Runtime configuration...\r\n");
 800639c:	f002 faf0 	bl	8008980 <puts>
            (int)HAL_GetDEVID(),
 80063a0:	f7fe f95c 	bl	800465c <HAL_GetDEVID>
 80063a4:	4606      	mov	r6, r0
            devIdToStr(HAL_GetDEVID()),
 80063a6:	f7fe f959 	bl	800465c <HAL_GetDEVID>
    switch (dev_id) {
 80063aa:	b280      	uxth	r0, r0
 80063ac:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
 80063b0:	d02d      	beq.n	800640e <logDeviceConf+0x7a>
 80063b2:	d815      	bhi.n	80063e0 <logDeviceConf+0x4c>
 80063b4:	f240 4322 	movw	r3, #1058	; 0x422
 80063b8:	4298      	cmp	r0, r3
 80063ba:	f000 8089 	beq.w	80064d0 <logDeviceConf+0x13c>
 80063be:	d805      	bhi.n	80063cc <logDeviceConf+0x38>
 80063c0:	f240 4315 	movw	r3, #1045	; 0x415
 80063c4:	4298      	cmp	r0, r3
 80063c6:	d07f      	beq.n	80064c8 <logDeviceConf+0x134>
    default:    str = "UNKNOWN";
 80063c8:	4c4c      	ldr	r4, [pc, #304]	; (80064fc <logDeviceConf+0x168>)
 80063ca:	e021      	b.n	8006410 <logDeviceConf+0x7c>
    switch (dev_id) {
 80063cc:	f240 4331 	movw	r3, #1073	; 0x431
 80063d0:	4298      	cmp	r0, r3
 80063d2:	d075      	beq.n	80064c0 <logDeviceConf+0x12c>
 80063d4:	f240 4335 	movw	r3, #1077	; 0x435
 80063d8:	4298      	cmp	r0, r3
 80063da:	d1f5      	bne.n	80063c8 <logDeviceConf+0x34>
    case 0x435: str = "STM32L43xxx"; break;
 80063dc:	4c48      	ldr	r4, [pc, #288]	; (8006500 <logDeviceConf+0x16c>)
 80063de:	e017      	b.n	8006410 <logDeviceConf+0x7c>
    switch (dev_id) {
 80063e0:	f5b0 6f8a 	cmp.w	r0, #1104	; 0x450
 80063e4:	d072      	beq.n	80064cc <logDeviceConf+0x138>
 80063e6:	d809      	bhi.n	80063fc <logDeviceConf+0x68>
 80063e8:	f240 4346 	movw	r3, #1094	; 0x446
 80063ec:	4298      	cmp	r0, r3
 80063ee:	d065      	beq.n	80064bc <logDeviceConf+0x128>
 80063f0:	f240 4349 	movw	r3, #1097	; 0x449
 80063f4:	4298      	cmp	r0, r3
 80063f6:	d1e7      	bne.n	80063c8 <logDeviceConf+0x34>
    case 0x449: str = "STM32F74xxx"; break;
 80063f8:	4c42      	ldr	r4, [pc, #264]	; (8006504 <logDeviceConf+0x170>)
 80063fa:	e009      	b.n	8006410 <logDeviceConf+0x7c>
    switch (dev_id) {
 80063fc:	f240 4362 	movw	r3, #1122	; 0x462
 8006400:	4298      	cmp	r0, r3
 8006402:	d05f      	beq.n	80064c4 <logDeviceConf+0x130>
 8006404:	f5b0 6f8e 	cmp.w	r0, #1136	; 0x470
 8006408:	d1de      	bne.n	80063c8 <logDeviceConf+0x34>
    case 0x470: str = "STM32L4Rxxx"; break;
 800640a:	4c3f      	ldr	r4, [pc, #252]	; (8006508 <logDeviceConf+0x174>)
 800640c:	e000      	b.n	8006410 <logDeviceConf+0x7c>
    case 0x438: str = "STM32F303x6/8"; break;
 800640e:	4c3f      	ldr	r4, [pc, #252]	; (800650c <logDeviceConf+0x178>)
            (int)HAL_GetREVID()
 8006410:	f7fe f91e 	bl	8004650 <HAL_GetREVID>
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 8006414:	4622      	mov	r2, r4
 8006416:	4603      	mov	r3, r0
 8006418:	4631      	mov	r1, r6
 800641a:	483d      	ldr	r0, [pc, #244]	; (8006510 <logDeviceConf+0x17c>)
 800641c:	f002 fa3c 	bl	8008898 <iprintf>
    printf(" Core Arch.   : M%d - %s %s\r\n",
 8006420:	4a3c      	ldr	r2, [pc, #240]	; (8006514 <logDeviceConf+0x180>)
 8006422:	2107      	movs	r1, #7
 8006424:	4b3c      	ldr	r3, [pc, #240]	; (8006518 <logDeviceConf+0x184>)
 8006426:	483d      	ldr	r0, [pc, #244]	; (800651c <logDeviceConf+0x188>)
 8006428:	f002 fa36 	bl	8008898 <iprintf>
    mconf = (1 << 16);  /* FPU present and used */
 800642c:	4c3c      	ldr	r4, [pc, #240]	; (8006520 <logDeviceConf+0x18c>)
 800642e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006432:	6023      	str	r3, [r4, #0]
    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8006434:	f7fe f908 	bl	8004648 <HAL_GetHalVersion>
 8006438:	4601      	mov	r1, r0
 800643a:	483a      	ldr	r0, [pc, #232]	; (8006524 <logDeviceConf+0x190>)
 800643c:	f002 fa2c 	bl	8008898 <iprintf>
    return HAL_RCC_GetHCLKFreq();
 8006440:	f7fe fd4c 	bl	8004edc <HAL_RCC_GetHCLKFreq>
    printf(" system clock : %u MHz\r\n", (int)val);
 8006444:	4938      	ldr	r1, [pc, #224]	; (8006528 <logDeviceConf+0x194>)
 8006446:	fbb0 f1f1 	udiv	r1, r0, r1
 800644a:	4838      	ldr	r0, [pc, #224]	; (800652c <logDeviceConf+0x198>)
 800644c:	f002 fa24 	bl	8008898 <iprintf>
    val = SCB->CCR;
 8006450:	4b37      	ldr	r3, [pc, #220]	; (8006530 <logDeviceConf+0x19c>)
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8006452:	f005 000f 	and.w	r0, r5, #15
    if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8006456:	05ea      	lsls	r2, r5, #23
    val = SCB->CCR;
 8006458:	695e      	ldr	r6, [r3, #20]
    mconf |= (2 << 24);  /* F7 conf. */
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8006460:	ea43 0300 	orr.w	r3, r3, r0
        mconf |= (1 << 8);
 8006464:	bf48      	it	mi
 8006466:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
    if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 800646a:	05a9      	lsls	r1, r5, #22
        return "False";
 800646c:	4931      	ldr	r1, [pc, #196]	; (8006534 <logDeviceConf+0x1a0>)
        mconf |= (1 << 8);
 800646e:	6023      	str	r3, [r4, #0]
        mconf |= (1 << 9);
 8006470:	bf42      	ittt	mi
 8006472:	6823      	ldrmi	r3, [r4, #0]
 8006474:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8006478:	6023      	strmi	r3, [r4, #0]
        return "False";
 800647a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800647e:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <logDeviceConf+0x1a4>)
 8006480:	bf18      	it	ne
 8006482:	460a      	movne	r2, r1
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8006484:	9000      	str	r0, [sp, #0]
        return "False";
 8006486:	bf08      	it	eq
 8006488:	461a      	moveq	r2, r3
 800648a:	f415 7f00 	tst.w	r5, #512	; 0x200
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800648e:	482b      	ldr	r0, [pc, #172]	; (800653c <logDeviceConf+0x1a8>)
 8006490:	bf18      	it	ne
 8006492:	460b      	movne	r3, r1
 8006494:	4629      	mov	r1, r5
 8006496:	f002 f9ff 	bl	8008898 <iprintf>
    if (val & SCB_CCR_IC_Msk)
 800649a:	f416 3200 	ands.w	r2, r6, #131072	; 0x20000
        mconf |= (1 << 10);
 800649e:	bf1e      	ittt	ne
 80064a0:	6823      	ldrne	r3, [r4, #0]
 80064a2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80064a6:	6023      	strne	r3, [r4, #0]
    if (val & SCB_CCR_DC_Msk)
 80064a8:	03f3      	lsls	r3, r6, #15
 80064aa:	d51d      	bpl.n	80064e8 <logDeviceConf+0x154>
        mconf |= (1 << 11);
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064b2:	6023      	str	r3, [r4, #0]
    if (val)
 80064b4:	b172      	cbz	r2, 80064d4 <logDeviceConf+0x140>
        return "True";
 80064b6:	491f      	ldr	r1, [pc, #124]	; (8006534 <logDeviceConf+0x1a0>)
        return "False";
 80064b8:	460a      	mov	r2, r1
 80064ba:	e00d      	b.n	80064d8 <logDeviceConf+0x144>
    case 0x446: str = "STM32F303xD/E"; break;
 80064bc:	4c20      	ldr	r4, [pc, #128]	; (8006540 <logDeviceConf+0x1ac>)
 80064be:	e7a7      	b.n	8006410 <logDeviceConf+0x7c>
    case 0x431: str = "STM32F411xC/E"; break;
 80064c0:	4c20      	ldr	r4, [pc, #128]	; (8006544 <logDeviceConf+0x1b0>)
 80064c2:	e7a5      	b.n	8006410 <logDeviceConf+0x7c>
    case 0x462: str = "STM32L45xxx"; break;
 80064c4:	4c20      	ldr	r4, [pc, #128]	; (8006548 <logDeviceConf+0x1b4>)
 80064c6:	e7a3      	b.n	8006410 <logDeviceConf+0x7c>
    case 0x415: str = "STM32L4x6xx"; break;
 80064c8:	4c20      	ldr	r4, [pc, #128]	; (800654c <logDeviceConf+0x1b8>)
 80064ca:	e7a1      	b.n	8006410 <logDeviceConf+0x7c>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 80064cc:	4c20      	ldr	r4, [pc, #128]	; (8006550 <logDeviceConf+0x1bc>)
 80064ce:	e79f      	b.n	8006410 <logDeviceConf+0x7c>
    case 0x422: str = "STM32F303xB/C"; break;
 80064d0:	4c20      	ldr	r4, [pc, #128]	; (8006554 <logDeviceConf+0x1c0>)
 80064d2:	e79d      	b.n	8006410 <logDeviceConf+0x7c>
    if (val)
 80064d4:	4918      	ldr	r1, [pc, #96]	; (8006538 <logDeviceConf+0x1a4>)
        return "True";
 80064d6:	4a17      	ldr	r2, [pc, #92]	; (8006534 <logDeviceConf+0x1a0>)
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 80064d8:	481f      	ldr	r0, [pc, #124]	; (8006558 <logDeviceConf+0x1c4>)
}
 80064da:	b002      	add	sp, #8
 80064dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 80064e0:	f002 b9da 	b.w	8008898 <iprintf>
    if (val)
 80064e4:	4914      	ldr	r1, [pc, #80]	; (8006538 <logDeviceConf+0x1a4>)
 80064e6:	e7e7      	b.n	80064b8 <logDeviceConf+0x124>
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	d0fb      	beq.n	80064e4 <logDeviceConf+0x150>
        return "True";
 80064ec:	4911      	ldr	r1, [pc, #68]	; (8006534 <logDeviceConf+0x1a0>)
        return "False";
 80064ee:	4a12      	ldr	r2, [pc, #72]	; (8006538 <logDeviceConf+0x1a4>)
 80064f0:	e7f2      	b.n	80064d8 <logDeviceConf+0x144>
 80064f2:	bf00      	nop
 80064f4:	40023c00 	.word	0x40023c00
 80064f8:	0804e6e4 	.word	0x0804e6e4
 80064fc:	0804e6d1 	.word	0x0804e6d1
 8006500:	0804e679 	.word	0x0804e679
 8006504:	0804e6a9 	.word	0x0804e6a9
 8006508:	0804e69d 	.word	0x0804e69d
 800650c:	0804e64f 	.word	0x0804e64f
 8006510:	0804e704 	.word	0x0804e704
 8006514:	0804e73e 	.word	0x0804e73e
 8006518:	0804e735 	.word	0x0804e735
 800651c:	0804e74a 	.word	0x0804e74a
 8006520:	20000b94 	.word	0x20000b94
 8006524:	0804e768 	.word	0x0804e768
 8006528:	000f4240 	.word	0x000f4240
 800652c:	0804e781 	.word	0x0804e781
 8006530:	e000ed00 	.word	0xe000ed00
 8006534:	0804e6d9 	.word	0x0804e6d9
 8006538:	0804e6de 	.word	0x0804e6de
 800653c:	0804e79a 	.word	0x0804e79a
 8006540:	0804e65d 	.word	0x0804e65d
 8006544:	0804e66b 	.word	0x0804e66b
 8006548:	0804e685 	.word	0x0804e685
 800654c:	0804e691 	.word	0x0804e691
 8006550:	0804e6b5 	.word	0x0804e6b5
 8006554:	0804e641 	.word	0x0804e641
 8006558:	0804e7d7 	.word	0x0804e7d7

0800655c <disableInts>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006560:	b672      	cpsid	i
}
 8006562:	4770      	bx	lr

08006564 <restoreInts>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006564:	f380 8810 	msr	PRIMASK, r0
 8006568:	4770      	bx	lr
	...

0800656c <ioDisableWrite>:
    _ioWriteAllowed = false;
 800656c:	2200      	movs	r2, #0
 800656e:	4b01      	ldr	r3, [pc, #4]	; (8006574 <ioDisableWrite+0x8>)
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	4770      	bx	lr
 8006574:	200007e4 	.word	0x200007e4

08006578 <_write>:
{
 8006578:	b510      	push	{r4, lr}
    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800657a:	1e14      	subs	r4, r2, #0
 800657c:	da0a      	bge.n	8006594 <_write+0x1c>
 800657e:	3801      	subs	r0, #1
 8006580:	2801      	cmp	r0, #1
 8006582:	d907      	bls.n	8006594 <_write+0x1c>
        errno = EBADF;
 8006584:	f002 f880 	bl	8008688 <__errno>
        return -1;
 8006588:	f04f 34ff 	mov.w	r4, #4294967295
        errno = EBADF;
 800658c:	2309      	movs	r3, #9
 800658e:	6003      	str	r3, [r0, #0]
}
 8006590:	4620      	mov	r0, r4
 8006592:	bd10      	pop	{r4, pc}
    if (_ioWriteAllowed)
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <_write+0x38>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f9      	beq.n	8006590 <_write+0x18>
        status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800659c:	b2a2      	uxth	r2, r4
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	4804      	ldr	r0, [pc, #16]	; (80065b4 <_write+0x3c>)
 80065a4:	f7ff f8b8 	bl	8005718 <HAL_UART_Transmit>
    return (status == HAL_OK ? count : 0);
 80065a8:	2800      	cmp	r0, #0
 80065aa:	bf18      	it	ne
 80065ac:	2400      	movne	r4, #0
 80065ae:	e7ef      	b.n	8006590 <_write+0x18>
 80065b0:	200007e4 	.word	0x200007e4
 80065b4:	2000ad64 	.word	0x2000ad64

080065b8 <aiLogErr>:
{
 80065b8:	b410      	push	{r4}
 80065ba:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80065be:	b2c4      	uxtb	r4, r0
    if (fct)
 80065c0:	b129      	cbz	r1, 80065ce <aiLogErr+0x16>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80065c2:	4622      	mov	r2, r4
 80065c4:	4805      	ldr	r0, [pc, #20]	; (80065dc <aiLogErr+0x24>)
}
 80065c6:	f85d 4b04 	ldr.w	r4, [sp], #4
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80065ca:	f002 b965 	b.w	8008898 <iprintf>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 80065ce:	4621      	mov	r1, r4
 80065d0:	461a      	mov	r2, r3
 80065d2:	4803      	ldr	r0, [pc, #12]	; (80065e0 <aiLogErr+0x28>)
}
 80065d4:	f85d 4b04 	ldr.w	r4, [sp], #4
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 80065d8:	f002 b95e 	b.w	8008898 <iprintf>
 80065dc:	0804e36e 	.word	0x0804e36e
 80065e0:	0804e393 	.word	0x0804e393

080065e4 <aiBufferSize>:
    return buffer->height * buffer->width * buffer->channels;
 80065e4:	8882      	ldrh	r2, [r0, #4]
 80065e6:	88c3      	ldrh	r3, [r0, #6]
 80065e8:	6880      	ldr	r0, [r0, #8]
 80065ea:	4353      	muls	r3, r2
}
 80065ec:	4358      	muls	r0, r3
 80065ee:	4770      	bx	lr

080065f0 <aiPrintLayoutBuffer>:
{
 80065f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80065f4:	4605      	mov	r5, r0
    printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 80065f6:	4608      	mov	r0, r1
 80065f8:	888e      	ldrh	r6, [r1, #4]
 80065fa:	88cf      	ldrh	r7, [r1, #6]
 80065fc:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8006600:	f7ff fff0 	bl	80065e4 <aiBufferSize>
 8006604:	880c      	ldrh	r4, [r1, #0]
    if (val == AI_BUFFER_FORMAT_NONE)
 8006606:	b1bc      	cbz	r4, 8006638 <aiPrintLayoutBuffer+0x48>
    else if (val == AI_BUFFER_FORMAT_FLOAT)
 8006608:	2c01      	cmp	r4, #1
 800660a:	d017      	beq.n	800663c <aiPrintLayoutBuffer+0x4c>
    else if (val == AI_BUFFER_FORMAT_U8)
 800660c:	2c10      	cmp	r4, #16
 800660e:	d017      	beq.n	8006640 <aiPrintLayoutBuffer+0x50>
    else if (val == AI_BUFFER_FORMAT_Q15)
 8006610:	2c32      	cmp	r4, #50	; 0x32
 8006612:	d017      	beq.n	8006644 <aiPrintLayoutBuffer+0x54>
        return "UNKNOWN";
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <aiPrintLayoutBuffer+0x58>)
 8006616:	490d      	ldr	r1, [pc, #52]	; (800664c <aiPrintLayoutBuffer+0x5c>)
 8006618:	2c31      	cmp	r4, #49	; 0x31
 800661a:	bf18      	it	ne
 800661c:	4619      	movne	r1, r3
    printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 800661e:	9102      	str	r1, [sp, #8]
 8006620:	463b      	mov	r3, r7
 8006622:	4632      	mov	r2, r6
 8006624:	4629      	mov	r1, r5
 8006626:	9001      	str	r0, [sp, #4]
 8006628:	f8cd 8000 	str.w	r8, [sp]
 800662c:	4808      	ldr	r0, [pc, #32]	; (8006650 <aiPrintLayoutBuffer+0x60>)
 800662e:	f002 f933 	bl	8008898 <iprintf>
}
 8006632:	b004      	add	sp, #16
 8006634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return "AI_BUFFER_FORMAT_NONE";
 8006638:	4906      	ldr	r1, [pc, #24]	; (8006654 <aiPrintLayoutBuffer+0x64>)
 800663a:	e7f0      	b.n	800661e <aiPrintLayoutBuffer+0x2e>
        return "AI_BUFFER_FORMAT_FLOAT";
 800663c:	4906      	ldr	r1, [pc, #24]	; (8006658 <aiPrintLayoutBuffer+0x68>)
 800663e:	e7ee      	b.n	800661e <aiPrintLayoutBuffer+0x2e>
        return "AI_BUFFER_FORMAT_U8";
 8006640:	4906      	ldr	r1, [pc, #24]	; (800665c <aiPrintLayoutBuffer+0x6c>)
 8006642:	e7ec      	b.n	800661e <aiPrintLayoutBuffer+0x2e>
        return "AI_BUFFER_FORMAT_Q15";
 8006644:	4906      	ldr	r1, [pc, #24]	; (8006660 <aiPrintLayoutBuffer+0x70>)
 8006646:	e7ea      	b.n	800661e <aiPrintLayoutBuffer+0x2e>
 8006648:	0804e6d1 	.word	0x0804e6d1
 800664c:	0804e409 	.word	0x0804e409
 8006650:	0804e41d 	.word	0x0804e41d
 8006654:	0804e3b3 	.word	0x0804e3b3
 8006658:	0804e3c9 	.word	0x0804e3c9
 800665c:	0804e3e0 	.word	0x0804e3e0
 8006660:	0804e3f4 	.word	0x0804e3f4

08006664 <aiPrintNetworkInfo>:
{
 8006664:	b513      	push	{r0, r1, r4, lr}
 8006666:	4604      	mov	r4, r0
  printf("Network configuration...\r\n");
 8006668:	4827      	ldr	r0, [pc, #156]	; (8006708 <aiPrintNetworkInfo+0xa4>)
 800666a:	f002 f989 	bl	8008980 <puts>
  printf(" Model name         : %s\r\n", report->model_name);
 800666e:	4827      	ldr	r0, [pc, #156]	; (800670c <aiPrintNetworkInfo+0xa8>)
 8006670:	6821      	ldr	r1, [r4, #0]
 8006672:	f002 f911 	bl	8008898 <iprintf>
  printf(" Model signature    : %s\r\n", report->model_signature);
 8006676:	6861      	ldr	r1, [r4, #4]
 8006678:	4825      	ldr	r0, [pc, #148]	; (8006710 <aiPrintNetworkInfo+0xac>)
 800667a:	f002 f90d 	bl	8008898 <iprintf>
  printf(" Model datetime     : %s\r\n", report->model_datetime);
 800667e:	68a1      	ldr	r1, [r4, #8]
 8006680:	4824      	ldr	r0, [pc, #144]	; (8006714 <aiPrintNetworkInfo+0xb0>)
 8006682:	f002 f909 	bl	8008898 <iprintf>
  printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 8006686:	68e1      	ldr	r1, [r4, #12]
 8006688:	4823      	ldr	r0, [pc, #140]	; (8006718 <aiPrintNetworkInfo+0xb4>)
 800668a:	f002 f905 	bl	8008898 <iprintf>
  printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800668e:	7da1      	ldrb	r1, [r4, #22]
 8006690:	7d63      	ldrb	r3, [r4, #21]
 8006692:	7d22      	ldrb	r2, [r4, #20]
 8006694:	9100      	str	r1, [sp, #0]
 8006696:	4821      	ldr	r0, [pc, #132]	; (800671c <aiPrintNetworkInfo+0xb8>)
 8006698:	6921      	ldr	r1, [r4, #16]
 800669a:	f002 f8fd 	bl	8008898 <iprintf>
  printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800669e:	7fa1      	ldrb	r1, [r4, #30]
 80066a0:	7f63      	ldrb	r3, [r4, #29]
 80066a2:	7f22      	ldrb	r2, [r4, #28]
 80066a4:	9100      	str	r1, [sp, #0]
 80066a6:	481e      	ldr	r0, [pc, #120]	; (8006720 <aiPrintNetworkInfo+0xbc>)
 80066a8:	69a1      	ldr	r1, [r4, #24]
 80066aa:	f002 f8f5 	bl	8008898 <iprintf>
  printf("Network info...\r\n");
 80066ae:	481d      	ldr	r0, [pc, #116]	; (8006724 <aiPrintNetworkInfo+0xc0>)
 80066b0:	f002 f966 	bl	8008980 <puts>
  printf("  nodes             : %ld\r\n", report->n_nodes);
 80066b4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80066b6:	481c      	ldr	r0, [pc, #112]	; (8006728 <aiPrintNetworkInfo+0xc4>)
 80066b8:	f002 f8ee 	bl	8008898 <iprintf>
  printf("  complexity        : %ld MACC\r\n", report->n_macc);
 80066bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80066be:	481b      	ldr	r0, [pc, #108]	; (800672c <aiPrintNetworkInfo+0xc8>)
 80066c0:	f002 f8ea 	bl	8008898 <iprintf>
  printf("  activation        : %ld bytes\r\n", aiBufferSize(&report->activations));
 80066c4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80066c8:	f7ff ff8c 	bl	80065e4 <aiBufferSize>
 80066cc:	4601      	mov	r1, r0
 80066ce:	4818      	ldr	r0, [pc, #96]	; (8006730 <aiPrintNetworkInfo+0xcc>)
 80066d0:	f002 f8e2 	bl	8008898 <iprintf>
  printf("  weights           : %ld bytes\r\n", aiBufferSize(&report->weights));
 80066d4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80066d8:	f7ff ff84 	bl	80065e4 <aiBufferSize>
 80066dc:	4601      	mov	r1, r0
 80066de:	4815      	ldr	r0, [pc, #84]	; (8006734 <aiPrintNetworkInfo+0xd0>)
 80066e0:	f002 f8da 	bl	8008898 <iprintf>
  printf("  inputs/outputs    : %u/%u\r\n", report->n_inputs, report->n_outputs);
 80066e4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80066e6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80066e8:	4813      	ldr	r0, [pc, #76]	; (8006738 <aiPrintNetworkInfo+0xd4>)
 80066ea:	f002 f8d5 	bl	8008898 <iprintf>
  aiPrintLayoutBuffer("  IN tensor format  :", &report->inputs);
 80066ee:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80066f2:	4812      	ldr	r0, [pc, #72]	; (800673c <aiPrintNetworkInfo+0xd8>)
 80066f4:	f7ff ff7c 	bl	80065f0 <aiPrintLayoutBuffer>
  aiPrintLayoutBuffer("  OUT tensor format :", &report->outputs);
 80066f8:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80066fc:	4810      	ldr	r0, [pc, #64]	; (8006740 <aiPrintNetworkInfo+0xdc>)
}
 80066fe:	b002      	add	sp, #8
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  aiPrintLayoutBuffer("  OUT tensor format :", &report->outputs);
 8006704:	f7ff bf74 	b.w	80065f0 <aiPrintLayoutBuffer>
 8006708:	0804e444 	.word	0x0804e444
 800670c:	0804e45e 	.word	0x0804e45e
 8006710:	0804e479 	.word	0x0804e479
 8006714:	0804e494 	.word	0x0804e494
 8006718:	0804e4af 	.word	0x0804e4af
 800671c:	0804e4ca 	.word	0x0804e4ca
 8006720:	0804e4f0 	.word	0x0804e4f0
 8006724:	0804e516 	.word	0x0804e516
 8006728:	0804e527 	.word	0x0804e527
 800672c:	0804e543 	.word	0x0804e543
 8006730:	0804e564 	.word	0x0804e564
 8006734:	0804e586 	.word	0x0804e586
 8006738:	0804e5a8 	.word	0x0804e5a8
 800673c:	0804e5c6 	.word	0x0804e5c6
 8006740:	0804e5dc 	.word	0x0804e5dc

08006744 <aiTestHeader>:
{
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	460d      	mov	r5, r1
 8006748:	4616      	mov	r6, r2
 800674a:	4604      	mov	r4, r0
    printf("\r\n#\r\n");
 800674c:	4809      	ldr	r0, [pc, #36]	; (8006774 <aiTestHeader+0x30>)
 800674e:	f002 f917 	bl	8008980 <puts>
    printf("# %s %d.%d\r\n", tname , major, minor);
 8006752:	4633      	mov	r3, r6
 8006754:	462a      	mov	r2, r5
 8006756:	4621      	mov	r1, r4
 8006758:	4807      	ldr	r0, [pc, #28]	; (8006778 <aiTestHeader+0x34>)
 800675a:	f002 f89d 	bl	8008898 <iprintf>
    printf("#\r\n");
 800675e:	4807      	ldr	r0, [pc, #28]	; (800677c <aiTestHeader+0x38>)
 8006760:	f002 f90e 	bl	8008980 <puts>
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8006764:	2301      	movs	r3, #1
 8006766:	2203      	movs	r2, #3
 8006768:	2106      	movs	r1, #6
 800676a:	4805      	ldr	r0, [pc, #20]	; (8006780 <aiTestHeader+0x3c>)
}
 800676c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8006770:	f002 b892 	b.w	8008898 <iprintf>
 8006774:	0804e5f2 	.word	0x0804e5f2
 8006778:	0804e5f7 	.word	0x0804e5f7
 800677c:	0804e5f4 	.word	0x0804e5f4
 8006780:	0804e604 	.word	0x0804e604

08006784 <ioFlushWrite>:
{
 8006784:	b510      	push	{r4, lr}
    o_packet.pw |= (1 << 7); /* Indicate last packet */
 8006786:	4c05      	ldr	r4, [pc, #20]	; (800679c <ioFlushWrite+0x18>)
 8006788:	7823      	ldrb	r3, [r4, #0]
 800678a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800678e:	7023      	strb	r3, [r4, #0]
    write_packet();
 8006790:	f7ff fd1a 	bl	80061c8 <write_packet>
    o_packet.pw = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	7023      	strb	r3, [r4, #0]
 8006798:	bd10      	pop	{r4, pc}
 800679a:	bf00      	nop
 800679c:	20000b98 	.word	0x20000b98

080067a0 <ioFlushRead>:
    i_packet.pr = 0xFF;
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <ioFlushRead+0x10>)
 80067a4:	701a      	strb	r2, [r3, #0]
    i_ridx = 0;
 80067a6:	2200      	movs	r2, #0
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <ioFlushRead+0x14>)
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000b6c 	.word	0x20000b6c
 80067b4:	20000b90 	.word	0x20000b90

080067b8 <pb_ostream_to_uart>:
}
#endif


pb_ostream_t pb_ostream_to_uart(int fd)
{
 80067b8:	b538      	push	{r3, r4, r5, lr}
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80067ba:	2214      	movs	r2, #20
{
 80067bc:	460d      	mov	r5, r1
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80067be:	2100      	movs	r1, #0
{
 80067c0:	4604      	mov	r4, r0
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80067c2:	f001 ffb5 	bl	8008730 <memset>
    return stream;
 80067c6:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <pb_ostream_to_uart+0x20>)
}
 80067c8:	4620      	mov	r0, r4
    return stream;
 80067ca:	e884 0028 	stmia.w	r4, {r3, r5}
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	60a3      	str	r3, [r4, #8]
}
 80067d4:	bd38      	pop	{r3, r4, r5, pc}
 80067d6:	bf00      	nop
 80067d8:	080061e9 	.word	0x080061e9

080067dc <pb_istream_from_uart>:

pb_istream_t pb_istream_from_uart(int fd)
{
 80067dc:	b538      	push	{r3, r4, r5, lr}
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 80067de:	2210      	movs	r2, #16
{
 80067e0:	460d      	mov	r5, r1
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 80067e2:	2100      	movs	r1, #0
{
 80067e4:	4604      	mov	r4, r0
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 80067e6:	f001 ffa3 	bl	8008730 <memset>
    return stream;
 80067ea:	4b04      	ldr	r3, [pc, #16]	; (80067fc <pb_istream_from_uart+0x20>)
}
 80067ec:	4620      	mov	r0, r4
    return stream;
 80067ee:	e884 0028 	stmia.w	r4, {r3, r5}
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	60a3      	str	r3, [r4, #8]
}
 80067f8:	bd38      	pop	{r3, r4, r5, pc}
 80067fa:	bf00      	nop
 80067fc:	08006251 	.word	0x08006251

08006800 <aiInspectorUnBind>:
#endif
}


static void aiInspectorUnBind(struct ai_network_exec_ctx *ctx)
{
 8006800:	b510      	push	{r4, lr}
#ifdef HAS_INSPECTOR
    if (!ctx)
 8006802:	4604      	mov	r4, r0
 8006804:	b150      	cbz	r0, 800681c <aiInspectorUnBind+0x1c>
        return;

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8006806:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800680a:	b120      	cbz	r0, 8006816 <aiInspectorUnBind+0x16>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800680c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8006810:	b109      	cbz	r1, 8006816 <aiInspectorUnBind+0x16>
        ai_inspector_unbind_network(ctx->inspector,
 8006812:	f7f9 fd99 	bl	8000348 <ai_inspector_unbind_network>
                ctx->net_id);

    ctx->net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 8006816:	2300      	movs	r3, #0
 8006818:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800681c:	bd10      	pop	{r4, pc}
	...

08006820 <aiExecCtx.part.0>:
static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            if (cur->network &&
 8006822:	4c0d      	ldr	r4, [pc, #52]	; (8006858 <aiExecCtx.part.0+0x38>)
static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
 8006824:	4606      	mov	r6, r0
            if (cur->network &&
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	b1a0      	cbz	r0, 8006854 <aiExecCtx.part.0+0x34>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800682a:	6865      	ldr	r5, [r4, #4]
 800682c:	4628      	mov	r0, r5
 800682e:	f7fc fed2 	bl	80035d6 <strlen>
 8006832:	4607      	mov	r7, r0
 8006834:	4630      	mov	r0, r6
 8006836:	f7fc fece 	bl	80035d6 <strlen>
            if (cur->network &&
 800683a:	4287      	cmp	r7, r0
 800683c:	d109      	bne.n	8006852 <aiExecCtx.part.0+0x32>
                    (strncmp(cur->report.model_name, nn_name,
 800683e:	463a      	mov	r2, r7
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	f002 f8b4 	bl	80089b0 <strncmp>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8006848:	2800      	cmp	r0, #0
            cur = &net_exec_ctx[idx];
 800684a:	bf0c      	ite	eq
 800684c:	4620      	moveq	r0, r4
 800684e:	2000      	movne	r0, #0
 8006850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (cur->network &&
 8006852:	2000      	movs	r0, #0
}
 8006854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006856:	bf00      	nop
 8006858:	2000abe8 	.word	0x2000abe8

0800685c <aiOnExecNode_cb>:
        ai_node_exec_stage stage) {
 800685c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
    if (stage == AI_NODE_EXEC_PRE_FORWARD_STAGE) {
 8006864:	b9a2      	cbnz	r2, 8006890 <aiOnExecNode_cb+0x34>
        ctx->n_cb_in++;
 8006866:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800686a:	3301      	adds	r3, #1
 800686c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        ctx->tcom += dwtGetCycles();
 8006870:	f7ff fd68 	bl	8006344 <dwtGetCycles>
 8006874:	e9d4 2338 	ldrd	r2, r3, [r4, #224]	; 0xe0
 8006878:	1815      	adds	r5, r2, r0
 800687a:	f143 0600 	adc.w	r6, r3, #0
 800687e:	4628      	mov	r0, r5
 8006880:	4631      	mov	r1, r6
 8006882:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
}
 8006886:	b002      	add	sp, #8
 8006888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        dwtReset();
 800688c:	f7ff bd54 	b.w	8006338 <dwtReset>
    } else if (stage == AI_NODE_EXEC_POST_FORWARD_STAGE) {
 8006890:	2a01      	cmp	r2, #1
 8006892:	d132      	bne.n	80068fa <aiOnExecNode_cb+0x9e>
        uint32_t dur = dwtGetCycles();
 8006894:	f7ff fd56 	bl	8006344 <dwtGetCycles>
 8006898:	4606      	mov	r6, r0
        dwtReset();
 800689a:	f7ff fd4d 	bl	8006338 <dwtReset>
        ctx->tnodes += dur;
 800689e:	2100      	movs	r1, #0
 80068a0:	4630      	mov	r0, r6
 80068a2:	e9d4 233a 	ldrd	r2, r3, [r4, #232]	; 0xe8
 80068a6:	1992      	adds	r2, r2, r6
 80068a8:	414b      	adcs	r3, r1
 80068aa:	e9c4 233a 	strd	r2, r3, [r4, #232]	; 0xe8
        ctx->n_cb_out++;
 80068ae:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
        if (ctx->n_cb_out == ctx->report.n_nodes)
 80068b2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
        ctx->n_cb_out++;
 80068b4:	3301      	adds	r3, #1
 80068b6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
        type = type << 16;
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bf0c      	ite	eq
 80068be:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80068c2:	f44f 3380 	movne.w	r3, #65536	; 0x10000
        if (ctx->no_data)
 80068c6:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
 80068ca:	b10a      	cbz	r2, 80068d0 <aiOnExecNode_cb+0x74>
            type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 80068cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        aiPbMgrSendAiBuffer(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 80068d0:	f8d4 60d0 	ldr.w	r6, [r4, #208]	; 0xd0
 80068d4:	3518      	adds	r5, #24
 80068d6:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
                type | node_info->type,
 80068da:	f835 4c18 	ldrh.w	r4, [r5, #-24]
        aiPbMgrSendAiBuffer(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 80068de:	f835 8c16 	ldrh.w	r8, [r5, #-22]
 80068e2:	431c      	orrs	r4, r3
 80068e4:	f7ff fd34 	bl	8006350 <dwtCyclesToFloatMs>
 80068e8:	9501      	str	r5, [sp, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f8cd 8000 	str.w	r8, [sp]
 80068f0:	4623      	mov	r3, r4
 80068f2:	4639      	mov	r1, r7
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff fb57 	bl	8005fa8 <aiPbMgrSendAiBuffer>
}
 80068fa:	b002      	add	sp, #8
 80068fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006900 <aiPbCmdNNRun>:
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_INVALID_PARAM);
}

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4606      	mov	r6, r0
    if (!nn_name)
 8006906:	300c      	adds	r0, #12
{
 8006908:	460d      	mov	r5, r1
 800690a:	ed2d 8b02 	vpush	{d8}
 800690e:	b09b      	sub	sp, #108	; 0x6c
    if (!nn_name)
 8006910:	d005      	beq.n	800691e <aiPbCmdNNRun+0x1e>
    if (!nn_name[0]) {
 8006912:	7b33      	ldrb	r3, [r6, #12]
 8006914:	b11b      	cbz	r3, 800691e <aiPbCmdNNRun+0x1e>
 8006916:	f7ff ff83 	bl	8006820 <aiExecCtx.part.0>

    ai_buffer ai_input[1];
    ai_buffer ai_output[1];

    ctx = aiExecCtx(req->name, -1);
    if (!ctx) {
 800691a:	4604      	mov	r4, r0
 800691c:	b950      	cbnz	r0, 8006934 <aiPbCmdNNRun+0x34>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800691e:	2304      	movs	r3, #4
    batch = ai_mnetwork_run(ctx->network,
            &ai_input[0], &ai_output[0]);
    if (batch != 1) {
        aiLogErr(ai_mnetwork_get_error(ctx->network),
                "ai_mnetwork_run");
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8006920:	2204      	movs	r2, #4
 8006922:	4629      	mov	r1, r5
 8006924:	4630      	mov	r0, r6
 8006926:	f7ff fa9d 	bl	8005e64 <aiPbMgrSendAck>

    if (inspector_mode)
        aiInspectorUnbindAndDestroy(ctx);

    restoreInts(ints);
}
 800692a:	b01b      	add	sp, #108	; 0x6c
 800692c:	ecbd 8b02 	vpop	{d8}
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8006934:	68b7      	ldr	r7, [r6, #8]
    ctx->no_data = false;
 8006936:	2300      	movs	r3, #0
    ctx->tcom = 0ULL;
 8006938:	2200      	movs	r2, #0
    ai_input[0] = ctx->report.inputs;
 800693a:	f10d 0818 	add.w	r8, sp, #24
    ctx->no_data = false;
 800693e:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8006942:	07bb      	lsls	r3, r7, #30
    ctx->tcom = 0ULL;
 8006944:	f04f 0300 	mov.w	r3, #0
    ai_output[0] = ctx->report.outputs;
 8006948:	f10d 0928 	add.w	r9, sp, #40	; 0x28
        ctx->no_data = true;
 800694c:	bf48      	it	mi
 800694e:	2701      	movmi	r7, #1
    ai_input[0].n_batches  = 1;
 8006950:	f04f 0a01 	mov.w	sl, #1
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8006954:	bf54      	ite	pl
 8006956:	f007 0701 	andpl.w	r7, r7, #1
        ctx->no_data = true;
 800695a:	f880 70d8 	strbmi.w	r7, [r0, #216]	; 0xd8
    ctx->tcom = 0ULL;
 800695e:	e9c0 2338 	strd	r2, r3, [r0, #224]	; 0xe0
    ctx->tnodes = 0ULL;
 8006962:	e9c0 233a 	strd	r2, r3, [r0, #232]	; 0xe8
    ai_input[0] = ctx->report.inputs;
 8006966:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800696a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800696c:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    ai_output[0] = ctx->report.outputs;
 8006970:	f104 0348 	add.w	r3, r4, #72	; 0x48
    ai_input[0].n_batches  = 1;
 8006974:	f8ad a01a 	strh.w	sl, [sp, #26]
    ai_output[0] = ctx->report.outputs;
 8006978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800697a:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800697e:	4b61      	ldr	r3, [pc, #388]	; (8006b04 <aiPbCmdNNRun+0x204>)
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8006980:	4640      	mov	r0, r8
    ai_output[0].n_batches = 1;
 8006982:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8006986:	9309      	str	r3, [sp, #36]	; 0x24
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8006988:	4b5f      	ldr	r3, [pc, #380]	; (8006b08 <aiPbCmdNNRun+0x208>)
 800698a:	930d      	str	r3, [sp, #52]	; 0x34
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800698c:	f7ff fa86 	bl	8005e9c <aiPbAiBufferSize>
 8006990:	4652      	mov	r2, sl
 8006992:	4603      	mov	r3, r0
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f7ff fa64 	bl	8005e64 <aiPbMgrSendAck>
    res = aiPbMgrReceiveAiBuffer(req, resp, EnumState_S_PROCESSING,
 800699c:	f8cd a000 	str.w	sl, [sp]
 80069a0:	4643      	mov	r3, r8
 80069a2:	2202      	movs	r2, #2
 80069a4:	4629      	mov	r1, r5
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff fa82 	bl	8005eb0 <aiPbMgrReceiveAiBuffer>
    if (res != true)
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d0bc      	beq.n	800692a <aiPbCmdNNRun+0x2a>
    ints = disableInts();
 80069b0:	f7ff fdd4 	bl	800655c <disableInts>
    ctx->creq = creq;
 80069b4:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    ints = disableInts();
 80069b8:	9003      	str	r0, [sp, #12]
    ctx->cresp = cresp;
 80069ba:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
    if (inspector_mode)
 80069be:	b3bf      	cbz	r7, 8006a30 <aiPbCmdNNRun+0x130>
    ai_inspector_config cfg = {
 80069c0:	4b52      	ldr	r3, [pc, #328]	; (8006b0c <aiPbCmdNNRun+0x20c>)
 80069c2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    ctx->n_cb_in  = 0;
 80069c6:	f04f 0b00 	mov.w	fp, #0
    ai_inspector_config cfg = {
 80069ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069cc:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    if (ctx->network == AI_HANDLE_NULL)
 80069d0:	6820      	ldr	r0, [r4, #0]
    ctx->n_cb_in  = 0;
 80069d2:	f8c4 b0c8 	str.w	fp, [r4, #200]	; 0xc8
    ctx->n_cb_out = 0;
 80069d6:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
    if (ctx->network == AI_HANDLE_NULL)
 80069da:	b348      	cbz	r0, 8006a30 <aiPbCmdNNRun+0x130>
    ai_mnetwork_get_private_handle(ctx->network,
 80069dc:	a905      	add	r1, sp, #20
 80069de:	aa12      	add	r2, sp, #72	; 0x48
 80069e0:	f001 fbe7 	bl	80081b2 <ai_mnetwork_get_private_handle>
    if (ai_inspector_create(&ctx->inspector, &cfg) )
 80069e4:	4651      	mov	r1, sl
 80069e6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    cfg.cookie = (ai_handle)ctx;
 80069ea:	9411      	str	r4, [sp, #68]	; 0x44
    if (ai_inspector_create(&ctx->inspector, &cfg) )
 80069ec:	f7f9 fc18 	bl	8000220 <ai_inspector_create>
 80069f0:	b1f0      	cbz	r0, 8006a30 <aiPbCmdNNRun+0x130>
        ctx->entry.handle = phandle;
 80069f2:	9b05      	ldr	r3, [sp, #20]
        ctx->entry.params = pparams;
 80069f4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 80069f8:	f104 0ca4 	add.w	ip, r4, #164	; 0xa4
        ctx->entry.handle = phandle;
 80069fc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        ctx->entry.params = pparams;
 8006a00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006a04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006a08:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8006a0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    aiInspectorUnBind(ctx);
 8006a10:	4620      	mov	r0, r4
 8006a12:	f7ff fef5 	bl	8006800 <aiInspectorUnBind>
    if (ctx->inspector) {
 8006a16:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ctx->n_cb_in  = 0;
 8006a1a:	f8c4 b0c8 	str.w	fp, [r4, #200]	; 0xc8
    ctx->n_cb_out = 0;
 8006a1e:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
    if (ctx->inspector) {
 8006a22:	b128      	cbz	r0, 8006a30 <aiPbCmdNNRun+0x130>
        ctx->net_id = ai_inspector_bind_network(
 8006a24:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8006a28:	f7f9 fc4d 	bl	80002c6 <ai_inspector_bind_network>
 8006a2c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    dwtReset();
 8006a30:	f7ff fc82 	bl	8006338 <dwtReset>
    batch = ai_mnetwork_run(ctx->network,
 8006a34:	464a      	mov	r2, r9
 8006a36:	4641      	mov	r1, r8
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	f001 fbac 	bl	8008196 <ai_mnetwork_run>
    if (batch != 1) {
 8006a3e:	2801      	cmp	r0, #1
 8006a40:	d007      	beq.n	8006a52 <aiPbCmdNNRun+0x152>
        aiLogErr(ai_mnetwork_get_error(ctx->network),
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	f001 fb65 	bl	8008112 <ai_mnetwork_get_error>
 8006a48:	4931      	ldr	r1, [pc, #196]	; (8006b10 <aiPbCmdNNRun+0x210>)
 8006a4a:	f7ff fdb5 	bl	80065b8 <aiLogErr>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8006a4e:	2305      	movs	r3, #5
 8006a50:	e766      	b.n	8006920 <aiPbCmdNNRun+0x20>
    tend = dwtGetCycles();
 8006a52:	f7ff fc77 	bl	8006344 <dwtGetCycles>
    tend = ctx->tcom + ctx->tnodes + tend;
 8006a56:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006a5a:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 8006a5e:	4413      	add	r3, r2
 8006a60:	eb03 0800 	add.w	r8, r3, r0
    if (inspector_mode)
 8006a64:	b377      	cbz	r7, 8006ac4 <aiPbCmdNNRun+0x1c4>
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 8006a66:	4640      	mov	r0, r8
 8006a68:	2100      	movs	r1, #0
 8006a6a:	f7ff fc71 	bl	8006350 <dwtCyclesToFloatMs>
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8006a6e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 8006a72:	eeb0 8a40 	vmov.f32	s16, s0
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8006a76:	b170      	cbz	r0, 8006a96 <aiPbCmdNNRun+0x196>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 8006a78:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8006a7c:	b159      	cbz	r1, 8006a96 <aiPbCmdNNRun+0x196>
        if (ai_inspector_get_report(ctx->inspector,
 8006a7e:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8006a82:	f7f9 fcab 	bl	80003dc <ai_inspector_get_report>
 8006a86:	b930      	cbnz	r0, 8006a96 <aiPbCmdNNRun+0x196>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8006a88:	2305      	movs	r3, #5
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff f9e8 	bl	8005e64 <aiPbMgrSendAck>
 8006a94:	e016      	b.n	8006ac4 <aiPbCmdNNRun+0x1c4>
        resp->which_payload = respMsg_report_tag;
 8006a96:	2315      	movs	r3, #21
        aiPbMgrSendResp(req, resp, state);
 8006a98:	2202      	movs	r2, #2
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4630      	mov	r0, r6
        resp->which_payload = respMsg_report_tag;
 8006a9e:	80eb      	strh	r3, [r5, #6]
        resp->payload.report.id = ctx->inspector_report.id;
 8006aa0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        resp->payload.report.elapsed_ms = dur_ms;
 8006aa4:	ed85 8a06 	vstr	s16, [r5, #24]
        resp->payload.report.id = ctx->inspector_report.id;
 8006aa8:	60ab      	str	r3, [r5, #8]
        resp->payload.report.n_nodes = ctx->inspector_report.n_nodes;
 8006aaa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006aae:	616b      	str	r3, [r5, #20]
        resp->payload.report.signature = ctx->inspector_report.signature;
 8006ab0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006ab4:	60eb      	str	r3, [r5, #12]
        resp->payload.report.num_inferences = ctx->inspector_report.num_inferences;
 8006ab6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006aba:	612b      	str	r3, [r5, #16]
        aiPbMgrSendResp(req, resp, state);
 8006abc:	f7ff f98a 	bl	8005dd4 <aiPbMgrSendResp>
        aiPbMgrWaitAck();
 8006ac0:	f7ff f9d8 	bl	8005e74 <aiPbMgrWaitAck>
    aiPbMgrSendAiBuffer(req, resp, EnumState_S_DONE,
 8006ac4:	f04f 0a00 	mov.w	sl, #0
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4651      	mov	r1, sl
 8006acc:	f7ff fc40 	bl	8006350 <dwtCyclesToFloatMs>
 8006ad0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ad4:	f8cd a000 	str.w	sl, [sp]
 8006ad8:	4653      	mov	r3, sl
 8006ada:	2203      	movs	r2, #3
 8006adc:	4629      	mov	r1, r5
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7ff fa62 	bl	8005fa8 <aiPbMgrSendAiBuffer>
    if (inspector_mode)
 8006ae4:	b157      	cbz	r7, 8006afc <aiPbCmdNNRun+0x1fc>
    aiInspectorUnBind(ctx);
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff fe8a 	bl	8006800 <aiInspectorUnBind>
    if (ctx->inspector != AI_HANDLE_NULL)
 8006aec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006af0:	b108      	cbz	r0, 8006af6 <aiPbCmdNNRun+0x1f6>
        ai_inspector_destroy(ctx->inspector);
 8006af2:	f7f9 fbbd 	bl	8000270 <ai_inspector_destroy>
    ctx->inspector = AI_HANDLE_NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    restoreInts(ints);
 8006afc:	9803      	ldr	r0, [sp, #12]
 8006afe:	f7ff fd31 	bl	8006564 <restoreInts>
 8006b02:	e712      	b.n	800692a <aiPbCmdNNRun+0x2a>
 8006b04:	2000a440 	.word	0x2000a440
 8006b08:	2000acd8 	.word	0x2000acd8
 8006b0c:	0800a6f8 	.word	0x0800a6f8
 8006b10:	0804e7f7 	.word	0x0804e7f7

08006b14 <aiPbCmdNNInfo>:
{
 8006b14:	b570      	push	{r4, r5, r6, lr}
    ctx = aiExecCtx(req->name, req->param);
 8006b16:	6883      	ldr	r3, [r0, #8]
{
 8006b18:	4604      	mov	r4, r0
    if (!nn_name)
 8006b1a:	300c      	adds	r0, #12
{
 8006b1c:	460d      	mov	r5, r1
    if (!nn_name)
 8006b1e:	d004      	beq.n	8006b2a <aiPbCmdNNInfo+0x16>
    if (!nn_name[0]) {
 8006b20:	7b22      	ldrb	r2, [r4, #12]
 8006b22:	b152      	cbz	r2, 8006b3a <aiPbCmdNNInfo+0x26>
 8006b24:	f7ff fe7c 	bl	8006820 <aiExecCtx.part.0>
    if (ctx)
 8006b28:	b950      	cbnz	r0, 8006b40 <aiPbCmdNNInfo+0x2c>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4620      	mov	r0, r4
 8006b30:	461a      	mov	r2, r3
}
 8006b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8006b36:	f7ff b995 	b.w	8005e64 <aiPbMgrSendAck>
        if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER))
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f5      	bne.n	8006b2a <aiPbCmdNNInfo+0x16>
            cur = &net_exec_ctx[pos];
 8006b3e:	4804      	ldr	r0, [pc, #16]	; (8006b50 <aiPbCmdNNInfo+0x3c>)
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8006b40:	1d03      	adds	r3, r0, #4
 8006b42:	4629      	mov	r1, r5
 8006b44:	4620      	mov	r0, r4
 8006b46:	2200      	movs	r2, #0
}
 8006b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8006b4c:	f7ff bac4 	b.w	80060d8 <aiPbMgrSendNNInfo>
 8006b50:	2000abe8 	.word	0x2000abe8

08006b54 <aiValidationInit>:
#endif
        AI_PB_CMD_END,
};

int aiValidationInit(void)
{
 8006b54:	b508      	push	{r3, lr}
    aiPbMgrInit(pbCmdFuncTab);
 8006b56:	4808      	ldr	r0, [pc, #32]	; (8006b78 <aiValidationInit+0x24>)
 8006b58:	f7ff f90e 	bl	8005d78 <aiPbMgrInit>

    aiTestHeader(_APP_NAME_, _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2101      	movs	r1, #1
 8006b60:	4806      	ldr	r0, [pc, #24]	; (8006b7c <aiValidationInit+0x28>)
 8006b62:	f7ff fdef 	bl	8006744 <aiTestHeader>

    dwtIpInit();
 8006b66:	f7ff fbcf 	bl	8006308 <dwtIpInit>
    crcIpInit();
 8006b6a:	f7ff fbb5 	bl	80062d8 <crcIpInit>
    logDeviceConf();
 8006b6e:	f7ff fc11 	bl	8006394 <logDeviceConf>

    return 0;
}
 8006b72:	2000      	movs	r0, #0
 8006b74:	bd08      	pop	{r3, pc}
 8006b76:	bf00      	nop
 8006b78:	200007e8 	.word	0x200007e8
 8006b7c:	0804e807 	.word	0x0804e807

08006b80 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8006b84:	2303      	movs	r3, #3
 8006b86:	2600      	movs	r6, #0
{
 8006b88:	b08d      	sub	sp, #52	; 0x34
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 8006b8a:	4c54      	ldr	r4, [pc, #336]	; (8006cdc <aiValidationProcess+0x15c>)
    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	2101      	movs	r1, #1
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	3404      	adds	r4, #4
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4633      	mov	r3, r6
 8006b98:	9602      	str	r6, [sp, #8]
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 8006b9a:	f04f 35ff 	mov.w	r5, #4294967295
    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8006b9e:	4850      	ldr	r0, [pc, #320]	; (8006ce0 <aiValidationProcess+0x160>)
 8006ba0:	f001 fe7a 	bl	8008898 <iprintf>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 8006ba4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8006d0c <aiValidationProcess+0x18c>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 8006ba8:	f844 6c04 	str.w	r6, [r4, #-4]
        net_exec_ctx[idx].inspector = AI_HANDLE_NULL;
 8006bac:	67e6      	str	r6, [r4, #124]	; 0x7c
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 8006bae:	f8a4 6080 	strh.w	r6, [r4, #128]	; 0x80
    printf("Creating the network \"%s\"..\r\n", nn_name);
 8006bb2:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8006d10 <aiValidationProcess+0x190>
        aiLogErr(err, "ai_mnetwork_get_info");
 8006bb6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006d14 <aiValidationProcess+0x194>
        nn_name = ai_mnetwork_find(NULL, idx);
 8006bba:	4631      	mov	r1, r6
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f001 fa47 	bl	8008050 <ai_mnetwork_find>
        if (nn_name) {
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	b1a0      	cbz	r0, 8006bf0 <aiValidationProcess+0x70>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 8006bc6:	4601      	mov	r1, r0
 8006bc8:	4640      	mov	r0, r8
 8006bca:	f001 fe65 	bl	8008898 <iprintf>
    printf("Creating the network \"%s\"..\r\n", nn_name);
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4648      	mov	r0, r9
 8006bd2:	f001 fe61 	bl	8008898 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].network, NULL);
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	1f21      	subs	r1, r4, #4
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f001 fa4a 	bl	8008074 <ai_mnetwork_create>
    if (err.type) {
 8006be0:	b2c5      	uxtb	r5, r0
 8006be2:	b1bd      	cbz	r5, 8006c14 <aiValidationProcess+0x94>
        return -1;
 8006be4:	f04f 35ff 	mov.w	r5, #4294967295
        aiLogErr(err, "ai_mnetwork_create");
 8006be8:	493e      	ldr	r1, [pc, #248]	; (8006ce4 <aiValidationProcess+0x164>)
 8006bea:	f7ff fce5 	bl	80065b8 <aiLogErr>
                nn_name = NULL;
 8006bee:	2700      	movs	r7, #0
        idx++;
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	34f0      	adds	r4, #240	; 0xf0
    } while (nn_name);
 8006bf4:	2f00      	cmp	r7, #0
 8006bf6:	d1e0      	bne.n	8006bba <aiValidationProcess+0x3a>
    int r;

    r = aiInit();
    if (r) {
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	d04c      	beq.n	8006c96 <aiValidationProcess+0x116>
        printf("\r\nE:  aiInit() r=%d\r\n", r);
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	483a      	ldr	r0, [pc, #232]	; (8006ce8 <aiValidationProcess+0x168>)
 8006c00:	f001 fe4a 	bl	8008898 <iprintf>
        HAL_Delay(2000);
 8006c04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c08:	f7fd fd0c 	bl	8004624 <HAL_Delay>
    do {
        r = aiValidationCore();
    } while (r==0);

    return r;
}
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	b00d      	add	sp, #52	; 0x34
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ai_mnetwork_get_info(net_exec_ctx[idx].network,
 8006c14:	4621      	mov	r1, r4
 8006c16:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006c1a:	f001 fa6f 	bl	80080fc <ai_mnetwork_get_info>
 8006c1e:	4683      	mov	fp, r0
 8006c20:	b348      	cbz	r0, 8006c76 <aiValidationProcess+0xf6>
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff fd1e 	bl	8006664 <aiPrintNetworkInfo>
    printf("Initializing the network\r\n");
 8006c28:	4830      	ldr	r0, [pc, #192]	; (8006cec <aiValidationProcess+0x16c>)
 8006c2a:	f001 fea9 	bl	8008980 <puts>
    const ai_network_params params = {
 8006c2e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8006d18 <aiValidationProcess+0x198>
 8006c32:	f10d 0e10 	add.w	lr, sp, #16
 8006c36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006c3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006c3e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006c42:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (!ai_mnetwork_init(net_exec_ctx[idx].network, &params)) {
 8006c46:	a904      	add	r1, sp, #16
 8006c48:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006c4c:	f001 fa72 	bl	8008134 <ai_mnetwork_init>
 8006c50:	4683      	mov	fp, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1cc      	bne.n	8006bf0 <aiValidationProcess+0x70>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 8006c56:	f854 0c04 	ldr.w	r0, [r4, #-4]
        return -4;
 8006c5a:	f06f 0503 	mvn.w	r5, #3
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 8006c5e:	f001 fa58 	bl	8008112 <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_init");
 8006c62:	4923      	ldr	r1, [pc, #140]	; (8006cf0 <aiValidationProcess+0x170>)
 8006c64:	f7ff fca8 	bl	80065b8 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 8006c68:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006c6c:	f001 fa30 	bl	80080d0 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 8006c70:	f844 bc04 	str.w	fp, [r4, #-4]
 8006c74:	e7bb      	b.n	8006bee <aiValidationProcess+0x6e>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 8006c76:	f854 0c04 	ldr.w	r0, [r4, #-4]
        return -2;
 8006c7a:	f06f 0501 	mvn.w	r5, #1
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 8006c7e:	f001 fa48 	bl	8008112 <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_get_info");
 8006c82:	4651      	mov	r1, sl
 8006c84:	f7ff fc98 	bl	80065b8 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 8006c88:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006c8c:	f001 fa20 	bl	80080d0 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 8006c90:	f844 bc04 	str.w	fp, [r4, #-4]
 8006c94:	e7ab      	b.n	8006bee <aiValidationProcess+0x6e>
        printf("\r\n");
 8006c96:	4817      	ldr	r0, [pc, #92]	; (8006cf4 <aiValidationProcess+0x174>)
 8006c98:	f001 fe72 	bl	8008980 <puts>
        printf("-------------------------------------------\r\n");
 8006c9c:	4816      	ldr	r0, [pc, #88]	; (8006cf8 <aiValidationProcess+0x178>)
 8006c9e:	f001 fe6f 	bl	8008980 <puts>
        printf("| READY to receive a CMD from the HOST... |\r\n");
 8006ca2:	4816      	ldr	r0, [pc, #88]	; (8006cfc <aiValidationProcess+0x17c>)
 8006ca4:	f001 fe6c 	bl	8008980 <puts>
        printf("-------------------------------------------\r\n");
 8006ca8:	4813      	ldr	r0, [pc, #76]	; (8006cf8 <aiValidationProcess+0x178>)
 8006caa:	f001 fe69 	bl	8008980 <puts>
        printf("\r\n");
 8006cae:	4811      	ldr	r0, [pc, #68]	; (8006cf4 <aiValidationProcess+0x174>)
 8006cb0:	f001 fe66 	bl	8008980 <puts>
        printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8006cb4:	4812      	ldr	r0, [pc, #72]	; (8006d00 <aiValidationProcess+0x180>)
 8006cb6:	f001 fe63 	bl	8008980 <puts>
        printf("# and a stm32com-base interface should be used\r\n");
 8006cba:	4812      	ldr	r0, [pc, #72]	; (8006d04 <aiValidationProcess+0x184>)
 8006cbc:	f001 fe60 	bl	8008980 <puts>
        printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	4810      	ldr	r0, [pc, #64]	; (8006d08 <aiValidationProcess+0x188>)
 8006cc6:	f001 fde7 	bl	8008898 <iprintf>
    ioDisableWrite();
 8006cca:	f7ff fc4f 	bl	800656c <ioDisableWrite>
    return aiPbMgrWaitAndProcess();
 8006cce:	f7ff f893 	bl	8005df8 <aiPbMgrWaitAndProcess>
    } while (r==0);
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0fa      	beq.n	8006cce <aiValidationProcess+0x14e>
 8006cd8:	e798      	b.n	8006c0c <aiValidationProcess+0x8c>
 8006cda:	bf00      	nop
 8006cdc:	2000abe8 	.word	0x2000abe8
 8006ce0:	0804e815 	.word	0x0804e815
 8006ce4:	0804e87c 	.word	0x0804e87c
 8006ce8:	0804e8cf 	.word	0x0804e8cf
 8006cec:	0804e88f 	.word	0x0804e88f
 8006cf0:	0804e8be 	.word	0x0804e8be
 8006cf4:	0804e5f5 	.word	0x0804e5f5
 8006cf8:	0804e8e5 	.word	0x0804e8e5
 8006cfc:	0804e912 	.word	0x0804e912
 8006d00:	0804e93f 	.word	0x0804e93f
 8006d04:	0804e984 	.word	0x0804e984
 8006d08:	0804e9b4 	.word	0x0804e9b4
 8006d0c:	0804e847 	.word	0x0804e847
 8006d10:	0804e85e 	.word	0x0804e85e
 8006d14:	0804e8a9 	.word	0x0804e8a9
 8006d18:	0800a708 	.word	0x0800a708

08006d1c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 8006d1c:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 8006d1e:	60c2      	str	r2, [r0, #12]
    iter->start = fields;
 8006d20:	6001      	str	r1, [r0, #0]
    iter->pos = fields;
 8006d22:	6041      	str	r1, [r0, #4]
    iter->required_field_index = 0;
 8006d24:	6083      	str	r3, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8006d26:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8006d2a:	441a      	add	r2, r3
 8006d2c:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8006d2e:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 8006d32:	441a      	add	r2, r3
 8006d34:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8006d36:	8808      	ldrh	r0, [r1, #0]
}
 8006d38:	3000      	adds	r0, #0
 8006d3a:	bf18      	it	ne
 8006d3c:	2001      	movne	r0, #1
 8006d3e:	4770      	bx	lr

08006d40 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8006d40:	6842      	ldr	r2, [r0, #4]
{
 8006d42:	4601      	mov	r1, r0

    if (prev_field->tag == 0)
 8006d44:	8813      	ldrh	r3, [r2, #0]
{
 8006d46:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d038      	beq.n	8006dbe <pb_field_iter_next+0x7e>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 8006d4c:	f102 030f 	add.w	r3, r2, #15
    
    if (iter->pos->tag == 0)
 8006d50:	f8b2 400f 	ldrh.w	r4, [r2, #15]
    iter->pos++;
 8006d54:	6043      	str	r3, [r0, #4]
    if (iter->pos->tag == 0)
 8006d56:	b92c      	cbnz	r4, 8006d64 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8006d58:	68c2      	ldr	r2, [r0, #12]
 8006d5a:	6801      	ldr	r1, [r0, #0]
 8006d5c:	f7ff ffde 	bl	8006d1c <pb_field_iter_begin>
        return false;
 8006d60:	4620      	mov	r0, r4
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8006d64:	7890      	ldrb	r0, [r2, #2]
        size_t prev_size = prev_field->data_size;
 8006d66:	f8b2 3007 	ldrh.w	r3, [r2, #7]
 8006d6a:	f000 0530 	and.w	r5, r0, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8006d6e:	2d30      	cmp	r5, #48	; 0x30
 8006d70:	d109      	bne.n	8006d86 <pb_field_iter_next+0x46>
 8006d72:	7c54      	ldrb	r4, [r2, #17]
 8006d74:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8006d78:	2c30      	cmp	r4, #48	; 0x30
 8006d7a:	d104      	bne.n	8006d86 <pb_field_iter_next+0x46>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8006d7c:	8a56      	ldrh	r6, [r2, #18]
 8006d7e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006d82:	42a6      	cmp	r6, r4
 8006d84:	d013      	beq.n	8006dae <pb_field_iter_next+0x6e>
            iter->pos->data_offset == PB_SIZE_MAX)
        {
            /* Don't advance pointers inside unions */
            return true;
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8006d86:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
 8006d8a:	2c20      	cmp	r4, #32
 8006d8c:	d111      	bne.n	8006db2 <pb_field_iter_next+0x72>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 8006d8e:	f8b2 0009 	ldrh.w	r0, [r2, #9]
 8006d92:	4343      	muls	r3, r0
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8006d94:	b915      	cbnz	r5, 8006d9c <pb_field_iter_next+0x5c>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 8006d96:	6888      	ldr	r0, [r1, #8]
 8006d98:	3001      	adds	r0, #1
 8006d9a:	6088      	str	r0, [r1, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8006d9c:	8a50      	ldrh	r0, [r2, #18]
 8006d9e:	4418      	add	r0, r3
 8006da0:	690b      	ldr	r3, [r1, #16]
 8006da2:	4403      	add	r3, r0
 8006da4:	610b      	str	r3, [r1, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8006da6:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	614b      	str	r3, [r1, #20]
            return true;
 8006dae:	2001      	movs	r0, #1
        return true;
    }
}
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8006db2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006db6:	2880      	cmp	r0, #128	; 0x80
            prev_size = sizeof(void*);
 8006db8:	bf08      	it	eq
 8006dba:	2304      	moveq	r3, #4
 8006dbc:	e7ea      	b.n	8006d94 <pb_field_iter_next+0x54>
        return false;
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}

08006dc2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	460e      	mov	r6, r1
    const pb_field_t *start = iter->pos;
 8006dc8:	6845      	ldr	r5, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	881a      	ldrh	r2, [r3, #0]
 8006dce:	42b2      	cmp	r2, r6
 8006dd0:	d104      	bne.n	8006ddc <pb_field_iter_find+0x1a>
 8006dd2:	789b      	ldrb	r3, [r3, #2]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d107      	bne.n	8006dec <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ffaf 	bl	8006d40 <pb_field_iter_next>
    } while (iter->pos != start);
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	429d      	cmp	r5, r3
 8006de6:	d1f0      	bne.n	8006dca <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8006de8:	2000      	movs	r0, #0
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 8006dec:	2001      	movs	r0, #1
}
 8006dee:	bd70      	pop	{r4, r5, r6, pc}

08006df0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8006df0:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8006df2:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8006df4:	18a3      	adds	r3, r4, r2
 8006df6:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8006df8:	b111      	cbz	r1, 8006e00 <buf_read+0x10>
 8006dfa:	2300      	movs	r3, #0
    {
        for (i = 0; i < count; i++)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d101      	bne.n	8006e04 <buf_read+0x14>
            buf[i] = source[i];
    }
    
    return true;
}
 8006e00:	2001      	movs	r0, #1
 8006e02:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 8006e04:	5ce0      	ldrb	r0, [r4, r3]
 8006e06:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 8006e08:	3301      	adds	r3, #1
 8006e0a:	e7f7      	b.n	8006dfc <buf_read+0xc>

08006e0c <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
    if (stream->bytes_left == 0)
 8006e0c:	6883      	ldr	r3, [r0, #8]
{
 8006e0e:	b510      	push	{r4, lr}
 8006e10:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8006e12:	b93b      	cbnz	r3, 8006e24 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8006e14:	68c2      	ldr	r2, [r0, #12]
 8006e16:	490b      	ldr	r1, [pc, #44]	; (8006e44 <pb_readbyte+0x38>)
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	bf08      	it	eq
 8006e1c:	460a      	moveq	r2, r1
 8006e1e:	60c2      	str	r2, [r0, #12]
 8006e20:	4618      	mov	r0, r3
 8006e22:	bd10      	pop	{r4, pc}

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8006e24:	6803      	ldr	r3, [r0, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	4798      	blx	r3
 8006e2a:	b930      	cbnz	r0, 8006e3a <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	4a06      	ldr	r2, [pc, #24]	; (8006e48 <pb_readbyte+0x3c>)
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf08      	it	eq
 8006e34:	4613      	moveq	r3, r2
 8006e36:	60e3      	str	r3, [r4, #12]
 8006e38:	bd10      	pop	{r4, pc}
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8006e3a:	68a3      	ldr	r3, [r4, #8]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	60a3      	str	r3, [r4, #8]
    
    return true;    
}
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	bf00      	nop
 8006e44:	0804eb49 	.word	0x0804eb49
 8006e48:	0804eb57 	.word	0x0804eb57

08006e4c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8006e4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e50:	4688      	mov	r8, r1
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8006e52:	f10d 0107 	add.w	r1, sp, #7
{
 8006e56:	4605      	mov	r5, r0
 8006e58:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8006e5a:	f7ff ffd7 	bl	8006e0c <pb_readbyte>
 8006e5e:	4607      	mov	r7, r0
 8006e60:	b958      	cbnz	r0, 8006e7a <pb_decode_varint32_eof+0x2e>
    {
        if (stream->bytes_left == 0)
 8006e62:	68ab      	ldr	r3, [r5, #8]
 8006e64:	b10b      	cbz	r3, 8006e6a <pb_decode_varint32_eof+0x1e>
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8006e66:	2700      	movs	r7, #0
 8006e68:	e003      	b.n	8006e72 <pb_decode_varint32_eof+0x26>
            if (eof)
 8006e6a:	2c00      	cmp	r4, #0
 8006e6c:	d0fb      	beq.n	8006e66 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	7023      	strb	r3, [r4, #0]
        }
   }
   
   *dest = result;
   return true;
}
 8006e72:	4638      	mov	r0, r7
 8006e74:	b002      	add	sp, #8
 8006e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 8006e7a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8006e7e:	0620      	lsls	r0, r4, #24
 8006e80:	d52b      	bpl.n	8006eda <pb_decode_varint32_eof+0x8e>
        result = byte & 0x7F;
 8006e82:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8006e86:	2607      	movs	r6, #7
            if (!pb_readbyte(stream, &byte))
 8006e88:	f10d 0107 	add.w	r1, sp, #7
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f7ff ffbd 	bl	8006e0c <pb_readbyte>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0e7      	beq.n	8006e66 <pb_decode_varint32_eof+0x1a>
            if (bitpos >= 32)
 8006e96:	2e1f      	cmp	r6, #31
 8006e98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e9c:	d910      	bls.n	8006ec0 <pb_decode_varint32_eof+0x74>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8006e9e:	2e3f      	cmp	r6, #63	; 0x3f
 8006ea0:	bf34      	ite	cc
 8006ea2:	22ff      	movcc	r2, #255	; 0xff
 8006ea4:	2201      	movcs	r2, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8006ea6:	0659      	lsls	r1, r3, #25
 8006ea8:	d00e      	beq.n	8006ec8 <pb_decode_varint32_eof+0x7c>
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	da01      	bge.n	8006eb2 <pb_decode_varint32_eof+0x66>
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d00a      	beq.n	8006ec8 <pb_decode_varint32_eof+0x7c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8006eb2:	68eb      	ldr	r3, [r5, #12]
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <pb_decode_varint32_eof+0x94>)
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf08      	it	eq
 8006eba:	4613      	moveq	r3, r2
 8006ebc:	60eb      	str	r3, [r5, #12]
 8006ebe:	e7d2      	b.n	8006e66 <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8006ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec4:	40b2      	lsls	r2, r6
 8006ec6:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 8006ec8:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8006eca:	f106 0607 	add.w	r6, r6, #7
        } while (byte & 0x80);
 8006ece:	d4db      	bmi.n	8006e88 <pb_decode_varint32_eof+0x3c>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8006ed0:	2e23      	cmp	r6, #35	; 0x23
 8006ed2:	d102      	bne.n	8006eda <pb_decode_varint32_eof+0x8e>
 8006ed4:	f013 0f70 	tst.w	r3, #112	; 0x70
 8006ed8:	d1eb      	bne.n	8006eb2 <pb_decode_varint32_eof+0x66>
   *dest = result;
 8006eda:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8006ede:	e7c8      	b.n	8006e72 <pb_decode_varint32_eof+0x26>
 8006ee0:	0804eb21 	.word	0x0804eb21

08006ee4 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
    pb_type_t type;
    type = iter->pos->type;
 8006ee4:	6841      	ldr	r1, [r0, #4]
{
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	b570      	push	{r4, r5, r6, lr}
    type = iter->pos->type;
 8006eea:	788a      	ldrb	r2, [r1, #2]
{
 8006eec:	b086      	sub	sp, #24
 8006eee:	f002 040f 	and.w	r4, r2, #15
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8006ef2:	2c08      	cmp	r4, #8
 8006ef4:	d11e      	bne.n	8006f34 <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8006ef6:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8006ef8:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8006efa:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 8006efc:	b90c      	cbnz	r4, 8006f02 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8006efe:	b006      	add	sp, #24
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006f02:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8006f04:	4668      	mov	r0, sp
 8006f06:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006f08:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 8006f0a:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	f7ff ff05 	bl	8006d1c <pb_field_iter_begin>
    iter->pData = extension->dest;
 8006f12:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 8006f14:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 8006f16:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 8006f18:	f104 030c 	add.w	r3, r4, #12
 8006f1c:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006f1e:	78ab      	ldrb	r3, [r5, #2]
 8006f20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f24:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8006f26:	bf04      	itt	eq
 8006f28:	1d23      	addeq	r3, r4, #4
 8006f2a:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8006f2c:	f7ff ffda 	bl	8006ee4 <pb_field_set_to_default>
            ext = ext->next;
 8006f30:	68a4      	ldr	r4, [r4, #8]
 8006f32:	e7e3      	b.n	8006efc <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006f34:	f012 00c0 	ands.w	r0, r2, #192	; 0xc0
 8006f38:	d121      	bne.n	8006f7e <pb_field_set_to_default+0x9a>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8006f3a:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8006f3e:	2d10      	cmp	r5, #16
 8006f40:	d10d      	bne.n	8006f5e <pb_field_set_to_default+0x7a>
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	691d      	ldr	r5, [r3, #16]
 8006f46:	42aa      	cmp	r2, r5
 8006f48:	d000      	beq.n	8006f4c <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 8006f4a:	7010      	strb	r0, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8006f4c:	2c07      	cmp	r4, #7
 8006f4e:	f8d1 400b 	ldr.w	r4, [r1, #11]
 8006f52:	d109      	bne.n	8006f68 <pb_field_set_to_default+0x84>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006f54:	6919      	ldr	r1, [r3, #16]
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 f81b 	bl	8006f92 <pb_message_set_to_defaults>
 8006f5c:	e7cf      	b.n	8006efe <pb_field_set_to_default+0x1a>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006f5e:	0695      	lsls	r5, r2, #26
 8006f60:	d5f4      	bpl.n	8006f4c <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	8018      	strh	r0, [r3, #0]
 8006f66:	e7ca      	b.n	8006efe <pb_field_set_to_default+0x1a>
 8006f68:	f8b1 2007 	ldrh.w	r2, [r1, #7]
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	6918      	ldr	r0, [r3, #16]
            else if (iter->pos->ptr != NULL)
 8006f70:	b114      	cbz	r4, 8006f78 <pb_field_set_to_default+0x94>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8006f72:	f001 fbd2 	bl	800871a <memcpy>
 8006f76:	e7c2      	b.n	8006efe <pb_field_set_to_default+0x1a>
                memset(iter->pData, 0, iter->pos->data_size);
 8006f78:	f001 fbda 	bl	8008730 <memset>
 8006f7c:	e7bf      	b.n	8006efe <pb_field_set_to_default+0x1a>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8006f7e:	2880      	cmp	r0, #128	; 0x80
 8006f80:	d1bd      	bne.n	8006efe <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8006f82:	6918      	ldr	r0, [r3, #16]
 8006f84:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006f86:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8006f88:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006f8a:	d5b8      	bpl.n	8006efe <pb_field_set_to_default+0x1a>
            *(pb_size_t*)iter->pSize = 0;
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	8019      	strh	r1, [r3, #0]
}
 8006f90:	e7b5      	b.n	8006efe <pb_field_set_to_default+0x1a>

08006f92 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8006f92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8006f94:	460a      	mov	r2, r1
 8006f96:	4601      	mov	r1, r0
 8006f98:	4668      	mov	r0, sp
 8006f9a:	f7ff febf 	bl	8006d1c <pb_field_iter_begin>
 8006f9e:	b130      	cbz	r0, 8006fae <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8006fa0:	4668      	mov	r0, sp
 8006fa2:	f7ff ff9f 	bl	8006ee4 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8006fa6:	4668      	mov	r0, sp
 8006fa8:	f7ff feca 	bl	8006d40 <pb_field_iter_next>
 8006fac:	e7f7      	b.n	8006f9e <pb_message_set_to_defaults+0xc>
}
 8006fae:	b007      	add	sp, #28
 8006fb0:	f85d fb04 	ldr.w	pc, [sp], #4

08006fb4 <pb_read>:
{
 8006fb4:	b530      	push	{r4, r5, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	b085      	sub	sp, #20
 8006fba:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8006fbc:	b9a9      	cbnz	r1, 8006fea <pb_read+0x36>
 8006fbe:	6802      	ldr	r2, [r0, #0]
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <pb_read+0x6c>)
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d011      	beq.n	8006fea <pb_read+0x36>
		while (count > 16)
 8006fc6:	2d10      	cmp	r5, #16
 8006fc8:	d806      	bhi.n	8006fd8 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8006fca:	462a      	mov	r2, r5
 8006fcc:	4669      	mov	r1, sp
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7ff fff0 	bl	8006fb4 <pb_read>
}
 8006fd4:	b005      	add	sp, #20
 8006fd6:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8006fd8:	2210      	movs	r2, #16
 8006fda:	4669      	mov	r1, sp
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff ffe9 	bl	8006fb4 <pb_read>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0f6      	beq.n	8006fd4 <pb_read+0x20>
			count -= 16;
 8006fe6:	3d10      	subs	r5, #16
 8006fe8:	e7ed      	b.n	8006fc6 <pb_read+0x12>
    if (stream->bytes_left < count)
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	429d      	cmp	r5, r3
 8006fee:	d907      	bls.n	8007000 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8006ff0:	68e3      	ldr	r3, [r4, #12]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	4a0b      	ldr	r2, [pc, #44]	; (8007024 <pb_read+0x70>)
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf08      	it	eq
 8006ffa:	4613      	moveq	r3, r2
 8006ffc:	60e3      	str	r3, [r4, #12]
 8006ffe:	e7e9      	b.n	8006fd4 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	462a      	mov	r2, r5
 8007004:	4620      	mov	r0, r4
 8007006:	4798      	blx	r3
 8007008:	b930      	cbnz	r0, 8007018 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	4a06      	ldr	r2, [pc, #24]	; (8007028 <pb_read+0x74>)
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf08      	it	eq
 8007012:	4613      	moveq	r3, r2
 8007014:	60e3      	str	r3, [r4, #12]
 8007016:	e7dd      	b.n	8006fd4 <pb_read+0x20>
    stream->bytes_left -= count;
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	1b5d      	subs	r5, r3, r5
 800701c:	60a5      	str	r5, [r4, #8]
    return true;
 800701e:	e7d9      	b.n	8006fd4 <pb_read+0x20>
 8007020:	08006df1 	.word	0x08006df1
 8007024:	0804eb49 	.word	0x0804eb49
 8007028:	0804eb57 	.word	0x0804eb57

0800702c <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 800702c:	2200      	movs	r2, #0
 800702e:	f7ff bf0d 	b.w	8006e4c <pb_decode_varint32_eof>
	...

08007034 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8007034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007036:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8007038:	a901      	add	r1, sp, #4
{
 800703a:	4605      	mov	r5, r0
 800703c:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 800703e:	f7ff fff5 	bl	800702c <pb_decode_varint32>
 8007042:	4604      	mov	r4, r0
 8007044:	b188      	cbz	r0, 800706a <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 8007046:	9901      	ldr	r1, [sp, #4]
 8007048:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800704c:	d307      	bcc.n	800705e <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800704e:	68eb      	ldr	r3, [r5, #12]
 8007050:	4a0d      	ldr	r2, [pc, #52]	; (8007088 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf08      	it	eq
 8007056:	4613      	moveq	r3, r2
 8007058:	2400      	movs	r4, #0
 800705a:	60eb      	str	r3, [r5, #12]
 800705c:	e005      	b.n	800706a <pb_dec_fixed_length_bytes+0x36>
 800705e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 8007062:	b929      	cbnz	r1, 8007070 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 8007064:	4630      	mov	r0, r6
 8007066:	f001 fb63 	bl	8008730 <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 800706a:	4620      	mov	r0, r4
 800706c:	b003      	add	sp, #12
 800706e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8007070:	4291      	cmp	r1, r2
 8007072:	d002      	beq.n	800707a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8007074:	68eb      	ldr	r3, [r5, #12]
 8007076:	4a05      	ldr	r2, [pc, #20]	; (800708c <pb_dec_fixed_length_bytes+0x58>)
 8007078:	e7eb      	b.n	8007052 <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800707a:	460a      	mov	r2, r1
 800707c:	4628      	mov	r0, r5
 800707e:	4631      	mov	r1, r6
 8007080:	f7ff ff98 	bl	8006fb4 <pb_read>
 8007084:	4604      	mov	r4, r0
 8007086:	e7f0      	b.n	800706a <pb_dec_fixed_length_bytes+0x36>
 8007088:	0804ea4a 	.word	0x0804ea4a
 800708c:	0804ea59 	.word	0x0804ea59

08007090 <pb_dec_string>:
{
 8007090:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007092:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8007094:	a901      	add	r1, sp, #4
{
 8007096:	4604      	mov	r4, r0
 8007098:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 800709a:	f7ff ffc7 	bl	800702c <pb_decode_varint32>
 800709e:	b148      	cbz	r0, 80070b4 <pb_dec_string+0x24>
    alloc_size = size + 1;
 80070a0:	9a01      	ldr	r2, [sp, #4]
    if (alloc_size < size)
 80070a2:	1c51      	adds	r1, r2, #1
 80070a4:	d308      	bcc.n	80070b8 <pb_dec_string+0x28>
        PB_RETURN_ERROR(stream, "size too large");
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <pb_dec_string+0x58>)
        PB_RETURN_ERROR(stream, "no malloc support");
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf08      	it	eq
 80070ae:	4613      	moveq	r3, r2
 80070b0:	2000      	movs	r0, #0
 80070b2:	60e3      	str	r3, [r4, #12]
}
 80070b4:	b002      	add	sp, #8
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80070b8:	78b3      	ldrb	r3, [r6, #2]
 80070ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d102      	bne.n	80070c8 <pb_dec_string+0x38>
        PB_RETURN_ERROR(stream, "no malloc support");
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	4a09      	ldr	r2, [pc, #36]	; (80070ec <pb_dec_string+0x5c>)
 80070c6:	e7f0      	b.n	80070aa <pb_dec_string+0x1a>
        if (alloc_size > field->data_size)
 80070c8:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 80070cc:	4299      	cmp	r1, r3
 80070ce:	d902      	bls.n	80070d6 <pb_dec_string+0x46>
            PB_RETURN_ERROR(stream, "string overflow");
 80070d0:	68e3      	ldr	r3, [r4, #12]
 80070d2:	4a07      	ldr	r2, [pc, #28]	; (80070f0 <pb_dec_string+0x60>)
 80070d4:	e7e9      	b.n	80070aa <pb_dec_string+0x1a>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 80070d6:	4629      	mov	r1, r5
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff ff6b 	bl	8006fb4 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 80070de:	2200      	movs	r2, #0
 80070e0:	9b01      	ldr	r3, [sp, #4]
 80070e2:	54ea      	strb	r2, [r5, r3]
    return status;
 80070e4:	e7e6      	b.n	80070b4 <pb_dec_string+0x24>
 80070e6:	bf00      	nop
 80070e8:	0804ea7b 	.word	0x0804ea7b
 80070ec:	0804ea8a 	.word	0x0804ea8a
 80070f0:	0804ea9c 	.word	0x0804ea9c

080070f4 <pb_dec_bytes>:
{
 80070f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f6:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 80070f8:	a901      	add	r1, sp, #4
{
 80070fa:	4604      	mov	r4, r0
 80070fc:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80070fe:	f7ff ff95 	bl	800702c <pb_decode_varint32>
 8007102:	b178      	cbz	r0, 8007124 <pb_dec_bytes+0x30>
    if (size > PB_SIZE_MAX)
 8007104:	9a01      	ldr	r2, [sp, #4]
 8007106:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800710a:	d302      	bcc.n	8007112 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800710c:	68e3      	ldr	r3, [r4, #12]
 800710e:	4a10      	ldr	r2, [pc, #64]	; (8007150 <pb_dec_bytes+0x5c>)
 8007110:	e003      	b.n	800711a <pb_dec_bytes+0x26>
    if (size > alloc_size)
 8007112:	1c91      	adds	r1, r2, #2
 8007114:	d308      	bcc.n	8007128 <pb_dec_bytes+0x34>
        PB_RETURN_ERROR(stream, "size too large");
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	4a0e      	ldr	r2, [pc, #56]	; (8007154 <pb_dec_bytes+0x60>)
 800711a:	2b00      	cmp	r3, #0
 800711c:	bf08      	it	eq
 800711e:	4613      	moveq	r3, r2
 8007120:	2000      	movs	r0, #0
 8007122:	60e3      	str	r3, [r4, #12]
}
 8007124:	b002      	add	sp, #8
 8007126:	bd70      	pop	{r4, r5, r6, pc}
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007128:	78b3      	ldrb	r3, [r6, #2]
 800712a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800712e:	2b80      	cmp	r3, #128	; 0x80
 8007130:	d102      	bne.n	8007138 <pb_dec_bytes+0x44>
        PB_RETURN_ERROR(stream, "no malloc support");
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	4a08      	ldr	r2, [pc, #32]	; (8007158 <pb_dec_bytes+0x64>)
 8007136:	e7f0      	b.n	800711a <pb_dec_bytes+0x26>
        if (alloc_size > field->data_size)
 8007138:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800713c:	4299      	cmp	r1, r3
 800713e:	d8e5      	bhi.n	800710c <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8007140:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8007142:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8007144:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 8007148:	f7ff ff34 	bl	8006fb4 <pb_read>
 800714c:	e7ea      	b.n	8007124 <pb_dec_bytes+0x30>
 800714e:	bf00      	nop
 8007150:	0804ea4a 	.word	0x0804ea4a
 8007154:	0804ea7b 	.word	0x0804ea7b
 8007158:	0804ea8a 	.word	0x0804ea8a

0800715c <pb_decode_varint>:
{
 800715c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	4680      	mov	r8, r0
 8007162:	468a      	mov	sl, r1
    uint64_t result = 0;
 8007164:	2600      	movs	r6, #0
 8007166:	2700      	movs	r7, #0
    uint_fast8_t bitpos = 0;
 8007168:	2400      	movs	r4, #0
        if (!pb_readbyte(stream, &byte))
 800716a:	f10d 0107 	add.w	r1, sp, #7
 800716e:	4640      	mov	r0, r8
 8007170:	f7ff fe4c 	bl	8006e0c <pb_readbyte>
 8007174:	4605      	mov	r5, r0
 8007176:	b1e8      	cbz	r0, 80071b4 <pb_decode_varint+0x58>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007178:	f89d 9007 	ldrb.w	r9, [sp, #7]
 800717c:	4622      	mov	r2, r4
 800717e:	2100      	movs	r1, #0
        bitpos = (uint_fast8_t)(bitpos + 7);
 8007180:	3407      	adds	r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007182:	f009 007f 	and.w	r0, r9, #127	; 0x7f
 8007186:	f7fc fa83 	bl	8003690 <__aeabi_llsl>
    } while (byte & 0x80);
 800718a:	f019 0f80 	tst.w	r9, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800718e:	ea46 0600 	orr.w	r6, r6, r0
 8007192:	ea47 0701 	orr.w	r7, r7, r1
    } while (byte & 0x80);
 8007196:	d102      	bne.n	800719e <pb_decode_varint+0x42>
    *dest = result;
 8007198:	e9ca 6700 	strd	r6, r7, [sl]
    return true;
 800719c:	e00a      	b.n	80071b4 <pb_decode_varint+0x58>
        if (bitpos >= 64)
 800719e:	2c46      	cmp	r4, #70	; 0x46
 80071a0:	d1e3      	bne.n	800716a <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 80071a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071a6:	2500      	movs	r5, #0
 80071a8:	4a04      	ldr	r2, [pc, #16]	; (80071bc <pb_decode_varint+0x60>)
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bf08      	it	eq
 80071ae:	4613      	moveq	r3, r2
 80071b0:	f8c8 300c 	str.w	r3, [r8, #12]
}
 80071b4:	4628      	mov	r0, r5
 80071b6:	b002      	add	sp, #8
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071bc:	0804eb21 	.word	0x0804eb21

080071c0 <pb_dec_uvarint>:
{
 80071c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c2:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 80071c4:	4669      	mov	r1, sp
{
 80071c6:	4606      	mov	r6, r0
 80071c8:	4617      	mov	r7, r2
    if (!pb_decode_varint(stream, &value))
 80071ca:	f7ff ffc7 	bl	800715c <pb_decode_varint>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d02c      	beq.n	800722c <pb_dec_uvarint+0x6c>
    if (field->data_size == sizeof(pb_uint64_t))
 80071d2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d10c      	bne.n	80071f4 <pb_dec_uvarint+0x34>
        clamped = *(pb_uint64_t*)dest = value;
 80071da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80071de:	e9c7 4500 	strd	r4, r5, [r7]
    if (clamped != value)
 80071e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071e6:	429d      	cmp	r5, r3
 80071e8:	bf08      	it	eq
 80071ea:	4294      	cmpeq	r4, r2
 80071ec:	d01e      	beq.n	800722c <pb_dec_uvarint+0x6c>
        PB_RETURN_ERROR(stream, "integer too large");
 80071ee:	68f3      	ldr	r3, [r6, #12]
 80071f0:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <pb_dec_uvarint+0x70>)
 80071f2:	e016      	b.n	8007222 <pb_dec_uvarint+0x62>
    else if (field->data_size == sizeof(uint32_t))
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d104      	bne.n	8007202 <pb_dec_uvarint+0x42>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 80071f8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80071fc:	603c      	str	r4, [r7, #0]
 80071fe:	2500      	movs	r5, #0
 8007200:	e7ef      	b.n	80071e2 <pb_dec_uvarint+0x22>
    else if (field->data_size == sizeof(uint_least16_t))
 8007202:	2b02      	cmp	r3, #2
 8007204:	d103      	bne.n	800720e <pb_dec_uvarint+0x4e>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8007206:	9c00      	ldr	r4, [sp, #0]
 8007208:	803c      	strh	r4, [r7, #0]
 800720a:	b2a4      	uxth	r4, r4
 800720c:	e7f7      	b.n	80071fe <pb_dec_uvarint+0x3e>
    else if (field->data_size == sizeof(uint_least8_t))
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <pb_dec_uvarint+0x5e>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8007212:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007216:	703c      	strb	r4, [r7, #0]
 8007218:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800721c:	e7ef      	b.n	80071fe <pb_dec_uvarint+0x3e>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800721e:	68f3      	ldr	r3, [r6, #12]
 8007220:	4a04      	ldr	r2, [pc, #16]	; (8007234 <pb_dec_uvarint+0x74>)
        PB_RETURN_ERROR(stream, "integer too large");
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf08      	it	eq
 8007226:	4613      	moveq	r3, r2
 8007228:	2000      	movs	r0, #0
 800722a:	60f3      	str	r3, [r6, #12]
}
 800722c:	b003      	add	sp, #12
 800722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007230:	0804ead7 	.word	0x0804ead7
 8007234:	0804eac5 	.word	0x0804eac5

08007238 <pb_dec_varint>:
{
 8007238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723a:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 800723c:	4669      	mov	r1, sp
{
 800723e:	4606      	mov	r6, r0
 8007240:	4617      	mov	r7, r2
    if (!pb_decode_varint(stream, &value))
 8007242:	f7ff ff8b 	bl	800715c <pb_decode_varint>
 8007246:	b138      	cbz	r0, 8007258 <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8007248:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800724c:	2a08      	cmp	r2, #8
 800724e:	d105      	bne.n	800725c <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8007250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007254:	e9c7 2300 	strd	r2, r3, [r7]
}
 8007258:	b003      	add	sp, #12
 800725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        svalue = (int32_t)value;
 800725c:	9b00      	ldr	r3, [sp, #0]
    else if (field->data_size == sizeof(int32_t))
 800725e:	2a04      	cmp	r2, #4
        svalue = (int32_t)value;
 8007260:	461c      	mov	r4, r3
 8007262:	ea4f 75e3 	mov.w	r5, r3, asr #31
    else if (field->data_size == sizeof(int32_t))
 8007266:	d101      	bne.n	800726c <pb_dec_varint+0x34>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	e7f5      	b.n	8007258 <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 800726c:	2a02      	cmp	r2, #2
 800726e:	d10a      	bne.n	8007286 <pb_dec_varint+0x4e>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8007270:	b21b      	sxth	r3, r3
 8007272:	b21a      	sxth	r2, r3
 8007274:	803b      	strh	r3, [r7, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8007276:	17d3      	asrs	r3, r2, #31
    if (clamped != svalue)
 8007278:	42ab      	cmp	r3, r5
 800727a:	bf08      	it	eq
 800727c:	42a2      	cmpeq	r2, r4
 800727e:	d0eb      	beq.n	8007258 <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8007280:	68f3      	ldr	r3, [r6, #12]
 8007282:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <pb_dec_varint+0x6c>)
 8007284:	e007      	b.n	8007296 <pb_dec_varint+0x5e>
    else if (field->data_size == sizeof(int_least8_t))
 8007286:	2a01      	cmp	r2, #1
 8007288:	d103      	bne.n	8007292 <pb_dec_varint+0x5a>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800728a:	b25b      	sxtb	r3, r3
 800728c:	703b      	strb	r3, [r7, #0]
 800728e:	b25a      	sxtb	r2, r3
 8007290:	e7f1      	b.n	8007276 <pb_dec_varint+0x3e>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007292:	68f3      	ldr	r3, [r6, #12]
 8007294:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <pb_dec_varint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 8007296:	2b00      	cmp	r3, #0
 8007298:	bf08      	it	eq
 800729a:	4613      	moveq	r3, r2
 800729c:	2000      	movs	r0, #0
 800729e:	60f3      	str	r3, [r6, #12]
 80072a0:	e7da      	b.n	8007258 <pb_dec_varint+0x20>
 80072a2:	bf00      	nop
 80072a4:	0804ead7 	.word	0x0804ead7
 80072a8:	0804eac5 	.word	0x0804eac5

080072ac <pb_decode_tag>:
{
 80072ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072ae:	461c      	mov	r4, r3
    *eof = false;
 80072b0:	2300      	movs	r3, #0
{
 80072b2:	460d      	mov	r5, r1
 80072b4:	4616      	mov	r6, r2
    *eof = false;
 80072b6:	7023      	strb	r3, [r4, #0]
    *wire_type = (pb_wire_type_t) 0;
 80072b8:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80072ba:	a901      	add	r1, sp, #4
    *tag = 0;
 80072bc:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80072be:	4622      	mov	r2, r4
 80072c0:	f7ff fdc4 	bl	8006e4c <pb_decode_varint32_eof>
 80072c4:	b120      	cbz	r0, 80072d0 <pb_decode_tag+0x24>
    if (temp == 0)
 80072c6:	9a01      	ldr	r2, [sp, #4]
 80072c8:	b922      	cbnz	r2, 80072d4 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 80072ca:	2301      	movs	r3, #1
        return false;
 80072cc:	4610      	mov	r0, r2
        *eof = true; /* Special feature: allow 0-terminated messages. */
 80072ce:	7023      	strb	r3, [r4, #0]
}
 80072d0:	b002      	add	sp, #8
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
    *tag = temp >> 3;
 80072d4:	08d3      	lsrs	r3, r2, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 80072d6:	f002 0207 	and.w	r2, r2, #7
    *tag = temp >> 3;
 80072da:	6033      	str	r3, [r6, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80072dc:	702a      	strb	r2, [r5, #0]
    return true;
 80072de:	e7f7      	b.n	80072d0 <pb_decode_tag+0x24>

080072e0 <pb_skip_field>:
{
 80072e0:	b513      	push	{r0, r1, r4, lr}
 80072e2:	4604      	mov	r4, r0
    switch (wire_type)
 80072e4:	2905      	cmp	r1, #5
 80072e6:	d81f      	bhi.n	8007328 <pb_skip_field+0x48>
 80072e8:	e8df f001 	tbb	[pc, r1]
 80072ec:	1e150f03 	.word	0x1e150f03
 80072f0:	1c1e      	.short	0x1c1e
        if (!pb_read(stream, &byte, 1))
 80072f2:	2201      	movs	r2, #1
 80072f4:	a901      	add	r1, sp, #4
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7ff fe5c 	bl	8006fb4 <pb_read>
 80072fc:	b118      	cbz	r0, 8007306 <pb_skip_field+0x26>
    } while (byte & 0x80);
 80072fe:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dbf5      	blt.n	80072f2 <pb_skip_field+0x12>
}
 8007306:	b002      	add	sp, #8
 8007308:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800730a:	2208      	movs	r2, #8
    return pb_read(stream, NULL, length);
 800730c:	2100      	movs	r1, #0
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff fe50 	bl	8006fb4 <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 8007314:	e7f7      	b.n	8007306 <pb_skip_field+0x26>
    if (!pb_decode_varint32(stream, &length))
 8007316:	a901      	add	r1, sp, #4
 8007318:	f7ff fe88 	bl	800702c <pb_decode_varint32>
 800731c:	2800      	cmp	r0, #0
 800731e:	d0f2      	beq.n	8007306 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	e7f3      	b.n	800730c <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8007324:	2204      	movs	r2, #4
 8007326:	e7f1      	b.n	800730c <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007328:	68c3      	ldr	r3, [r0, #12]
 800732a:	4a03      	ldr	r2, [pc, #12]	; (8007338 <pb_skip_field+0x58>)
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf08      	it	eq
 8007330:	4613      	moveq	r3, r2
 8007332:	60c3      	str	r3, [r0, #12]
 8007334:	2000      	movs	r0, #0
 8007336:	e7e6      	b.n	8007306 <pb_skip_field+0x26>
 8007338:	0804eb60 	.word	0x0804eb60

0800733c <pb_make_string_substream>:
{
 800733c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800733e:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8007340:	a901      	add	r1, sp, #4
{
 8007342:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8007344:	f7ff fe72 	bl	800702c <pb_decode_varint32>
 8007348:	4606      	mov	r6, r0
 800734a:	b168      	cbz	r0, 8007368 <pb_make_string_substream+0x2c>
    *substream = *stream;
 800734c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007350:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8007354:	9901      	ldr	r1, [sp, #4]
 8007356:	428a      	cmp	r2, r1
 8007358:	d209      	bcs.n	800736e <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	2600      	movs	r6, #0
 800735e:	4a06      	ldr	r2, [pc, #24]	; (8007378 <pb_make_string_substream+0x3c>)
 8007360:	2b00      	cmp	r3, #0
 8007362:	bf08      	it	eq
 8007364:	4613      	moveq	r3, r2
 8007366:	60e3      	str	r3, [r4, #12]
}
 8007368:	4630      	mov	r0, r6
 800736a:	b002      	add	sp, #8
 800736c:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 800736e:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	1a5b      	subs	r3, r3, r1
 8007374:	60a3      	str	r3, [r4, #8]
    return true;
 8007376:	e7f7      	b.n	8007368 <pb_make_string_substream+0x2c>
 8007378:	0804eb31 	.word	0x0804eb31

0800737c <pb_close_string_substream>:
    if (substream->bytes_left) {
 800737c:	688a      	ldr	r2, [r1, #8]
{
 800737e:	b538      	push	{r3, r4, r5, lr}
 8007380:	4605      	mov	r5, r0
 8007382:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8007384:	b92a      	cbnz	r2, 8007392 <pb_close_string_substream+0x16>
    stream->state = substream->state;
 8007386:	6863      	ldr	r3, [r4, #4]
    return true;
 8007388:	2001      	movs	r0, #1
    stream->state = substream->state;
 800738a:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 800738c:	68e3      	ldr	r3, [r4, #12]
 800738e:	60eb      	str	r3, [r5, #12]
    return true;
 8007390:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8007392:	2100      	movs	r1, #0
 8007394:	4620      	mov	r0, r4
 8007396:	f7ff fe0d 	bl	8006fb4 <pb_read>
 800739a:	2800      	cmp	r0, #0
 800739c:	d1f3      	bne.n	8007386 <pb_close_string_substream+0xa>
}
 800739e:	bd38      	pop	{r3, r4, r5, pc}

080073a0 <decode_field>:
    switch (PB_ATYPE(iter->pos->type))
 80073a0:	6853      	ldr	r3, [r2, #4]
{
 80073a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073a6:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 80073a8:	789a      	ldrb	r2, [r3, #2]
{
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 80073ae:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 80073b2:	2c40      	cmp	r4, #64	; 0x40
 80073b4:	f000 8083 	beq.w	80074be <decode_field+0x11e>
 80073b8:	2c80      	cmp	r4, #128	; 0x80
 80073ba:	d07d      	beq.n	80074b8 <decode_field+0x118>
 80073bc:	b954      	cbnz	r4, 80073d4 <decode_field+0x34>
 80073be:	f002 0e0f 	and.w	lr, r2, #15
    switch (PB_HTYPE(type))
 80073c2:	f002 0230 	and.w	r2, r2, #48	; 0x30
    func = PB_DECODERS[PB_LTYPE(type)];
 80073c6:	4f6d      	ldr	r7, [pc, #436]	; (800757c <decode_field+0x1dc>)
    switch (PB_HTYPE(type))
 80073c8:	2a10      	cmp	r2, #16
    func = PB_DECODERS[PB_LTYPE(type)];
 80073ca:	f857 702e 	ldr.w	r7, [r7, lr, lsl #2]
    switch (PB_HTYPE(type))
 80073ce:	d022      	beq.n	8007416 <decode_field+0x76>
 80073d0:	d803      	bhi.n	80073da <decode_field+0x3a>
 80073d2:	b1da      	cbz	r2, 800740c <decode_field+0x6c>
            PB_RETURN_ERROR(stream, "invalid field type");
 80073d4:	68eb      	ldr	r3, [r5, #12]
 80073d6:	4a6a      	ldr	r2, [pc, #424]	; (8007580 <decode_field+0x1e0>)
 80073d8:	e04e      	b.n	8007478 <decode_field+0xd8>
    switch (PB_HTYPE(type))
 80073da:	2a20      	cmp	r2, #32
 80073dc:	d024      	beq.n	8007428 <decode_field+0x88>
 80073de:	2a30      	cmp	r2, #48	; 0x30
 80073e0:	d1f8      	bne.n	80073d4 <decode_field+0x34>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 80073e2:	8819      	ldrh	r1, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80073e4:	f1be 0f07 	cmp.w	lr, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 80073e8:	6972      	ldr	r2, [r6, #20]
 80073ea:	8011      	strh	r1, [r2, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80073ec:	d10b      	bne.n	8007406 <decode_field+0x66>
                memset(iter->pData, 0, iter->pos->data_size);
 80073ee:	f8b3 2007 	ldrh.w	r2, [r3, #7]
 80073f2:	4621      	mov	r1, r4
 80073f4:	6930      	ldr	r0, [r6, #16]
 80073f6:	f001 f99b 	bl	8008730 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 80073fa:	6873      	ldr	r3, [r6, #4]
 80073fc:	6931      	ldr	r1, [r6, #16]
 80073fe:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8007402:	f7ff fdc6 	bl	8006f92 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8007406:	6932      	ldr	r2, [r6, #16]
 8007408:	6871      	ldr	r1, [r6, #4]
 800740a:	e00b      	b.n	8007424 <decode_field+0x84>
            return func(stream, iter->pos, iter->pData);
 800740c:	6932      	ldr	r2, [r6, #16]
 800740e:	4619      	mov	r1, r3
            return func(stream, iter->pos, iter->pData);
 8007410:	47b8      	blx	r7
 8007412:	4604      	mov	r4, r0
 8007414:	e03d      	b.n	8007492 <decode_field+0xf2>
            if (iter->pSize != iter->pData)
 8007416:	6971      	ldr	r1, [r6, #20]
 8007418:	6932      	ldr	r2, [r6, #16]
 800741a:	4291      	cmp	r1, r2
 800741c:	d001      	beq.n	8007422 <decode_field+0x82>
                *(bool*)iter->pSize = true;
 800741e:	2001      	movs	r0, #1
 8007420:	7008      	strb	r0, [r1, #0]
                return func(stream, iter->pos, pItem);
 8007422:	4619      	mov	r1, r3
            return func(stream, iter->pos, iter->pData);
 8007424:	4628      	mov	r0, r5
 8007426:	e7f3      	b.n	8007410 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 8007428:	2902      	cmp	r1, #2
 800742a:	f8d6 8014 	ldr.w	r8, [r6, #20]
 800742e:	d134      	bne.n	800749a <decode_field+0xfa>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8007430:	f1be 0f04 	cmp.w	lr, #4
 8007434:	d831      	bhi.n	800749a <decode_field+0xfa>
                if (!pb_make_string_substream(stream, &substream))
 8007436:	a904      	add	r1, sp, #16
 8007438:	f7ff ff80 	bl	800733c <pb_make_string_substream>
 800743c:	4604      	mov	r4, r0
 800743e:	b970      	cbnz	r0, 800745e <decode_field+0xbe>
            PB_RETURN_ERROR(stream, "invalid field type");
 8007440:	2400      	movs	r4, #0
 8007442:	e026      	b.n	8007492 <decode_field+0xf2>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8007444:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 8007448:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 800744a:	fb03 2200 	mla	r2, r3, r0, r2
 800744e:	a804      	add	r0, sp, #16
 8007450:	47b8      	blx	r7
 8007452:	b1b0      	cbz	r0, 8007482 <decode_field+0xe2>
                    (*size)++;
 8007454:	f8b8 3000 	ldrh.w	r3, [r8]
 8007458:	3301      	adds	r3, #1
 800745a:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	b133      	cbz	r3, 8007470 <decode_field+0xd0>
 8007462:	6871      	ldr	r1, [r6, #4]
 8007464:	f8b8 3000 	ldrh.w	r3, [r8]
 8007468:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 800746c:	429a      	cmp	r2, r3
 800746e:	d8e9      	bhi.n	8007444 <decode_field+0xa4>
                if (substream.bytes_left != 0)
 8007470:	9b06      	ldr	r3, [sp, #24]
 8007472:	b143      	cbz	r3, 8007486 <decode_field+0xe6>
                    PB_RETURN_ERROR(stream, "array overflow");
 8007474:	68eb      	ldr	r3, [r5, #12]
 8007476:	4a43      	ldr	r2, [pc, #268]	; (8007584 <decode_field+0x1e4>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf08      	it	eq
 800747c:	4613      	moveq	r3, r2
 800747e:	60eb      	str	r3, [r5, #12]
 8007480:	e7de      	b.n	8007440 <decode_field+0xa0>
                        status = false;
 8007482:	4604      	mov	r4, r0
 8007484:	e7f4      	b.n	8007470 <decode_field+0xd0>
                if (!pb_close_string_substream(stream, &substream))
 8007486:	a904      	add	r1, sp, #16
 8007488:	4628      	mov	r0, r5
 800748a:	f7ff ff77 	bl	800737c <pb_close_string_substream>
 800748e:	2800      	cmp	r0, #0
 8007490:	d0d6      	beq.n	8007440 <decode_field+0xa0>
}
 8007492:	4620      	mov	r0, r4
 8007494:	b009      	add	sp, #36	; 0x24
 8007496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800749a:	f8b8 1000 	ldrh.w	r1, [r8]
 800749e:	6932      	ldr	r2, [r6, #16]
                if ((*size)++ >= iter->pos->array_size)
 80074a0:	1c4c      	adds	r4, r1, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80074a2:	f8b3 0007 	ldrh.w	r0, [r3, #7]
                if ((*size)++ >= iter->pos->array_size)
 80074a6:	f8a8 4000 	strh.w	r4, [r8]
 80074aa:	f8b3 4009 	ldrh.w	r4, [r3, #9]
 80074ae:	428c      	cmp	r4, r1
 80074b0:	d9e0      	bls.n	8007474 <decode_field+0xd4>
                return func(stream, iter->pos, pItem);
 80074b2:	fb01 2200 	mla	r2, r1, r0, r2
 80074b6:	e7b4      	b.n	8007422 <decode_field+0x82>
    PB_RETURN_ERROR(stream, "no malloc support");
 80074b8:	68c3      	ldr	r3, [r0, #12]
 80074ba:	4a33      	ldr	r2, [pc, #204]	; (8007588 <decode_field+0x1e8>)
 80074bc:	e7dc      	b.n	8007478 <decode_field+0xd8>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 80074be:	6937      	ldr	r7, [r6, #16]
    void **arg = &(pCallback->arg);
 80074c0:	f107 0904 	add.w	r9, r7, #4
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 80074c4:	b10f      	cbz	r7, 80074ca <decode_field+0x12a>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	b91b      	cbnz	r3, 80074d2 <decode_field+0x132>
        return pb_skip_field(stream, wire_type);
 80074ca:	4628      	mov	r0, r5
 80074cc:	f7ff ff08 	bl	80072e0 <pb_skip_field>
 80074d0:	e79f      	b.n	8007412 <decode_field+0x72>
    if (wire_type == PB_WT_STRING)
 80074d2:	2902      	cmp	r1, #2
 80074d4:	d11b      	bne.n	800750e <decode_field+0x16e>
        if (!pb_make_string_substream(stream, &substream))
 80074d6:	a904      	add	r1, sp, #16
 80074d8:	f7ff ff30 	bl	800733c <pb_make_string_substream>
 80074dc:	4604      	mov	r4, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0d7      	beq.n	8007492 <decode_field+0xf2>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	464a      	mov	r2, r9
 80074e6:	6871      	ldr	r1, [r6, #4]
 80074e8:	a804      	add	r0, sp, #16
 80074ea:	4798      	blx	r3
 80074ec:	4604      	mov	r4, r0
 80074ee:	b930      	cbnz	r0, 80074fe <decode_field+0x15e>
                PB_RETURN_ERROR(stream, "callback failed");
 80074f0:	68eb      	ldr	r3, [r5, #12]
 80074f2:	4a26      	ldr	r2, [pc, #152]	; (800758c <decode_field+0x1ec>)
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bf08      	it	eq
 80074f8:	4613      	moveq	r3, r2
 80074fa:	60eb      	str	r3, [r5, #12]
 80074fc:	e7c9      	b.n	8007492 <decode_field+0xf2>
        } while (substream.bytes_left);
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ee      	bne.n	80074e2 <decode_field+0x142>
        if (!pb_close_string_substream(stream, &substream))
 8007504:	a904      	add	r1, sp, #16
 8007506:	4628      	mov	r0, r5
 8007508:	f7ff ff38 	bl	800737c <pb_close_string_substream>
 800750c:	e781      	b.n	8007412 <decode_field+0x72>
    switch (wire_type)
 800750e:	2901      	cmp	r1, #1
 8007510:	d023      	beq.n	800755a <decode_field+0x1ba>
 8007512:	d304      	bcc.n	800751e <decode_field+0x17e>
 8007514:	2905      	cmp	r1, #5
 8007516:	d029      	beq.n	800756c <decode_field+0x1cc>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007518:	68c3      	ldr	r3, [r0, #12]
 800751a:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <decode_field+0x1f0>)
 800751c:	e7ac      	b.n	8007478 <decode_field+0xd8>
    switch (wire_type)
 800751e:	2400      	movs	r4, #0
 8007520:	f10d 0804 	add.w	r8, sp, #4
                (*size)++;
 8007524:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8007526:	2c0b      	cmp	r4, #11
 8007528:	d08a      	beq.n	8007440 <decode_field+0xa0>
                if (!pb_read(stream, buf, 1)) return false;
 800752a:	2201      	movs	r2, #1
 800752c:	4641      	mov	r1, r8
 800752e:	4628      	mov	r0, r5
 8007530:	f7ff fd40 	bl	8006fb4 <pb_read>
 8007534:	2800      	cmp	r0, #0
 8007536:	d083      	beq.n	8007440 <decode_field+0xa0>
            } while (*buf++ & 0x80);
 8007538:	f918 3b01 	ldrsb.w	r3, [r8], #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	dbf1      	blt.n	8007524 <decode_field+0x184>
        substream = pb_istream_from_buffer(buffer, size);
 8007540:	4b14      	ldr	r3, [pc, #80]	; (8007594 <decode_field+0x1f4>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8007542:	464a      	mov	r2, r9
        substream = pb_istream_from_buffer(buffer, size);
 8007544:	9406      	str	r4, [sp, #24]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8007546:	a804      	add	r0, sp, #16
        substream = pb_istream_from_buffer(buffer, size);
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	ab01      	add	r3, sp, #4
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800754c:	6871      	ldr	r1, [r6, #4]
        substream = pb_istream_from_buffer(buffer, size);
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	2300      	movs	r3, #0
 8007552:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	4798      	blx	r3
 8007558:	e75b      	b.n	8007412 <decode_field+0x72>
            *size = 8;
 800755a:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 800755c:	2208      	movs	r2, #8
 800755e:	a901      	add	r1, sp, #4
 8007560:	f7ff fd28 	bl	8006fb4 <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8007564:	2800      	cmp	r0, #0
 8007566:	f43f af6b 	beq.w	8007440 <decode_field+0xa0>
 800756a:	e7e9      	b.n	8007540 <decode_field+0x1a0>
            return pb_read(stream, buf, 4);
 800756c:	2204      	movs	r2, #4
            *size = 4;
 800756e:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8007570:	eb0d 0102 	add.w	r1, sp, r2
 8007574:	f7ff fd1e 	bl	8006fb4 <pb_read>
 8007578:	e7f4      	b.n	8007564 <decode_field+0x1c4>
 800757a:	bf00      	nop
 800757c:	0804e9f0 	.word	0x0804e9f0
 8007580:	0804ea27 	.word	0x0804ea27
 8007584:	0804ea18 	.word	0x0804ea18
 8007588:	0804ea8a 	.word	0x0804ea8a
 800758c:	0804ea3a 	.word	0x0804ea3a
 8007590:	0804eb60 	.word	0x0804eb60
 8007594:	08006df1 	.word	0x08006df1

08007598 <pb_decode_noinit>:
{
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800759c:	2500      	movs	r5, #0
{
 800759e:	b093      	sub	sp, #76	; 0x4c
 80075a0:	4604      	mov	r4, r0
    uint32_t extension_range_start = 0;
 80075a2:	462f      	mov	r7, r5
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 80075a4:	a806      	add	r0, sp, #24
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 80075a6:	9504      	str	r5, [sp, #16]
 80075a8:	9505      	str	r5, [sp, #20]
    pb_size_t fixed_count_size = 0;
 80075aa:	f8ad 500a 	strh.w	r5, [sp, #10]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 80075ae:	f7ff fbb5 	bl	8006d1c <pb_field_iter_begin>
    while (stream->bytes_left)
 80075b2:	68a3      	ldr	r3, [r4, #8]
 80075b4:	bb9b      	cbnz	r3, 800761e <pb_decode_noinit+0x86>
    if (fixed_count_field != NULL &&
 80075b6:	b135      	cbz	r5, 80075c6 <pb_decode_noinit+0x2e>
 80075b8:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 80075bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	f040 80b5 	bne.w	8007730 <pb_decode_noinit+0x198>
            last_type = iter.pos->type;
 80075c6:	9b07      	ldr	r3, [sp, #28]
        } while (pb_field_iter_next(&iter));
 80075c8:	a806      	add	r0, sp, #24
            req_field_count = iter.required_field_index;
 80075ca:	9d08      	ldr	r5, [sp, #32]
            last_type = iter.pos->type;
 80075cc:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 80075ce:	f7ff fbb7 	bl	8006d40 <pb_field_iter_next>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d1f7      	bne.n	80075c6 <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 80075d6:	f016 0f30 	tst.w	r6, #48	; 0x30
 80075da:	d103      	bne.n	80075e4 <pb_decode_noinit+0x4c>
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b103      	cbz	r3, 80075e4 <pb_decode_noinit+0x4c>
            req_field_count++;
 80075e2:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80075e4:	2d40      	cmp	r5, #64	; 0x40
 80075e6:	f200 80cb 	bhi.w	8007780 <pb_decode_noinit+0x1e8>
        if (req_field_count > 0)
 80075ea:	b1b5      	cbz	r5, 800761a <pb_decode_noinit+0x82>
            for (i = 0; i < (req_field_count >> 5); i++)
 80075ec:	096a      	lsrs	r2, r5, #5
 80075ee:	2300      	movs	r3, #0
                if (fields_seen[i] != allbits)
 80075f0:	a904      	add	r1, sp, #16
            for (i = 0; i < (req_field_count >> 5); i++)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f040 80c6 	bne.w	8007784 <pb_decode_noinit+0x1ec>
            if ((req_field_count & 31) != 0)
 80075f8:	f015 051f 	ands.w	r5, r5, #31
 80075fc:	d00d      	beq.n	800761a <pb_decode_noinit+0x82>
                if (fields_seen[req_field_count >> 5] !=
 80075fe:	aa12      	add	r2, sp, #72	; 0x48
                    (allbits >> (32 - (req_field_count & 31))))
 8007600:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 8007604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 800760c:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8007610:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 8007614:	42ab      	cmp	r3, r5
 8007616:	f040 80b9 	bne.w	800778c <pb_decode_noinit+0x1f4>
    return true;
 800761a:	2001      	movs	r0, #1
 800761c:	e00d      	b.n	800763a <pb_decode_noinit+0xa2>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800761e:	f10d 0309 	add.w	r3, sp, #9
 8007622:	aa03      	add	r2, sp, #12
 8007624:	a902      	add	r1, sp, #8
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff fe40 	bl	80072ac <pb_decode_tag>
 800762c:	4681      	mov	r9, r0
 800762e:	b938      	cbnz	r0, 8007640 <pb_decode_noinit+0xa8>
            if (eof)
 8007630:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1be      	bne.n	80075b6 <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8007638:	2000      	movs	r0, #0
}
 800763a:	b013      	add	sp, #76	; 0x4c
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8007640:	9903      	ldr	r1, [sp, #12]
 8007642:	a806      	add	r0, sp, #24
 8007644:	f7ff fbbd 	bl	8006dc2 <pb_field_iter_find>
 8007648:	2800      	cmp	r0, #0
 800764a:	d15e      	bne.n	800770a <pb_decode_noinit+0x172>
            if (tag >= extension_range_start)
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	429f      	cmp	r7, r3
 8007650:	d821      	bhi.n	8007696 <pb_decode_noinit+0xfe>
    const pb_field_t *start = iter->pos;
 8007652:	9e07      	ldr	r6, [sp, #28]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8007654:	9a07      	ldr	r2, [sp, #28]
 8007656:	7893      	ldrb	r3, [r2, #2]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	2b08      	cmp	r3, #8
 800765e:	f000 809e 	beq.w	800779e <pb_decode_noinit+0x206>
        (void)pb_field_iter_next(iter);
 8007662:	a806      	add	r0, sp, #24
 8007664:	f7ff fb6c 	bl	8006d40 <pb_field_iter_next>
    } while (iter->pos != start);
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	429e      	cmp	r6, r3
 800766c:	d1f2      	bne.n	8007654 <pb_decode_noinit+0xbc>
                    extension_range_start = (uint32_t)-1;
 800766e:	f04f 37ff 	mov.w	r7, #4294967295
                if (tag >= extension_range_start)
 8007672:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007676:	4547      	cmp	r7, r8
 8007678:	d80d      	bhi.n	8007696 <pb_decode_noinit+0xfe>
                    size_t pos = stream->bytes_left;
 800767a:	68a3      	ldr	r3, [r4, #8]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 800767c:	f89d a008 	ldrb.w	sl, [sp, #8]
                    size_t pos = stream->bytes_left;
 8007680:	9301      	str	r3, [sp, #4]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8007682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007684:	681e      	ldr	r6, [r3, #0]
 8007686:	68a3      	ldr	r3, [r4, #8]
    while (extension != NULL && pos == stream->bytes_left)
 8007688:	b116      	cbz	r6, 8007690 <pb_decode_noinit+0xf8>
 800768a:	9a01      	ldr	r2, [sp, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d00a      	beq.n	80076a6 <pb_decode_noinit+0x10e>
                    if (pos != stream->bytes_left)
 8007690:	9a01      	ldr	r2, [sp, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d18d      	bne.n	80075b2 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8007696:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff fe20 	bl	80072e0 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d186      	bne.n	80075b2 <pb_decode_noinit+0x1a>
 80076a4:	e7c8      	b.n	8007638 <pb_decode_noinit+0xa0>
        if (extension->type->decode)
 80076a6:	6833      	ldr	r3, [r6, #0]
 80076a8:	f8d3 b000 	ldr.w	fp, [r3]
 80076ac:	f1bb 0f00 	cmp.w	fp, #0
 80076b0:	d008      	beq.n	80076c4 <pb_decode_noinit+0x12c>
            status = extension->type->decode(stream, extension, tag, wire_type);
 80076b2:	4653      	mov	r3, sl
 80076b4:	4642      	mov	r2, r8
 80076b6:	4631      	mov	r1, r6
 80076b8:	4620      	mov	r0, r4
 80076ba:	47d8      	blx	fp
        if (!status)
 80076bc:	2800      	cmp	r0, #0
 80076be:	d0bb      	beq.n	8007638 <pb_decode_noinit+0xa0>
        extension = extension->next;
 80076c0:	68b6      	ldr	r6, [r6, #8]
 80076c2:	e7e0      	b.n	8007686 <pb_decode_noinit+0xee>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80076c4:	f8d3 b008 	ldr.w	fp, [r3, #8]
    if (field->tag != tag)
 80076c8:	f8bb 3000 	ldrh.w	r3, [fp]
 80076cc:	4598      	cmp	r8, r3
 80076ce:	d11a      	bne.n	8007706 <pb_decode_noinit+0x16e>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80076d0:	6872      	ldr	r2, [r6, #4]
 80076d2:	4659      	mov	r1, fp
 80076d4:	a80c      	add	r0, sp, #48	; 0x30
 80076d6:	f7ff fb21 	bl	8006d1c <pb_field_iter_begin>
    iter->pData = extension->dest;
 80076da:	6873      	ldr	r3, [r6, #4]
    return decode_field(stream, wire_type, &iter);
 80076dc:	aa0c      	add	r2, sp, #48	; 0x30
 80076de:	4651      	mov	r1, sl
    iter->pData = extension->dest;
 80076e0:	9310      	str	r3, [sp, #64]	; 0x40
    iter->pSize = &extension->found;
 80076e2:	f106 030c 	add.w	r3, r6, #12
    return decode_field(stream, wire_type, &iter);
 80076e6:	4620      	mov	r0, r4
    iter->pSize = &extension->found;
 80076e8:	9311      	str	r3, [sp, #68]	; 0x44
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80076ea:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80076ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076f2:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 80076f4:	bf04      	itt	eq
 80076f6:	1d33      	addeq	r3, r6, #4
 80076f8:	9310      	streq	r3, [sp, #64]	; 0x40
    extension->found = true;
 80076fa:	f04f 0301 	mov.w	r3, #1
 80076fe:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8007700:	f7ff fe4e 	bl	80073a0 <decode_field>
 8007704:	e7da      	b.n	80076bc <pb_decode_noinit+0x124>
        return true;
 8007706:	4648      	mov	r0, r9
 8007708:	e7d8      	b.n	80076bc <pb_decode_noinit+0x124>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800770a:	9a07      	ldr	r2, [sp, #28]
 800770c:	7893      	ldrb	r3, [r2, #2]
 800770e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007712:	2b20      	cmp	r3, #32
 8007714:	d121      	bne.n	800775a <pb_decode_noinit+0x1c2>
            && iter.pSize == iter.pData)
 8007716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771a:	4299      	cmp	r1, r3
 800771c:	d116      	bne.n	800774c <pb_decode_noinit+0x1b4>
            if (fixed_count_field != iter.pos) {
 800771e:	4295      	cmp	r5, r2
 8007720:	d010      	beq.n	8007744 <pb_decode_noinit+0x1ac>
                if (fixed_count_field != NULL &&
 8007722:	b165      	cbz	r5, 800773e <pb_decode_noinit+0x1a6>
 8007724:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 8007728:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800772c:	4299      	cmp	r1, r3
 800772e:	d006      	beq.n	800773e <pb_decode_noinit+0x1a6>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8007730:	68e3      	ldr	r3, [r4, #12]
 8007732:	4a1c      	ldr	r2, [pc, #112]	; (80077a4 <pb_decode_noinit+0x20c>)
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf08      	it	eq
 8007738:	4613      	moveq	r3, r2
 800773a:	60e3      	str	r3, [r4, #12]
 800773c:	e77c      	b.n	8007638 <pb_decode_noinit+0xa0>
                fixed_count_size = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	f8ad 300a 	strh.w	r3, [sp, #10]
            iter.pSize = &fixed_count_size;
 8007744:	f10d 030a 	add.w	r3, sp, #10
 8007748:	4615      	mov	r5, r2
 800774a:	930b      	str	r3, [sp, #44]	; 0x2c
        if (!decode_field(stream, wire_type, &iter))
 800774c:	aa06      	add	r2, sp, #24
 800774e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8007752:	4620      	mov	r0, r4
 8007754:	f7ff fe24 	bl	80073a0 <decode_field>
 8007758:	e7a2      	b.n	80076a0 <pb_decode_noinit+0x108>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f6      	bne.n	800774c <pb_decode_noinit+0x1b4>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800775e:	9a08      	ldr	r2, [sp, #32]
 8007760:	2a3f      	cmp	r2, #63	; 0x3f
 8007762:	d8f3      	bhi.n	800774c <pb_decode_noinit+0x1b4>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8007764:	0951      	lsrs	r1, r2, #5
 8007766:	ab12      	add	r3, sp, #72	; 0x48
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8007768:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800776c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8007770:	2301      	movs	r3, #1
 8007772:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8007774:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8007778:	4313      	orrs	r3, r2
 800777a:	f841 3c38 	str.w	r3, [r1, #-56]
 800777e:	e7e5      	b.n	800774c <pb_decode_noinit+0x1b4>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8007780:	2540      	movs	r5, #64	; 0x40
 8007782:	e733      	b.n	80075ec <pb_decode_noinit+0x54>
                if (fields_seen[i] != allbits)
 8007784:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8007788:	3601      	adds	r6, #1
 800778a:	d006      	beq.n	800779a <pb_decode_noinit+0x202>
                    PB_RETURN_ERROR(stream, "missing required field");
 800778c:	68e3      	ldr	r3, [r4, #12]
 800778e:	4a06      	ldr	r2, [pc, #24]	; (80077a8 <pb_decode_noinit+0x210>)
 8007790:	2b00      	cmp	r3, #0
 8007792:	bf08      	it	eq
 8007794:	4613      	moveq	r3, r2
 8007796:	60e3      	str	r3, [r4, #12]
 8007798:	e74f      	b.n	800763a <pb_decode_noinit+0xa2>
            for (i = 0; i < (req_field_count >> 5); i++)
 800779a:	3301      	adds	r3, #1
 800779c:	e729      	b.n	80075f2 <pb_decode_noinit+0x5a>
                    extension_range_start = iter.pos->tag;
 800779e:	8817      	ldrh	r7, [r2, #0]
 80077a0:	e767      	b.n	8007672 <pb_decode_noinit+0xda>
 80077a2:	bf00      	nop
 80077a4:	0804eae9 	.word	0x0804eae9
 80077a8:	0804eb0a 	.word	0x0804eb0a

080077ac <pb_decode>:
{
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	460c      	mov	r4, r1
 80077b0:	4606      	mov	r6, r0
 80077b2:	4615      	mov	r5, r2
    pb_message_set_to_defaults(fields, dest_struct);
 80077b4:	4611      	mov	r1, r2
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff fbeb 	bl	8006f92 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 80077bc:	462a      	mov	r2, r5
 80077be:	4621      	mov	r1, r4
 80077c0:	4630      	mov	r0, r6
}
 80077c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 80077c6:	f7ff bee7 	b.w	8007598 <pb_decode_noinit>
	...

080077cc <pb_dec_submessage>:
{
 80077cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80077d0:	460e      	mov	r6, r1
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 80077d2:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 80077d6:	4669      	mov	r1, sp
{
 80077d8:	4605      	mov	r5, r0
 80077da:	4690      	mov	r8, r2
    if (!pb_make_string_substream(stream, &substream))
 80077dc:	f7ff fdae 	bl	800733c <pb_make_string_substream>
 80077e0:	b920      	cbnz	r0, 80077ec <pb_dec_submessage+0x20>
        return false;
 80077e2:	2400      	movs	r4, #0
}
 80077e4:	4620      	mov	r0, r4
 80077e6:	b004      	add	sp, #16
 80077e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (field->ptr == NULL)
 80077ec:	f8d6 400b 	ldr.w	r4, [r6, #11]
 80077f0:	b934      	cbnz	r4, 8007800 <pb_dec_submessage+0x34>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80077f2:	68eb      	ldr	r3, [r5, #12]
 80077f4:	4a0d      	ldr	r2, [pc, #52]	; (800782c <pb_dec_submessage+0x60>)
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bf08      	it	eq
 80077fa:	4613      	moveq	r3, r2
 80077fc:	60eb      	str	r3, [r5, #12]
 80077fe:	e7f1      	b.n	80077e4 <pb_dec_submessage+0x18>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007800:	78b3      	ldrb	r3, [r6, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 8007802:	4642      	mov	r2, r8
 8007804:	4639      	mov	r1, r7
 8007806:	4668      	mov	r0, sp
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007808:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800780c:	2b20      	cmp	r3, #32
 800780e:	d109      	bne.n	8007824 <pb_dec_submessage+0x58>
        status = pb_decode(&substream, submsg_fields, dest);
 8007810:	f7ff ffcc 	bl	80077ac <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007814:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8007816:	4669      	mov	r1, sp
 8007818:	4628      	mov	r0, r5
 800781a:	f7ff fdaf 	bl	800737c <pb_close_string_substream>
 800781e:	2800      	cmp	r0, #0
 8007820:	d1e0      	bne.n	80077e4 <pb_dec_submessage+0x18>
 8007822:	e7de      	b.n	80077e2 <pb_dec_submessage+0x16>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007824:	f7ff feb8 	bl	8007598 <pb_decode_noinit>
 8007828:	e7f4      	b.n	8007814 <pb_dec_submessage+0x48>
 800782a:	bf00      	nop
 800782c:	0804eaac 	.word	0x0804eaac

08007830 <pb_decode_delimited>:
{
 8007830:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007832:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8007834:	4669      	mov	r1, sp
{
 8007836:	4605      	mov	r5, r0
 8007838:	4616      	mov	r6, r2
    if (!pb_make_string_substream(stream, &substream))
 800783a:	f7ff fd7f 	bl	800733c <pb_make_string_substream>
 800783e:	b918      	cbnz	r0, 8007848 <pb_decode_delimited+0x18>
        return false;
 8007840:	2400      	movs	r4, #0
}
 8007842:	4620      	mov	r0, r4
 8007844:	b004      	add	sp, #16
 8007846:	bd70      	pop	{r4, r5, r6, pc}
    status = pb_decode(&substream, fields, dest_struct);
 8007848:	4621      	mov	r1, r4
 800784a:	4632      	mov	r2, r6
 800784c:	4668      	mov	r0, sp
 800784e:	f7ff ffad 	bl	80077ac <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8007852:	4669      	mov	r1, sp
    status = pb_decode(&substream, fields, dest_struct);
 8007854:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8007856:	4628      	mov	r0, r5
 8007858:	f7ff fd90 	bl	800737c <pb_close_string_substream>
 800785c:	2800      	cmp	r0, #0
 800785e:	d1f0      	bne.n	8007842 <pb_decode_delimited+0x12>
 8007860:	e7ee      	b.n	8007840 <pb_decode_delimited+0x10>

08007862 <pb_decode_svarint>:
{
 8007862:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 8007864:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8007866:	4669      	mov	r1, sp
 8007868:	f7ff fc78 	bl	800715c <pb_decode_varint>
 800786c:	b170      	cbz	r0, 800788c <pb_decode_svarint+0x2a>
    if (value & 1)
 800786e:	2700      	movs	r7, #0
 8007870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007874:	f002 0601 	and.w	r6, r2, #1
        *dest = (pb_int64_t)(~(value >> 1));
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	ea4f 0232 	mov.w	r2, r2, rrx
    if (value & 1)
 800787e:	ea56 0107 	orrs.w	r1, r6, r7
        *dest = (pb_int64_t)(~(value >> 1));
 8007882:	bf1c      	itt	ne
 8007884:	43d2      	mvnne	r2, r2
 8007886:	43db      	mvnne	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8007888:	e9c4 2300 	strd	r2, r3, [r4]
}
 800788c:	b002      	add	sp, #8
 800788e:	bdd0      	pop	{r4, r6, r7, pc}

08007890 <pb_dec_svarint>:
{
 8007890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007892:	460c      	mov	r4, r1
    if (!pb_decode_svarint(stream, &value))
 8007894:	4669      	mov	r1, sp
{
 8007896:	4606      	mov	r6, r0
 8007898:	4617      	mov	r7, r2
    if (!pb_decode_svarint(stream, &value))
 800789a:	f7ff ffe2 	bl	8007862 <pb_decode_svarint>
 800789e:	b358      	cbz	r0, 80078f8 <pb_dec_svarint+0x68>
    if (field->data_size == sizeof(pb_int64_t))
 80078a0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d10c      	bne.n	80078c2 <pb_dec_svarint+0x32>
        clamped = *(pb_int64_t*)dest = value;
 80078a8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80078ac:	e9c7 4500 	strd	r4, r5, [r7]
    if (clamped != value)
 80078b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078b4:	429d      	cmp	r5, r3
 80078b6:	bf08      	it	eq
 80078b8:	4294      	cmpeq	r4, r2
 80078ba:	d01d      	beq.n	80078f8 <pb_dec_svarint+0x68>
        PB_RETURN_ERROR(stream, "integer too large");
 80078bc:	68f3      	ldr	r3, [r6, #12]
 80078be:	4a0f      	ldr	r2, [pc, #60]	; (80078fc <pb_dec_svarint+0x6c>)
 80078c0:	e015      	b.n	80078ee <pb_dec_svarint+0x5e>
    else if (field->data_size == sizeof(int32_t))
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d103      	bne.n	80078ce <pb_dec_svarint+0x3e>
        clamped = *(int32_t*)dest = (int32_t)value;
 80078c6:	9c00      	ldr	r4, [sp, #0]
 80078c8:	603c      	str	r4, [r7, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80078ca:	17e5      	asrs	r5, r4, #31
 80078cc:	e7f0      	b.n	80078b0 <pb_dec_svarint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d104      	bne.n	80078dc <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 80078d2:	f9bd 4000 	ldrsh.w	r4, [sp]
 80078d6:	803c      	strh	r4, [r7, #0]
 80078d8:	b224      	sxth	r4, r4
 80078da:	e7f6      	b.n	80078ca <pb_dec_svarint+0x3a>
    else if (field->data_size == sizeof(int_least8_t))
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d104      	bne.n	80078ea <pb_dec_svarint+0x5a>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80078e0:	f99d 4000 	ldrsb.w	r4, [sp]
 80078e4:	703c      	strb	r4, [r7, #0]
 80078e6:	b264      	sxtb	r4, r4
 80078e8:	e7ef      	b.n	80078ca <pb_dec_svarint+0x3a>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80078ea:	68f3      	ldr	r3, [r6, #12]
 80078ec:	4a04      	ldr	r2, [pc, #16]	; (8007900 <pb_dec_svarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf08      	it	eq
 80078f2:	4613      	moveq	r3, r2
 80078f4:	2000      	movs	r0, #0
 80078f6:	60f3      	str	r3, [r6, #12]
}
 80078f8:	b003      	add	sp, #12
 80078fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078fc:	0804ead7 	.word	0x0804ead7
 8007900:	0804eac5 	.word	0x0804eac5

08007904 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 8007904:	2204      	movs	r2, #4
{
 8007906:	b513      	push	{r0, r1, r4, lr}
 8007908:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 800790a:	eb0d 0102 	add.w	r1, sp, r2
 800790e:	f7ff fb51 	bl	8006fb4 <pb_read>
 8007912:	b108      	cbz	r0, 8007918 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	6023      	str	r3, [r4, #0]
}
 8007918:	b002      	add	sp, #8
 800791a:	bd10      	pop	{r4, pc}

0800791c <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 800791c:	4611      	mov	r1, r2
 800791e:	f7ff bff1 	b.w	8007904 <pb_decode_fixed32>

08007922 <pb_decode_fixed64>:
{
 8007922:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8007924:	2208      	movs	r2, #8
{
 8007926:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8007928:	4669      	mov	r1, sp
 800792a:	f7ff fb43 	bl	8006fb4 <pb_read>
 800792e:	b118      	cbz	r0, 8007938 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8007930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007934:	e9c4 2300 	strd	r2, r3, [r4]
}
 8007938:	b002      	add	sp, #8
 800793a:	bd10      	pop	{r4, pc}

0800793c <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 800793c:	4611      	mov	r1, r2
 800793e:	f7ff bff0 	b.w	8007922 <pb_decode_fixed64>

08007942 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8007942:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 8007944:	7884      	ldrb	r4, [r0, #2]
{
 8007946:	b086      	sub	sp, #24
 8007948:	460a      	mov	r2, r1
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800794a:	f014 0330 	ands.w	r3, r4, #48	; 0x30
 800794e:	d031      	beq.n	80079b4 <pb_check_proto3_default_value+0x72>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8007950:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8007952:	f9b0 1005 	ldrsh.w	r1, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8007956:	d104      	bne.n	8007962 <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8007958:	5a50      	ldrh	r0, [r2, r1]
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800795a:	fab0 f080 	clz	r0, r0
 800795e:	0940      	lsrs	r0, r0, #5
 8007960:	e007      	b.n	8007972 <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8007962:	2b30      	cmp	r3, #48	; 0x30
 8007964:	d0f8      	beq.n	8007958 <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8007966:	2b10      	cmp	r3, #16
 8007968:	d105      	bne.n	8007976 <pb_check_proto3_default_value+0x34>
 800796a:	b121      	cbz	r1, 8007976 <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 800796c:	5c50      	ldrb	r0, [r2, r1]
 800796e:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8007972:	b006      	add	sp, #24
 8007974:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8007976:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 800797a:	d110      	bne.n	800799e <pb_check_proto3_default_value+0x5c>
 800797c:	f004 030f 	and.w	r3, r4, #15
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8007980:	2b05      	cmp	r3, #5
 8007982:	d101      	bne.n	8007988 <pb_check_proto3_default_value+0x46>
            return bytes->size == 0;
 8007984:	8810      	ldrh	r0, [r2, #0]
 8007986:	e7e8      	b.n	800795a <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8007988:	2b06      	cmp	r3, #6
 800798a:	d101      	bne.n	8007990 <pb_check_proto3_default_value+0x4e>
            return *(const char*)pData == '\0';
 800798c:	7810      	ldrb	r0, [r2, #0]
 800798e:	e7e4      	b.n	800795a <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8007990:	2b09      	cmp	r3, #9
 8007992:	d102      	bne.n	800799a <pb_check_proto3_default_value+0x58>
            return field->data_size == 0;
 8007994:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8007998:	e7df      	b.n	800795a <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800799a:	2b07      	cmp	r3, #7
 800799c:	d00c      	beq.n	80079b8 <pb_check_proto3_default_value+0x76>
	    for (i = 0; i < field->data_size; i++)
 800799e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80079a2:	4611      	mov	r1, r2
 80079a4:	1a8b      	subs	r3, r1, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4298      	cmp	r0, r3
 80079aa:	d90b      	bls.n	80079c4 <pb_check_proto3_default_value+0x82>
	        if (p[i] != 0)
 80079ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0f7      	beq.n	80079a4 <pb_check_proto3_default_value+0x62>
        return false;
 80079b4:	2000      	movs	r0, #0
 80079b6:	e7dc      	b.n	8007972 <pb_check_proto3_default_value+0x30>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 80079b8:	f8d0 100b 	ldr.w	r1, [r0, #11]
 80079bc:	4668      	mov	r0, sp
 80079be:	f7ff f9ad 	bl	8006d1c <pb_field_iter_begin>
 80079c2:	b908      	cbnz	r0, 80079c8 <pb_check_proto3_default_value+0x86>
	    return true;
 80079c4:	2001      	movs	r0, #1
 80079c6:	e7d4      	b.n	8007972 <pb_check_proto3_default_value+0x30>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 80079c8:	9904      	ldr	r1, [sp, #16]
 80079ca:	9801      	ldr	r0, [sp, #4]
 80079cc:	f7ff ffb9 	bl	8007942 <pb_check_proto3_default_value>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d0ce      	beq.n	8007972 <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 80079d4:	4668      	mov	r0, sp
 80079d6:	f7ff f9b3 	bl	8006d40 <pb_field_iter_next>
 80079da:	e7f2      	b.n	80079c2 <pb_check_proto3_default_value+0x80>

080079dc <pb_write>:
{
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 80079de:	6806      	ldr	r6, [r0, #0]
{
 80079e0:	4604      	mov	r4, r0
 80079e2:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 80079e4:	b1ae      	cbz	r6, 8007a12 <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 80079e6:	68c3      	ldr	r3, [r0, #12]
 80079e8:	6887      	ldr	r7, [r0, #8]
 80079ea:	4413      	add	r3, r2
 80079ec:	42bb      	cmp	r3, r7
 80079ee:	d907      	bls.n	8007a00 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 80079f0:	6903      	ldr	r3, [r0, #16]
 80079f2:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <pb_write+0x40>)
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bf08      	it	eq
 80079f8:	4613      	moveq	r3, r2
 80079fa:	6103      	str	r3, [r0, #16]
 80079fc:	2000      	movs	r0, #0
 80079fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 8007a00:	47b0      	blx	r6
 8007a02:	b930      	cbnz	r0, 8007a12 <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	4a06      	ldr	r2, [pc, #24]	; (8007a20 <pb_write+0x44>)
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bf08      	it	eq
 8007a0c:	4613      	moveq	r3, r2
 8007a0e:	6123      	str	r3, [r4, #16]
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stream->bytes_written += count;
 8007a12:	68e2      	ldr	r2, [r4, #12]
    return true;
 8007a14:	2001      	movs	r0, #1
    stream->bytes_written += count;
 8007a16:	442a      	add	r2, r5
 8007a18:	60e2      	str	r2, [r4, #12]
}
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	0804ebeb 	.word	0x0804ebeb
 8007a20:	0804eb57 	.word	0x0804eb57

08007a24 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8007a24:	2b00      	cmp	r3, #0
{
 8007a26:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
 8007a28:	bf08      	it	eq
 8007a2a:	2a80      	cmpeq	r2, #128	; 0x80
{
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	4606      	mov	r6, r0
 8007a30:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
 8007a32:	d206      	bcs.n	8007a42 <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 8007a34:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8007a38:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8007a3a:	f7ff ffcf 	bl	80079dc <pb_write>
}
 8007a3e:	b005      	add	sp, #20
 8007a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a42:	2000      	movs	r0, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8007a44:	b2d4      	uxtb	r4, r2
        value >>= 7;
 8007a46:	09df      	lsrs	r7, r3, #7
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8007a48:	f064 057f 	orn	r5, r4, #127	; 0x7f
 8007a4c:	540d      	strb	r5, [r1, r0]
        value >>= 7;
 8007a4e:	09d5      	lsrs	r5, r2, #7
 8007a50:	ea45 6543 	orr.w	r5, r5, r3, lsl #25
 8007a54:	463b      	mov	r3, r7
 8007a56:	462a      	mov	r2, r5
        i++;
 8007a58:	1c45      	adds	r5, r0, #1
    while (value)
 8007a5a:	ea52 0703 	orrs.w	r7, r2, r3
 8007a5e:	d108      	bne.n	8007a72 <pb_encode_varint+0x4e>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007a60:	ab04      	add	r3, sp, #16
 8007a62:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8007a66:	462a      	mov	r2, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007a68:	4418      	add	r0, r3
 8007a6a:	f800 4c0c 	strb.w	r4, [r0, #-12]
    return pb_write(stream, buffer, i);
 8007a6e:	4630      	mov	r0, r6
 8007a70:	e7e3      	b.n	8007a3a <pb_encode_varint+0x16>
        i++;
 8007a72:	4628      	mov	r0, r5
 8007a74:	e7e6      	b.n	8007a44 <pb_encode_varint+0x20>
	...

08007a78 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8007a78:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d103      	bne.n	8007a88 <pb_enc_uvarint+0x10>
        value = *(const uint_least8_t*)src;
 8007a80:	7812      	ldrb	r2, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 8007a82:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8007a84:	f7ff bfce 	b.w	8007a24 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d101      	bne.n	8007a90 <pb_enc_uvarint+0x18>
        value = *(const uint_least16_t*)src;
 8007a8c:	8812      	ldrh	r2, [r2, #0]
 8007a8e:	e7f8      	b.n	8007a82 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d101      	bne.n	8007a98 <pb_enc_uvarint+0x20>
        value = *(const uint32_t*)src;
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	e7f4      	b.n	8007a82 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d102      	bne.n	8007aa2 <pb_enc_uvarint+0x2a>
        value = *(const pb_uint64_t*)src;
 8007a9c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007aa0:	e7f0      	b.n	8007a84 <pb_enc_uvarint+0xc>
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007aa2:	6903      	ldr	r3, [r0, #16]
 8007aa4:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <pb_enc_uvarint+0x3c>)
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf08      	it	eq
 8007aaa:	4613      	moveq	r3, r2
 8007aac:	6103      	str	r3, [r0, #16]
}
 8007aae:	2000      	movs	r0, #0
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	0804eac5 	.word	0x0804eac5

08007ab8 <pb_enc_varint>:
    if (field->data_size == sizeof(int_least8_t))
 8007ab8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d104      	bne.n	8007aca <pb_enc_varint+0x12>
        value = *(const int_least8_t*)src;
 8007ac0:	f992 2000 	ldrsb.w	r2, [r2]
        value = *(const int32_t*)src;
 8007ac4:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8007ac6:	f7ff bfad 	b.w	8007a24 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d102      	bne.n	8007ad4 <pb_enc_varint+0x1c>
        value = *(const int_least16_t*)src;
 8007ace:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007ad2:	e7f7      	b.n	8007ac4 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(int32_t))
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d101      	bne.n	8007adc <pb_enc_varint+0x24>
        value = *(const int32_t*)src;
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	e7f3      	b.n	8007ac4 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d102      	bne.n	8007ae6 <pb_enc_varint+0x2e>
        value = *(const pb_int64_t*)src;
 8007ae0:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007ae4:	e7ef      	b.n	8007ac6 <pb_enc_varint+0xe>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007ae6:	6903      	ldr	r3, [r0, #16]
 8007ae8:	4a03      	ldr	r2, [pc, #12]	; (8007af8 <pb_enc_varint+0x40>)
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf08      	it	eq
 8007aee:	4613      	moveq	r3, r2
 8007af0:	6103      	str	r3, [r0, #16]
}
 8007af2:	2000      	movs	r0, #0
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	0804eac5 	.word	0x0804eac5

08007afc <pb_encode_svarint>:
    if (value < 0)
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	f173 0100 	sbcs.w	r1, r3, #0
 8007b02:	da05      	bge.n	8007b10 <pb_encode_svarint+0x14>
        zigzagged = ~((pb_uint64_t)value << 1);
 8007b04:	1892      	adds	r2, r2, r2
 8007b06:	415b      	adcs	r3, r3
 8007b08:	43d2      	mvns	r2, r2
 8007b0a:	43db      	mvns	r3, r3
    return pb_encode_varint(stream, zigzagged);
 8007b0c:	f7ff bf8a 	b.w	8007a24 <pb_encode_varint>
        zigzagged = (pb_uint64_t)value << 1;
 8007b10:	1892      	adds	r2, r2, r2
 8007b12:	415b      	adcs	r3, r3
 8007b14:	e7fa      	b.n	8007b0c <pb_encode_svarint+0x10>
	...

08007b18 <pb_enc_svarint>:
    if (field->data_size == sizeof(int_least8_t))
 8007b18:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d104      	bne.n	8007b2a <pb_enc_svarint+0x12>
        value = *(const int_least8_t*)src;
 8007b20:	f992 2000 	ldrsb.w	r2, [r2]
        value = *(const int32_t*)src;
 8007b24:	17d3      	asrs	r3, r2, #31
    
    return pb_encode_svarint(stream, value);
 8007b26:	f7ff bfe9 	b.w	8007afc <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d102      	bne.n	8007b34 <pb_enc_svarint+0x1c>
        value = *(const int_least16_t*)src;
 8007b2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007b32:	e7f7      	b.n	8007b24 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(int32_t))
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d101      	bne.n	8007b3c <pb_enc_svarint+0x24>
        value = *(const int32_t*)src;
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	e7f3      	b.n	8007b24 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d102      	bne.n	8007b46 <pb_enc_svarint+0x2e>
        value = *(const pb_int64_t*)src;
 8007b40:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007b44:	e7ef      	b.n	8007b26 <pb_enc_svarint+0xe>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007b46:	6903      	ldr	r3, [r0, #16]
 8007b48:	4a03      	ldr	r2, [pc, #12]	; (8007b58 <pb_enc_svarint+0x40>)
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf08      	it	eq
 8007b4e:	4613      	moveq	r3, r2
 8007b50:	6103      	str	r3, [r0, #16]
}
 8007b52:	2000      	movs	r0, #0
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	0804eac5 	.word	0x0804eac5

08007b5c <pb_encode_fixed32>:
    uint32_t val = *(const uint32_t*)value;
 8007b5c:	680b      	ldr	r3, [r1, #0]
{
 8007b5e:	b507      	push	{r0, r1, r2, lr}
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007b60:	0a1a      	lsrs	r2, r3, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007b62:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007b66:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007b6a:	0c1a      	lsrs	r2, r3, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007b6c:	0e1b      	lsrs	r3, r3, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007b6e:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 8007b72:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007b74:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 8007b78:	eb0d 0102 	add.w	r1, sp, r2
 8007b7c:	f7ff ff2e 	bl	80079dc <pb_write>
}
 8007b80:	b003      	add	sp, #12
 8007b82:	f85d fb04 	ldr.w	pc, [sp], #4

08007b86 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8007b86:	4611      	mov	r1, r2
 8007b88:	f7ff bfe8 	b.w	8007b5c <pb_encode_fixed32>

08007b8c <pb_encode_fixed64>:
{
 8007b8c:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 8007b8e:	e891 000c 	ldmia.w	r1, {r2, r3}
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007b92:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007b94:	f88d 2000 	strb.w	r2, [sp]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8007b98:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007b9c:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007ba0:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007ba2:	0e12      	lsrs	r2, r2, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007ba4:	f88d 1002 	strb.w	r1, [sp, #2]
    return pb_write(stream, bytes, 8);
 8007ba8:	4669      	mov	r1, sp
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007baa:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8007bae:	0a1a      	lsrs	r2, r3, #8
 8007bb0:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8007bb4:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8007bb6:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8007bb8:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 8007bbc:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8007bbe:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8007bc2:	f7ff ff0b 	bl	80079dc <pb_write>
}
 8007bc6:	b003      	add	sp, #12
 8007bc8:	f85d fb04 	ldr.w	pc, [sp], #4

08007bcc <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8007bcc:	4611      	mov	r1, r2
 8007bce:	f7ff bfdd 	b.w	8007b8c <pb_encode_fixed64>

08007bd2 <pb_encode_tag>:
{
 8007bd2:	b430      	push	{r4, r5}
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	0f55      	lsrs	r5, r2, #29
 8007bd8:	00d4      	lsls	r4, r2, #3
 8007bda:	b2ca      	uxtb	r2, r1
    return pb_encode_varint(stream, tag);
 8007bdc:	432b      	orrs	r3, r5
 8007bde:	4322      	orrs	r2, r4
}
 8007be0:	bc30      	pop	{r4, r5}
    return pb_encode_varint(stream, tag);
 8007be2:	f7ff bf1f 	b.w	8007a24 <pb_encode_varint>
	...

08007be8 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8007be8:	788b      	ldrb	r3, [r1, #2]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	d811      	bhi.n	8007c16 <pb_encode_tag_for_field+0x2e>
 8007bf2:	e8df f003 	tbb	[pc, r3]
 8007bf6:	0c0c      	.short	0x0c0c
 8007bf8:	0a0e050c 	.word	0x0a0e050c
 8007bfc:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_32BIT;
 8007c00:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 8007c02:	880a      	ldrh	r2, [r1, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	f7ff bfe4 	b.w	8007bd2 <pb_encode_tag>
            wiretype = PB_WT_STRING;
 8007c0a:	2302      	movs	r3, #2
            break;
 8007c0c:	e7f9      	b.n	8007c02 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e7f7      	b.n	8007c02 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_64BIT;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e7f5      	b.n	8007c02 <pb_encode_tag_for_field+0x1a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8007c16:	6903      	ldr	r3, [r0, #16]
 8007c18:	4a03      	ldr	r2, [pc, #12]	; (8007c28 <pb_encode_tag_for_field+0x40>)
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf08      	it	eq
 8007c1e:	4613      	moveq	r3, r2
 8007c20:	6103      	str	r3, [r0, #16]
}
 8007c22:	2000      	movs	r0, #0
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	0804ea27 	.word	0x0804ea27

08007c2c <encode_field>:
{
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 8007c32:	788a      	ldrb	r2, [r1, #2]
{
 8007c34:	b086      	sub	sp, #24
 8007c36:	4605      	mov	r5, r0
    switch (PB_ATYPE(field->type))
 8007c38:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 8007c3c:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	f000 80d7 	beq.w	8007df2 <encode_field+0x1c6>
 8007c44:	2b80      	cmp	r3, #128	; 0x80
 8007c46:	d000      	beq.n	8007c4a <encode_field+0x1e>
 8007c48:	b9cb      	cbnz	r3, 8007c7e <encode_field+0x52>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8007c4a:	4b72      	ldr	r3, [pc, #456]	; (8007e14 <encode_field+0x1e8>)
 8007c4c:	f002 010f 	and.w	r1, r2, #15
 8007c50:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
    if (field->size_offset)
 8007c54:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 8007c58:	b1a3      	cbz	r3, 8007c84 <encode_field+0x58>
        pSize = (const char*)pData + field->size_offset;
 8007c5a:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007c5c:	78a2      	ldrb	r2, [r4, #2]
 8007c5e:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8007c62:	2880      	cmp	r0, #128	; 0x80
 8007c64:	d105      	bne.n	8007c72 <encode_field+0x46>
        pData = *(const void* const*)pData;
 8007c66:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 8007c68:	1c31      	adds	r1, r6, #0
 8007c6a:	bf18      	it	ne
 8007c6c:	2101      	movne	r1, #1
 8007c6e:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8007c72:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8007c76:	2910      	cmp	r1, #16
 8007c78:	d034      	beq.n	8007ce4 <encode_field+0xb8>
 8007c7a:	d816      	bhi.n	8007caa <encode_field+0x7e>
 8007c7c:	b349      	cbz	r1, 8007cd2 <encode_field+0xa6>
            PB_RETURN_ERROR(stream, "invalid field type");
 8007c7e:	692b      	ldr	r3, [r5, #16]
 8007c80:	4a65      	ldr	r2, [pc, #404]	; (8007e18 <encode_field+0x1ec>)
 8007c82:	e02a      	b.n	8007cda <encode_field+0xae>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8007c84:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007c88:	2a10      	cmp	r2, #16
 8007c8a:	d10a      	bne.n	8007ca2 <encode_field+0x76>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7ff fe57 	bl	8007942 <pb_check_proto3_default_value>
 8007c94:	f080 0001 	eor.w	r0, r0, #1
 8007c98:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 8007c9c:	f10d 0303 	add.w	r3, sp, #3
 8007ca0:	e7dc      	b.n	8007c5c <encode_field+0x30>
        implicit_has = true;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f88d 3003 	strb.w	r3, [sp, #3]
 8007ca8:	e7f8      	b.n	8007c9c <encode_field+0x70>
    switch (PB_HTYPE(field->type))
 8007caa:	2920      	cmp	r1, #32
 8007cac:	d01f      	beq.n	8007cee <encode_field+0xc2>
 8007cae:	2930      	cmp	r1, #48	; 0x30
 8007cb0:	d1e5      	bne.n	8007c7e <encode_field+0x52>
            if (*(const pb_size_t*)pSize == field->tag)
 8007cb2:	881a      	ldrh	r2, [r3, #0]
 8007cb4:	8823      	ldrh	r3, [r4, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d117      	bne.n	8007cea <encode_field+0xbe>
                if (!pb_encode_tag_for_field(stream, field))
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f7ff ff93 	bl	8007be8 <pb_encode_tag_for_field>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f000 8089 	beq.w	8007dda <encode_field+0x1ae>
                if (!func(stream, field, pData))
 8007cc8:	4632      	mov	r2, r6
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47c0      	blx	r8
 8007cd0:	e03e      	b.n	8007d50 <encode_field+0x124>
            if (!pData)
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d1f1      	bne.n	8007cba <encode_field+0x8e>
                PB_RETURN_ERROR(stream, "missing required field");
 8007cd6:	692b      	ldr	r3, [r5, #16]
 8007cd8:	4a50      	ldr	r2, [pc, #320]	; (8007e1c <encode_field+0x1f0>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bf08      	it	eq
 8007cde:	4613      	moveq	r3, r2
 8007ce0:	612b      	str	r3, [r5, #16]
 8007ce2:	e07a      	b.n	8007dda <encode_field+0x1ae>
            if (*(const bool*)pSize)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e7      	bne.n	8007cba <encode_field+0x8e>
    return true;
 8007cea:	2001      	movs	r0, #1
 8007cec:	e030      	b.n	8007d50 <encode_field+0x124>
            if (field->size_offset != 0) {
 8007cee:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 8007cf2:	b159      	cbz	r1, 8007d0c <encode_field+0xe0>
                count = *(const pb_size_t*)pSize;
 8007cf4:	881f      	ldrh	r7, [r3, #0]
    if (count == 0)
 8007cf6:	2f00      	cmp	r7, #0
 8007cf8:	d0f7      	beq.n	8007cea <encode_field+0xbe>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8007cfa:	2880      	cmp	r0, #128	; 0x80
 8007cfc:	d009      	beq.n	8007d12 <encode_field+0xe6>
 8007cfe:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 8007d02:	429f      	cmp	r7, r3
 8007d04:	d905      	bls.n	8007d12 <encode_field+0xe6>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8007d06:	692b      	ldr	r3, [r5, #16]
 8007d08:	4a45      	ldr	r2, [pc, #276]	; (8007e20 <encode_field+0x1f4>)
 8007d0a:	e7e6      	b.n	8007cda <encode_field+0xae>
                count = field->array_size;
 8007d0c:	f8b4 7009 	ldrh.w	r7, [r4, #9]
 8007d10:	e7f1      	b.n	8007cf6 <encode_field+0xca>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8007d12:	f002 020f 	and.w	r2, r2, #15
 8007d16:	2a04      	cmp	r2, #4
 8007d18:	d849      	bhi.n	8007dae <encode_field+0x182>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8007d1a:	8822      	ldrh	r2, [r4, #0]
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7ff ff57 	bl	8007bd2 <pb_encode_tag>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d058      	beq.n	8007dda <encode_field+0x1ae>
 8007d28:	78a3      	ldrb	r3, [r4, #2]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d111      	bne.n	8007d56 <encode_field+0x12a>
            size = 4 * count;
 8007d32:	ea4f 0987 	mov.w	r9, r7, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007d36:	464a      	mov	r2, r9
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f7ff fe72 	bl	8007a24 <pb_encode_varint>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d04a      	beq.n	8007dda <encode_field+0x1ae>
        if (stream->callback == NULL)
 8007d44:	6829      	ldr	r1, [r5, #0]
 8007d46:	bb19      	cbnz	r1, 8007d90 <encode_field+0x164>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8007d48:	464a      	mov	r2, r9
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f7ff fe46 	bl	80079dc <pb_write>
}
 8007d50:	b006      	add	sp, #24
 8007d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d102      	bne.n	8007d60 <encode_field+0x134>
            size = 8 * count;
 8007d5a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8007d5e:	e7ea      	b.n	8007d36 <encode_field+0x10a>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8007d60:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 8007d62:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8007d66:	2214      	movs	r2, #20
 8007d68:	2100      	movs	r1, #0
 8007d6a:	a801      	add	r0, sp, #4
 8007d6c:	f000 fce0 	bl	8008730 <memset>
                if (!func(&sizestream, field, p))
 8007d70:	4652      	mov	r2, sl
 8007d72:	4621      	mov	r1, r4
 8007d74:	a801      	add	r0, sp, #4
 8007d76:	47c0      	blx	r8
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d0e9      	beq.n	8007d50 <encode_field+0x124>
            for (i = 0; i < count; i++)
 8007d7c:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 8007d80:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 8007d84:	454f      	cmp	r7, r9
                p = (const char*)p + field->data_size;
 8007d86:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 8007d88:	d8f2      	bhi.n	8007d70 <encode_field+0x144>
            size = sizestream.bytes_written;
 8007d8a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8007d8e:	e7d2      	b.n	8007d36 <encode_field+0x10a>
        if (stream->callback == NULL)
 8007d90:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8007d94:	4632      	mov	r2, r6
 8007d96:	4621      	mov	r1, r4
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47c0      	blx	r8
 8007d9c:	b1e8      	cbz	r0, 8007dda <encode_field+0x1ae>
        for (i = 0; i < count; i++)
 8007d9e:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 8007da2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8007da6:	454f      	cmp	r7, r9
            p = (const char*)p + field->data_size;
 8007da8:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 8007daa:	d8f3      	bhi.n	8007d94 <encode_field+0x168>
 8007dac:	e79d      	b.n	8007cea <encode_field+0xbe>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8007dae:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7ff ff17 	bl	8007be8 <pb_encode_tag_for_field>
 8007dba:	b170      	cbz	r0, 8007dda <encode_field+0x1ae>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007dbc:	78a3      	ldrb	r3, [r4, #2]
 8007dbe:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8007dc2:	2a80      	cmp	r2, #128	; 0x80
 8007dc4:	d113      	bne.n	8007dee <encode_field+0x1c2>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d80e      	bhi.n	8007dee <encode_field+0x1c2>
                if (!func(stream, field, *(const void* const*)p))
 8007dd0:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47c0      	blx	r8
 8007dd8:	b908      	cbnz	r0, 8007dde <encode_field+0x1b2>
            PB_RETURN_ERROR(stream, "invalid field type");
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e7b8      	b.n	8007d50 <encode_field+0x124>
        for (i = 0; i < count; i++)
 8007dde:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 8007de2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8007de6:	454f      	cmp	r7, r9
            p = (const char*)p + field->data_size;
 8007de8:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 8007dea:	d8e2      	bhi.n	8007db2 <encode_field+0x186>
 8007dec:	e77d      	b.n	8007cea <encode_field+0xbe>
                if (!func(stream, field, p))
 8007dee:	4632      	mov	r2, r6
 8007df0:	e7ef      	b.n	8007dd2 <encode_field+0x1a6>
    if (callback->funcs.encode != NULL)
 8007df2:	6833      	ldr	r3, [r6, #0]
    void * const *arg = &(callback->arg);
 8007df4:	1d32      	adds	r2, r6, #4
    if (callback->funcs.encode != NULL)
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f43f af77 	beq.w	8007cea <encode_field+0xbe>
        if (!callback->funcs.encode(stream, field, arg))
 8007dfc:	4798      	blx	r3
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f47f af73 	bne.w	8007cea <encode_field+0xbe>
            PB_RETURN_ERROR(stream, "callback error");
 8007e04:	692b      	ldr	r3, [r5, #16]
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <encode_field+0x1f8>)
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bf08      	it	eq
 8007e0c:	4613      	moveq	r3, r2
 8007e0e:	612b      	str	r3, [r5, #16]
 8007e10:	e79e      	b.n	8007d50 <encode_field+0x124>
 8007e12:	bf00      	nop
 8007e14:	0804eb74 	.word	0x0804eb74
 8007e18:	0804ea27 	.word	0x0804ea27
 8007e1c:	0804eb0a 	.word	0x0804eb0a
 8007e20:	0804eb9c 	.word	0x0804eb9c
 8007e24:	0804ebb4 	.word	0x0804ebb4

08007e28 <pb_encode>:
{
 8007e28:	b530      	push	{r4, r5, lr}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8007e2e:	4668      	mov	r0, sp
 8007e30:	f7fe ff74 	bl	8006d1c <pb_field_iter_begin>
 8007e34:	b910      	cbnz	r0, 8007e3c <pb_encode+0x14>
        return true; /* Empty message type */
 8007e36:	2001      	movs	r0, #1
}
 8007e38:	b007      	add	sp, #28
 8007e3a:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8007e3c:	9901      	ldr	r1, [sp, #4]
 8007e3e:	788b      	ldrb	r3, [r1, #2]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d11d      	bne.n	8007e84 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	681c      	ldr	r4, [r3, #0]
    while (extension)
 8007e4c:	b91c      	cbnz	r4, 8007e56 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 8007e4e:	4668      	mov	r0, sp
 8007e50:	f7fe ff76 	bl	8006d40 <pb_field_iter_next>
 8007e54:	e7ee      	b.n	8007e34 <pb_encode+0xc>
        if (extension->type->encode)
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	b12a      	cbz	r2, 8007e68 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	4790      	blx	r2
        if (!status)
 8007e62:	b968      	cbnz	r0, 8007e80 <pb_encode+0x58>
                return false;
 8007e64:	2000      	movs	r0, #0
 8007e66:	e7e7      	b.n	8007e38 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8007e68:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 8007e6a:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007e6c:	788b      	ldrb	r3, [r1, #2]
 8007e6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e72:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 8007e74:	bf0c      	ite	eq
 8007e76:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8007e78:	6862      	ldrne	r2, [r4, #4]
 8007e7a:	f7ff fed7 	bl	8007c2c <encode_field>
 8007e7e:	e7f0      	b.n	8007e62 <pb_encode+0x3a>
        extension = extension->next;
 8007e80:	68a4      	ldr	r4, [r4, #8]
 8007e82:	e7e3      	b.n	8007e4c <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8007e84:	9a04      	ldr	r2, [sp, #16]
 8007e86:	4628      	mov	r0, r5
 8007e88:	f7ff fed0 	bl	8007c2c <encode_field>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d1de      	bne.n	8007e4e <pb_encode+0x26>
 8007e90:	e7e8      	b.n	8007e64 <pb_encode+0x3c>

08007e92 <pb_encode_string>:
{
 8007e92:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007e94:	2300      	movs	r3, #0
{
 8007e96:	4604      	mov	r4, r0
 8007e98:	460d      	mov	r5, r1
 8007e9a:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007e9c:	f7ff fdc2 	bl	8007a24 <pb_encode_varint>
 8007ea0:	b130      	cbz	r0, 8007eb0 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4620      	mov	r0, r4
}
 8007ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
 8007eac:	f7ff bd96 	b.w	80079dc <pb_write>
}
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}

08007eb2 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8007eb2:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8007eb4:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7ff bfea 	b.w	8007e92 <pb_encode_string>

08007ebe <pb_enc_string>:
{
 8007ebe:	b410      	push	{r4}
    size_t max_size = field->data_size;
 8007ec0:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007ec4:	7889      	ldrb	r1, [r1, #2]
 8007ec6:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 8007eca:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 8007ecc:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 8007ece:	bf08      	it	eq
 8007ed0:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8007ed4:	b152      	cbz	r2, 8007eec <pb_enc_string+0x2e>
 8007ed6:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <pb_enc_string+0x22>
 8007edc:	5c8c      	ldrb	r4, [r1, r2]
 8007ede:	b91c      	cbnz	r4, 8007ee8 <pb_enc_string+0x2a>
}
 8007ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8007ee4:	f7ff bfd5 	b.w	8007e92 <pb_encode_string>
            size++;
 8007ee8:	3201      	adds	r2, #1
 8007eea:	e7f5      	b.n	8007ed8 <pb_enc_string+0x1a>
 8007eec:	e7f8      	b.n	8007ee0 <pb_enc_string+0x22>
	...

08007ef0 <pb_enc_bytes>:
{
 8007ef0:	b430      	push	{r4, r5}
 8007ef2:	460d      	mov	r5, r1
 8007ef4:	4604      	mov	r4, r0
    if (src == NULL)
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	b912      	cbnz	r2, 8007f00 <pb_enc_bytes+0x10>
}
 8007efa:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8007efc:	f7ff bfc9 	b.w	8007e92 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007f00:	78a8      	ldrb	r0, [r5, #2]
 8007f02:	8812      	ldrh	r2, [r2, #0]
 8007f04:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8007f08:	d104      	bne.n	8007f14 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8007f0a:	1c93      	adds	r3, r2, #2
 8007f0c:	f8b5 5007 	ldrh.w	r5, [r5, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	d802      	bhi.n	8007f1a <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8007f14:	3102      	adds	r1, #2
 8007f16:	4620      	mov	r0, r4
 8007f18:	e7ef      	b.n	8007efa <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	4a03      	ldr	r2, [pc, #12]	; (8007f2c <pb_enc_bytes+0x3c>)
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bf08      	it	eq
 8007f22:	4613      	moveq	r3, r2
 8007f24:	6123      	str	r3, [r4, #16]
}
 8007f26:	bc30      	pop	{r4, r5}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	0804ebc3 	.word	0x0804ebc3

08007f30 <pb_encode_submessage>:
{
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	460f      	mov	r7, r1
 8007f38:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	2214      	movs	r2, #20
{
 8007f3e:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8007f40:	a801      	add	r0, sp, #4
 8007f42:	f000 fbf5 	bl	8008730 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8007f46:	4642      	mov	r2, r8
 8007f48:	4639      	mov	r1, r7
 8007f4a:	a801      	add	r0, sp, #4
 8007f4c:	f7ff ff6c 	bl	8007e28 <pb_encode>
 8007f50:	b910      	cbnz	r0, 8007f58 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 8007f52:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	e00d      	b.n	8007f74 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 8007f58:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4632      	mov	r2, r6
 8007f60:	462b      	mov	r3, r5
 8007f62:	f7ff fd5f 	bl	8007a24 <pb_encode_varint>
 8007f66:	b128      	cbz	r0, 8007f74 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 8007f68:	6821      	ldr	r1, [r4, #0]
 8007f6a:	b931      	cbnz	r1, 8007f7a <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff fd34 	bl	80079dc <pb_write>
}
 8007f74:	b006      	add	sp, #24
 8007f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	68a2      	ldr	r2, [r4, #8]
 8007f7e:	4433      	add	r3, r6
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d907      	bls.n	8007f94 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	4a0e      	ldr	r2, [pc, #56]	; (8007fc0 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf08      	it	eq
 8007f8c:	4613      	moveq	r3, r2
 8007f8e:	4628      	mov	r0, r5
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	e7ef      	b.n	8007f74 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 8007f94:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 8007f96:	4642      	mov	r2, r8
    substream.callback = stream->callback;
 8007f98:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 8007f9a:	a801      	add	r0, sp, #4
 8007f9c:	4639      	mov	r1, r7
    substream.state = stream->state;
 8007f9e:	9302      	str	r3, [sp, #8]
    substream.max_size = size;
 8007fa0:	9603      	str	r6, [sp, #12]
    substream.bytes_written = 0;
 8007fa2:	9504      	str	r5, [sp, #16]
    substream.errmsg = NULL;
 8007fa4:	9505      	str	r5, [sp, #20]
    status = pb_encode(&substream, fields, src_struct);
 8007fa6:	f7ff ff3f 	bl	8007e28 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 8007faa:	9a04      	ldr	r2, [sp, #16]
 8007fac:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 8007fae:	4296      	cmp	r6, r2
    stream->bytes_written += substream.bytes_written;
 8007fb0:	4413      	add	r3, r2
 8007fb2:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 8007fb8:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 8007fba:	d0cb      	beq.n	8007f54 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8007fbc:	4a01      	ldr	r2, [pc, #4]	; (8007fc4 <pb_encode_submessage+0x94>)
 8007fbe:	e7e3      	b.n	8007f88 <pb_encode_submessage+0x58>
 8007fc0:	0804ebeb 	.word	0x0804ebeb
 8007fc4:	0804ebd7 	.word	0x0804ebd7

08007fc8 <pb_enc_submessage>:
{
 8007fc8:	b410      	push	{r4}
    if (field->ptr == NULL)
 8007fca:	f8d1 100b 	ldr.w	r1, [r1, #11]
 8007fce:	b119      	cbz	r1, 8007fd8 <pb_enc_submessage+0x10>
}
 8007fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8007fd4:	f7ff bfac 	b.w	8007f30 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8007fd8:	6903      	ldr	r3, [r0, #16]
 8007fda:	4a04      	ldr	r2, [pc, #16]	; (8007fec <pb_enc_submessage+0x24>)
}
 8007fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bf08      	it	eq
 8007fe4:	4613      	moveq	r3, r2
 8007fe6:	6103      	str	r3, [r0, #16]
}
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4770      	bx	lr
 8007fec:	0804eaac 	.word	0x0804eaac

08007ff0 <ai_mnetwork_handle>:
    return false;
}

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <ai_mnetwork_handle+0x18>)
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8007ff2:	b120      	cbz	r0, 8007ffe <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8007ff4:	4298      	cmp	r0, r3
 8007ff6:	bf0c      	ite	eq
 8007ff8:	4618      	moveq	r0, r3
 8007ffa:	2000      	movne	r0, #0
 8007ffc:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8007ffe:	681a      	ldr	r2, [r3, #0]
            return &gnetworks[i];
 8008000:	2a00      	cmp	r2, #0
 8008002:	bf08      	it	eq
 8008004:	4618      	moveq	r0, r3
}
 8008006:	4770      	bx	lr
 8008008:	2000ad08 	.word	0x2000ad08

0800800c <ai_mnetwork_is_valid.isra.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 800800c:	b570      	push	{r4, r5, r6, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800800e:	4604      	mov	r4, r0
 8008010:	b190      	cbz	r0, 8008038 <ai_mnetwork_is_valid.isra.0+0x2c>
 8008012:	680d      	ldr	r5, [r1, #0]
 8008014:	4628      	mov	r0, r5
 8008016:	f7fb fade 	bl	80035d6 <strlen>
 800801a:	4606      	mov	r6, r0
 800801c:	4620      	mov	r0, r4
 800801e:	f7fb fada 	bl	80035d6 <strlen>
 8008022:	4286      	cmp	r6, r0
 8008024:	d108      	bne.n	8008038 <ai_mnetwork_is_valid.isra.0+0x2c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8008026:	4632      	mov	r2, r6
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 fcc0 	bl	80089b0 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8008030:	fab0 f080 	clz	r0, r0
 8008034:	0940      	lsrs	r0, r0, #5
 8008036:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8008038:	2000      	movs	r0, #0
}
 800803a:	bd70      	pop	{r4, r5, r6, pc}

0800803c <MX_X_CUBE_AI_Init>:
{
 800803c:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 800803e:	f000 fa1b 	bl	8008478 <MX_USART2_UART_Init>
}
 8008042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8008046:	f7fe bd85 	b.w	8006b54 <aiValidationInit>

0800804a <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 800804a:	f7fe bd99 	b.w	8006b80 <aiValidationProcess>
	...

08008050 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8008050:	b510      	push	{r4, lr}
 8008052:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8008054:	4905      	ldr	r1, [pc, #20]	; (800806c <ai_mnetwork_find+0x1c>)
 8008056:	f7ff ffd9 	bl	800800c <ai_mnetwork_is_valid.isra.0>
 800805a:	b920      	cbnz	r0, 8008066 <ai_mnetwork_find+0x16>
            return entry->name;
        else {
            if (!idx--)
 800805c:	2c00      	cmp	r4, #0
                return entry->name;
        }
    }
    return NULL;
 800805e:	4804      	ldr	r0, [pc, #16]	; (8008070 <ai_mnetwork_find+0x20>)
 8008060:	bf18      	it	ne
 8008062:	2000      	movne	r0, #0
 8008064:	bd10      	pop	{r4, pc}
                return entry->name;
 8008066:	4802      	ldr	r0, [pc, #8]	; (8008070 <ai_mnetwork_find+0x20>)
}
 8008068:	bd10      	pop	{r4, pc}
 800806a:	bf00      	nop
 800806c:	0804efec 	.word	0x0804efec
 8008070:	0804e2e4 	.word	0x0804e2e4

08008074 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8008078:	2000      	movs	r0, #0
{
 800807a:	460d      	mov	r5, r1
 800807c:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800807e:	f7ff ffb7 	bl	8007ff0 <ai_mnetwork_handle>

    if (!inst) {
 8008082:	4604      	mov	r4, r0
 8008084:	b1c8      	cbz	r0, 80080ba <ai_mnetwork_create+0x46>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8008086:	4911      	ldr	r1, [pc, #68]	; (80080cc <ai_mnetwork_create+0x58>)
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ffbf 	bl	800800c <ai_mnetwork_is_valid.isra.0>
 800808e:	b1d0      	cbz	r0, 80080c6 <ai_mnetwork_create+0x52>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	f7fd fce4 	bl	8005a60 <ai_cnn_create>
 8008098:	f3c0 2317 	ubfx	r3, r0, #8, #24
 800809c:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800809e:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 80080a2:	d104      	bne.n	80080ae <ai_mnetwork_create+0x3a>
        inst->entry = found;
 80080a4:	4909      	ldr	r1, [pc, #36]	; (80080cc <ai_mnetwork_create+0x58>)
 80080a6:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 80080a8:	6829      	ldr	r1, [r5, #0]
 80080aa:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 80080ac:	602c      	str	r4, [r5, #0]
    }

    return err;
 80080ae:	2000      	movs	r0, #0
 80080b0:	f362 0007 	bfi	r0, r2, #0, #8
        return err;
 80080b4:	f363 201f 	bfi	r0, r3, #8, #24
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err;
 80080ba:	2000      	movs	r0, #0
 80080bc:	2331      	movs	r3, #49	; 0x31
        return err;
 80080be:	f363 0007 	bfi	r0, r3, #0, #8
 80080c2:	2310      	movs	r3, #16
 80080c4:	e7f6      	b.n	80080b4 <ai_mnetwork_create+0x40>
 80080c6:	2000      	movs	r0, #0
 80080c8:	2314      	movs	r3, #20
 80080ca:	e7f8      	b.n	80080be <ai_mnetwork_create+0x4a>
 80080cc:	0804efec 	.word	0x0804efec

080080d0 <ai_mnetwork_destroy>:
}

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80080d4:	f7ff ff8c 	bl	8007ff0 <ai_mnetwork_handle>
    if (inn) {
 80080d8:	4605      	mov	r5, r0
 80080da:	b158      	cbz	r0, 80080f4 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 80080dc:	6803      	ldr	r3, [r0, #0]
 80080de:	6840      	ldr	r0, [r0, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	4798      	blx	r3
        if (hdl != inn->handle) {
 80080e4:	686b      	ldr	r3, [r5, #4]
 80080e6:	4283      	cmp	r3, r0
 80080e8:	d004      	beq.n	80080f4 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <ai_mnetwork_destroy+0x28>)
 80080ec:	2400      	movs	r4, #0
 80080ee:	429d      	cmp	r5, r3
            gnetworks[i].entry = NULL;
 80080f0:	bf08      	it	eq
 80080f2:	602c      	streq	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 80080f4:	4620      	mov	r0, r4
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	2000ad08 	.word	0x2000ad08

080080fc <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 80080fc:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80080fe:	f7ff ff77 	bl	8007ff0 <ai_mnetwork_handle>
    if (inn)
 8008102:	b128      	cbz	r0, 8008110 <ai_mnetwork_get_info+0x14>
        return inn->entry->ai_get_info(inn->handle, report);
 8008104:	6802      	ldr	r2, [r0, #0]
 8008106:	6840      	ldr	r0, [r0, #4]
 8008108:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    else
        return false;
}
 800810a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_info(inn->handle, report);
 800810e:	4710      	bx	r2
}
 8008110:	bd10      	pop	{r4, pc}

08008112 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8008112:	b508      	push	{r3, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008114:	f7ff ff6c 	bl	8007ff0 <ai_mnetwork_handle>
    if (inn)
 8008118:	b120      	cbz	r0, 8008124 <ai_mnetwork_get_error+0x12>
        return inn->entry->ai_get_error(inn->handle);
 800811a:	6803      	ldr	r3, [r0, #0]
 800811c:	6840      	ldr	r0, [r0, #4]
 800811e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008120:	4798      	blx	r3
 8008122:	bd08      	pop	{r3, pc}
    else
        return err;
 8008124:	2314      	movs	r3, #20
 8008126:	2000      	movs	r0, #0
 8008128:	f363 0007 	bfi	r0, r3, #0, #8
 800812c:	2310      	movs	r3, #16
 800812e:	f363 201f 	bfi	r0, r3, #8, #24
}
 8008132:	bd08      	pop	{r3, pc}

08008134 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8008134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	460f      	mov	r7, r1
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800813a:	f7ff ff59 	bl	8007ff0 <ai_mnetwork_handle>
    if (inn) {
 800813e:	4606      	mov	r6, r0
 8008140:	b340      	cbz	r0, 8008194 <ai_mnetwork_init+0x60>
        par = inn->entry->params;
 8008142:	f8d0 e000 	ldr.w	lr, [r0]
 8008146:	466c      	mov	r4, sp
 8008148:	f10e 0504 	add.w	r5, lr, #4
 800814c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800814e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008150:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8008158:	8a7b      	ldrh	r3, [r7, #18]
 800815a:	466c      	mov	r4, sp
 800815c:	b193      	cbz	r3, 8008184 <ai_mnetwork_init+0x50>
            par.activations = params->activations;
 800815e:	f107 0310 	add.w	r3, r7, #16
 8008162:	ad08      	add	r5, sp, #32
 8008164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008166:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
        else
            par.activations.data = params->activations.data;
        if (params->params.n_batches)
 800816a:	887b      	ldrh	r3, [r7, #2]
 800816c:	b16b      	cbz	r3, 800818a <ai_mnetwork_init+0x56>
            par.params = params->params;
 800816e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
        return inn->entry->ai_init(inn->handle, &par);
 8008176:	6833      	ldr	r3, [r6, #0]
 8008178:	4621      	mov	r1, r4
 800817a:	6870      	ldr	r0, [r6, #4]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	4798      	blx	r3
    }
    else
        return false;
}
 8008180:	b009      	add	sp, #36	; 0x24
 8008182:	bdf0      	pop	{r4, r5, r6, r7, pc}
            par.activations.data = params->activations.data;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	9307      	str	r3, [sp, #28]
 8008188:	e7ef      	b.n	800816a <ai_mnetwork_init+0x36>
            par.params.data = inn->entry->ai_data_weights_get_default();
 800818a:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 800818e:	4798      	blx	r3
 8008190:	9003      	str	r0, [sp, #12]
 8008192:	e7f0      	b.n	8008176 <ai_mnetwork_init+0x42>
 8008194:	e7f4      	b.n	8008180 <ai_mnetwork_init+0x4c>

08008196 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8008196:	b570      	push	{r4, r5, r6, lr}
 8008198:	4615      	mov	r5, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800819a:	f7ff ff29 	bl	8007ff0 <ai_mnetwork_handle>
    if (inn)
 800819e:	b138      	cbz	r0, 80081b0 <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 80081a0:	6802      	ldr	r2, [r0, #0]
 80081a2:	6840      	ldr	r0, [r0, #4]
 80081a4:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80081a6:	462a      	mov	r2, r5
 80081a8:	4623      	mov	r3, r4
    else
        return 0;
}
 80081aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80081ae:	4718      	bx	r3
}
 80081b0:	bd70      	pop	{r4, r5, r6, pc}

080081b2 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 80081b2:	b538      	push	{r3, r4, r5, lr}
 80081b4:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80081b6:	f7ff ff1b 	bl	8007ff0 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 80081ba:	b168      	cbz	r0, 80081d8 <ai_mnetwork_get_private_handle+0x26>
 80081bc:	b161      	cbz	r1, 80081d8 <ai_mnetwork_get_private_handle+0x26>
 80081be:	b15d      	cbz	r5, 80081d8 <ai_mnetwork_get_private_handle+0x26>
         *phandle = inn->handle;
 80081c0:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 80081c2:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 80081c6:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 80081c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80081d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 80081d4:	2000      	movs	r0, #0
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
     }
     else
         return -1;
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295
 }
 80081dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080081e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081e4:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081e6:	2230      	movs	r2, #48	; 0x30
 80081e8:	2100      	movs	r1, #0
 80081ea:	a808      	add	r0, sp, #32
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80081ec:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081ee:	f000 fa9f 	bl	8008730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081f2:	2214      	movs	r2, #20
 80081f4:	2100      	movs	r1, #0
 80081f6:	a803      	add	r0, sp, #12
 80081f8:	f000 fa9a 	bl	8008730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081fc:	2100      	movs	r1, #0
 80081fe:	4632      	mov	r2, r6
 8008200:	a814      	add	r0, sp, #80	; 0x50
 8008202:	f000 fa95 	bl	8008730 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8008206:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008208:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800820a:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 800820c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800820e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008212:	641a      	str	r2, [r3, #64]	; 0x40
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800821e:	4b19      	ldr	r3, [pc, #100]	; (8008284 <SystemClock_Config+0xa4>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800822a:	9408      	str	r4, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800822c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008230:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008232:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008234:	9302      	str	r3, [sp, #8]
 8008236:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008238:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800823a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800823c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800823e:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008240:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008242:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008244:	2308      	movs	r3, #8
 8008246:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008248:	23d8      	movs	r3, #216	; 0xd8
 800824a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800824c:	f7fc fbe6 	bl	8004a1c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008250:	f7fc fbac 	bl	80049ac <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008254:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008256:	2107      	movs	r1, #7
 8008258:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800825a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800825c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008260:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008262:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008268:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800826a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800826c:	f7fc fd98 	bl	8004da0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008270:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008272:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008274:	9524      	str	r5, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008276:	f7fc fe57 	bl	8004f28 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800827a:	b034      	add	sp, #208	; 0xd0
 800827c:	bd70      	pop	{r4, r5, r6, pc}
 800827e:	bf00      	nop
 8008280:	40023800 	.word	0x40023800
 8008284:	40007000 	.word	0x40007000

08008288 <main>:
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08c      	sub	sp, #48	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800828c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008290:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008294:	4b6e      	ldr	r3, [pc, #440]	; (8008450 <main+0x1c8>)
 8008296:	2100      	movs	r1, #0
 8008298:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800829c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80082a0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082aa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80082ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80082b0:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80082b4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80082b8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80082bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082c0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80082c4:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80082c8:	f3c2 324e 	ubfx	r2, r2, #13, #15
 80082cc:	07a5      	lsls	r5, r4, #30
 80082ce:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082d0:	ea02 0e06 	and.w	lr, r2, r6
 80082d4:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80082d6:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082d8:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways-- != 0U);
 80082dc:	3901      	subs	r1, #1
 80082de:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082e2:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80082e6:	1c4f      	adds	r7, r1, #1
 80082e8:	d1f6      	bne.n	80082d8 <main+0x50>
 80082ea:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80082ec:	f112 0f20 	cmn.w	r2, #32
 80082f0:	d1ee      	bne.n	80082d0 <main+0x48>
 80082f2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80082f6:	695a      	ldr	r2, [r3, #20]
 80082f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80082fc:	615a      	str	r2, [r3, #20]
 80082fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008302:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8008306:	f7fc f965 	bl	80045d4 <HAL_Init>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830a:	2400      	movs	r4, #0
  SystemClock_Config();
 800830c:	f7ff ff68 	bl	80081e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008310:	2214      	movs	r2, #20
 8008312:	2100      	movs	r1, #0
 8008314:	a807      	add	r0, sp, #28
 8008316:	f000 fa0b 	bl	8008730 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800831a:	4b4e      	ldr	r3, [pc, #312]	; (8008454 <main+0x1cc>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800831c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8008320:	484d      	ldr	r0, [pc, #308]	; (8008458 <main+0x1d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008324:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008326:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008328:	2603      	movs	r6, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800832a:	f042 0204 	orr.w	r2, r2, #4
 800832e:	631a      	str	r2, [r3, #48]	; 0x30
 8008330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008332:	f002 0204 	and.w	r2, r2, #4
 8008336:	9201      	str	r2, [sp, #4]
 8008338:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800833a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
 8008342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008344:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008348:	9202      	str	r2, [sp, #8]
 800834a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800834c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
 8008354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008356:	f002 0201 	and.w	r2, r2, #1
 800835a:	9203      	str	r2, [sp, #12]
 800835c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800835e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008360:	f042 0202 	orr.w	r2, r2, #2
 8008364:	631a      	str	r2, [r3, #48]	; 0x30
 8008366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008368:	f002 0202 	and.w	r2, r2, #2
 800836c:	9204      	str	r2, [sp, #16]
 800836e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	631a      	str	r2, [r3, #48]	; 0x30
 8008378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837a:	f002 0208 	and.w	r2, r2, #8
 800837e:	9205      	str	r2, [sp, #20]
 8008380:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008388:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800838a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008392:	9306      	str	r3, [sp, #24]
 8008394:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008396:	f7fc fb03 	bl	80049a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800839a:	2200      	movs	r2, #0
 800839c:	2140      	movs	r1, #64	; 0x40
 800839e:	482f      	ldr	r0, [pc, #188]	; (800845c <main+0x1d4>)
 80083a0:	f7fc fafe 	bl	80049a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80083a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80083a8:	a907      	add	r1, sp, #28
 80083aa:	482d      	ldr	r0, [pc, #180]	; (8008460 <main+0x1d8>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80083ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80083ae:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80083b2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80083b4:	f7fc fa16 	bl	80047e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80083b8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083bc:	a907      	add	r1, sp, #28
 80083be:	4826      	ldr	r0, [pc, #152]	; (8008458 <main+0x1d0>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80083c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083c2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c8:	f7fc fa0c 	bl	80047e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80083cc:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083d0:	a907      	add	r1, sp, #28
 80083d2:	4825      	ldr	r0, [pc, #148]	; (8008468 <main+0x1e0>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80083d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80083d6:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d8:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80083da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083dc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083de:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083e0:	f7fc fa00 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80083e4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80083e6:	a907      	add	r1, sp, #28
 80083e8:	481c      	ldr	r0, [pc, #112]	; (800845c <main+0x1d4>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80083ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083ec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083f0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80083f2:	f7fc f9f7 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80083f6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80083f8:	a907      	add	r1, sp, #28
 80083fa:	4818      	ldr	r0, [pc, #96]	; (800845c <main+0x1d4>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80083fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083fe:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008400:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008402:	f7fc f9ef 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008406:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800840a:	a907      	add	r1, sp, #28
 800840c:	4817      	ldr	r0, [pc, #92]	; (800846c <main+0x1e4>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800840e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008410:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008412:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008414:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008416:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008418:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800841a:	f7fc f9e3 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800841e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008422:	a907      	add	r1, sp, #28
 8008424:	4811      	ldr	r0, [pc, #68]	; (800846c <main+0x1e4>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008426:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008428:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800842a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800842c:	f7fc f9da 	bl	80047e4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8008430:	480f      	ldr	r0, [pc, #60]	; (8008470 <main+0x1e8>)
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <main+0x1ec>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008434:	7104      	strb	r4, [r0, #4]
  hcrc.Instance = CRC;
 8008436:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008438:	7144      	strb	r4, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800843a:	6144      	str	r4, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800843c:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800843e:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008440:	f7fc f974 	bl	800472c <HAL_CRC_Init>
  MX_X_CUBE_AI_Init();
 8008444:	f7ff fdfa 	bl	800803c <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8008448:	f7ff fdff 	bl	800804a <MX_X_CUBE_AI_Process>
 800844c:	e7fc      	b.n	8008448 <main+0x1c0>
 800844e:	bf00      	nop
 8008450:	e000ed00 	.word	0xe000ed00
 8008454:	40023800 	.word	0x40023800
 8008458:	40020400 	.word	0x40020400
 800845c:	40021800 	.word	0x40021800
 8008460:	40020800 	.word	0x40020800
 8008464:	10110000 	.word	0x10110000
 8008468:	40020c00 	.word	0x40020c00
 800846c:	40020000 	.word	0x40020000
 8008470:	2000ad40 	.word	0x2000ad40
 8008474:	40023000 	.word	0x40023000

08008478 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <MX_USART2_UART_Init+0x24>)
  huart2.Init.BaudRate = 115200;
 800847a:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <MX_USART2_UART_Init+0x28>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008480:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8008482:	e880 1008 	stmia.w	r0, {r3, ip}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008486:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008488:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800848a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800848c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800848e:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008490:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008492:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008494:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008496:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008498:	f7fd ba26 	b.w	80058e8 <HAL_UART_Init>
 800849c:	2000ad64 	.word	0x2000ad64
 80084a0:	40004400 	.word	0x40004400

080084a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <HAL_MspInit+0x2c>)
{
 80084a6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80084a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40
 80084b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084b2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80084b6:	9200      	str	r2, [sp, #0]
 80084b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c0:	645a      	str	r2, [r3, #68]	; 0x44
 80084c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084cc:	b002      	add	sp, #8
 80084ce:	4770      	bx	lr
 80084d0:	40023800 	.word	0x40023800

080084d4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80084d4:	6802      	ldr	r2, [r0, #0]
{
 80084d6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80084d8:	4b08      	ldr	r3, [pc, #32]	; (80084fc <HAL_CRC_MspInit+0x28>)
 80084da:	429a      	cmp	r2, r3
 80084dc:	d10b      	bne.n	80084f6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80084de:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80084f6:	b002      	add	sp, #8
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40023000 	.word	0x40023000

08008500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008500:	b510      	push	{r4, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008506:	2214      	movs	r2, #20
 8008508:	2100      	movs	r1, #0
 800850a:	a803      	add	r0, sp, #12
 800850c:	f000 f910 	bl	8008730 <memset>
  if(huart->Instance==USART2)
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <HAL_UART_MspInit+0x5c>)
 8008514:	429a      	cmp	r2, r3
 8008516:	d11f      	bne.n	8008558 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008518:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800851c:	a903      	add	r1, sp, #12
 800851e:	4810      	ldr	r0, [pc, #64]	; (8008560 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8008520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008522:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008526:	641a      	str	r2, [r3, #64]	; 0x40
 8008528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800852a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800852e:	9201      	str	r2, [sp, #4]
 8008530:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008534:	f042 0201 	orr.w	r2, r2, #1
 8008538:	631a      	str	r2, [r3, #48]	; 0x30
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	9302      	str	r3, [sp, #8]
 8008542:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008544:	230c      	movs	r3, #12
 8008546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008548:	2302      	movs	r3, #2
 800854a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800854c:	2303      	movs	r3, #3
 800854e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008550:	2307      	movs	r3, #7
 8008552:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008554:	f7fc f946 	bl	80047e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008558:	b008      	add	sp, #32
 800855a:	bd10      	pop	{r4, pc}
 800855c:	40004400 	.word	0x40004400
 8008560:	40020000 	.word	0x40020000

08008564 <NMI_Handler>:
 8008564:	4770      	bx	lr

08008566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008566:	e7fe      	b.n	8008566 <HardFault_Handler>

08008568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008568:	e7fe      	b.n	8008568 <MemManage_Handler>

0800856a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800856a:	e7fe      	b.n	800856a <BusFault_Handler>

0800856c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800856c:	e7fe      	b.n	800856c <UsageFault_Handler>

0800856e <SVC_Handler>:
 800856e:	4770      	bx	lr

08008570 <DebugMon_Handler>:
 8008570:	4770      	bx	lr

08008572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008572:	4770      	bx	lr

08008574 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008574:	f7fc b844 	b.w	8004600 <HAL_IncTick>

08008578 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	460e      	mov	r6, r1
 800857c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800857e:	460c      	mov	r4, r1
 8008580:	1ba3      	subs	r3, r4, r6
 8008582:	429d      	cmp	r5, r3
 8008584:	dc01      	bgt.n	800858a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8008586:	4628      	mov	r0, r5
 8008588:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800858a:	f3af 8000 	nop.w
 800858e:	f804 0b01 	strb.w	r0, [r4], #1
 8008592:	e7f5      	b.n	8008580 <_read+0x8>

08008594 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8008594:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <_sbrk+0x2c>)
{
 8008598:	4602      	mov	r2, r0
	if (heap_end == 0)
 800859a:	6819      	ldr	r1, [r3, #0]
 800859c:	b909      	cbnz	r1, 80085a2 <_sbrk+0xe>
		heap_end = &end;
 800859e:	4909      	ldr	r1, [pc, #36]	; (80085c4 <_sbrk+0x30>)
 80085a0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80085a2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80085a4:	4669      	mov	r1, sp
 80085a6:	4402      	add	r2, r0
 80085a8:	428a      	cmp	r2, r1
 80085aa:	d906      	bls.n	80085ba <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80085ac:	f000 f86c 	bl	8008688 <__errno>
 80085b0:	230c      	movs	r3, #12
 80085b2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80085ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80085bc:	bd08      	pop	{r3, pc}
 80085be:	bf00      	nop
 80085c0:	2000ad30 	.word	0x2000ad30
 80085c4:	2000ade8 	.word	0x2000ade8

080085c8 <_close>:

int _close(int file)
{
	return -1;
}
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	4770      	bx	lr

080085ce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80085ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80085d2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80085d4:	604b      	str	r3, [r1, #4]
}
 80085d6:	4770      	bx	lr

080085d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80085d8:	2001      	movs	r0, #1
 80085da:	4770      	bx	lr

080085dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80085dc:	2000      	movs	r0, #0
 80085de:	4770      	bx	lr

080085e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085e0:	490f      	ldr	r1, [pc, #60]	; (8008620 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80085e2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80085e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <SystemInit+0x44>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	f042 0201 	orr.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80085fa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008606:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008608:	4a07      	ldr	r2, [pc, #28]	; (8008628 <SystemInit+0x48>)
 800860a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008612:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008614:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800861a:	608b      	str	r3, [r1, #8]
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	e000ed00 	.word	0xe000ed00
 8008624:	40023800 	.word	0x40023800
 8008628:	24003010 	.word	0x24003010

0800862c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800862c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008632:	e003      	b.n	800863c <LoopCopyDataInit>

08008634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800863a:	3104      	adds	r1, #4

0800863c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800863c:	480b      	ldr	r0, [pc, #44]	; (800866c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008644:	d3f6      	bcc.n	8008634 <CopyDataInit>
  ldr  r2, =_sbss
 8008646:	4a0b      	ldr	r2, [pc, #44]	; (8008674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008648:	e002      	b.n	8008650 <LoopFillZerobss>

0800864a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800864a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800864c:	f842 3b04 	str.w	r3, [r2], #4

08008650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008650:	4b09      	ldr	r3, [pc, #36]	; (8008678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008654:	d3f9      	bcc.n	800864a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008656:	f7ff ffc3 	bl	80085e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800865a:	f000 f81b 	bl	8008694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800865e:	f7ff fe13 	bl	8008288 <main>
  bx  lr    
 8008662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008664:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8008668:	0804f140 	.word	0x0804f140
  ldr  r0, =_sdata
 800866c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008670:	20000890 	.word	0x20000890
  ldr  r2, =_sbss
 8008674:	20000890 	.word	0x20000890
  ldr  r3, = _ebss
 8008678:	2000ade8 	.word	0x2000ade8

0800867c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800867c:	e7fe      	b.n	800867c <ADC_IRQHandler>

0800867e <__aeabi_memclr>:
 800867e:	2200      	movs	r2, #0
 8008680:	f7fa bf5c 	b.w	800353c <__aeabi_memset>

08008684 <__aeabi_memcpy>:
 8008684:	f000 b849 	b.w	800871a <memcpy>

08008688 <__errno>:
 8008688:	4b01      	ldr	r3, [pc, #4]	; (8008690 <__errno+0x8>)
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000828 	.word	0x20000828

08008694 <__libc_init_array>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0d      	ldr	r6, [pc, #52]	; (80086cc <__libc_init_array+0x38>)
 8008698:	4c0d      	ldr	r4, [pc, #52]	; (80086d0 <__libc_init_array+0x3c>)
 800869a:	1ba4      	subs	r4, r4, r6
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	2500      	movs	r5, #0
 80086a0:	42a5      	cmp	r5, r4
 80086a2:	d109      	bne.n	80086b8 <__libc_init_array+0x24>
 80086a4:	4e0b      	ldr	r6, [pc, #44]	; (80086d4 <__libc_init_array+0x40>)
 80086a6:	4c0c      	ldr	r4, [pc, #48]	; (80086d8 <__libc_init_array+0x44>)
 80086a8:	f002 f818 	bl	800a6dc <_init>
 80086ac:	1ba4      	subs	r4, r4, r6
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	2500      	movs	r5, #0
 80086b2:	42a5      	cmp	r5, r4
 80086b4:	d105      	bne.n	80086c2 <__libc_init_array+0x2e>
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086bc:	4798      	blx	r3
 80086be:	3501      	adds	r5, #1
 80086c0:	e7ee      	b.n	80086a0 <__libc_init_array+0xc>
 80086c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086c6:	4798      	blx	r3
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7f2      	b.n	80086b2 <__libc_init_array+0x1e>
 80086cc:	0804f138 	.word	0x0804f138
 80086d0:	0804f138 	.word	0x0804f138
 80086d4:	0804f138 	.word	0x0804f138
 80086d8:	0804f13c 	.word	0x0804f13c

080086dc <malloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <malloc+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 b87b 	b.w	80087dc <_malloc_r>
 80086e6:	bf00      	nop
 80086e8:	20000828 	.word	0x20000828

080086ec <free>:
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <free+0xc>)
 80086ee:	4601      	mov	r1, r0
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	f000 b825 	b.w	8008740 <_free_r>
 80086f6:	bf00      	nop
 80086f8:	20000828 	.word	0x20000828

080086fc <memcmp>:
 80086fc:	b510      	push	{r4, lr}
 80086fe:	3901      	subs	r1, #1
 8008700:	4402      	add	r2, r0
 8008702:	4290      	cmp	r0, r2
 8008704:	d101      	bne.n	800870a <memcmp+0xe>
 8008706:	2000      	movs	r0, #0
 8008708:	bd10      	pop	{r4, pc}
 800870a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800870e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008712:	42a3      	cmp	r3, r4
 8008714:	d0f5      	beq.n	8008702 <memcmp+0x6>
 8008716:	1b18      	subs	r0, r3, r4
 8008718:	bd10      	pop	{r4, pc}

0800871a <memcpy>:
 800871a:	b510      	push	{r4, lr}
 800871c:	1e43      	subs	r3, r0, #1
 800871e:	440a      	add	r2, r1
 8008720:	4291      	cmp	r1, r2
 8008722:	d100      	bne.n	8008726 <memcpy+0xc>
 8008724:	bd10      	pop	{r4, pc}
 8008726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800872a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800872e:	e7f7      	b.n	8008720 <memcpy+0x6>

08008730 <memset>:
 8008730:	4402      	add	r2, r0
 8008732:	4603      	mov	r3, r0
 8008734:	4293      	cmp	r3, r2
 8008736:	d100      	bne.n	800873a <memset+0xa>
 8008738:	4770      	bx	lr
 800873a:	f803 1b01 	strb.w	r1, [r3], #1
 800873e:	e7f9      	b.n	8008734 <memset+0x4>

08008740 <_free_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	2900      	cmp	r1, #0
 8008746:	d045      	beq.n	80087d4 <_free_r+0x94>
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f0c      	subs	r4, r1, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	18e4      	addlt	r4, r4, r3
 8008754:	f000 fbde 	bl	8008f14 <__malloc_lock>
 8008758:	4a1f      	ldr	r2, [pc, #124]	; (80087d8 <_free_r+0x98>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	4610      	mov	r0, r2
 800875e:	b933      	cbnz	r3, 800876e <_free_r+0x2e>
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6014      	str	r4, [r2, #0]
 8008764:	4628      	mov	r0, r5
 8008766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800876a:	f000 bbd4 	b.w	8008f16 <__malloc_unlock>
 800876e:	42a3      	cmp	r3, r4
 8008770:	d90c      	bls.n	800878c <_free_r+0x4c>
 8008772:	6821      	ldr	r1, [r4, #0]
 8008774:	1862      	adds	r2, r4, r1
 8008776:	4293      	cmp	r3, r2
 8008778:	bf04      	itt	eq
 800877a:	681a      	ldreq	r2, [r3, #0]
 800877c:	685b      	ldreq	r3, [r3, #4]
 800877e:	6063      	str	r3, [r4, #4]
 8008780:	bf04      	itt	eq
 8008782:	1852      	addeq	r2, r2, r1
 8008784:	6022      	streq	r2, [r4, #0]
 8008786:	6004      	str	r4, [r0, #0]
 8008788:	e7ec      	b.n	8008764 <_free_r+0x24>
 800878a:	4613      	mov	r3, r2
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	b10a      	cbz	r2, 8008794 <_free_r+0x54>
 8008790:	42a2      	cmp	r2, r4
 8008792:	d9fa      	bls.n	800878a <_free_r+0x4a>
 8008794:	6819      	ldr	r1, [r3, #0]
 8008796:	1858      	adds	r0, r3, r1
 8008798:	42a0      	cmp	r0, r4
 800879a:	d10b      	bne.n	80087b4 <_free_r+0x74>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	4401      	add	r1, r0
 80087a0:	1858      	adds	r0, r3, r1
 80087a2:	4282      	cmp	r2, r0
 80087a4:	6019      	str	r1, [r3, #0]
 80087a6:	d1dd      	bne.n	8008764 <_free_r+0x24>
 80087a8:	6810      	ldr	r0, [r2, #0]
 80087aa:	6852      	ldr	r2, [r2, #4]
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	4401      	add	r1, r0
 80087b0:	6019      	str	r1, [r3, #0]
 80087b2:	e7d7      	b.n	8008764 <_free_r+0x24>
 80087b4:	d902      	bls.n	80087bc <_free_r+0x7c>
 80087b6:	230c      	movs	r3, #12
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	e7d3      	b.n	8008764 <_free_r+0x24>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	1821      	adds	r1, r4, r0
 80087c0:	428a      	cmp	r2, r1
 80087c2:	bf04      	itt	eq
 80087c4:	6811      	ldreq	r1, [r2, #0]
 80087c6:	6852      	ldreq	r2, [r2, #4]
 80087c8:	6062      	str	r2, [r4, #4]
 80087ca:	bf04      	itt	eq
 80087cc:	1809      	addeq	r1, r1, r0
 80087ce:	6021      	streq	r1, [r4, #0]
 80087d0:	605c      	str	r4, [r3, #4]
 80087d2:	e7c7      	b.n	8008764 <_free_r+0x24>
 80087d4:	bd38      	pop	{r3, r4, r5, pc}
 80087d6:	bf00      	nop
 80087d8:	2000ad34 	.word	0x2000ad34

080087dc <_malloc_r>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	1ccd      	adds	r5, r1, #3
 80087e0:	f025 0503 	bic.w	r5, r5, #3
 80087e4:	3508      	adds	r5, #8
 80087e6:	2d0c      	cmp	r5, #12
 80087e8:	bf38      	it	cc
 80087ea:	250c      	movcc	r5, #12
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	4606      	mov	r6, r0
 80087f0:	db01      	blt.n	80087f6 <_malloc_r+0x1a>
 80087f2:	42a9      	cmp	r1, r5
 80087f4:	d903      	bls.n	80087fe <_malloc_r+0x22>
 80087f6:	230c      	movs	r3, #12
 80087f8:	6033      	str	r3, [r6, #0]
 80087fa:	2000      	movs	r0, #0
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
 80087fe:	f000 fb89 	bl	8008f14 <__malloc_lock>
 8008802:	4a23      	ldr	r2, [pc, #140]	; (8008890 <_malloc_r+0xb4>)
 8008804:	6814      	ldr	r4, [r2, #0]
 8008806:	4621      	mov	r1, r4
 8008808:	b991      	cbnz	r1, 8008830 <_malloc_r+0x54>
 800880a:	4c22      	ldr	r4, [pc, #136]	; (8008894 <_malloc_r+0xb8>)
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	b91b      	cbnz	r3, 8008818 <_malloc_r+0x3c>
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f8bd 	bl	8008990 <_sbrk_r>
 8008816:	6020      	str	r0, [r4, #0]
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f000 f8b8 	bl	8008990 <_sbrk_r>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d126      	bne.n	8008872 <_malloc_r+0x96>
 8008824:	230c      	movs	r3, #12
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 fb74 	bl	8008f16 <__malloc_unlock>
 800882e:	e7e4      	b.n	80087fa <_malloc_r+0x1e>
 8008830:	680b      	ldr	r3, [r1, #0]
 8008832:	1b5b      	subs	r3, r3, r5
 8008834:	d41a      	bmi.n	800886c <_malloc_r+0x90>
 8008836:	2b0b      	cmp	r3, #11
 8008838:	d90f      	bls.n	800885a <_malloc_r+0x7e>
 800883a:	600b      	str	r3, [r1, #0]
 800883c:	50cd      	str	r5, [r1, r3]
 800883e:	18cc      	adds	r4, r1, r3
 8008840:	4630      	mov	r0, r6
 8008842:	f000 fb68 	bl	8008f16 <__malloc_unlock>
 8008846:	f104 000b 	add.w	r0, r4, #11
 800884a:	1d23      	adds	r3, r4, #4
 800884c:	f020 0007 	bic.w	r0, r0, #7
 8008850:	1ac3      	subs	r3, r0, r3
 8008852:	d01b      	beq.n	800888c <_malloc_r+0xb0>
 8008854:	425a      	negs	r2, r3
 8008856:	50e2      	str	r2, [r4, r3]
 8008858:	bd70      	pop	{r4, r5, r6, pc}
 800885a:	428c      	cmp	r4, r1
 800885c:	bf0d      	iteet	eq
 800885e:	6863      	ldreq	r3, [r4, #4]
 8008860:	684b      	ldrne	r3, [r1, #4]
 8008862:	6063      	strne	r3, [r4, #4]
 8008864:	6013      	streq	r3, [r2, #0]
 8008866:	bf18      	it	ne
 8008868:	460c      	movne	r4, r1
 800886a:	e7e9      	b.n	8008840 <_malloc_r+0x64>
 800886c:	460c      	mov	r4, r1
 800886e:	6849      	ldr	r1, [r1, #4]
 8008870:	e7ca      	b.n	8008808 <_malloc_r+0x2c>
 8008872:	1cc4      	adds	r4, r0, #3
 8008874:	f024 0403 	bic.w	r4, r4, #3
 8008878:	42a0      	cmp	r0, r4
 800887a:	d005      	beq.n	8008888 <_malloc_r+0xac>
 800887c:	1a21      	subs	r1, r4, r0
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f886 	bl	8008990 <_sbrk_r>
 8008884:	3001      	adds	r0, #1
 8008886:	d0cd      	beq.n	8008824 <_malloc_r+0x48>
 8008888:	6025      	str	r5, [r4, #0]
 800888a:	e7d9      	b.n	8008840 <_malloc_r+0x64>
 800888c:	bd70      	pop	{r4, r5, r6, pc}
 800888e:	bf00      	nop
 8008890:	2000ad34 	.word	0x2000ad34
 8008894:	2000ad38 	.word	0x2000ad38

08008898 <iprintf>:
 8008898:	b40f      	push	{r0, r1, r2, r3}
 800889a:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <iprintf+0x2c>)
 800889c:	b513      	push	{r0, r1, r4, lr}
 800889e:	681c      	ldr	r4, [r3, #0]
 80088a0:	b124      	cbz	r4, 80088ac <iprintf+0x14>
 80088a2:	69a3      	ldr	r3, [r4, #24]
 80088a4:	b913      	cbnz	r3, 80088ac <iprintf+0x14>
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fa46 	bl	8008d38 <__sinit>
 80088ac:	ab05      	add	r3, sp, #20
 80088ae:	9a04      	ldr	r2, [sp, #16]
 80088b0:	68a1      	ldr	r1, [r4, #8]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fb59 	bl	8008f6c <_vfiprintf_r>
 80088ba:	b002      	add	sp, #8
 80088bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c0:	b004      	add	sp, #16
 80088c2:	4770      	bx	lr
 80088c4:	20000828 	.word	0x20000828

080088c8 <_puts_r>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	460e      	mov	r6, r1
 80088cc:	4605      	mov	r5, r0
 80088ce:	b118      	cbz	r0, 80088d8 <_puts_r+0x10>
 80088d0:	6983      	ldr	r3, [r0, #24]
 80088d2:	b90b      	cbnz	r3, 80088d8 <_puts_r+0x10>
 80088d4:	f000 fa30 	bl	8008d38 <__sinit>
 80088d8:	69ab      	ldr	r3, [r5, #24]
 80088da:	68ac      	ldr	r4, [r5, #8]
 80088dc:	b913      	cbnz	r3, 80088e4 <_puts_r+0x1c>
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 fa2a 	bl	8008d38 <__sinit>
 80088e4:	4b23      	ldr	r3, [pc, #140]	; (8008974 <_puts_r+0xac>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d117      	bne.n	800891a <_puts_r+0x52>
 80088ea:	686c      	ldr	r4, [r5, #4]
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	071b      	lsls	r3, r3, #28
 80088f0:	d51d      	bpl.n	800892e <_puts_r+0x66>
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	b1db      	cbz	r3, 800892e <_puts_r+0x66>
 80088f6:	3e01      	subs	r6, #1
 80088f8:	68a3      	ldr	r3, [r4, #8]
 80088fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088fe:	3b01      	subs	r3, #1
 8008900:	60a3      	str	r3, [r4, #8]
 8008902:	b9e9      	cbnz	r1, 8008940 <_puts_r+0x78>
 8008904:	2b00      	cmp	r3, #0
 8008906:	da2e      	bge.n	8008966 <_puts_r+0x9e>
 8008908:	4622      	mov	r2, r4
 800890a:	210a      	movs	r1, #10
 800890c:	4628      	mov	r0, r5
 800890e:	f000 f861 	bl	80089d4 <__swbuf_r>
 8008912:	3001      	adds	r0, #1
 8008914:	d011      	beq.n	800893a <_puts_r+0x72>
 8008916:	200a      	movs	r0, #10
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	4b17      	ldr	r3, [pc, #92]	; (8008978 <_puts_r+0xb0>)
 800891c:	429c      	cmp	r4, r3
 800891e:	d101      	bne.n	8008924 <_puts_r+0x5c>
 8008920:	68ac      	ldr	r4, [r5, #8]
 8008922:	e7e3      	b.n	80088ec <_puts_r+0x24>
 8008924:	4b15      	ldr	r3, [pc, #84]	; (800897c <_puts_r+0xb4>)
 8008926:	429c      	cmp	r4, r3
 8008928:	bf08      	it	eq
 800892a:	68ec      	ldreq	r4, [r5, #12]
 800892c:	e7de      	b.n	80088ec <_puts_r+0x24>
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f000 f8a1 	bl	8008a78 <__swsetup_r>
 8008936:	2800      	cmp	r0, #0
 8008938:	d0dd      	beq.n	80088f6 <_puts_r+0x2e>
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	2b00      	cmp	r3, #0
 8008942:	da04      	bge.n	800894e <_puts_r+0x86>
 8008944:	69a2      	ldr	r2, [r4, #24]
 8008946:	4293      	cmp	r3, r2
 8008948:	db06      	blt.n	8008958 <_puts_r+0x90>
 800894a:	290a      	cmp	r1, #10
 800894c:	d004      	beq.n	8008958 <_puts_r+0x90>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	7019      	strb	r1, [r3, #0]
 8008956:	e7cf      	b.n	80088f8 <_puts_r+0x30>
 8008958:	4622      	mov	r2, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f83a 	bl	80089d4 <__swbuf_r>
 8008960:	3001      	adds	r0, #1
 8008962:	d1c9      	bne.n	80088f8 <_puts_r+0x30>
 8008964:	e7e9      	b.n	800893a <_puts_r+0x72>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	200a      	movs	r0, #10
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	7018      	strb	r0, [r3, #0]
 8008970:	bd70      	pop	{r4, r5, r6, pc}
 8008972:	bf00      	nop
 8008974:	0804f070 	.word	0x0804f070
 8008978:	0804f090 	.word	0x0804f090
 800897c:	0804f050 	.word	0x0804f050

08008980 <puts>:
 8008980:	4b02      	ldr	r3, [pc, #8]	; (800898c <puts+0xc>)
 8008982:	4601      	mov	r1, r0
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	f7ff bf9f 	b.w	80088c8 <_puts_r>
 800898a:	bf00      	nop
 800898c:	20000828 	.word	0x20000828

08008990 <_sbrk_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4c06      	ldr	r4, [pc, #24]	; (80089ac <_sbrk_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4605      	mov	r5, r0
 8008998:	4608      	mov	r0, r1
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	f7ff fdfa 	bl	8008594 <_sbrk>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_sbrk_r+0x1a>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_sbrk_r+0x1a>
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	2000ade4 	.word	0x2000ade4

080089b0 <strncmp>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	b16a      	cbz	r2, 80089d0 <strncmp+0x20>
 80089b4:	3901      	subs	r1, #1
 80089b6:	1884      	adds	r4, r0, r2
 80089b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80089bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d103      	bne.n	80089cc <strncmp+0x1c>
 80089c4:	42a0      	cmp	r0, r4
 80089c6:	d001      	beq.n	80089cc <strncmp+0x1c>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1f5      	bne.n	80089b8 <strncmp+0x8>
 80089cc:	1a98      	subs	r0, r3, r2
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	4610      	mov	r0, r2
 80089d2:	bd10      	pop	{r4, pc}

080089d4 <__swbuf_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	460e      	mov	r6, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	4605      	mov	r5, r0
 80089dc:	b118      	cbz	r0, 80089e6 <__swbuf_r+0x12>
 80089de:	6983      	ldr	r3, [r0, #24]
 80089e0:	b90b      	cbnz	r3, 80089e6 <__swbuf_r+0x12>
 80089e2:	f000 f9a9 	bl	8008d38 <__sinit>
 80089e6:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <__swbuf_r+0x98>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d12a      	bne.n	8008a42 <__swbuf_r+0x6e>
 80089ec:	686c      	ldr	r4, [r5, #4]
 80089ee:	69a3      	ldr	r3, [r4, #24]
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	071a      	lsls	r2, r3, #28
 80089f6:	d52e      	bpl.n	8008a56 <__swbuf_r+0x82>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	b363      	cbz	r3, 8008a56 <__swbuf_r+0x82>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1ac0      	subs	r0, r0, r3
 8008a02:	6963      	ldr	r3, [r4, #20]
 8008a04:	b2f6      	uxtb	r6, r6
 8008a06:	4298      	cmp	r0, r3
 8008a08:	4637      	mov	r7, r6
 8008a0a:	db04      	blt.n	8008a16 <__swbuf_r+0x42>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 f928 	bl	8008c64 <_fflush_r>
 8008a14:	bb28      	cbnz	r0, 8008a62 <__swbuf_r+0x8e>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	60a3      	str	r3, [r4, #8]
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	701e      	strb	r6, [r3, #0]
 8008a24:	6963      	ldr	r3, [r4, #20]
 8008a26:	3001      	adds	r0, #1
 8008a28:	4298      	cmp	r0, r3
 8008a2a:	d004      	beq.n	8008a36 <__swbuf_r+0x62>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d519      	bpl.n	8008a66 <__swbuf_r+0x92>
 8008a32:	2e0a      	cmp	r6, #10
 8008a34:	d117      	bne.n	8008a66 <__swbuf_r+0x92>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f913 	bl	8008c64 <_fflush_r>
 8008a3e:	b190      	cbz	r0, 8008a66 <__swbuf_r+0x92>
 8008a40:	e00f      	b.n	8008a62 <__swbuf_r+0x8e>
 8008a42:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <__swbuf_r+0x9c>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d101      	bne.n	8008a4c <__swbuf_r+0x78>
 8008a48:	68ac      	ldr	r4, [r5, #8]
 8008a4a:	e7d0      	b.n	80089ee <__swbuf_r+0x1a>
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__swbuf_r+0xa0>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	bf08      	it	eq
 8008a52:	68ec      	ldreq	r4, [r5, #12]
 8008a54:	e7cb      	b.n	80089ee <__swbuf_r+0x1a>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f80d 	bl	8008a78 <__swsetup_r>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0cc      	beq.n	80089fc <__swbuf_r+0x28>
 8008a62:	f04f 37ff 	mov.w	r7, #4294967295
 8008a66:	4638      	mov	r0, r7
 8008a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	0804f070 	.word	0x0804f070
 8008a70:	0804f090 	.word	0x0804f090
 8008a74:	0804f050 	.word	0x0804f050

08008a78 <__swsetup_r>:
 8008a78:	4b32      	ldr	r3, [pc, #200]	; (8008b44 <__swsetup_r+0xcc>)
 8008a7a:	b570      	push	{r4, r5, r6, lr}
 8008a7c:	681d      	ldr	r5, [r3, #0]
 8008a7e:	4606      	mov	r6, r0
 8008a80:	460c      	mov	r4, r1
 8008a82:	b125      	cbz	r5, 8008a8e <__swsetup_r+0x16>
 8008a84:	69ab      	ldr	r3, [r5, #24]
 8008a86:	b913      	cbnz	r3, 8008a8e <__swsetup_r+0x16>
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 f955 	bl	8008d38 <__sinit>
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <__swsetup_r+0xd0>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	d10f      	bne.n	8008ab4 <__swsetup_r+0x3c>
 8008a94:	686c      	ldr	r4, [r5, #4]
 8008a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	0715      	lsls	r5, r2, #28
 8008a9e:	d42c      	bmi.n	8008afa <__swsetup_r+0x82>
 8008aa0:	06d0      	lsls	r0, r2, #27
 8008aa2:	d411      	bmi.n	8008ac8 <__swsetup_r+0x50>
 8008aa4:	2209      	movs	r2, #9
 8008aa6:	6032      	str	r2, [r6, #0]
 8008aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <__swsetup_r+0xd4>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d101      	bne.n	8008abe <__swsetup_r+0x46>
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	e7eb      	b.n	8008a96 <__swsetup_r+0x1e>
 8008abe:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <__swsetup_r+0xd8>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	bf08      	it	eq
 8008ac4:	68ec      	ldreq	r4, [r5, #12]
 8008ac6:	e7e6      	b.n	8008a96 <__swsetup_r+0x1e>
 8008ac8:	0751      	lsls	r1, r2, #29
 8008aca:	d512      	bpl.n	8008af2 <__swsetup_r+0x7a>
 8008acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ace:	b141      	cbz	r1, 8008ae2 <__swsetup_r+0x6a>
 8008ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	d002      	beq.n	8008ade <__swsetup_r+0x66>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff fe31 	bl	8008740 <_free_r>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	2300      	movs	r3, #0
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f043 0308 	orr.w	r3, r3, #8
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	b94b      	cbnz	r3, 8008b12 <__swsetup_r+0x9a>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b08:	d003      	beq.n	8008b12 <__swsetup_r+0x9a>
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 f9c1 	bl	8008e94 <__smakebuf_r>
 8008b12:	89a2      	ldrh	r2, [r4, #12]
 8008b14:	f012 0301 	ands.w	r3, r2, #1
 8008b18:	d00c      	beq.n	8008b34 <__swsetup_r+0xbc>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6963      	ldr	r3, [r4, #20]
 8008b20:	425b      	negs	r3, r3
 8008b22:	61a3      	str	r3, [r4, #24]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	b953      	cbnz	r3, 8008b3e <__swsetup_r+0xc6>
 8008b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008b30:	d1ba      	bne.n	8008aa8 <__swsetup_r+0x30>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	0792      	lsls	r2, r2, #30
 8008b36:	bf58      	it	pl
 8008b38:	6963      	ldrpl	r3, [r4, #20]
 8008b3a:	60a3      	str	r3, [r4, #8]
 8008b3c:	e7f2      	b.n	8008b24 <__swsetup_r+0xac>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e7f7      	b.n	8008b32 <__swsetup_r+0xba>
 8008b42:	bf00      	nop
 8008b44:	20000828 	.word	0x20000828
 8008b48:	0804f070 	.word	0x0804f070
 8008b4c:	0804f090 	.word	0x0804f090
 8008b50:	0804f050 	.word	0x0804f050

08008b54 <__sflush_r>:
 8008b54:	898a      	ldrh	r2, [r1, #12]
 8008b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	0710      	lsls	r0, r2, #28
 8008b5e:	460c      	mov	r4, r1
 8008b60:	d45a      	bmi.n	8008c18 <__sflush_r+0xc4>
 8008b62:	684b      	ldr	r3, [r1, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dc05      	bgt.n	8008b74 <__sflush_r+0x20>
 8008b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dc02      	bgt.n	8008b74 <__sflush_r+0x20>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d0f9      	beq.n	8008b6e <__sflush_r+0x1a>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b80:	682f      	ldr	r7, [r5, #0]
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	d033      	beq.n	8008bee <__sflush_r+0x9a>
 8008b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	075a      	lsls	r2, r3, #29
 8008b8c:	d505      	bpl.n	8008b9a <__sflush_r+0x46>
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	1ac0      	subs	r0, r0, r3
 8008b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b94:	b10b      	cbz	r3, 8008b9a <__sflush_r+0x46>
 8008b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b98:	1ac0      	subs	r0, r0, r3
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba0:	6a21      	ldr	r1, [r4, #32]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	47b0      	blx	r6
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	d106      	bne.n	8008bba <__sflush_r+0x66>
 8008bac:	6829      	ldr	r1, [r5, #0]
 8008bae:	291d      	cmp	r1, #29
 8008bb0:	d84b      	bhi.n	8008c4a <__sflush_r+0xf6>
 8008bb2:	4a2b      	ldr	r2, [pc, #172]	; (8008c60 <__sflush_r+0x10c>)
 8008bb4:	40ca      	lsrs	r2, r1
 8008bb6:	07d6      	lsls	r6, r2, #31
 8008bb8:	d547      	bpl.n	8008c4a <__sflush_r+0xf6>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	6062      	str	r2, [r4, #4]
 8008bbe:	04d9      	lsls	r1, r3, #19
 8008bc0:	6922      	ldr	r2, [r4, #16]
 8008bc2:	6022      	str	r2, [r4, #0]
 8008bc4:	d504      	bpl.n	8008bd0 <__sflush_r+0x7c>
 8008bc6:	1c42      	adds	r2, r0, #1
 8008bc8:	d101      	bne.n	8008bce <__sflush_r+0x7a>
 8008bca:	682b      	ldr	r3, [r5, #0]
 8008bcc:	b903      	cbnz	r3, 8008bd0 <__sflush_r+0x7c>
 8008bce:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd2:	602f      	str	r7, [r5, #0]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d0ca      	beq.n	8008b6e <__sflush_r+0x1a>
 8008bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	d002      	beq.n	8008be6 <__sflush_r+0x92>
 8008be0:	4628      	mov	r0, r5
 8008be2:	f7ff fdad 	bl	8008740 <_free_r>
 8008be6:	2000      	movs	r0, #0
 8008be8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bee:	6a21      	ldr	r1, [r4, #32]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	47b0      	blx	r6
 8008bf6:	1c41      	adds	r1, r0, #1
 8008bf8:	d1c6      	bne.n	8008b88 <__sflush_r+0x34>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0c3      	beq.n	8008b88 <__sflush_r+0x34>
 8008c00:	2b1d      	cmp	r3, #29
 8008c02:	d001      	beq.n	8008c08 <__sflush_r+0xb4>
 8008c04:	2b16      	cmp	r3, #22
 8008c06:	d101      	bne.n	8008c0c <__sflush_r+0xb8>
 8008c08:	602f      	str	r7, [r5, #0]
 8008c0a:	e7b0      	b.n	8008b6e <__sflush_r+0x1a>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	690f      	ldr	r7, [r1, #16]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d0a7      	beq.n	8008b6e <__sflush_r+0x1a>
 8008c1e:	0793      	lsls	r3, r2, #30
 8008c20:	680e      	ldr	r6, [r1, #0]
 8008c22:	bf08      	it	eq
 8008c24:	694b      	ldreq	r3, [r1, #20]
 8008c26:	600f      	str	r7, [r1, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	eba6 0807 	sub.w	r8, r6, r7
 8008c30:	608b      	str	r3, [r1, #8]
 8008c32:	f1b8 0f00 	cmp.w	r8, #0
 8008c36:	dd9a      	ble.n	8008b6e <__sflush_r+0x1a>
 8008c38:	4643      	mov	r3, r8
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	6a21      	ldr	r1, [r4, #32]
 8008c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b0      	blx	r6
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dc07      	bgt.n	8008c58 <__sflush_r+0x104>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c58:	4407      	add	r7, r0
 8008c5a:	eba8 0800 	sub.w	r8, r8, r0
 8008c5e:	e7e8      	b.n	8008c32 <__sflush_r+0xde>
 8008c60:	20400001 	.word	0x20400001

08008c64 <_fflush_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	690b      	ldr	r3, [r1, #16]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	b1db      	cbz	r3, 8008ca6 <_fflush_r+0x42>
 8008c6e:	b118      	cbz	r0, 8008c78 <_fflush_r+0x14>
 8008c70:	6983      	ldr	r3, [r0, #24]
 8008c72:	b90b      	cbnz	r3, 8008c78 <_fflush_r+0x14>
 8008c74:	f000 f860 	bl	8008d38 <__sinit>
 8008c78:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <_fflush_r+0x48>)
 8008c7a:	429c      	cmp	r4, r3
 8008c7c:	d109      	bne.n	8008c92 <_fflush_r+0x2e>
 8008c7e:	686c      	ldr	r4, [r5, #4]
 8008c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c84:	b17b      	cbz	r3, 8008ca6 <_fflush_r+0x42>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8e:	f7ff bf61 	b.w	8008b54 <__sflush_r>
 8008c92:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <_fflush_r+0x4c>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	d101      	bne.n	8008c9c <_fflush_r+0x38>
 8008c98:	68ac      	ldr	r4, [r5, #8]
 8008c9a:	e7f1      	b.n	8008c80 <_fflush_r+0x1c>
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <_fflush_r+0x50>)
 8008c9e:	429c      	cmp	r4, r3
 8008ca0:	bf08      	it	eq
 8008ca2:	68ec      	ldreq	r4, [r5, #12]
 8008ca4:	e7ec      	b.n	8008c80 <_fflush_r+0x1c>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	0804f070 	.word	0x0804f070
 8008cb0:	0804f090 	.word	0x0804f090
 8008cb4:	0804f050 	.word	0x0804f050

08008cb8 <_cleanup_r>:
 8008cb8:	4901      	ldr	r1, [pc, #4]	; (8008cc0 <_cleanup_r+0x8>)
 8008cba:	f000 b8a9 	b.w	8008e10 <_fwalk_reent>
 8008cbe:	bf00      	nop
 8008cc0:	08008c65 	.word	0x08008c65

08008cc4 <std.isra.0>:
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	4604      	mov	r4, r0
 8008cca:	6003      	str	r3, [r0, #0]
 8008ccc:	6043      	str	r3, [r0, #4]
 8008cce:	6083      	str	r3, [r0, #8]
 8008cd0:	8181      	strh	r1, [r0, #12]
 8008cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cd4:	81c2      	strh	r2, [r0, #14]
 8008cd6:	6103      	str	r3, [r0, #16]
 8008cd8:	6143      	str	r3, [r0, #20]
 8008cda:	6183      	str	r3, [r0, #24]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	2208      	movs	r2, #8
 8008ce0:	305c      	adds	r0, #92	; 0x5c
 8008ce2:	f7ff fd25 	bl	8008730 <memset>
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <std.isra.0+0x38>)
 8008ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <std.isra.0+0x3c>)
 8008cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <std.isra.0+0x40>)
 8008cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std.isra.0+0x44>)
 8008cf4:	6224      	str	r4, [r4, #32]
 8008cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	bf00      	nop
 8008cfc:	080094c5 	.word	0x080094c5
 8008d00:	080094e7 	.word	0x080094e7
 8008d04:	0800951f 	.word	0x0800951f
 8008d08:	08009543 	.word	0x08009543

08008d0c <__sfmoreglue>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	1e4a      	subs	r2, r1, #1
 8008d10:	2568      	movs	r5, #104	; 0x68
 8008d12:	4355      	muls	r5, r2
 8008d14:	460e      	mov	r6, r1
 8008d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d1a:	f7ff fd5f 	bl	80087dc <_malloc_r>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b140      	cbz	r0, 8008d34 <__sfmoreglue+0x28>
 8008d22:	2100      	movs	r1, #0
 8008d24:	e880 0042 	stmia.w	r0, {r1, r6}
 8008d28:	300c      	adds	r0, #12
 8008d2a:	60a0      	str	r0, [r4, #8]
 8008d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d30:	f7ff fcfe 	bl	8008730 <memset>
 8008d34:	4620      	mov	r0, r4
 8008d36:	bd70      	pop	{r4, r5, r6, pc}

08008d38 <__sinit>:
 8008d38:	6983      	ldr	r3, [r0, #24]
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	bb33      	cbnz	r3, 8008d8e <__sinit+0x56>
 8008d40:	6483      	str	r3, [r0, #72]	; 0x48
 8008d42:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008d44:	6503      	str	r3, [r0, #80]	; 0x50
 8008d46:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <__sinit+0x58>)
 8008d48:	4a12      	ldr	r2, [pc, #72]	; (8008d94 <__sinit+0x5c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6282      	str	r2, [r0, #40]	; 0x28
 8008d4e:	4298      	cmp	r0, r3
 8008d50:	bf04      	itt	eq
 8008d52:	2301      	moveq	r3, #1
 8008d54:	6183      	streq	r3, [r0, #24]
 8008d56:	f000 f81f 	bl	8008d98 <__sfp>
 8008d5a:	6060      	str	r0, [r4, #4]
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 f81b 	bl	8008d98 <__sfp>
 8008d62:	60a0      	str	r0, [r4, #8]
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 f817 	bl	8008d98 <__sfp>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	60e0      	str	r0, [r4, #12]
 8008d6e:	2104      	movs	r1, #4
 8008d70:	6860      	ldr	r0, [r4, #4]
 8008d72:	f7ff ffa7 	bl	8008cc4 <std.isra.0>
 8008d76:	2201      	movs	r2, #1
 8008d78:	2109      	movs	r1, #9
 8008d7a:	68a0      	ldr	r0, [r4, #8]
 8008d7c:	f7ff ffa2 	bl	8008cc4 <std.isra.0>
 8008d80:	2202      	movs	r2, #2
 8008d82:	2112      	movs	r1, #18
 8008d84:	68e0      	ldr	r0, [r4, #12]
 8008d86:	f7ff ff9d 	bl	8008cc4 <std.isra.0>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	61a3      	str	r3, [r4, #24]
 8008d8e:	bd10      	pop	{r4, pc}
 8008d90:	0804f04c 	.word	0x0804f04c
 8008d94:	08008cb9 	.word	0x08008cb9

08008d98 <__sfp>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	4b1c      	ldr	r3, [pc, #112]	; (8008e0c <__sfp+0x74>)
 8008d9c:	681e      	ldr	r6, [r3, #0]
 8008d9e:	69b3      	ldr	r3, [r6, #24]
 8008da0:	4607      	mov	r7, r0
 8008da2:	b913      	cbnz	r3, 8008daa <__sfp+0x12>
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff ffc7 	bl	8008d38 <__sinit>
 8008daa:	3648      	adds	r6, #72	; 0x48
 8008dac:	68b4      	ldr	r4, [r6, #8]
 8008dae:	6873      	ldr	r3, [r6, #4]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	d503      	bpl.n	8008dbc <__sfp+0x24>
 8008db4:	6833      	ldr	r3, [r6, #0]
 8008db6:	b133      	cbz	r3, 8008dc6 <__sfp+0x2e>
 8008db8:	6836      	ldr	r6, [r6, #0]
 8008dba:	e7f7      	b.n	8008dac <__sfp+0x14>
 8008dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dc0:	b16d      	cbz	r5, 8008dde <__sfp+0x46>
 8008dc2:	3468      	adds	r4, #104	; 0x68
 8008dc4:	e7f4      	b.n	8008db0 <__sfp+0x18>
 8008dc6:	2104      	movs	r1, #4
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f7ff ff9f 	bl	8008d0c <__sfmoreglue>
 8008dce:	6030      	str	r0, [r6, #0]
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1f1      	bne.n	8008db8 <__sfp+0x20>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4620      	mov	r0, r4
 8008ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008de2:	81e3      	strh	r3, [r4, #14]
 8008de4:	2301      	movs	r3, #1
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	6665      	str	r5, [r4, #100]	; 0x64
 8008dea:	6025      	str	r5, [r4, #0]
 8008dec:	60a5      	str	r5, [r4, #8]
 8008dee:	6065      	str	r5, [r4, #4]
 8008df0:	6125      	str	r5, [r4, #16]
 8008df2:	6165      	str	r5, [r4, #20]
 8008df4:	61a5      	str	r5, [r4, #24]
 8008df6:	2208      	movs	r2, #8
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dfe:	f7ff fc97 	bl	8008730 <memset>
 8008e02:	6365      	str	r5, [r4, #52]	; 0x34
 8008e04:	63a5      	str	r5, [r4, #56]	; 0x38
 8008e06:	64a5      	str	r5, [r4, #72]	; 0x48
 8008e08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008e0a:	e7e6      	b.n	8008dda <__sfp+0x42>
 8008e0c:	0804f04c 	.word	0x0804f04c

08008e10 <_fwalk_reent>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	4680      	mov	r8, r0
 8008e16:	4689      	mov	r9, r1
 8008e18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	b914      	cbnz	r4, 8008e26 <_fwalk_reent+0x16>
 8008e20:	4630      	mov	r0, r6
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	68a5      	ldr	r5, [r4, #8]
 8008e28:	6867      	ldr	r7, [r4, #4]
 8008e2a:	3f01      	subs	r7, #1
 8008e2c:	d501      	bpl.n	8008e32 <_fwalk_reent+0x22>
 8008e2e:	6824      	ldr	r4, [r4, #0]
 8008e30:	e7f5      	b.n	8008e1e <_fwalk_reent+0xe>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d907      	bls.n	8008e48 <_fwalk_reent+0x38>
 8008e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	d003      	beq.n	8008e48 <_fwalk_reent+0x38>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4640      	mov	r0, r8
 8008e44:	47c8      	blx	r9
 8008e46:	4306      	orrs	r6, r0
 8008e48:	3568      	adds	r5, #104	; 0x68
 8008e4a:	e7ee      	b.n	8008e2a <_fwalk_reent+0x1a>

08008e4c <__swhatbuf_r>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	460e      	mov	r6, r1
 8008e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e54:	2900      	cmp	r1, #0
 8008e56:	b090      	sub	sp, #64	; 0x40
 8008e58:	4614      	mov	r4, r2
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	da07      	bge.n	8008e6e <__swhatbuf_r+0x22>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	89b3      	ldrh	r3, [r6, #12]
 8008e64:	061a      	lsls	r2, r3, #24
 8008e66:	d410      	bmi.n	8008e8a <__swhatbuf_r+0x3e>
 8008e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e6c:	e00e      	b.n	8008e8c <__swhatbuf_r+0x40>
 8008e6e:	aa01      	add	r2, sp, #4
 8008e70:	f000 fb8e 	bl	8009590 <_fstat_r>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	dbf2      	blt.n	8008e5e <__swhatbuf_r+0x12>
 8008e78:	9a02      	ldr	r2, [sp, #8]
 8008e7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e82:	425a      	negs	r2, r3
 8008e84:	415a      	adcs	r2, r3
 8008e86:	602a      	str	r2, [r5, #0]
 8008e88:	e7ee      	b.n	8008e68 <__swhatbuf_r+0x1c>
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	b010      	add	sp, #64	; 0x40
 8008e92:	bd70      	pop	{r4, r5, r6, pc}

08008e94 <__smakebuf_r>:
 8008e94:	898b      	ldrh	r3, [r1, #12]
 8008e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e98:	079d      	lsls	r5, r3, #30
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	d507      	bpl.n	8008eb0 <__smakebuf_r+0x1c>
 8008ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	6123      	str	r3, [r4, #16]
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	6163      	str	r3, [r4, #20]
 8008eac:	b002      	add	sp, #8
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	ab01      	add	r3, sp, #4
 8008eb2:	466a      	mov	r2, sp
 8008eb4:	f7ff ffca 	bl	8008e4c <__swhatbuf_r>
 8008eb8:	9900      	ldr	r1, [sp, #0]
 8008eba:	4605      	mov	r5, r0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff fc8d 	bl	80087dc <_malloc_r>
 8008ec2:	b948      	cbnz	r0, 8008ed8 <__smakebuf_r+0x44>
 8008ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec8:	059a      	lsls	r2, r3, #22
 8008eca:	d4ef      	bmi.n	8008eac <__smakebuf_r+0x18>
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	f043 0302 	orr.w	r3, r3, #2
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	e7e3      	b.n	8008ea0 <__smakebuf_r+0xc>
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <__smakebuf_r+0x7c>)
 8008eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	6020      	str	r0, [r4, #0]
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	81a3      	strh	r3, [r4, #12]
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	6163      	str	r3, [r4, #20]
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	6120      	str	r0, [r4, #16]
 8008eee:	b15b      	cbz	r3, 8008f08 <__smakebuf_r+0x74>
 8008ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f000 fb5d 	bl	80095b4 <_isatty_r>
 8008efa:	b128      	cbz	r0, 8008f08 <__smakebuf_r+0x74>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	f043 0301 	orr.w	r3, r3, #1
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	431d      	orrs	r5, r3
 8008f0c:	81a5      	strh	r5, [r4, #12]
 8008f0e:	e7cd      	b.n	8008eac <__smakebuf_r+0x18>
 8008f10:	08008cb9 	.word	0x08008cb9

08008f14 <__malloc_lock>:
 8008f14:	4770      	bx	lr

08008f16 <__malloc_unlock>:
 8008f16:	4770      	bx	lr

08008f18 <__sfputc_r>:
 8008f18:	6893      	ldr	r3, [r2, #8]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	b410      	push	{r4}
 8008f20:	6093      	str	r3, [r2, #8]
 8008f22:	da09      	bge.n	8008f38 <__sfputc_r+0x20>
 8008f24:	6994      	ldr	r4, [r2, #24]
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	db02      	blt.n	8008f30 <__sfputc_r+0x18>
 8008f2a:	b2cb      	uxtb	r3, r1
 8008f2c:	2b0a      	cmp	r3, #10
 8008f2e:	d103      	bne.n	8008f38 <__sfputc_r+0x20>
 8008f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f34:	f7ff bd4e 	b.w	80089d4 <__swbuf_r>
 8008f38:	6813      	ldr	r3, [r2, #0]
 8008f3a:	1c58      	adds	r0, r3, #1
 8008f3c:	6010      	str	r0, [r2, #0]
 8008f3e:	7019      	strb	r1, [r3, #0]
 8008f40:	b2c8      	uxtb	r0, r1
 8008f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <__sfputs_r>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	4614      	mov	r4, r2
 8008f50:	18d5      	adds	r5, r2, r3
 8008f52:	42ac      	cmp	r4, r5
 8008f54:	d101      	bne.n	8008f5a <__sfputs_r+0x12>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e007      	b.n	8008f6a <__sfputs_r+0x22>
 8008f5a:	463a      	mov	r2, r7
 8008f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff ffd9 	bl	8008f18 <__sfputc_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d1f3      	bne.n	8008f52 <__sfputs_r+0xa>
 8008f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f6c <_vfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	b09d      	sub	sp, #116	; 0x74
 8008f72:	460c      	mov	r4, r1
 8008f74:	4617      	mov	r7, r2
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	4606      	mov	r6, r0
 8008f7a:	b118      	cbz	r0, 8008f84 <_vfiprintf_r+0x18>
 8008f7c:	6983      	ldr	r3, [r0, #24]
 8008f7e:	b90b      	cbnz	r3, 8008f84 <_vfiprintf_r+0x18>
 8008f80:	f7ff feda 	bl	8008d38 <__sinit>
 8008f84:	4b7c      	ldr	r3, [pc, #496]	; (8009178 <_vfiprintf_r+0x20c>)
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d157      	bne.n	800903a <_vfiprintf_r+0xce>
 8008f8a:	6874      	ldr	r4, [r6, #4]
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	0718      	lsls	r0, r3, #28
 8008f90:	d55d      	bpl.n	800904e <_vfiprintf_r+0xe2>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d05a      	beq.n	800904e <_vfiprintf_r+0xe2>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa2:	2330      	movs	r3, #48	; 0x30
 8008fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa8:	f04f 0b01 	mov.w	fp, #1
 8008fac:	46b8      	mov	r8, r7
 8008fae:	4645      	mov	r5, r8
 8008fb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d155      	bne.n	8009064 <_vfiprintf_r+0xf8>
 8008fb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8008fbc:	d00b      	beq.n	8008fd6 <_vfiprintf_r+0x6a>
 8008fbe:	4653      	mov	r3, sl
 8008fc0:	463a      	mov	r2, r7
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff ffbf 	bl	8008f48 <__sfputs_r>
 8008fca:	3001      	adds	r0, #1
 8008fcc:	f000 80c4 	beq.w	8009158 <_vfiprintf_r+0x1ec>
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	4453      	add	r3, sl
 8008fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd6:	f898 3000 	ldrb.w	r3, [r8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 80bc 	beq.w	8009158 <_vfiprintf_r+0x1ec>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe6:	9304      	str	r3, [sp, #16]
 8008fe8:	9307      	str	r3, [sp, #28]
 8008fea:	9205      	str	r2, [sp, #20]
 8008fec:	9306      	str	r3, [sp, #24]
 8008fee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff4:	2205      	movs	r2, #5
 8008ff6:	7829      	ldrb	r1, [r5, #0]
 8008ff8:	4860      	ldr	r0, [pc, #384]	; (800917c <_vfiprintf_r+0x210>)
 8008ffa:	f7fa faf9 	bl	80035f0 <memchr>
 8008ffe:	f105 0801 	add.w	r8, r5, #1
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	2800      	cmp	r0, #0
 8009006:	d131      	bne.n	800906c <_vfiprintf_r+0x100>
 8009008:	06d9      	lsls	r1, r3, #27
 800900a:	bf44      	itt	mi
 800900c:	2220      	movmi	r2, #32
 800900e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009012:	071a      	lsls	r2, r3, #28
 8009014:	bf44      	itt	mi
 8009016:	222b      	movmi	r2, #43	; 0x2b
 8009018:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800901c:	782a      	ldrb	r2, [r5, #0]
 800901e:	2a2a      	cmp	r2, #42	; 0x2a
 8009020:	d02c      	beq.n	800907c <_vfiprintf_r+0x110>
 8009022:	9a07      	ldr	r2, [sp, #28]
 8009024:	2100      	movs	r1, #0
 8009026:	200a      	movs	r0, #10
 8009028:	46a8      	mov	r8, r5
 800902a:	3501      	adds	r5, #1
 800902c:	f898 3000 	ldrb.w	r3, [r8]
 8009030:	3b30      	subs	r3, #48	; 0x30
 8009032:	2b09      	cmp	r3, #9
 8009034:	d96d      	bls.n	8009112 <_vfiprintf_r+0x1a6>
 8009036:	b371      	cbz	r1, 8009096 <_vfiprintf_r+0x12a>
 8009038:	e026      	b.n	8009088 <_vfiprintf_r+0x11c>
 800903a:	4b51      	ldr	r3, [pc, #324]	; (8009180 <_vfiprintf_r+0x214>)
 800903c:	429c      	cmp	r4, r3
 800903e:	d101      	bne.n	8009044 <_vfiprintf_r+0xd8>
 8009040:	68b4      	ldr	r4, [r6, #8]
 8009042:	e7a3      	b.n	8008f8c <_vfiprintf_r+0x20>
 8009044:	4b4f      	ldr	r3, [pc, #316]	; (8009184 <_vfiprintf_r+0x218>)
 8009046:	429c      	cmp	r4, r3
 8009048:	bf08      	it	eq
 800904a:	68f4      	ldreq	r4, [r6, #12]
 800904c:	e79e      	b.n	8008f8c <_vfiprintf_r+0x20>
 800904e:	4621      	mov	r1, r4
 8009050:	4630      	mov	r0, r6
 8009052:	f7ff fd11 	bl	8008a78 <__swsetup_r>
 8009056:	2800      	cmp	r0, #0
 8009058:	d09e      	beq.n	8008f98 <_vfiprintf_r+0x2c>
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	b01d      	add	sp, #116	; 0x74
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	2b25      	cmp	r3, #37	; 0x25
 8009066:	d0a7      	beq.n	8008fb8 <_vfiprintf_r+0x4c>
 8009068:	46a8      	mov	r8, r5
 800906a:	e7a0      	b.n	8008fae <_vfiprintf_r+0x42>
 800906c:	4a43      	ldr	r2, [pc, #268]	; (800917c <_vfiprintf_r+0x210>)
 800906e:	1a80      	subs	r0, r0, r2
 8009070:	fa0b f000 	lsl.w	r0, fp, r0
 8009074:	4318      	orrs	r0, r3
 8009076:	9004      	str	r0, [sp, #16]
 8009078:	4645      	mov	r5, r8
 800907a:	e7bb      	b.n	8008ff4 <_vfiprintf_r+0x88>
 800907c:	9a03      	ldr	r2, [sp, #12]
 800907e:	1d11      	adds	r1, r2, #4
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	9103      	str	r1, [sp, #12]
 8009084:	2a00      	cmp	r2, #0
 8009086:	db01      	blt.n	800908c <_vfiprintf_r+0x120>
 8009088:	9207      	str	r2, [sp, #28]
 800908a:	e004      	b.n	8009096 <_vfiprintf_r+0x12a>
 800908c:	4252      	negs	r2, r2
 800908e:	f043 0302 	orr.w	r3, r3, #2
 8009092:	9207      	str	r2, [sp, #28]
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	f898 3000 	ldrb.w	r3, [r8]
 800909a:	2b2e      	cmp	r3, #46	; 0x2e
 800909c:	d110      	bne.n	80090c0 <_vfiprintf_r+0x154>
 800909e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80090a2:	2b2a      	cmp	r3, #42	; 0x2a
 80090a4:	f108 0101 	add.w	r1, r8, #1
 80090a8:	d137      	bne.n	800911a <_vfiprintf_r+0x1ae>
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	1d1a      	adds	r2, r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	9203      	str	r2, [sp, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bfb8      	it	lt
 80090b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80090ba:	f108 0802 	add.w	r8, r8, #2
 80090be:	9305      	str	r3, [sp, #20]
 80090c0:	4d31      	ldr	r5, [pc, #196]	; (8009188 <_vfiprintf_r+0x21c>)
 80090c2:	f898 1000 	ldrb.w	r1, [r8]
 80090c6:	2203      	movs	r2, #3
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7fa fa91 	bl	80035f0 <memchr>
 80090ce:	b140      	cbz	r0, 80090e2 <_vfiprintf_r+0x176>
 80090d0:	2340      	movs	r3, #64	; 0x40
 80090d2:	1b40      	subs	r0, r0, r5
 80090d4:	fa03 f000 	lsl.w	r0, r3, r0
 80090d8:	9b04      	ldr	r3, [sp, #16]
 80090da:	4303      	orrs	r3, r0
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	f108 0801 	add.w	r8, r8, #1
 80090e2:	f898 1000 	ldrb.w	r1, [r8]
 80090e6:	4829      	ldr	r0, [pc, #164]	; (800918c <_vfiprintf_r+0x220>)
 80090e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ec:	2206      	movs	r2, #6
 80090ee:	f108 0701 	add.w	r7, r8, #1
 80090f2:	f7fa fa7d 	bl	80035f0 <memchr>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d034      	beq.n	8009164 <_vfiprintf_r+0x1f8>
 80090fa:	4b25      	ldr	r3, [pc, #148]	; (8009190 <_vfiprintf_r+0x224>)
 80090fc:	bb03      	cbnz	r3, 8009140 <_vfiprintf_r+0x1d4>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	3307      	adds	r3, #7
 8009102:	f023 0307 	bic.w	r3, r3, #7
 8009106:	3308      	adds	r3, #8
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910c:	444b      	add	r3, r9
 800910e:	9309      	str	r3, [sp, #36]	; 0x24
 8009110:	e74c      	b.n	8008fac <_vfiprintf_r+0x40>
 8009112:	fb00 3202 	mla	r2, r0, r2, r3
 8009116:	2101      	movs	r1, #1
 8009118:	e786      	b.n	8009028 <_vfiprintf_r+0xbc>
 800911a:	2300      	movs	r3, #0
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	4618      	mov	r0, r3
 8009120:	250a      	movs	r5, #10
 8009122:	4688      	mov	r8, r1
 8009124:	3101      	adds	r1, #1
 8009126:	f898 2000 	ldrb.w	r2, [r8]
 800912a:	3a30      	subs	r2, #48	; 0x30
 800912c:	2a09      	cmp	r2, #9
 800912e:	d903      	bls.n	8009138 <_vfiprintf_r+0x1cc>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0c5      	beq.n	80090c0 <_vfiprintf_r+0x154>
 8009134:	9005      	str	r0, [sp, #20]
 8009136:	e7c3      	b.n	80090c0 <_vfiprintf_r+0x154>
 8009138:	fb05 2000 	mla	r0, r5, r0, r2
 800913c:	2301      	movs	r3, #1
 800913e:	e7f0      	b.n	8009122 <_vfiprintf_r+0x1b6>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4622      	mov	r2, r4
 8009146:	4b13      	ldr	r3, [pc, #76]	; (8009194 <_vfiprintf_r+0x228>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4630      	mov	r0, r6
 800914c:	f3af 8000 	nop.w
 8009150:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009154:	4681      	mov	r9, r0
 8009156:	d1d8      	bne.n	800910a <_vfiprintf_r+0x19e>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af7d 	bmi.w	800905a <_vfiprintf_r+0xee>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	e77c      	b.n	800905e <_vfiprintf_r+0xf2>
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4622      	mov	r2, r4
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <_vfiprintf_r+0x228>)
 800916c:	a904      	add	r1, sp, #16
 800916e:	4630      	mov	r0, r6
 8009170:	f000 f888 	bl	8009284 <_printf_i>
 8009174:	e7ec      	b.n	8009150 <_vfiprintf_r+0x1e4>
 8009176:	bf00      	nop
 8009178:	0804f070 	.word	0x0804f070
 800917c:	0804f0b0 	.word	0x0804f0b0
 8009180:	0804f090 	.word	0x0804f090
 8009184:	0804f050 	.word	0x0804f050
 8009188:	0804f0b6 	.word	0x0804f0b6
 800918c:	0804f0ba 	.word	0x0804f0ba
 8009190:	00000000 	.word	0x00000000
 8009194:	08008f49 	.word	0x08008f49

08009198 <_printf_common>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	4691      	mov	r9, r2
 800919e:	461f      	mov	r7, r3
 80091a0:	688a      	ldr	r2, [r1, #8]
 80091a2:	690b      	ldr	r3, [r1, #16]
 80091a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091a8:	4293      	cmp	r3, r2
 80091aa:	bfb8      	it	lt
 80091ac:	4613      	movlt	r3, r2
 80091ae:	f8c9 3000 	str.w	r3, [r9]
 80091b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091b6:	4606      	mov	r6, r0
 80091b8:	460c      	mov	r4, r1
 80091ba:	b112      	cbz	r2, 80091c2 <_printf_common+0x2a>
 80091bc:	3301      	adds	r3, #1
 80091be:	f8c9 3000 	str.w	r3, [r9]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	0699      	lsls	r1, r3, #26
 80091c6:	bf42      	ittt	mi
 80091c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80091cc:	3302      	addmi	r3, #2
 80091ce:	f8c9 3000 	strmi.w	r3, [r9]
 80091d2:	6825      	ldr	r5, [r4, #0]
 80091d4:	f015 0506 	ands.w	r5, r5, #6
 80091d8:	d107      	bne.n	80091ea <_printf_common+0x52>
 80091da:	f104 0a19 	add.w	sl, r4, #25
 80091de:	68e3      	ldr	r3, [r4, #12]
 80091e0:	f8d9 2000 	ldr.w	r2, [r9]
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	429d      	cmp	r5, r3
 80091e8:	db29      	blt.n	800923e <_printf_common+0xa6>
 80091ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	3300      	adds	r3, #0
 80091f2:	bf18      	it	ne
 80091f4:	2301      	movne	r3, #1
 80091f6:	0692      	lsls	r2, r2, #26
 80091f8:	d42e      	bmi.n	8009258 <_printf_common+0xc0>
 80091fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091fe:	4639      	mov	r1, r7
 8009200:	4630      	mov	r0, r6
 8009202:	47c0      	blx	r8
 8009204:	3001      	adds	r0, #1
 8009206:	d021      	beq.n	800924c <_printf_common+0xb4>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	68e5      	ldr	r5, [r4, #12]
 800920c:	f8d9 2000 	ldr.w	r2, [r9]
 8009210:	f003 0306 	and.w	r3, r3, #6
 8009214:	2b04      	cmp	r3, #4
 8009216:	bf08      	it	eq
 8009218:	1aad      	subeq	r5, r5, r2
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	6922      	ldr	r2, [r4, #16]
 800921e:	bf0c      	ite	eq
 8009220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009224:	2500      	movne	r5, #0
 8009226:	4293      	cmp	r3, r2
 8009228:	bfc4      	itt	gt
 800922a:	1a9b      	subgt	r3, r3, r2
 800922c:	18ed      	addgt	r5, r5, r3
 800922e:	f04f 0900 	mov.w	r9, #0
 8009232:	341a      	adds	r4, #26
 8009234:	454d      	cmp	r5, r9
 8009236:	d11b      	bne.n	8009270 <_printf_common+0xd8>
 8009238:	2000      	movs	r0, #0
 800923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923e:	2301      	movs	r3, #1
 8009240:	4652      	mov	r2, sl
 8009242:	4639      	mov	r1, r7
 8009244:	4630      	mov	r0, r6
 8009246:	47c0      	blx	r8
 8009248:	3001      	adds	r0, #1
 800924a:	d103      	bne.n	8009254 <_printf_common+0xbc>
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009254:	3501      	adds	r5, #1
 8009256:	e7c2      	b.n	80091de <_printf_common+0x46>
 8009258:	18e1      	adds	r1, r4, r3
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	2030      	movs	r0, #48	; 0x30
 800925e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009262:	4422      	add	r2, r4
 8009264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800926c:	3302      	adds	r3, #2
 800926e:	e7c4      	b.n	80091fa <_printf_common+0x62>
 8009270:	2301      	movs	r3, #1
 8009272:	4622      	mov	r2, r4
 8009274:	4639      	mov	r1, r7
 8009276:	4630      	mov	r0, r6
 8009278:	47c0      	blx	r8
 800927a:	3001      	adds	r0, #1
 800927c:	d0e6      	beq.n	800924c <_printf_common+0xb4>
 800927e:	f109 0901 	add.w	r9, r9, #1
 8009282:	e7d7      	b.n	8009234 <_printf_common+0x9c>

08009284 <_printf_i>:
 8009284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009288:	4617      	mov	r7, r2
 800928a:	7e0a      	ldrb	r2, [r1, #24]
 800928c:	b085      	sub	sp, #20
 800928e:	2a6e      	cmp	r2, #110	; 0x6e
 8009290:	4698      	mov	r8, r3
 8009292:	4606      	mov	r6, r0
 8009294:	460c      	mov	r4, r1
 8009296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009298:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800929c:	f000 80bc 	beq.w	8009418 <_printf_i+0x194>
 80092a0:	d81a      	bhi.n	80092d8 <_printf_i+0x54>
 80092a2:	2a63      	cmp	r2, #99	; 0x63
 80092a4:	d02e      	beq.n	8009304 <_printf_i+0x80>
 80092a6:	d80a      	bhi.n	80092be <_printf_i+0x3a>
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	f000 80c8 	beq.w	800943e <_printf_i+0x1ba>
 80092ae:	2a58      	cmp	r2, #88	; 0x58
 80092b0:	f000 808a 	beq.w	80093c8 <_printf_i+0x144>
 80092b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80092bc:	e02a      	b.n	8009314 <_printf_i+0x90>
 80092be:	2a64      	cmp	r2, #100	; 0x64
 80092c0:	d001      	beq.n	80092c6 <_printf_i+0x42>
 80092c2:	2a69      	cmp	r2, #105	; 0x69
 80092c4:	d1f6      	bne.n	80092b4 <_printf_i+0x30>
 80092c6:	6821      	ldr	r1, [r4, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80092ce:	d023      	beq.n	8009318 <_printf_i+0x94>
 80092d0:	1d11      	adds	r1, r2, #4
 80092d2:	6019      	str	r1, [r3, #0]
 80092d4:	6813      	ldr	r3, [r2, #0]
 80092d6:	e027      	b.n	8009328 <_printf_i+0xa4>
 80092d8:	2a73      	cmp	r2, #115	; 0x73
 80092da:	f000 80b4 	beq.w	8009446 <_printf_i+0x1c2>
 80092de:	d808      	bhi.n	80092f2 <_printf_i+0x6e>
 80092e0:	2a6f      	cmp	r2, #111	; 0x6f
 80092e2:	d02a      	beq.n	800933a <_printf_i+0xb6>
 80092e4:	2a70      	cmp	r2, #112	; 0x70
 80092e6:	d1e5      	bne.n	80092b4 <_printf_i+0x30>
 80092e8:	680a      	ldr	r2, [r1, #0]
 80092ea:	f042 0220 	orr.w	r2, r2, #32
 80092ee:	600a      	str	r2, [r1, #0]
 80092f0:	e003      	b.n	80092fa <_printf_i+0x76>
 80092f2:	2a75      	cmp	r2, #117	; 0x75
 80092f4:	d021      	beq.n	800933a <_printf_i+0xb6>
 80092f6:	2a78      	cmp	r2, #120	; 0x78
 80092f8:	d1dc      	bne.n	80092b4 <_printf_i+0x30>
 80092fa:	2278      	movs	r2, #120	; 0x78
 80092fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009300:	496e      	ldr	r1, [pc, #440]	; (80094bc <_printf_i+0x238>)
 8009302:	e064      	b.n	80093ce <_printf_i+0x14a>
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800930a:	1d11      	adds	r1, r2, #4
 800930c:	6019      	str	r1, [r3, #0]
 800930e:	6813      	ldr	r3, [r2, #0]
 8009310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009314:	2301      	movs	r3, #1
 8009316:	e0a3      	b.n	8009460 <_printf_i+0x1dc>
 8009318:	f011 0f40 	tst.w	r1, #64	; 0x40
 800931c:	f102 0104 	add.w	r1, r2, #4
 8009320:	6019      	str	r1, [r3, #0]
 8009322:	d0d7      	beq.n	80092d4 <_printf_i+0x50>
 8009324:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009328:	2b00      	cmp	r3, #0
 800932a:	da03      	bge.n	8009334 <_printf_i+0xb0>
 800932c:	222d      	movs	r2, #45	; 0x2d
 800932e:	425b      	negs	r3, r3
 8009330:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009334:	4962      	ldr	r1, [pc, #392]	; (80094c0 <_printf_i+0x23c>)
 8009336:	220a      	movs	r2, #10
 8009338:	e017      	b.n	800936a <_printf_i+0xe6>
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	6819      	ldr	r1, [r3, #0]
 800933e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009342:	d003      	beq.n	800934c <_printf_i+0xc8>
 8009344:	1d08      	adds	r0, r1, #4
 8009346:	6018      	str	r0, [r3, #0]
 8009348:	680b      	ldr	r3, [r1, #0]
 800934a:	e006      	b.n	800935a <_printf_i+0xd6>
 800934c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009350:	f101 0004 	add.w	r0, r1, #4
 8009354:	6018      	str	r0, [r3, #0]
 8009356:	d0f7      	beq.n	8009348 <_printf_i+0xc4>
 8009358:	880b      	ldrh	r3, [r1, #0]
 800935a:	4959      	ldr	r1, [pc, #356]	; (80094c0 <_printf_i+0x23c>)
 800935c:	2a6f      	cmp	r2, #111	; 0x6f
 800935e:	bf14      	ite	ne
 8009360:	220a      	movne	r2, #10
 8009362:	2208      	moveq	r2, #8
 8009364:	2000      	movs	r0, #0
 8009366:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800936a:	6865      	ldr	r5, [r4, #4]
 800936c:	60a5      	str	r5, [r4, #8]
 800936e:	2d00      	cmp	r5, #0
 8009370:	f2c0 809c 	blt.w	80094ac <_printf_i+0x228>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	f020 0004 	bic.w	r0, r0, #4
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d13f      	bne.n	8009400 <_printf_i+0x17c>
 8009380:	2d00      	cmp	r5, #0
 8009382:	f040 8095 	bne.w	80094b0 <_printf_i+0x22c>
 8009386:	4675      	mov	r5, lr
 8009388:	2a08      	cmp	r2, #8
 800938a:	d10b      	bne.n	80093a4 <_printf_i+0x120>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07da      	lsls	r2, r3, #31
 8009390:	d508      	bpl.n	80093a4 <_printf_i+0x120>
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	6862      	ldr	r2, [r4, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	bfde      	ittt	le
 800939a:	2330      	movle	r3, #48	; 0x30
 800939c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093a4:	ebae 0305 	sub.w	r3, lr, r5
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	f8cd 8000 	str.w	r8, [sp]
 80093ae:	463b      	mov	r3, r7
 80093b0:	aa03      	add	r2, sp, #12
 80093b2:	4621      	mov	r1, r4
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff feef 	bl	8009198 <_printf_common>
 80093ba:	3001      	adds	r0, #1
 80093bc:	d155      	bne.n	800946a <_printf_i+0x1e6>
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	b005      	add	sp, #20
 80093c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80093cc:	493c      	ldr	r1, [pc, #240]	; (80094c0 <_printf_i+0x23c>)
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80093d6:	f100 0504 	add.w	r5, r0, #4
 80093da:	601d      	str	r5, [r3, #0]
 80093dc:	d001      	beq.n	80093e2 <_printf_i+0x15e>
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	e002      	b.n	80093e8 <_printf_i+0x164>
 80093e2:	0655      	lsls	r5, r2, #25
 80093e4:	d5fb      	bpl.n	80093de <_printf_i+0x15a>
 80093e6:	8803      	ldrh	r3, [r0, #0]
 80093e8:	07d0      	lsls	r0, r2, #31
 80093ea:	bf44      	itt	mi
 80093ec:	f042 0220 	orrmi.w	r2, r2, #32
 80093f0:	6022      	strmi	r2, [r4, #0]
 80093f2:	b91b      	cbnz	r3, 80093fc <_printf_i+0x178>
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	f022 0220 	bic.w	r2, r2, #32
 80093fa:	6022      	str	r2, [r4, #0]
 80093fc:	2210      	movs	r2, #16
 80093fe:	e7b1      	b.n	8009364 <_printf_i+0xe0>
 8009400:	4675      	mov	r5, lr
 8009402:	fbb3 f0f2 	udiv	r0, r3, r2
 8009406:	fb02 3310 	mls	r3, r2, r0, r3
 800940a:	5ccb      	ldrb	r3, [r1, r3]
 800940c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009410:	4603      	mov	r3, r0
 8009412:	2800      	cmp	r0, #0
 8009414:	d1f5      	bne.n	8009402 <_printf_i+0x17e>
 8009416:	e7b7      	b.n	8009388 <_printf_i+0x104>
 8009418:	6808      	ldr	r0, [r1, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	6949      	ldr	r1, [r1, #20]
 800941e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009422:	d004      	beq.n	800942e <_printf_i+0x1aa>
 8009424:	1d10      	adds	r0, r2, #4
 8009426:	6018      	str	r0, [r3, #0]
 8009428:	6813      	ldr	r3, [r2, #0]
 800942a:	6019      	str	r1, [r3, #0]
 800942c:	e007      	b.n	800943e <_printf_i+0x1ba>
 800942e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009432:	f102 0004 	add.w	r0, r2, #4
 8009436:	6018      	str	r0, [r3, #0]
 8009438:	6813      	ldr	r3, [r2, #0]
 800943a:	d0f6      	beq.n	800942a <_printf_i+0x1a6>
 800943c:	8019      	strh	r1, [r3, #0]
 800943e:	2300      	movs	r3, #0
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	4675      	mov	r5, lr
 8009444:	e7b1      	b.n	80093aa <_printf_i+0x126>
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	1d11      	adds	r1, r2, #4
 800944a:	6019      	str	r1, [r3, #0]
 800944c:	6815      	ldr	r5, [r2, #0]
 800944e:	6862      	ldr	r2, [r4, #4]
 8009450:	2100      	movs	r1, #0
 8009452:	4628      	mov	r0, r5
 8009454:	f7fa f8cc 	bl	80035f0 <memchr>
 8009458:	b108      	cbz	r0, 800945e <_printf_i+0x1da>
 800945a:	1b40      	subs	r0, r0, r5
 800945c:	6060      	str	r0, [r4, #4]
 800945e:	6863      	ldr	r3, [r4, #4]
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	2300      	movs	r3, #0
 8009464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009468:	e79f      	b.n	80093aa <_printf_i+0x126>
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	462a      	mov	r2, r5
 800946e:	4639      	mov	r1, r7
 8009470:	4630      	mov	r0, r6
 8009472:	47c0      	blx	r8
 8009474:	3001      	adds	r0, #1
 8009476:	d0a2      	beq.n	80093be <_printf_i+0x13a>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	079b      	lsls	r3, r3, #30
 800947c:	d507      	bpl.n	800948e <_printf_i+0x20a>
 800947e:	2500      	movs	r5, #0
 8009480:	f104 0919 	add.w	r9, r4, #25
 8009484:	68e3      	ldr	r3, [r4, #12]
 8009486:	9a03      	ldr	r2, [sp, #12]
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	429d      	cmp	r5, r3
 800948c:	db05      	blt.n	800949a <_printf_i+0x216>
 800948e:	68e0      	ldr	r0, [r4, #12]
 8009490:	9b03      	ldr	r3, [sp, #12]
 8009492:	4298      	cmp	r0, r3
 8009494:	bfb8      	it	lt
 8009496:	4618      	movlt	r0, r3
 8009498:	e793      	b.n	80093c2 <_printf_i+0x13e>
 800949a:	2301      	movs	r3, #1
 800949c:	464a      	mov	r2, r9
 800949e:	4639      	mov	r1, r7
 80094a0:	4630      	mov	r0, r6
 80094a2:	47c0      	blx	r8
 80094a4:	3001      	adds	r0, #1
 80094a6:	d08a      	beq.n	80093be <_printf_i+0x13a>
 80094a8:	3501      	adds	r5, #1
 80094aa:	e7eb      	b.n	8009484 <_printf_i+0x200>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1a7      	bne.n	8009400 <_printf_i+0x17c>
 80094b0:	780b      	ldrb	r3, [r1, #0]
 80094b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094ba:	e765      	b.n	8009388 <_printf_i+0x104>
 80094bc:	0804f0d2 	.word	0x0804f0d2
 80094c0:	0804f0c1 	.word	0x0804f0c1

080094c4 <__sread>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	460c      	mov	r4, r1
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	f000 f894 	bl	80095f8 <_read_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	bfab      	itete	ge
 80094d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094d6:	89a3      	ldrhlt	r3, [r4, #12]
 80094d8:	181b      	addge	r3, r3, r0
 80094da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094de:	bfac      	ite	ge
 80094e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80094e2:	81a3      	strhlt	r3, [r4, #12]
 80094e4:	bd10      	pop	{r4, pc}

080094e6 <__swrite>:
 80094e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ea:	461f      	mov	r7, r3
 80094ec:	898b      	ldrh	r3, [r1, #12]
 80094ee:	05db      	lsls	r3, r3, #23
 80094f0:	4605      	mov	r5, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4616      	mov	r6, r2
 80094f6:	d505      	bpl.n	8009504 <__swrite+0x1e>
 80094f8:	2302      	movs	r3, #2
 80094fa:	2200      	movs	r2, #0
 80094fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009500:	f000 f868 	bl	80095d4 <_lseek_r>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800950a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	4632      	mov	r2, r6
 8009512:	463b      	mov	r3, r7
 8009514:	4628      	mov	r0, r5
 8009516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	f000 b817 	b.w	800954c <_write_r>

0800951e <__sseek>:
 800951e:	b510      	push	{r4, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009526:	f000 f855 	bl	80095d4 <_lseek_r>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	bf15      	itete	ne
 8009530:	6560      	strne	r0, [r4, #84]	; 0x54
 8009532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800953a:	81a3      	strheq	r3, [r4, #12]
 800953c:	bf18      	it	ne
 800953e:	81a3      	strhne	r3, [r4, #12]
 8009540:	bd10      	pop	{r4, pc}

08009542 <__sclose>:
 8009542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009546:	f000 b813 	b.w	8009570 <_close_r>
	...

0800954c <_write_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4c07      	ldr	r4, [pc, #28]	; (800956c <_write_r+0x20>)
 8009550:	4605      	mov	r5, r0
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7fd f80c 	bl	8006578 <_write>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_write_r+0x1e>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	b103      	cbz	r3, 800956a <_write_r+0x1e>
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	2000ade4 	.word	0x2000ade4

08009570 <_close_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4c06      	ldr	r4, [pc, #24]	; (800958c <_close_r+0x1c>)
 8009574:	2300      	movs	r3, #0
 8009576:	4605      	mov	r5, r0
 8009578:	4608      	mov	r0, r1
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	f7ff f824 	bl	80085c8 <_close>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_close_r+0x1a>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	b103      	cbz	r3, 800958a <_close_r+0x1a>
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	2000ade4 	.word	0x2000ade4

08009590 <_fstat_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4c07      	ldr	r4, [pc, #28]	; (80095b0 <_fstat_r+0x20>)
 8009594:	2300      	movs	r3, #0
 8009596:	4605      	mov	r5, r0
 8009598:	4608      	mov	r0, r1
 800959a:	4611      	mov	r1, r2
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	f7ff f816 	bl	80085ce <_fstat>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	d102      	bne.n	80095ac <_fstat_r+0x1c>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	b103      	cbz	r3, 80095ac <_fstat_r+0x1c>
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	2000ade4 	.word	0x2000ade4

080095b4 <_isatty_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4c06      	ldr	r4, [pc, #24]	; (80095d0 <_isatty_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4605      	mov	r5, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	6023      	str	r3, [r4, #0]
 80095c0:	f7ff f80a 	bl	80085d8 <_isatty>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_isatty_r+0x1a>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_isatty_r+0x1a>
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	2000ade4 	.word	0x2000ade4

080095d4 <_lseek_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4c07      	ldr	r4, [pc, #28]	; (80095f4 <_lseek_r+0x20>)
 80095d8:	4605      	mov	r5, r0
 80095da:	4608      	mov	r0, r1
 80095dc:	4611      	mov	r1, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f7fe fffa 	bl	80085dc <_lseek>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_lseek_r+0x1e>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_lseek_r+0x1e>
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	2000ade4 	.word	0x2000ade4

080095f8 <_read_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4c07      	ldr	r4, [pc, #28]	; (8009618 <_read_r+0x20>)
 80095fc:	4605      	mov	r5, r0
 80095fe:	4608      	mov	r0, r1
 8009600:	4611      	mov	r1, r2
 8009602:	2200      	movs	r2, #0
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	f7fe ffb6 	bl	8008578 <_read>
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	d102      	bne.n	8009616 <_read_r+0x1e>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	b103      	cbz	r3, 8009616 <_read_r+0x1e>
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	2000ade4 	.word	0x2000ade4

0800961c <tanhf>:
 800961c:	b510      	push	{r4, lr}
 800961e:	ee10 4a10 	vmov	r4, s0
 8009622:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009626:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800962a:	ed2d 8b02 	vpush	{d8}
 800962e:	eef0 7a40 	vmov.f32	s15, s0
 8009632:	db0c      	blt.n	800964e <tanhf+0x32>
 8009634:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009638:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800963c:	2c00      	cmp	r4, #0
 800963e:	bfac      	ite	ge
 8009640:	ee37 0a00 	vaddge.f32	s0, s14, s0
 8009644:	ee37 0a40 	vsublt.f32	s0, s14, s0
 8009648:	ecbd 8b02 	vpop	{d8}
 800964c:	bd10      	pop	{r4, pc}
 800964e:	4a1b      	ldr	r2, [pc, #108]	; (80096bc <tanhf+0xa0>)
 8009650:	4293      	cmp	r3, r2
 8009652:	dc30      	bgt.n	80096b6 <tanhf+0x9a>
 8009654:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8009658:	da06      	bge.n	8009668 <tanhf+0x4c>
 800965a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800965e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009662:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009666:	e7ef      	b.n	8009648 <tanhf+0x2c>
 8009668:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800966c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8009670:	db12      	blt.n	8009698 <tanhf+0x7c>
 8009672:	f000 ffaf 	bl	800a5d4 <fabsf>
 8009676:	ee30 0a00 	vadd.f32	s0, s0, s0
 800967a:	f000 fe7f 	bl	800a37c <expm1f>
 800967e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8009682:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8009686:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800968a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800968e:	2c00      	cmp	r4, #0
 8009690:	bfb8      	it	lt
 8009692:	eeb1 0a40 	vneglt.f32	s0, s0
 8009696:	e7d7      	b.n	8009648 <tanhf+0x2c>
 8009698:	f000 ff9c 	bl	800a5d4 <fabsf>
 800969c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80096a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80096a4:	f000 fe6a 	bl	800a37c <expm1f>
 80096a8:	ee70 7a08 	vadd.f32	s15, s0, s16
 80096ac:	eeb1 7a40 	vneg.f32	s14, s0
 80096b0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80096b4:	e7eb      	b.n	800968e <tanhf+0x72>
 80096b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096ba:	e7e8      	b.n	800968e <tanhf+0x72>
 80096bc:	41afffff 	.word	0x41afffff

080096c0 <expf>:
 80096c0:	b530      	push	{r4, r5, lr}
 80096c2:	ed2d 8b02 	vpush	{d8}
 80096c6:	4d35      	ldr	r5, [pc, #212]	; (800979c <expf+0xdc>)
 80096c8:	b08b      	sub	sp, #44	; 0x2c
 80096ca:	eeb0 8a40 	vmov.f32	s16, s0
 80096ce:	f000 f9ed 	bl	8009aac <__ieee754_expf>
 80096d2:	f995 3000 	ldrsb.w	r3, [r5]
 80096d6:	3301      	adds	r3, #1
 80096d8:	ee10 4a10 	vmov	r4, s0
 80096dc:	d030      	beq.n	8009740 <expf+0x80>
 80096de:	eeb0 0a48 	vmov.f32	s0, s16
 80096e2:	f000 ff7e 	bl	800a5e2 <finitef>
 80096e6:	b358      	cbz	r0, 8009740 <expf+0x80>
 80096e8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80097a0 <expf+0xe0>
 80096ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80096f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f4:	dd35      	ble.n	8009762 <expf+0xa2>
 80096f6:	2303      	movs	r3, #3
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4b2a      	ldr	r3, [pc, #168]	; (80097a4 <expf+0xe4>)
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	ee18 0a10 	vmov	r0, s16
 8009702:	2300      	movs	r3, #0
 8009704:	9308      	str	r3, [sp, #32]
 8009706:	f7fa f933 	bl	8003970 <__aeabi_f2d>
 800970a:	f995 3000 	ldrsb.w	r3, [r5]
 800970e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009716:	b9cb      	cbnz	r3, 800974c <expf+0x8c>
 8009718:	4b23      	ldr	r3, [pc, #140]	; (80097a8 <expf+0xe8>)
 800971a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800971e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009722:	4668      	mov	r0, sp
 8009724:	f000 fd9f 	bl	800a266 <matherr>
 8009728:	b1b0      	cbz	r0, 8009758 <expf+0x98>
 800972a:	9b08      	ldr	r3, [sp, #32]
 800972c:	b11b      	cbz	r3, 8009736 <expf+0x76>
 800972e:	f7fe ffab 	bl	8008688 <__errno>
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800973a:	f7fa fc07 	bl	8003f4c <__aeabi_d2f>
 800973e:	4604      	mov	r4, r0
 8009740:	ee00 4a10 	vmov	s0, r4
 8009744:	b00b      	add	sp, #44	; 0x2c
 8009746:	ecbd 8b02 	vpop	{d8}
 800974a:	bd30      	pop	{r4, r5, pc}
 800974c:	4917      	ldr	r1, [pc, #92]	; (80097ac <expf+0xec>)
 800974e:	2000      	movs	r0, #0
 8009750:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d1e4      	bne.n	8009722 <expf+0x62>
 8009758:	f7fe ff96 	bl	8008688 <__errno>
 800975c:	2322      	movs	r3, #34	; 0x22
 800975e:	6003      	str	r3, [r0, #0]
 8009760:	e7e3      	b.n	800972a <expf+0x6a>
 8009762:	eddf 7a13 	vldr	s15, [pc, #76]	; 80097b0 <expf+0xf0>
 8009766:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800976a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976e:	d5e7      	bpl.n	8009740 <expf+0x80>
 8009770:	2304      	movs	r3, #4
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <expf+0xe4>)
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	ee18 0a10 	vmov	r0, s16
 800977c:	2300      	movs	r3, #0
 800977e:	9308      	str	r3, [sp, #32]
 8009780:	f7fa f8f6 	bl	8003970 <__aeabi_f2d>
 8009784:	2300      	movs	r3, #0
 8009786:	2200      	movs	r2, #0
 8009788:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800978c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009794:	f995 3000 	ldrsb.w	r3, [r5]
 8009798:	e7dc      	b.n	8009754 <expf+0x94>
 800979a:	bf00      	nop
 800979c:	2000088c 	.word	0x2000088c
 80097a0:	42b17180 	.word	0x42b17180
 80097a4:	0804f0e3 	.word	0x0804f0e3
 80097a8:	47efffff 	.word	0x47efffff
 80097ac:	7ff00000 	.word	0x7ff00000
 80097b0:	c2cff1b5 	.word	0xc2cff1b5

080097b4 <powf>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	ed2d 8b04 	vpush	{d8-d9}
 80097ba:	4cb5      	ldr	r4, [pc, #724]	; (8009a90 <powf+0x2dc>)
 80097bc:	b08a      	sub	sp, #40	; 0x28
 80097be:	eef0 8a40 	vmov.f32	s17, s0
 80097c2:	eeb0 8a60 	vmov.f32	s16, s1
 80097c6:	f000 fa45 	bl	8009c54 <__ieee754_powf>
 80097ca:	f994 5000 	ldrsb.w	r5, [r4]
 80097ce:	1c6b      	adds	r3, r5, #1
 80097d0:	eeb0 9a40 	vmov.f32	s18, s0
 80097d4:	4626      	mov	r6, r4
 80097d6:	d05d      	beq.n	8009894 <powf+0xe0>
 80097d8:	eeb4 8a48 	vcmp.f32	s16, s16
 80097dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e0:	d658      	bvs.n	8009894 <powf+0xe0>
 80097e2:	eef4 8a68 	vcmp.f32	s17, s17
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	d721      	bvc.n	8009830 <powf+0x7c>
 80097ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80097f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f4:	d14e      	bne.n	8009894 <powf+0xe0>
 80097f6:	2301      	movs	r3, #1
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	4ba6      	ldr	r3, [pc, #664]	; (8009a94 <powf+0x2e0>)
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	ee18 0a90 	vmov	r0, s17
 8009802:	2300      	movs	r3, #0
 8009804:	9308      	str	r3, [sp, #32]
 8009806:	f7fa f8b3 	bl	8003970 <__aeabi_f2d>
 800980a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980e:	ee18 0a10 	vmov	r0, s16
 8009812:	f7fa f8ad 	bl	8003970 <__aeabi_f2d>
 8009816:	4ba0      	ldr	r3, [pc, #640]	; (8009a98 <powf+0x2e4>)
 8009818:	2200      	movs	r2, #0
 800981a:	2d02      	cmp	r5, #2
 800981c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009820:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009824:	d030      	beq.n	8009888 <powf+0xd4>
 8009826:	4668      	mov	r0, sp
 8009828:	f000 fd1d 	bl	800a266 <matherr>
 800982c:	bb30      	cbnz	r0, 800987c <powf+0xc8>
 800982e:	e062      	b.n	80098f6 <powf+0x142>
 8009830:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009838:	d162      	bne.n	8009900 <powf+0x14c>
 800983a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009842:	d12d      	bne.n	80098a0 <powf+0xec>
 8009844:	2301      	movs	r3, #1
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	4b92      	ldr	r3, [pc, #584]	; (8009a94 <powf+0x2e0>)
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	ee18 0a90 	vmov	r0, s17
 8009850:	2300      	movs	r3, #0
 8009852:	9308      	str	r3, [sp, #32]
 8009854:	f7fa f88c 	bl	8003970 <__aeabi_f2d>
 8009858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800985c:	ee18 0a10 	vmov	r0, s16
 8009860:	f7fa f886 	bl	8003970 <__aeabi_f2d>
 8009864:	2200      	movs	r2, #0
 8009866:	2300      	movs	r3, #0
 8009868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800986c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009870:	2d00      	cmp	r5, #0
 8009872:	d0d8      	beq.n	8009826 <powf+0x72>
 8009874:	4b88      	ldr	r3, [pc, #544]	; (8009a98 <powf+0x2e4>)
 8009876:	2200      	movs	r2, #0
 8009878:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800987c:	9b08      	ldr	r3, [sp, #32]
 800987e:	b11b      	cbz	r3, 8009888 <powf+0xd4>
 8009880:	f7fe ff02 	bl	8008688 <__errno>
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	6003      	str	r3, [r0, #0]
 8009888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800988c:	f7fa fb5e 	bl	8003f4c <__aeabi_d2f>
 8009890:	ee09 0a10 	vmov	s18, r0
 8009894:	eeb0 0a49 	vmov.f32	s0, s18
 8009898:	b00a      	add	sp, #40	; 0x28
 800989a:	ecbd 8b04 	vpop	{d8-d9}
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	eeb0 0a48 	vmov.f32	s0, s16
 80098a4:	f000 fe9d 	bl	800a5e2 <finitef>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d0f3      	beq.n	8009894 <powf+0xe0>
 80098ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80098b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b4:	d5ee      	bpl.n	8009894 <powf+0xe0>
 80098b6:	2301      	movs	r3, #1
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	4b76      	ldr	r3, [pc, #472]	; (8009a94 <powf+0x2e0>)
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	ee18 0a90 	vmov	r0, s17
 80098c2:	2300      	movs	r3, #0
 80098c4:	9308      	str	r3, [sp, #32]
 80098c6:	f7fa f853 	bl	8003970 <__aeabi_f2d>
 80098ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ce:	ee18 0a10 	vmov	r0, s16
 80098d2:	f7fa f84d 	bl	8003970 <__aeabi_f2d>
 80098d6:	f994 3000 	ldrsb.w	r3, [r4]
 80098da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098de:	b923      	cbnz	r3, 80098ea <powf+0x136>
 80098e0:	2200      	movs	r2, #0
 80098e2:	2300      	movs	r3, #0
 80098e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098e8:	e79d      	b.n	8009826 <powf+0x72>
 80098ea:	496c      	ldr	r1, [pc, #432]	; (8009a9c <powf+0x2e8>)
 80098ec:	2000      	movs	r0, #0
 80098ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d197      	bne.n	8009826 <powf+0x72>
 80098f6:	f7fe fec7 	bl	8008688 <__errno>
 80098fa:	2321      	movs	r3, #33	; 0x21
 80098fc:	6003      	str	r3, [r0, #0]
 80098fe:	e7bd      	b.n	800987c <powf+0xc8>
 8009900:	f000 fe6f 	bl	800a5e2 <finitef>
 8009904:	4605      	mov	r5, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	f040 8091 	bne.w	8009a2e <powf+0x27a>
 800990c:	eeb0 0a68 	vmov.f32	s0, s17
 8009910:	f000 fe67 	bl	800a5e2 <finitef>
 8009914:	2800      	cmp	r0, #0
 8009916:	f000 808a 	beq.w	8009a2e <powf+0x27a>
 800991a:	eeb0 0a48 	vmov.f32	s0, s16
 800991e:	f000 fe60 	bl	800a5e2 <finitef>
 8009922:	2800      	cmp	r0, #0
 8009924:	f000 8083 	beq.w	8009a2e <powf+0x27a>
 8009928:	eeb4 9a49 	vcmp.f32	s18, s18
 800992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009930:	f994 4000 	ldrsb.w	r4, [r4]
 8009934:	4b57      	ldr	r3, [pc, #348]	; (8009a94 <powf+0x2e0>)
 8009936:	d71b      	bvc.n	8009970 <powf+0x1bc>
 8009938:	2201      	movs	r2, #1
 800993a:	ee18 0a90 	vmov	r0, s17
 800993e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009942:	9508      	str	r5, [sp, #32]
 8009944:	f7fa f814 	bl	8003970 <__aeabi_f2d>
 8009948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800994c:	ee18 0a10 	vmov	r0, s16
 8009950:	f7fa f80e 	bl	8003970 <__aeabi_f2d>
 8009954:	2200      	movs	r2, #0
 8009956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800995a:	2300      	movs	r3, #0
 800995c:	2c00      	cmp	r4, #0
 800995e:	d0c1      	beq.n	80098e4 <powf+0x130>
 8009960:	4610      	mov	r0, r2
 8009962:	4619      	mov	r1, r3
 8009964:	f7fa f982 	bl	8003c6c <__aeabi_ddiv>
 8009968:	2c02      	cmp	r4, #2
 800996a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800996e:	e7c1      	b.n	80098f4 <powf+0x140>
 8009970:	2203      	movs	r2, #3
 8009972:	ee18 0a90 	vmov	r0, s17
 8009976:	e88d 000c 	stmia.w	sp, {r2, r3}
 800997a:	9508      	str	r5, [sp, #32]
 800997c:	f7f9 fff8 	bl	8003970 <__aeabi_f2d>
 8009980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009984:	ee18 0a10 	vmov	r0, s16
 8009988:	f7f9 fff2 	bl	8003970 <__aeabi_f2d>
 800998c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009990:	bb5c      	cbnz	r4, 80099ea <powf+0x236>
 8009992:	4b43      	ldr	r3, [pc, #268]	; (8009aa0 <powf+0x2ec>)
 8009994:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009998:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800999c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099a4:	d56c      	bpl.n	8009a80 <powf+0x2cc>
 80099a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80099aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80099ae:	ee17 0a90 	vmov	r0, s15
 80099b2:	f7f9 ffdd 	bl	8003970 <__aeabi_f2d>
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	ec45 4b10 	vmov	d0, r4, r5
 80099be:	f000 fc55 	bl	800a26c <rint>
 80099c2:	4620      	mov	r0, r4
 80099c4:	ec53 2b10 	vmov	r2, r3, d0
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7fa fa8d 	bl	8003ee8 <__aeabi_dcmpeq>
 80099ce:	b920      	cbnz	r0, 80099da <powf+0x226>
 80099d0:	4b34      	ldr	r3, [pc, #208]	; (8009aa4 <powf+0x2f0>)
 80099d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80099d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099da:	f996 3000 	ldrsb.w	r3, [r6]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d14e      	bne.n	8009a80 <powf+0x2cc>
 80099e2:	f7fe fe51 	bl	8008688 <__errno>
 80099e6:	2322      	movs	r3, #34	; 0x22
 80099e8:	e788      	b.n	80098fc <powf+0x148>
 80099ea:	4b2f      	ldr	r3, [pc, #188]	; (8009aa8 <powf+0x2f4>)
 80099ec:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80099f0:	2200      	movs	r2, #0
 80099f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099fa:	d5ee      	bpl.n	80099da <powf+0x226>
 80099fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a00:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009a04:	ee17 0a90 	vmov	r0, s15
 8009a08:	f7f9 ffb2 	bl	8003970 <__aeabi_f2d>
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	460d      	mov	r5, r1
 8009a10:	ec45 4b10 	vmov	d0, r4, r5
 8009a14:	f000 fc2a 	bl	800a26c <rint>
 8009a18:	4620      	mov	r0, r4
 8009a1a:	ec53 2b10 	vmov	r2, r3, d0
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7fa fa62 	bl	8003ee8 <__aeabi_dcmpeq>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d1d8      	bne.n	80099da <powf+0x226>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <powf+0x2e8>)
 8009a2c:	e7d3      	b.n	80099d6 <powf+0x222>
 8009a2e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a36:	f47f af2d 	bne.w	8009894 <powf+0xe0>
 8009a3a:	eeb0 0a68 	vmov.f32	s0, s17
 8009a3e:	f000 fdd0 	bl	800a5e2 <finitef>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f43f af26 	beq.w	8009894 <powf+0xe0>
 8009a48:	eeb0 0a48 	vmov.f32	s0, s16
 8009a4c:	f000 fdc9 	bl	800a5e2 <finitef>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f43f af1f 	beq.w	8009894 <powf+0xe0>
 8009a56:	2304      	movs	r3, #4
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <powf+0x2e0>)
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	ee18 0a90 	vmov	r0, s17
 8009a62:	2300      	movs	r3, #0
 8009a64:	9308      	str	r3, [sp, #32]
 8009a66:	f7f9 ff83 	bl	8003970 <__aeabi_f2d>
 8009a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6e:	ee18 0a10 	vmov	r0, s16
 8009a72:	f7f9 ff7d 	bl	8003970 <__aeabi_f2d>
 8009a76:	2200      	movs	r2, #0
 8009a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e7aa      	b.n	80099d6 <powf+0x222>
 8009a80:	4668      	mov	r0, sp
 8009a82:	f000 fbf0 	bl	800a266 <matherr>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f47f aef8 	bne.w	800987c <powf+0xc8>
 8009a8c:	e7a9      	b.n	80099e2 <powf+0x22e>
 8009a8e:	bf00      	nop
 8009a90:	2000088c 	.word	0x2000088c
 8009a94:	0804f0e8 	.word	0x0804f0e8
 8009a98:	3ff00000 	.word	0x3ff00000
 8009a9c:	fff00000 	.word	0xfff00000
 8009aa0:	47efffff 	.word	0x47efffff
 8009aa4:	c7efffff 	.word	0xc7efffff
 8009aa8:	7ff00000 	.word	0x7ff00000

08009aac <__ieee754_expf>:
 8009aac:	ee10 2a10 	vmov	r2, s0
 8009ab0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009ab4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009ab8:	d902      	bls.n	8009ac0 <__ieee754_expf+0x14>
 8009aba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009abe:	4770      	bx	lr
 8009ac0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009ac4:	d106      	bne.n	8009ad4 <__ieee754_expf+0x28>
 8009ac6:	eddf 7a51 	vldr	s15, [pc, #324]	; 8009c0c <__ieee754_expf+0x160>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bf18      	it	ne
 8009ace:	eeb0 0a67 	vmovne.f32	s0, s15
 8009ad2:	4770      	bx	lr
 8009ad4:	484e      	ldr	r0, [pc, #312]	; (8009c10 <__ieee754_expf+0x164>)
 8009ad6:	4282      	cmp	r2, r0
 8009ad8:	dd04      	ble.n	8009ae4 <__ieee754_expf+0x38>
 8009ada:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8009c14 <__ieee754_expf+0x168>
 8009ade:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ae2:	4770      	bx	lr
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	da03      	bge.n	8009af0 <__ieee754_expf+0x44>
 8009ae8:	4a4b      	ldr	r2, [pc, #300]	; (8009c18 <__ieee754_expf+0x16c>)
 8009aea:	4291      	cmp	r1, r2
 8009aec:	f200 808a 	bhi.w	8009c04 <__ieee754_expf+0x158>
 8009af0:	4a4a      	ldr	r2, [pc, #296]	; (8009c1c <__ieee754_expf+0x170>)
 8009af2:	4291      	cmp	r1, r2
 8009af4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009af8:	d954      	bls.n	8009ba4 <__ieee754_expf+0xf8>
 8009afa:	4a49      	ldr	r2, [pc, #292]	; (8009c20 <__ieee754_expf+0x174>)
 8009afc:	4291      	cmp	r1, r2
 8009afe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009b02:	d836      	bhi.n	8009b72 <__ieee754_expf+0xc6>
 8009b04:	4947      	ldr	r1, [pc, #284]	; (8009c24 <__ieee754_expf+0x178>)
 8009b06:	4411      	add	r1, r2
 8009b08:	ed91 7a00 	vldr	s14, [r1]
 8009b0c:	4946      	ldr	r1, [pc, #280]	; (8009c28 <__ieee754_expf+0x17c>)
 8009b0e:	440a      	add	r2, r1
 8009b10:	edd2 7a00 	vldr	s15, [r2]
 8009b14:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009b18:	f1c3 0201 	rsb	r2, r3, #1
 8009b1c:	1ad2      	subs	r2, r2, r3
 8009b1e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009b22:	ee60 6a00 	vmul.f32	s13, s0, s0
 8009b26:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009c2c <__ieee754_expf+0x180>
 8009b2a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8009c30 <__ieee754_expf+0x184>
 8009b2e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009b32:	eddf 5a40 	vldr	s11, [pc, #256]	; 8009c34 <__ieee754_expf+0x188>
 8009b36:	eee6 5a85 	vfma.f32	s11, s13, s10
 8009b3a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8009c38 <__ieee754_expf+0x18c>
 8009b3e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009b42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009c3c <__ieee754_expf+0x190>
 8009b46:	eee6 5a85 	vfma.f32	s11, s13, s10
 8009b4a:	eeb0 5a40 	vmov.f32	s10, s0
 8009b4e:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8009b52:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009b56:	eef0 6a45 	vmov.f32	s13, s10
 8009b5a:	ee20 5a05 	vmul.f32	s10, s0, s10
 8009b5e:	bb92      	cbnz	r2, 8009bc6 <__ieee754_expf+0x11a>
 8009b60:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8009b64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009b68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009b6c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009b70:	4770      	bx	lr
 8009b72:	4b33      	ldr	r3, [pc, #204]	; (8009c40 <__ieee754_expf+0x194>)
 8009b74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8009c44 <__ieee754_expf+0x198>
 8009b78:	4413      	add	r3, r2
 8009b7a:	edd3 7a00 	vldr	s15, [r3]
 8009b7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009b82:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009c48 <__ieee754_expf+0x19c>
 8009b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b8a:	ee17 2a90 	vmov	r2, s15
 8009b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b92:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009b96:	eeb0 7a40 	vmov.f32	s14, s0
 8009b9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009c4c <__ieee754_expf+0x1a0>
 8009b9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009ba2:	e7bc      	b.n	8009b1e <__ieee754_expf+0x72>
 8009ba4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009ba8:	d20b      	bcs.n	8009bc2 <__ieee754_expf+0x116>
 8009baa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8009c14 <__ieee754_expf+0x168>
 8009bae:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009bb2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	dd02      	ble.n	8009bc2 <__ieee754_expf+0x116>
 8009bbc:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009bc0:	4770      	bx	lr
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	e7ad      	b.n	8009b22 <__ieee754_expf+0x76>
 8009bc6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8009bca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009bce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009bd2:	bfb8      	it	lt
 8009bd4:	3264      	addlt	r2, #100	; 0x64
 8009bd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009bda:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009bde:	ee76 7a40 	vsub.f32	s15, s12, s0
 8009be2:	ee17 3a90 	vmov	r3, s15
 8009be6:	bfab      	itete	ge
 8009be8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009bec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009bf0:	ee00 3a10 	vmovge	s0, r3
 8009bf4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8009c50 <__ieee754_expf+0x1a4>
 8009bf8:	bfbc      	itt	lt
 8009bfa:	ee00 3a10 	vmovlt	s0, r3
 8009bfe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009c02:	4770      	bx	lr
 8009c04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c0c <__ieee754_expf+0x160>
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	00000000 	.word	0x00000000
 8009c10:	42b17217 	.word	0x42b17217
 8009c14:	7149f2ca 	.word	0x7149f2ca
 8009c18:	42cff1b5 	.word	0x42cff1b5
 8009c1c:	3eb17218 	.word	0x3eb17218
 8009c20:	3f851591 	.word	0x3f851591
 8009c24:	0804f0f8 	.word	0x0804f0f8
 8009c28:	0804f100 	.word	0x0804f100
 8009c2c:	3331bb4c 	.word	0x3331bb4c
 8009c30:	b5ddea0e 	.word	0xb5ddea0e
 8009c34:	388ab355 	.word	0x388ab355
 8009c38:	bb360b61 	.word	0xbb360b61
 8009c3c:	3e2aaaab 	.word	0x3e2aaaab
 8009c40:	0804f0f0 	.word	0x0804f0f0
 8009c44:	3fb8aa3b 	.word	0x3fb8aa3b
 8009c48:	3f317180 	.word	0x3f317180
 8009c4c:	3717f7d1 	.word	0x3717f7d1
 8009c50:	0d800000 	.word	0x0d800000

08009c54 <__ieee754_powf>:
 8009c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c58:	ee10 5a90 	vmov	r5, s1
 8009c5c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8009c60:	ed2d 8b02 	vpush	{d8}
 8009c64:	eeb0 8a40 	vmov.f32	s16, s0
 8009c68:	eef0 8a60 	vmov.f32	s17, s1
 8009c6c:	f000 8295 	beq.w	800a19a <__ieee754_powf+0x546>
 8009c70:	ee10 8a10 	vmov	r8, s0
 8009c74:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8009c78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009c7c:	dc06      	bgt.n	8009c8c <__ieee754_powf+0x38>
 8009c7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8009c82:	dd0a      	ble.n	8009c9a <__ieee754_powf+0x46>
 8009c84:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009c88:	f000 8287 	beq.w	800a19a <__ieee754_powf+0x546>
 8009c8c:	ecbd 8b02 	vpop	{d8}
 8009c90:	48d9      	ldr	r0, [pc, #868]	; (8009ff8 <__ieee754_powf+0x3a4>)
 8009c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c96:	f000 bcaf 	b.w	800a5f8 <nanf>
 8009c9a:	f1b8 0f00 	cmp.w	r8, #0
 8009c9e:	da1d      	bge.n	8009cdc <__ieee754_powf+0x88>
 8009ca0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8009ca4:	da2c      	bge.n	8009d00 <__ieee754_powf+0xac>
 8009ca6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009caa:	db30      	blt.n	8009d0e <__ieee754_powf+0xba>
 8009cac:	15fb      	asrs	r3, r7, #23
 8009cae:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009cb2:	fa47 f603 	asr.w	r6, r7, r3
 8009cb6:	fa06 f303 	lsl.w	r3, r6, r3
 8009cba:	429f      	cmp	r7, r3
 8009cbc:	d127      	bne.n	8009d0e <__ieee754_powf+0xba>
 8009cbe:	f006 0601 	and.w	r6, r6, #1
 8009cc2:	f1c6 0602 	rsb	r6, r6, #2
 8009cc6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009cca:	d122      	bne.n	8009d12 <__ieee754_powf+0xbe>
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	f280 826a 	bge.w	800a1a6 <__ieee754_powf+0x552>
 8009cd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009cd6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009cda:	e00d      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009cdc:	2600      	movs	r6, #0
 8009cde:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8009ce2:	d1f0      	bne.n	8009cc6 <__ieee754_powf+0x72>
 8009ce4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009ce8:	f000 8257 	beq.w	800a19a <__ieee754_powf+0x546>
 8009cec:	dd0a      	ble.n	8009d04 <__ieee754_powf+0xb0>
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	f280 8256 	bge.w	800a1a0 <__ieee754_powf+0x54c>
 8009cf4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8009ffc <__ieee754_powf+0x3a8>
 8009cf8:	ecbd 8b02 	vpop	{d8}
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	2602      	movs	r6, #2
 8009d02:	e7ec      	b.n	8009cde <__ieee754_powf+0x8a>
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	daf5      	bge.n	8009cf4 <__ieee754_powf+0xa0>
 8009d08:	eeb1 0a68 	vneg.f32	s0, s17
 8009d0c:	e7f4      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009d0e:	2600      	movs	r6, #0
 8009d10:	e7d9      	b.n	8009cc6 <__ieee754_powf+0x72>
 8009d12:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8009d16:	d102      	bne.n	8009d1e <__ieee754_powf+0xca>
 8009d18:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009d1c:	e7ec      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009d1e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8009d22:	eeb0 0a48 	vmov.f32	s0, s16
 8009d26:	d108      	bne.n	8009d3a <__ieee754_powf+0xe6>
 8009d28:	f1b8 0f00 	cmp.w	r8, #0
 8009d2c:	db05      	blt.n	8009d3a <__ieee754_powf+0xe6>
 8009d2e:	ecbd 8b02 	vpop	{d8}
 8009d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d36:	f000 ba4f 	b.w	800a1d8 <__ieee754_sqrtf>
 8009d3a:	f000 fc4b 	bl	800a5d4 <fabsf>
 8009d3e:	b124      	cbz	r4, 8009d4a <__ieee754_powf+0xf6>
 8009d40:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8009d44:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009d48:	d117      	bne.n	8009d7a <__ieee754_powf+0x126>
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	bfbc      	itt	lt
 8009d4e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009d52:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009d56:	f1b8 0f00 	cmp.w	r8, #0
 8009d5a:	dacd      	bge.n	8009cf8 <__ieee754_powf+0xa4>
 8009d5c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8009d60:	ea54 0306 	orrs.w	r3, r4, r6
 8009d64:	d104      	bne.n	8009d70 <__ieee754_powf+0x11c>
 8009d66:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009d6a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009d6e:	e7c3      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009d70:	2e01      	cmp	r6, #1
 8009d72:	d1c1      	bne.n	8009cf8 <__ieee754_powf+0xa4>
 8009d74:	eeb1 0a40 	vneg.f32	s0, s0
 8009d78:	e7be      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009d7a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8009d7e:	3801      	subs	r0, #1
 8009d80:	ea56 0300 	orrs.w	r3, r6, r0
 8009d84:	d104      	bne.n	8009d90 <__ieee754_powf+0x13c>
 8009d86:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009d8a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009d8e:	e7b3      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009d90:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8009d94:	dd6d      	ble.n	8009e72 <__ieee754_powf+0x21e>
 8009d96:	4b9a      	ldr	r3, [pc, #616]	; (800a000 <__ieee754_powf+0x3ac>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	dc06      	bgt.n	8009daa <__ieee754_powf+0x156>
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	daa9      	bge.n	8009cf4 <__ieee754_powf+0xa0>
 8009da0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800a004 <__ieee754_powf+0x3b0>
 8009da4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009da8:	e7a6      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009daa:	4b97      	ldr	r3, [pc, #604]	; (800a008 <__ieee754_powf+0x3b4>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	dd02      	ble.n	8009db6 <__ieee754_powf+0x162>
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	dcf5      	bgt.n	8009da0 <__ieee754_powf+0x14c>
 8009db4:	e79e      	b.n	8009cf4 <__ieee754_powf+0xa0>
 8009db6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009dba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009dbe:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800a00c <__ieee754_powf+0x3b8>
 8009dc2:	ed9f 6a93 	vldr	s12, [pc, #588]	; 800a010 <__ieee754_powf+0x3bc>
 8009dc6:	eef1 6a40 	vneg.f32	s13, s0
 8009dca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009dce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009dd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009dda:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009dde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009de2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800a014 <__ieee754_powf+0x3c0>
 8009de6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009dea:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800a018 <__ieee754_powf+0x3c4>
 8009dee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009df2:	eeb0 7a67 	vmov.f32	s14, s15
 8009df6:	eea0 7a06 	vfma.f32	s14, s0, s12
 8009dfa:	ee17 3a10 	vmov	r3, s14
 8009dfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e02:	f023 030f 	bic.w	r3, r3, #15
 8009e06:	ee07 3a10 	vmov	s14, r3
 8009e0a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009e0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e12:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8009e16:	f025 050f 	bic.w	r5, r5, #15
 8009e1a:	ee07 5a10 	vmov	s14, r5
 8009e1e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009e22:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8009e26:	ee07 3a10 	vmov	s14, r3
 8009e2a:	ee06 5a90 	vmov	s13, r5
 8009e2e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8009e32:	3e01      	subs	r6, #1
 8009e34:	ea56 0200 	orrs.w	r2, r6, r0
 8009e38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009e3c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009e40:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009e44:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009e48:	ee16 4a90 	vmov	r4, s13
 8009e4c:	bf08      	it	eq
 8009e4e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8009e52:	2c00      	cmp	r4, #0
 8009e54:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e58:	f340 8186 	ble.w	800a168 <__ieee754_powf+0x514>
 8009e5c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009e60:	f340 80fc 	ble.w	800a05c <__ieee754_powf+0x408>
 8009e64:	eddf 7a67 	vldr	s15, [pc, #412]	; 800a004 <__ieee754_powf+0x3b0>
 8009e68:	ee28 0a27 	vmul.f32	s0, s16, s15
 8009e6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e70:	e742      	b.n	8009cf8 <__ieee754_powf+0xa4>
 8009e72:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8009e76:	bfbf      	itttt	lt
 8009e78:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800a01c <__ieee754_powf+0x3c8>
 8009e7c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009e80:	f06f 0217 	mvnlt.w	r2, #23
 8009e84:	ee17 4a90 	vmovlt	r4, s15
 8009e88:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8009e8c:	bfa8      	it	ge
 8009e8e:	2200      	movge	r2, #0
 8009e90:	3b7f      	subs	r3, #127	; 0x7f
 8009e92:	4413      	add	r3, r2
 8009e94:	4a62      	ldr	r2, [pc, #392]	; (800a020 <__ieee754_powf+0x3cc>)
 8009e96:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009e9a:	4294      	cmp	r4, r2
 8009e9c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8009ea0:	dd06      	ble.n	8009eb0 <__ieee754_powf+0x25c>
 8009ea2:	4a60      	ldr	r2, [pc, #384]	; (800a024 <__ieee754_powf+0x3d0>)
 8009ea4:	4294      	cmp	r4, r2
 8009ea6:	f340 80a5 	ble.w	8009ff4 <__ieee754_powf+0x3a0>
 8009eaa:	3301      	adds	r3, #1
 8009eac:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009eb0:	2400      	movs	r4, #0
 8009eb2:	4a5d      	ldr	r2, [pc, #372]	; (800a028 <__ieee754_powf+0x3d4>)
 8009eb4:	00a7      	lsls	r7, r4, #2
 8009eb6:	443a      	add	r2, r7
 8009eb8:	ee07 1a90 	vmov	s15, r1
 8009ebc:	ed92 7a00 	vldr	s14, [r2]
 8009ec0:	4a5a      	ldr	r2, [pc, #360]	; (800a02c <__ieee754_powf+0x3d8>)
 8009ec2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009ec6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009eca:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8009ece:	1049      	asrs	r1, r1, #1
 8009ed0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009ed4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009ed8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8009edc:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8009ee0:	ee06 1a90 	vmov	s13, r1
 8009ee4:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009ee8:	ee14 ea90 	vmov	lr, s9
 8009eec:	ea02 0e0e 	and.w	lr, r2, lr
 8009ef0:	ee05 ea90 	vmov	s11, lr
 8009ef4:	eeb1 4a65 	vneg.f32	s8, s11
 8009ef8:	eea4 6a26 	vfma.f32	s12, s8, s13
 8009efc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009f00:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8009f04:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009f08:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a030 <__ieee754_powf+0x3dc>
 8009f0c:	eea4 6a26 	vfma.f32	s12, s8, s13
 8009f10:	ee66 6a05 	vmul.f32	s13, s12, s10
 8009f14:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8009f18:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800a034 <__ieee754_powf+0x3e0>
 8009f1c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8009f20:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800a038 <__ieee754_powf+0x3e4>
 8009f24:	eea6 5a27 	vfma.f32	s10, s12, s15
 8009f28:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a00c <__ieee754_powf+0x3b8>
 8009f2c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8009f30:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800a03c <__ieee754_powf+0x3e8>
 8009f34:	eea6 5a27 	vfma.f32	s10, s12, s15
 8009f38:	eddf 7a41 	vldr	s15, [pc, #260]	; 800a040 <__ieee754_powf+0x3ec>
 8009f3c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8009f40:	ee66 3a06 	vmul.f32	s7, s12, s12
 8009f44:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8009f48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009f4c:	eeb0 6a45 	vmov.f32	s12, s10
 8009f50:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8009f54:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8009f58:	ee36 6a07 	vadd.f32	s12, s12, s14
 8009f5c:	ee16 1a10 	vmov	r1, s12
 8009f60:	4011      	ands	r1, r2
 8009f62:	ee06 1a10 	vmov	s12, r1
 8009f66:	ee76 7a45 	vsub.f32	s15, s12, s10
 8009f6a:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800a044 <__ieee754_powf+0x3f0>
 8009f6e:	eee4 7a25 	vfma.f32	s15, s8, s11
 8009f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f76:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8009f7a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009f7e:	eeb0 7a67 	vmov.f32	s14, s15
 8009f82:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009f86:	ee17 1a10 	vmov	r1, s14
 8009f8a:	4011      	ands	r1, r2
 8009f8c:	ee07 1a10 	vmov	s14, r1
 8009f90:	eea4 7a06 	vfma.f32	s14, s8, s12
 8009f94:	ee05 1a90 	vmov	s11, r1
 8009f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f9c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a048 <__ieee754_powf+0x3f4>
 8009fa0:	492a      	ldr	r1, [pc, #168]	; (800a04c <__ieee754_powf+0x3f8>)
 8009fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fa6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a050 <__ieee754_powf+0x3fc>
 8009faa:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009fae:	4439      	add	r1, r7
 8009fb0:	ed91 7a00 	vldr	s14, [r1]
 8009fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fb8:	ee07 3a90 	vmov	s15, r3
 8009fbc:	eeb0 6a47 	vmov.f32	s12, s14
 8009fc0:	4b24      	ldr	r3, [pc, #144]	; (800a054 <__ieee754_powf+0x400>)
 8009fc2:	eea5 6a85 	vfma.f32	s12, s11, s10
 8009fc6:	443b      	add	r3, r7
 8009fc8:	edd3 4a00 	vldr	s9, [r3]
 8009fcc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009fd0:	ee36 6a24 	vadd.f32	s12, s12, s9
 8009fd4:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009fd8:	ee17 3a90 	vmov	r3, s15
 8009fdc:	4013      	ands	r3, r2
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009fe6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009fea:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8009fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff2:	e70e      	b.n	8009e12 <__ieee754_powf+0x1be>
 8009ff4:	2401      	movs	r4, #1
 8009ff6:	e75c      	b.n	8009eb2 <__ieee754_powf+0x25e>
 8009ff8:	0804e85d 	.word	0x0804e85d
 8009ffc:	00000000 	.word	0x00000000
 800a000:	3f7ffff7 	.word	0x3f7ffff7
 800a004:	7149f2ca 	.word	0x7149f2ca
 800a008:	3f800007 	.word	0x3f800007
 800a00c:	3eaaaaab 	.word	0x3eaaaaab
 800a010:	3fb8aa00 	.word	0x3fb8aa00
 800a014:	3fb8aa3b 	.word	0x3fb8aa3b
 800a018:	36eca570 	.word	0x36eca570
 800a01c:	4b800000 	.word	0x4b800000
 800a020:	001cc471 	.word	0x001cc471
 800a024:	005db3d6 	.word	0x005db3d6
 800a028:	0804f108 	.word	0x0804f108
 800a02c:	fffff000 	.word	0xfffff000
 800a030:	3e6c3255 	.word	0x3e6c3255
 800a034:	3e53f142 	.word	0x3e53f142
 800a038:	3e8ba305 	.word	0x3e8ba305
 800a03c:	3edb6db7 	.word	0x3edb6db7
 800a040:	3f19999a 	.word	0x3f19999a
 800a044:	3f763800 	.word	0x3f763800
 800a048:	3f76384f 	.word	0x3f76384f
 800a04c:	0804f118 	.word	0x0804f118
 800a050:	369dc3a0 	.word	0x369dc3a0
 800a054:	0804f110 	.word	0x0804f110
 800a058:	3338aa3c 	.word	0x3338aa3c
 800a05c:	f040 8094 	bne.w	800a188 <__ieee754_powf+0x534>
 800a060:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 800a058 <__ieee754_powf+0x404>
 800a064:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a068:	ee37 6a86 	vadd.f32	s12, s15, s12
 800a06c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800a070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a074:	f73f aef6 	bgt.w	8009e64 <__ieee754_powf+0x210>
 800a078:	15db      	asrs	r3, r3, #23
 800a07a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a07e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a082:	4103      	asrs	r3, r0
 800a084:	4423      	add	r3, r4
 800a086:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a08a:	4948      	ldr	r1, [pc, #288]	; (800a1ac <__ieee754_powf+0x558>)
 800a08c:	3a7f      	subs	r2, #127	; 0x7f
 800a08e:	4111      	asrs	r1, r2
 800a090:	ea23 0101 	bic.w	r1, r3, r1
 800a094:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a098:	ee06 1a90 	vmov	s13, r1
 800a09c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a0a0:	f1c2 0217 	rsb	r2, r2, #23
 800a0a4:	4110      	asrs	r0, r2
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a0ac:	bfb8      	it	lt
 800a0ae:	4240      	neglt	r0, r0
 800a0b0:	ee77 6a27 	vadd.f32	s13, s14, s15
 800a0b4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800a1b0 <__ieee754_powf+0x55c>
 800a0b8:	ee16 3a90 	vmov	r3, s13
 800a0bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a0c0:	f023 030f 	bic.w	r3, r3, #15
 800a0c4:	ee06 3a90 	vmov	s13, r3
 800a0c8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a0cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0d0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a1b4 <__ieee754_powf+0x560>
 800a0d4:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a0d8:	eea7 7a86 	vfma.f32	s14, s15, s12
 800a0dc:	eef0 7a47 	vmov.f32	s15, s14
 800a0e0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800a1b8 <__ieee754_powf+0x564>
 800a0e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e8:	eea6 0a87 	vfma.f32	s0, s13, s14
 800a0ec:	eeb0 6a40 	vmov.f32	s12, s0
 800a0f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a0f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a0f8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a0fc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800a1bc <__ieee754_powf+0x568>
 800a100:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a1c0 <__ieee754_powf+0x56c>
 800a104:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a108:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800a1c4 <__ieee754_powf+0x570>
 800a10c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a110:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800a1c8 <__ieee754_powf+0x574>
 800a114:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a118:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800a1cc <__ieee754_powf+0x578>
 800a11c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a120:	eeb0 6a40 	vmov.f32	s12, s0
 800a124:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a128:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a12c:	eeb0 7a46 	vmov.f32	s14, s12
 800a130:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a134:	ee20 6a06 	vmul.f32	s12, s0, s12
 800a138:	eee0 7a27 	vfma.f32	s15, s0, s15
 800a13c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a140:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a144:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a148:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a14c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a150:	ee10 3a10 	vmov	r3, s0
 800a154:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a15c:	da1a      	bge.n	800a194 <__ieee754_powf+0x540>
 800a15e:	f000 fa51 	bl	800a604 <scalbnf>
 800a162:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a166:	e5c7      	b.n	8009cf8 <__ieee754_powf+0xa4>
 800a168:	4a19      	ldr	r2, [pc, #100]	; (800a1d0 <__ieee754_powf+0x57c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	dd02      	ble.n	800a174 <__ieee754_powf+0x520>
 800a16e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a1d4 <__ieee754_powf+0x580>
 800a172:	e679      	b.n	8009e68 <__ieee754_powf+0x214>
 800a174:	d108      	bne.n	800a188 <__ieee754_powf+0x534>
 800a176:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a17a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a182:	f63f af79 	bhi.w	800a078 <__ieee754_powf+0x424>
 800a186:	e7f2      	b.n	800a16e <__ieee754_powf+0x51a>
 800a188:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a18c:	f73f af74 	bgt.w	800a078 <__ieee754_powf+0x424>
 800a190:	2000      	movs	r0, #0
 800a192:	e78d      	b.n	800a0b0 <__ieee754_powf+0x45c>
 800a194:	ee00 3a10 	vmov	s0, r3
 800a198:	e7e3      	b.n	800a162 <__ieee754_powf+0x50e>
 800a19a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a19e:	e5ab      	b.n	8009cf8 <__ieee754_powf+0xa4>
 800a1a0:	eeb0 0a68 	vmov.f32	s0, s17
 800a1a4:	e5a8      	b.n	8009cf8 <__ieee754_powf+0xa4>
 800a1a6:	eeb0 0a48 	vmov.f32	s0, s16
 800a1aa:	e5a5      	b.n	8009cf8 <__ieee754_powf+0xa4>
 800a1ac:	007fffff 	.word	0x007fffff
 800a1b0:	3f317218 	.word	0x3f317218
 800a1b4:	35bfbe8c 	.word	0x35bfbe8c
 800a1b8:	3f317200 	.word	0x3f317200
 800a1bc:	3331bb4c 	.word	0x3331bb4c
 800a1c0:	b5ddea0e 	.word	0xb5ddea0e
 800a1c4:	388ab355 	.word	0x388ab355
 800a1c8:	bb360b61 	.word	0xbb360b61
 800a1cc:	3e2aaaab 	.word	0x3e2aaaab
 800a1d0:	43160000 	.word	0x43160000
 800a1d4:	0da24260 	.word	0x0da24260

0800a1d8 <__ieee754_sqrtf>:
 800a1d8:	ee10 2a10 	vmov	r2, s0
 800a1dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	d302      	bcc.n	800a1ee <__ieee754_sqrtf+0x16>
 800a1e8:	eea0 0a00 	vfma.f32	s0, s0, s0
 800a1ec:	bd70      	pop	{r4, r5, r6, pc}
 800a1ee:	b3b1      	cbz	r1, 800a25e <__ieee754_sqrtf+0x86>
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	da04      	bge.n	800a1fe <__ieee754_sqrtf+0x26>
 800a1f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a1f8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
 800a1fe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a202:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a206:	d204      	bcs.n	800a212 <__ieee754_sqrtf+0x3a>
 800a208:	2100      	movs	r1, #0
 800a20a:	0210      	lsls	r0, r2, #8
 800a20c:	d528      	bpl.n	800a260 <__ieee754_sqrtf+0x88>
 800a20e:	3901      	subs	r1, #1
 800a210:	1a5b      	subs	r3, r3, r1
 800a212:	3b7f      	subs	r3, #127	; 0x7f
 800a214:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a218:	07d9      	lsls	r1, r3, #31
 800a21a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a21e:	bf48      	it	mi
 800a220:	0052      	lslmi	r2, r2, #1
 800a222:	1059      	asrs	r1, r3, #1
 800a224:	2300      	movs	r3, #0
 800a226:	0052      	lsls	r2, r2, #1
 800a228:	2419      	movs	r4, #25
 800a22a:	461e      	mov	r6, r3
 800a22c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a230:	1835      	adds	r5, r6, r0
 800a232:	4295      	cmp	r5, r2
 800a234:	bfde      	ittt	le
 800a236:	182e      	addle	r6, r5, r0
 800a238:	1b52      	suble	r2, r2, r5
 800a23a:	181b      	addle	r3, r3, r0
 800a23c:	3c01      	subs	r4, #1
 800a23e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a242:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a246:	d1f3      	bne.n	800a230 <__ieee754_sqrtf+0x58>
 800a248:	b112      	cbz	r2, 800a250 <__ieee754_sqrtf+0x78>
 800a24a:	3301      	adds	r3, #1
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	105b      	asrs	r3, r3, #1
 800a252:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800a256:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800a25a:	ee00 3a10 	vmov	s0, r3
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	0052      	lsls	r2, r2, #1
 800a262:	3101      	adds	r1, #1
 800a264:	e7d1      	b.n	800a20a <__ieee754_sqrtf+0x32>

0800a266 <matherr>:
 800a266:	2000      	movs	r0, #0
 800a268:	4770      	bx	lr
	...

0800a26c <rint>:
 800a26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26e:	ec51 0b10 	vmov	r0, r1, d0
 800a272:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a276:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800a27a:	2e13      	cmp	r6, #19
 800a27c:	ee10 7a10 	vmov	r7, s0
 800a280:	460b      	mov	r3, r1
 800a282:	4602      	mov	r2, r0
 800a284:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a288:	dc58      	bgt.n	800a33c <rint+0xd0>
 800a28a:	2e00      	cmp	r6, #0
 800a28c:	da2b      	bge.n	800a2e6 <rint+0x7a>
 800a28e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a292:	4302      	orrs	r2, r0
 800a294:	d023      	beq.n	800a2de <rint+0x72>
 800a296:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a29a:	4302      	orrs	r2, r0
 800a29c:	4251      	negs	r1, r2
 800a29e:	4311      	orrs	r1, r2
 800a2a0:	0b09      	lsrs	r1, r1, #12
 800a2a2:	0c5b      	lsrs	r3, r3, #17
 800a2a4:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800a2a8:	045b      	lsls	r3, r3, #17
 800a2aa:	ea41 0703 	orr.w	r7, r1, r3
 800a2ae:	4b31      	ldr	r3, [pc, #196]	; (800a374 <rint+0x108>)
 800a2b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a2ba:	ee10 0a10 	vmov	r0, s0
 800a2be:	4632      	mov	r2, r6
 800a2c0:	463b      	mov	r3, r7
 800a2c2:	f7f9 f9f7 	bl	80036b4 <__adddf3>
 800a2c6:	e9cd 0100 	strd	r0, r1, [sp]
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d2:	f7f9 f9ed 	bl	80036b0 <__aeabi_dsub>
 800a2d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2da:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800a2de:	ec41 0b10 	vmov	d0, r0, r1
 800a2e2:	b003      	add	sp, #12
 800a2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e6:	4c24      	ldr	r4, [pc, #144]	; (800a378 <rint+0x10c>)
 800a2e8:	4134      	asrs	r4, r6
 800a2ea:	ea01 0704 	and.w	r7, r1, r4
 800a2ee:	4307      	orrs	r7, r0
 800a2f0:	d0f5      	beq.n	800a2de <rint+0x72>
 800a2f2:	0861      	lsrs	r1, r4, #1
 800a2f4:	ea03 0001 	and.w	r0, r3, r1
 800a2f8:	4302      	orrs	r2, r0
 800a2fa:	d00b      	beq.n	800a314 <rint+0xa8>
 800a2fc:	ea23 0101 	bic.w	r1, r3, r1
 800a300:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a304:	2e13      	cmp	r6, #19
 800a306:	fa43 f306 	asr.w	r3, r3, r6
 800a30a:	bf0c      	ite	eq
 800a30c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800a310:	2200      	movne	r2, #0
 800a312:	430b      	orrs	r3, r1
 800a314:	4619      	mov	r1, r3
 800a316:	4b17      	ldr	r3, [pc, #92]	; (800a374 <rint+0x108>)
 800a318:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a31c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a320:	4610      	mov	r0, r2
 800a322:	462b      	mov	r3, r5
 800a324:	4622      	mov	r2, r4
 800a326:	f7f9 f9c5 	bl	80036b4 <__adddf3>
 800a32a:	e9cd 0100 	strd	r0, r1, [sp]
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a336:	f7f9 f9bb 	bl	80036b0 <__aeabi_dsub>
 800a33a:	e7d0      	b.n	800a2de <rint+0x72>
 800a33c:	2e33      	cmp	r6, #51	; 0x33
 800a33e:	dd08      	ble.n	800a352 <rint+0xe6>
 800a340:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a344:	d1cb      	bne.n	800a2de <rint+0x72>
 800a346:	ee10 2a10 	vmov	r2, s0
 800a34a:	460b      	mov	r3, r1
 800a34c:	f7f9 f9b2 	bl	80036b4 <__adddf3>
 800a350:	e7c5      	b.n	800a2de <rint+0x72>
 800a352:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a356:	f04f 34ff 	mov.w	r4, #4294967295
 800a35a:	40f4      	lsrs	r4, r6
 800a35c:	4220      	tst	r0, r4
 800a35e:	d0be      	beq.n	800a2de <rint+0x72>
 800a360:	0861      	lsrs	r1, r4, #1
 800a362:	420f      	tst	r7, r1
 800a364:	bf1f      	itttt	ne
 800a366:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800a36a:	ea27 0101 	bicne.w	r1, r7, r1
 800a36e:	4132      	asrne	r2, r6
 800a370:	430a      	orrne	r2, r1
 800a372:	e7cf      	b.n	800a314 <rint+0xa8>
 800a374:	0804f120 	.word	0x0804f120
 800a378:	000fffff 	.word	0x000fffff

0800a37c <expm1f>:
 800a37c:	ee10 2a10 	vmov	r2, s0
 800a380:	4985      	ldr	r1, [pc, #532]	; (800a598 <expm1f+0x21c>)
 800a382:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a386:	428b      	cmp	r3, r1
 800a388:	d924      	bls.n	800a3d4 <expm1f+0x58>
 800a38a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a38e:	d902      	bls.n	800a396 <expm1f+0x1a>
 800a390:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a394:	4770      	bx	lr
 800a396:	d106      	bne.n	800a3a6 <expm1f+0x2a>
 800a398:	2a00      	cmp	r2, #0
 800a39a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a39e:	bfb8      	it	lt
 800a3a0:	eeb0 0a67 	vmovlt.f32	s0, s15
 800a3a4:	4770      	bx	lr
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	db07      	blt.n	800a3ba <expm1f+0x3e>
 800a3aa:	497c      	ldr	r1, [pc, #496]	; (800a59c <expm1f+0x220>)
 800a3ac:	428b      	cmp	r3, r1
 800a3ae:	d963      	bls.n	800a478 <expm1f+0xfc>
 800a3b0:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800a5a0 <expm1f+0x224>
 800a3b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a3b8:	4770      	bx	lr
 800a3ba:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800a5a4 <expm1f+0x228>
 800a3be:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a3c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ca:	f140 80dd 	bpl.w	800a588 <expm1f+0x20c>
 800a3ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a3d2:	4770      	bx	lr
 800a3d4:	4974      	ldr	r1, [pc, #464]	; (800a5a8 <expm1f+0x22c>)
 800a3d6:	428b      	cmp	r3, r1
 800a3d8:	d96d      	bls.n	800a4b6 <expm1f+0x13a>
 800a3da:	4974      	ldr	r1, [pc, #464]	; (800a5ac <expm1f+0x230>)
 800a3dc:	428b      	cmp	r3, r1
 800a3de:	d84b      	bhi.n	800a478 <expm1f+0xfc>
 800a3e0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a5b0 <expm1f+0x234>
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	bfa7      	ittee	ge
 800a3e8:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800a3ec:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800a5b4 <expm1f+0x238>
 800a3f0:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800a5b8 <expm1f+0x23c>
 800a3f4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800a3f8:	bfac      	ite	ge
 800a3fa:	2301      	movge	r3, #1
 800a3fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a400:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a404:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a40c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a410:	ee20 5a25 	vmul.f32	s10, s0, s11
 800a414:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a5bc <expm1f+0x240>
 800a418:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800a5c0 <expm1f+0x244>
 800a41c:	ee20 7a05 	vmul.f32	s14, s0, s10
 800a420:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a424:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a5c4 <expm1f+0x248>
 800a428:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a42c:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800a5c8 <expm1f+0x24c>
 800a430:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a434:	eddf 6a65 	vldr	s13, [pc, #404]	; 800a5cc <expm1f+0x250>
 800a438:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a43c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a440:	eef0 4a46 	vmov.f32	s9, s12
 800a444:	eee7 4a26 	vfma.f32	s9, s14, s13
 800a448:	eef0 6a64 	vmov.f32	s13, s9
 800a44c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800a450:	eee5 4a66 	vfms.f32	s9, s10, s13
 800a454:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800a458:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800a45c:	eee0 6a64 	vfms.f32	s13, s0, s9
 800a460:	eef0 4a66 	vmov.f32	s9, s13
 800a464:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800a468:	ee66 6a87 	vmul.f32	s13, s13, s14
 800a46c:	bb8b      	cbnz	r3, 800a4d2 <expm1f+0x156>
 800a46e:	eef0 7a47 	vmov.f32	s15, s14
 800a472:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800a476:	e027      	b.n	800a4c8 <expm1f+0x14c>
 800a478:	eddf 7a55 	vldr	s15, [pc, #340]	; 800a5d0 <expm1f+0x254>
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a482:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800a486:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a48a:	bfb8      	it	lt
 800a48c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a490:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a494:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a5b0 <expm1f+0x234>
 800a498:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a5b4 <expm1f+0x238>
 800a49c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4a0:	ee17 3a90 	vmov	r3, s15
 800a4a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a4ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a4b0:	eeb0 7a40 	vmov.f32	s14, s0
 800a4b4:	e7a4      	b.n	800a400 <expm1f+0x84>
 800a4b6:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800a4ba:	d208      	bcs.n	800a4ce <expm1f+0x152>
 800a4bc:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a5a0 <expm1f+0x224>
 800a4c0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a4c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800a4c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a4cc:	4770      	bx	lr
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e79c      	b.n	800a40c <expm1f+0x90>
 800a4d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800a4dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4e0:	d106      	bne.n	800a4f0 <expm1f+0x174>
 800a4e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a4e6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800a4ea:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800a4ee:	4770      	bx	lr
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d118      	bne.n	800a526 <expm1f+0x1aa>
 800a4f4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800a4f8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a500:	bf41      	itttt	mi
 800a502:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800a506:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800a50a:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800a50e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800a512:	bf5f      	itttt	pl
 800a514:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800a518:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800a51c:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800a520:	eeb0 0a46 	vmovpl.f32	s0, s12
 800a524:	4770      	bx	lr
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	2a39      	cmp	r2, #57	; 0x39
 800a52a:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800a52e:	d90b      	bls.n	800a548 <expm1f+0x1cc>
 800a530:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a534:	ee36 0a40 	vsub.f32	s0, s12, s0
 800a538:	ee10 3a10 	vmov	r3, s0
 800a53c:	440b      	add	r3, r1
 800a53e:	ee00 3a10 	vmov	s0, r3
 800a542:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a546:	4770      	bx	lr
 800a548:	2b16      	cmp	r3, #22
 800a54a:	dc11      	bgt.n	800a570 <expm1f+0x1f4>
 800a54c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a550:	fa42 f303 	asr.w	r3, r2, r3
 800a554:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800a558:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a564:	ee10 3a10 	vmov	r3, s0
 800a568:	440b      	add	r3, r1
 800a56a:	ee00 3a10 	vmov	s0, r3
 800a56e:	4770      	bx	lr
 800a570:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800a574:	05db      	lsls	r3, r3, #23
 800a576:	ee07 3a10 	vmov	s14, r3
 800a57a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a57e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a582:	ee30 0a06 	vadd.f32	s0, s0, s12
 800a586:	e7ed      	b.n	800a564 <expm1f+0x1e8>
 800a588:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a5d0 <expm1f+0x254>
 800a58c:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a590:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a594:	e77c      	b.n	800a490 <expm1f+0x114>
 800a596:	bf00      	nop
 800a598:	4195b843 	.word	0x4195b843
 800a59c:	42b17217 	.word	0x42b17217
 800a5a0:	7149f2ca 	.word	0x7149f2ca
 800a5a4:	0da24260 	.word	0x0da24260
 800a5a8:	3eb17218 	.word	0x3eb17218
 800a5ac:	3f851591 	.word	0x3f851591
 800a5b0:	3f317180 	.word	0x3f317180
 800a5b4:	3717f7d1 	.word	0x3717f7d1
 800a5b8:	b717f7d1 	.word	0xb717f7d1
 800a5bc:	b457edbb 	.word	0xb457edbb
 800a5c0:	36867e54 	.word	0x36867e54
 800a5c4:	b8a670cd 	.word	0xb8a670cd
 800a5c8:	3ad00d01 	.word	0x3ad00d01
 800a5cc:	bd088889 	.word	0xbd088889
 800a5d0:	3fb8aa3b 	.word	0x3fb8aa3b

0800a5d4 <fabsf>:
 800a5d4:	ee10 3a10 	vmov	r3, s0
 800a5d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5dc:	ee00 3a10 	vmov	s0, r3
 800a5e0:	4770      	bx	lr

0800a5e2 <finitef>:
 800a5e2:	ee10 3a10 	vmov	r3, s0
 800a5e6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a5ea:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a5ee:	bfac      	ite	ge
 800a5f0:	2000      	movge	r0, #0
 800a5f2:	2001      	movlt	r0, #1
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <nanf>:
 800a5f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a600 <nanf+0x8>
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	7fc00000 	.word	0x7fc00000

0800a604 <scalbnf>:
 800a604:	b508      	push	{r3, lr}
 800a606:	ee10 2a10 	vmov	r2, s0
 800a60a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a60e:	ed2d 8b02 	vpush	{d8}
 800a612:	eef0 0a40 	vmov.f32	s1, s0
 800a616:	d004      	beq.n	800a622 <scalbnf+0x1e>
 800a618:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a61c:	d306      	bcc.n	800a62c <scalbnf+0x28>
 800a61e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a622:	ecbd 8b02 	vpop	{d8}
 800a626:	eeb0 0a60 	vmov.f32	s0, s1
 800a62a:	bd08      	pop	{r3, pc}
 800a62c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a630:	d21c      	bcs.n	800a66c <scalbnf+0x68>
 800a632:	4b1f      	ldr	r3, [pc, #124]	; (800a6b0 <scalbnf+0xac>)
 800a634:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a6b4 <scalbnf+0xb0>
 800a638:	4298      	cmp	r0, r3
 800a63a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a63e:	db10      	blt.n	800a662 <scalbnf+0x5e>
 800a640:	ee10 2a90 	vmov	r2, s1
 800a644:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a648:	3b19      	subs	r3, #25
 800a64a:	4403      	add	r3, r0
 800a64c:	2bfe      	cmp	r3, #254	; 0xfe
 800a64e:	dd0f      	ble.n	800a670 <scalbnf+0x6c>
 800a650:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a6b8 <scalbnf+0xb4>
 800a654:	eeb0 0a48 	vmov.f32	s0, s16
 800a658:	f000 f834 	bl	800a6c4 <copysignf>
 800a65c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a660:	e7df      	b.n	800a622 <scalbnf+0x1e>
 800a662:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a6bc <scalbnf+0xb8>
 800a666:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a66a:	e7da      	b.n	800a622 <scalbnf+0x1e>
 800a66c:	0ddb      	lsrs	r3, r3, #23
 800a66e:	e7ec      	b.n	800a64a <scalbnf+0x46>
 800a670:	2b00      	cmp	r3, #0
 800a672:	dd06      	ble.n	800a682 <scalbnf+0x7e>
 800a674:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a678:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a67c:	ee00 3a90 	vmov	s1, r3
 800a680:	e7cf      	b.n	800a622 <scalbnf+0x1e>
 800a682:	f113 0f16 	cmn.w	r3, #22
 800a686:	da06      	bge.n	800a696 <scalbnf+0x92>
 800a688:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a68c:	4298      	cmp	r0, r3
 800a68e:	dcdf      	bgt.n	800a650 <scalbnf+0x4c>
 800a690:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a6bc <scalbnf+0xb8>
 800a694:	e7de      	b.n	800a654 <scalbnf+0x50>
 800a696:	3319      	adds	r3, #25
 800a698:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a69c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a6a0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a6c0 <scalbnf+0xbc>
 800a6a4:	ee07 3a10 	vmov	s14, r3
 800a6a8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a6ac:	e7b9      	b.n	800a622 <scalbnf+0x1e>
 800a6ae:	bf00      	nop
 800a6b0:	ffff3cb0 	.word	0xffff3cb0
 800a6b4:	4c000000 	.word	0x4c000000
 800a6b8:	7149f2ca 	.word	0x7149f2ca
 800a6bc:	0da24260 	.word	0x0da24260
 800a6c0:	33000000 	.word	0x33000000

0800a6c4 <copysignf>:
 800a6c4:	ee10 3a10 	vmov	r3, s0
 800a6c8:	ee10 2a90 	vmov	r2, s1
 800a6cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	ee00 3a10 	vmov	s0, r3
 800a6da:	4770      	bx	lr

0800a6dc <_init>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr

0800a6e8 <_fini>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr
